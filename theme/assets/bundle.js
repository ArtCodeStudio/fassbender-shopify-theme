!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=36)}([function(e,t,n){(function(i){function r(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==i&&"env"in i&&(e=i.env.DEBUG),e}(t=e.exports=n(33)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(o=++r)}),e.splice(o,0,i)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=r,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(r())}).call(this,n(34))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;var i,r=(i=n(2))&&i.__esModule?i:{default:i};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,i;return t=e,i=[{key:"isUndefined",value:function(e){return void 0===e}},{key:"isDefined",value:function(e){return!this.isUndefined(e)}},{key:"isFunction",value:function(e){return"function"==typeof e}},{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isNumber",value:function(e){return!isNaN(parseFloat(e))&&!isNaN(e-0)}},{key:"isObject",value:function(e){return this.isDefined(e)&&"object"===o(e)}},{key:"isBoolean",value:function(e){return o(e)===o(!0)}},{key:"isString",value:function(e){return this.isDefined(e)&&"string"==typeof e}},{key:"stringHasNumber",value:function(e){return this.isString(e)&&/\d/.test(e)}},{key:"stringHasOnlyNumber",value:function(e){return/^\d+$/.test(e)}},{key:"stringIsPhoneNumber",value:function(e){return/^[0-9 ()+-]+$/.test(e)}},{key:"justDigits",value:function(t){var n=t.replace(/[^-\d\.]/g,"");return e.isNumber(n)?Number(n):0}},{key:"extend",value:function(e,t,n,i){return e?r.default.extend(!0,t,n,i):r.default.extend(t,n,i)}},{key:"concat",value:function(e,t,n){return this.extend(e,{},t,n)}},{key:"xhr",value:function(e){var t=this.deferred(),n=new XMLHttpRequest;return n.onreadystatechange=function(){if(4===n.readyState)return 200===n.status?t.resolve(n.responseText):t.reject(new Error("xhr: HTTP code is not 200"))},n.ontimeout=function(){return t.reject(new Error("xhr: Timeout exceeded"))},n.open("GET",e),n.timeout=this.xhrTimeout,n.setRequestHeader("x-barba","yes"),n.send(),t.promise}},{key:"deferred",value:function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.promise=t,e}},{key:"getLocation",value:function(e){return e?(0,r.default)('<a href="'.concat(e,'"></a>'))[0]:window.location}},{key:"getUrl",value:function(t){var n=e.getLocation(t);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(e){return e.replace(/#.*/,"")}},{key:"getPort",value:function(t,n){var i=e.getLocation(n),r=void 0!==t?t:i.port,o=i.protocol;return""!==r?Number(r):"http:"===o?80:"https:"===o?443:void 0}},{key:"isAbsoluteUrl",value:function(e){return/^https?:\/\//i.test(e)}},{key:"getUrlParameter",value:function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(t){return e.getLocation(t).hash}},{key:"updateHash",value:function(e){return window.location.hash=e}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){var e=Math.max(document.documentElement.clientWidth,window.innerWidth||0);return{h:Math.max(document.documentElement.clientHeight,window.innerHeight||0),w:e}}}],(n=null)&&s(t.prototype,n),i&&s(t,i),e}();t.Utils=a,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(a,"xhrTimeout",void 0)},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,h={},d=h.toString,p=h.hasOwnProperty,v=p.toString,y=v.call(Object),m={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function x(e,t,n){var i,r=(t=t||s).createElement("script");if(r.text=e,n)for(i in w)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[d.call(e)]||"object":typeof e}var C=function(e,t){return new C.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function j(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!g(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:"3.3.1",constructor:C,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||g(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(C.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&C.isPlainObject(n)?n:{},s[t]=C.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=a(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&v.call(n)===y)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){x(e)},each:function(e,t){var n,i=0;if(j(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?C.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(j(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return c.apply([],s)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){h["[object "+t+"]"]=t.toLowerCase()});var E=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,i,r,o,s,a,u,c,l,f,h,d,p,v,y,m,g,b,w="sizzle"+1*new Date,x=e.document,k=0,C=0,T=se(),j=se(),E=se(),O=function(e,t){return e===t&&(f=!0),0},_={}.hasOwnProperty,S=[],P=S.pop,N=S.push,A=S.push,L=S.slice,D=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+F+"*("+H+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+F+"*\\]",B=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",q=new RegExp(F+"+","g"),$=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),W=new RegExp("^"+F+"*,"+F+"*"),I=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),U=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),z=new RegExp(B),X=new RegExp("^"+H+"$"),V={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){h()},re=ge(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{A.apply(S=L.call(x.childNodes),x.childNodes),S[x.childNodes.length].nodeType}catch(e){A={apply:S.length?function(e,t){N.apply(e,L.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,a,c,l,f,p,m,g=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&((t?t.ownerDocument||t:x)!==d&&h(t),t=t||d,v)){if(11!==k&&(f=K.exec(e)))if(o=f[1]){if(9===k){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(g&&(c=g.getElementById(o))&&b(t,c)&&c.id===o)return i.push(c),i}else{if(f[2])return A.apply(i,t.getElementsByTagName(e)),i;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return A.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!E[e+" "]&&(!y||!y.test(e))){if(1!==k)g=t,m=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=w),a=(p=s(e)).length;a--;)p[a]="#"+l+" "+me(p[a]);m=p.join(","),g=Q.test(e)&&ve(t.parentNode)||t}if(m)try{return A.apply(i,g.querySelectorAll(m)),i}catch(e){}finally{l===w&&t.removeAttribute("id")}}}return u(e.replace($,"$1"),t,i,r)}function se(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[w]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function le(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},h=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:x;return s!==d&&9===s.nodeType&&s.documentElement?(p=(d=s).documentElement,v=!o(d),x!==d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(d.getElementsByClassName),n.getById=ue(function(e){return p.appendChild(e).id=w,!d.getElementsByName||!d.getElementsByName(w).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},m=[],y=[],(n.qsa=Y.test(d.querySelectorAll))&&(ue(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+F+"*(?:value|"+M+")"),e.querySelectorAll("[id~="+w+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Y.test(g=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),m.push("!=",B)}),y=y.length&&new RegExp(y.join("|")),m=m.length&&new RegExp(m.join("|")),t=Y.test(p.compareDocumentPosition),b=t||Y.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===d||e.ownerDocument===x&&b(x,e)?-1:t===d||t.ownerDocument===x&&b(x,t)?1:l?D(l,e)-D(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===d?-1:t===d?1:r?-1:o?1:l?D(l,e)-D(l,t):0;if(r===o)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?le(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&h(e),t=t.replace(U,"='$1']"),n.matchesSelector&&v&&!E[t+" "]&&(!m||!m.test(t))&&(!y||!y.test(t)))try{var i=g.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&h(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&h(e);var r=i.attrHandle[t.toLowerCase()],o=r&&_.call(i.attrHandle,t.toLowerCase())?r(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(O),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return l=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:ae,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&T(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,h,d,p,v=o!==s?"nextSibling":"previousSibling",y=t.parentNode,m=a&&t.nodeName.toLowerCase(),g=!u&&!a,b=!1;if(y){if(o){for(;v;){for(h=t;h=h[v];)if(a?h.nodeName.toLowerCase()===m:1===h.nodeType)return!1;p=v="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?y.firstChild:y.lastChild],s&&g){for(b=(d=(c=(l=(f=(h=y)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],h=d&&y.childNodes[d];h=++d&&h&&h[v]||(b=d=0)||p.pop();)if(1===h.nodeType&&++b&&h===t){l[e]=[k,d,b];break}}else if(g&&(b=d=(c=(l=(f=(h=t)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===b)for(;(h=++d&&h&&h[v]||(b=d=0)||p.pop())&&((a?h.nodeName.toLowerCase()!==m:1!==h.nodeType)||!++b||(g&&((l=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]=[k,b]),h!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[w]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=D(e,o[s])]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=a(e.replace($,"$1"));return i[w]?ae(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return X.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:pe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function me(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ge(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=C++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,u){var c,l,f,h=[k,a];if(u){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(l=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=l[o])&&c[0]===k&&c[1]===a)return h[2]=c[2];if(l[o]=h,h[2]=e(t,n,u))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var o,s=[],a=0,u=e.length,c=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function xe(e,t,n,i,r,o){return i&&!i[w]&&(i=xe(i)),r&&!r[w]&&(r=xe(r,o)),ae(function(o,s,a,u){var c,l,f,h=[],d=[],p=s.length,v=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),y=!e||!o&&t?v:we(v,h,e,a,u),m=n?r||(o?e:p||i)?[]:s:y;if(n&&n(y,m,a,u),i)for(c=we(m,d),i(c,[],a,u),l=c.length;l--;)(f=c[l])&&(m[d[l]]=!(y[d[l]]=f));if(o){if(r||e){if(r){for(c=[],l=m.length;l--;)(f=m[l])&&c.push(y[l]=f);r(null,m=[],c,u)}for(l=m.length;l--;)(f=m[l])&&(c=r?D(o,f):h[l])>-1&&(o[c]=!(s[c]=f))}}else m=we(m===s?m.splice(p,m.length):m),r?r(null,s,m,u):A.apply(s,m)})}function ke(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],u=s?1:0,l=ge(function(e){return e===t},a,!0),f=ge(function(e){return D(t,e)>-1},a,!0),h=[function(e,n,i){var r=!s&&(i||n!==c)||((t=n).nodeType?l(e,n,i):f(e,n,i));return t=null,r}];u<o;u++)if(n=i.relative[e[u].type])h=[ge(be(h),n)];else{if((n=i.filter[e[u].type].apply(null,e[u].matches))[w]){for(r=++u;r<o&&!i.relative[e[r].type];r++);return xe(u>1&&be(h),u>1&&me(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace($,"$1"),n,u<r&&ke(e.slice(u,r)),r<o&&ke(e=e.slice(r)),r<o&&me(e))}h.push(n)}return be(h)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=oe.tokenize=function(e,t){var n,r,o,s,a,u,c,l=j[e+" "];if(l)return t?0:l.slice(0);for(a=e,u=[],c=i.preFilter;a;){for(s in n&&!(r=W.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=I.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace($," ")}),a=a.slice(n.length)),i.filter)!(r=V[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):j(e,u).slice(0)},a=oe.compile=function(e,t){var n,r=[],o=[],a=E[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=ke(t[n]))[w]?r.push(a):o.push(a);(a=E(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,u,l){var f,p,y,m=0,g="0",b=o&&[],w=[],x=c,C=o||r&&i.find.TAG("*",l),T=k+=null==x?1:Math.random()||.1,j=C.length;for(l&&(c=s===d||s||l);g!==j&&null!=(f=C[g]);g++){if(r&&f){for(p=0,s||f.ownerDocument===d||(h(f),a=!v);y=e[p++];)if(y(f,s||d,a)){u.push(f);break}l&&(k=T)}n&&((f=!y&&f)&&m--,o&&b.push(f))}if(m+=g,n&&g!==m){for(p=0;y=t[p++];)y(b,w,s,a);if(o){if(m>0)for(;g--;)b[g]||w[g]||(w[g]=P.call(u));w=we(w)}A.apply(u,w),l&&!o&&w.length>0&&m+t.length>1&&oe.uniqueSort(u)}return l&&(k=T,c=x),b};return n?ae(o):o}(o,r))).selector=e}return a},u=oe.select=function(e,t,n,r){var o,u,c,l,f,h="function"==typeof e&&e,d=!r&&s(e=h.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&v&&i.relative[u[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=V.needsContext.test(e)?0:u.length;o--&&(c=u[o],!i.relative[l=c.type]);)if((f=i.find[l])&&(r=f(c.matches[0].replace(Z,ee),Q.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=r.length&&me(u)))return A.apply(n,r),n;break}}return(h||a(e,d))(r,t,!v,n,!t||Q.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(O).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(M,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(n);C.find=E,C.expr=E.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=E.uniqueSort,C.text=E.getText,C.isXMLDoc=E.isXML,C.contains=E.contains,C.escapeSelector=E.escape;var O=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&C(e).is(n))break;i.push(e)}return i},_=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},S=C.expr.match.needsContext;function P(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return g(t)?C.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?C.grep(e,function(e){return e===t!==n}):"string"!=typeof t?C.grep(e,function(e){return f.call(t,e)>-1!==n}):C.filter(t,e,n)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<i;t++)if(C.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,r[t],n);return i>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&S.test(e)?C(e):e||[],!1).length}});var L,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||L,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:D.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),N.test(i[1])&&C.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,L=C(s);var M=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&C(e);if(!S.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(C(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return O(e,"parentNode")},parentsUntil:function(e,t,n){return O(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return O(e,"nextSibling")},prevAll:function(e){return O(e,"previousSibling")},nextUntil:function(e,t,n){return O(e,"nextSibling",n)},prevUntil:function(e,t,n){return O(e,"previousSibling",n)},siblings:function(e){return _((e.parentNode||{}).firstChild,e)},children:function(e){return _(e.firstChild)},contents:function(e){return P(e,"iframe")?e.contentDocument:(P(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(e,t){C.fn[e]=function(n,i){var r=C.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=C.filter(i,r)),this.length>1&&(F[e]||C.uniqueSort(r),M.test(e)&&r.reverse()),this.pushStack(r)}});var R=/[^\x20\t\r\n\f]+/g;function B(e){return e}function q(e){throw e}function $(e,t,n,i){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(R)||[],function(e,n){t[n]=!0}),t}(e):C.extend({},e);var t,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){C.each(n,function(n,i){g(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==k(i)&&t(i)})}(arguments),n&&!t&&u()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;(n=C.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?C.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return C.Deferred(function(n){C.each(t,function(t,i){var r=g(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var o=0;function s(e,t,i,r){return function(){var a=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=i.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(c)?r?c.call(n,s(o,t,B,r),s(o,t,q,r)):(o++,c.call(n,s(o,t,B,r),s(o,t,q,r),s(o,t,B,t.notifyWith))):(i!==B&&(a=void 0,u=[n]),(r||t.resolveWith)(a,u))}},l=r?c:function(){try{c()}catch(n){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(i!==q&&(a=void 0,u=[n]),t.rejectWith(a,u))}};e?l():(C.Deferred.getStackHook&&(l.stackTrace=C.Deferred.getStackHook()),n.setTimeout(l))}}return C.Deferred(function(n){t[0][3].add(s(0,n,g(r)?r:B,n.notifyWith)),t[1][3].add(s(0,n,g(e)?e:B)),t[2][3].add(s(0,n,g(i)?i:q))}).promise()},promise:function(e){return null!=e?C.extend(e,r):r}},o={};return C.each(t,function(e,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=u.call(arguments),o=C.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&($(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||g(r[n]&&r[n].then)))return o.then();for(;n--;)$(r[n],s(n),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&W.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){n.setTimeout(function(){throw e})};var I=C.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),C.ready()}C.fn.ready=function(e){return I.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||I.resolveWith(s,[C]))}}),C.ready.then=I.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(C.ready):(s.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var z=function(e,t,n,i,r,o,s){var a=0,u=e.length,c=null==n;if("object"===k(n))for(a in r=!0,n)z(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,g(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;a<u;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):u?t(e[0],n):o},X=/^-ms-/,V=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function J(e){return e.replace(X,"ms-").replace(V,G)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=C.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[J(t)]=n;else for(i in t)r[J(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][J(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(J):(t=J(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||C.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var Q=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=J(i.slice(5)),ne(o,i,r[i]));Q.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Z.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Q.get(e,t),n&&(!i||Array.isArray(n)?i=Q.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,r=n.shift(),o=C._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){C.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:C.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each(function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=C.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&C.contains(e.ownerDocument,e)&&"none"===C.css(e,"display")},ae=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r};function ue(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},u=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),l=(C.cssNumber[t]||"px"!==c&&+u)&&re.exec(C.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;s--;)C.style(e,t,l+c),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),l/=o;l*=2,C.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=l,i.end=r)),r}var ce={};function le(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=C.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function fe(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=Q.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&se(i)&&(r[o]=le(i))):"none"!==n&&(r[o]="none",Q.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}C.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?C(this).show():C(this).hide()})}});var he=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ye(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&P(e,t)?C.merge([e],n):n}function me(e,t){for(var n=0,i=e.length;n<i;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ve.optgroup=ve.option,ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td;var ge,be,we=/<|&#?\w+;/;function xe(e,t,n,i,r){for(var o,s,a,u,c,l,f=t.createDocumentFragment(),h=[],d=0,p=e.length;d<p;d++)if((o=e[d])||0===o)if("object"===k(o))C.merge(h,o.nodeType?[o]:o);else if(we.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(de.exec(o)||["",""])[1].toLowerCase(),u=ve[a]||ve._default,s.innerHTML=u[1]+C.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;C.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(t.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(i&&C.inArray(o,i)>-1)r&&r.push(o);else if(c=C.contains(o.ownerDocument,o),s=ye(f.appendChild(o),"script"),c&&me(s),n)for(l=0;o=s[l++];)pe.test(o.type||"")&&n.push(o);return f}ge=s.createDocumentFragment().appendChild(s.createElement("div")),(be=s.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ge.appendChild(be),m.checkClone=ge.cloneNode(!0).cloneNode(!0).lastChild.checked,ge.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ge.cloneNode(!0).lastChild.defaultValue;var ke=s.documentElement,Ce=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,je=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Oe(){return!1}function _e(){try{return s.activeElement}catch(e){}}function Se(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Se(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Oe;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,r,i,n)})}C.event={global:{},add:function(e,t,n,i,r){var o,s,a,u,c,l,f,h,d,p,v,y=Q.get(e);if(y)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&C.find.matchesSelector(ke,r),n.guid||(n.guid=C.guid++),(u=y.events)||(u=y.events={}),(s=y.handle)||(s=y.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)d=v=(a=je.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),d&&(f=C.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,f=C.event.special[d]||{},l=C.extend({type:d,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=u[d])||((h=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,p,s)||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,l):h.push(l),C.event.global[d]=!0)},remove:function(e,t,n,i,r){var o,s,a,u,c,l,f,h,d,p,v,y=Q.hasData(e)&&Q.get(e);if(y&&(u=y.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(d=v=(a=je.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),d){for(f=C.event.special[d]||{},h=u[d=(i?f.delegateType:f.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)l=h[o],!r&&v!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(e,l));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(e,p,y.handle)||C.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)C.event.remove(e,d+t[c],n,i,!0);C.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=C.event.fix(e),u=new Array(arguments.length),c=(Q.get(this,"events")||{})[a.type]||[],l=C.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=C.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((C.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,u))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?C(r,this).index(c)>-1:C.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,u<t.length&&a.push({elem:c,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==_e()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===_e()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&P(this,"input"))return this.click(),!1},_default:function(e){return P(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ce.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||C.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),C.fn.extend({on:function(e,t,n,i){return Se(this,e,t,n,i)},one:function(e,t,n,i){return Se(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Oe),this.each(function(){C.event.remove(this,e,n,t)})}});var Pe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return P(e,"table")&&P(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,i,r,o,s,a,u,c;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),s=Q.set(t,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)C.event.add(t,r,c[r][n]);Z.hasData(e)&&(a=Z.access(e),u=C.extend({},a),Z.set(t,u))}}function Re(e,t,n,i){t=c.apply([],t);var r,o,s,a,u,l,f=0,h=e.length,d=h-1,p=t[0],v=g(p);if(v||h>1&&"string"==typeof p&&!m.checkClone&&Ae.test(p))return e.each(function(r){var o=e.eq(r);v&&(t[0]=p.call(this,r,o.html())),Re(o,t,n,i)});if(h&&(o=(r=xe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=C.map(ye(r,"script"),Me)).length;f<h;f++)u=r,f!==d&&(u=C.clone(u,!0,!0),a&&C.merge(s,ye(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,C.map(s,Fe),f=0;f<a;f++)u=s[f],pe.test(u.type||"")&&!Q.access(u,"globalEval")&&C.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?C._evalUrl&&C._evalUrl(u.src):x(u.textContent.replace(Le,""),l,u))}return e}function Be(e,t,n){for(var i,r=t?C.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||C.cleanData(ye(i)),i.parentNode&&(n&&C.contains(i.ownerDocument,i)&&me(ye(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e.replace(Pe,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a,u,c,l=e.cloneNode(!0),f=C.contains(e.ownerDocument,e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=ye(l),i=0,r=(o=ye(e)).length;i<r;i++)a=o[i],u=s[i],void 0,"input"===(c=u.nodeName.toLowerCase())&&he.test(a.type)?u.checked=a.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=a.defaultValue);if(t)if(n)for(o=o||ye(e),s=s||ye(l),i=0,r=o.length;i<r;i++)He(o[i],s[i]);else He(e,l);return(s=ye(l,"script")).length>0&&me(s,!f&&ye(e,"script")),l},cleanData:function(e){for(var t,n,i,r=C.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[Q.expando]){if(t.events)for(i in t.events)r[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return z(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ve[(de.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){C.fn[e]=function(e){for(var n,i=[],r=C(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),C(r[s])[t](n),l.apply(i,n.get());return this.pushStack(i)}});var qe=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),$e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},We=new RegExp(oe.join("|"),"i");function Ie(e,t,n){var i,r,o,s,a=e.style;return(n=n||$e(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||C.contains(e.ownerDocument,e)||(s=C.style(e,t)),!m.pixelBoxStyles()&&qe.test(s)&&We.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ke.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);i="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),r=36===t(e.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",ke.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,u,c=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var ze=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Je=["Webkit","Moz","ms"],Ye=s.createElement("div").style;function Ke(e){var t=C.cssProps[e];return t||(t=C.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in Ye)return e}(e)||e),t}function Qe(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ze(e,t,n,i,r,o){var s="width"===t?1:0,a=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=C.css(e,n+oe[s],!0,r)),i?("content"===n&&(u-=C.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(u-=C.css(e,"border"+oe[s]+"Width",!0,r))):(u+=C.css(e,"padding"+oe[s],!0,r),"padding"!==n?u+=C.css(e,"border"+oe[s]+"Width",!0,r):a+=C.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))),u}function et(e,t,n){var i=$e(e),r=Ie(e,t,i),o="border-box"===C.css(e,"boxSizing",!1,i),s=o;if(qe.test(r)){if(!n)return r;r="auto"}return s=s&&(m.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===C.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(r=parseFloat(r)||0)+Ze(e,t,n||(o?"border":"content"),s,i,r)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ie(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=J(t),u=Xe.test(t),c=e.style;if(u||(t=Ke(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(C.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=J(t);return Xe.test(t)||(t=Ke(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Ie(e,t,i)),"normal"===r&&t in Ge&&(r=Ge[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),C.each(["height","width"],function(e,t){C.cssHooks[t]={get:function(e,n,i){if(n)return!ze.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):ae(e,Ve,function(){return et(e,t,i)})},set:function(e,n,i){var r,o=$e(e),s="border-box"===C.css(e,"boxSizing",!1,o),a=i&&Ze(e,t,i,s,o);return s&&m.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),a&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),Qe(0,n,a)}}}),C.cssHooks.marginLeft=Ue(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ie(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(e,t){C.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(C.cssHooks[e+t].set=Qe)}),C.fn.extend({css:function(e,t){return z(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=$e(e),r=t.length;s<r;s++)o[t[s]]=C.css(e,t[s],!1,i);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,arguments.length>1)}}),C.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[C.cssProps[e.prop]]&&!C.cssHooks[e.prop]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=tt.prototype.init,C.fx.step={};var nt,it,rt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){it&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,C.fx.interval),C.fx.tick())}function at(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ct(e,t,n){for(var i,r=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function lt(e,t,n){var i,r,o=0,s=lt.prefilters.length,a=C.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var t=nt||at(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||at(),duration:n.duration,tweens:[],createTween:function(t,n){var i=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=J(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(l,c.opts.specialEasing);o<s;o++)if(i=lt.prefilters[o].call(c,e,l,c.opts))return g(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(l,ct,c),g(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,u,c,l,f="width"in t||"height"in t,h=this,d={},p=e.style,v=e.nodeType&&se(e),y=Q.get(e,"fxshow");for(i in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],rt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!y||void 0===y[i])continue;v=!0}d[i]=y&&y[i]||C.style(e,i)}if((u=!C.isEmptyObject(t))||!C.isEmptyObject(d))for(i in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=y&&y.display)&&(c=Q.get(e,"display")),"none"===(l=C.css(e,"display"))&&(c?l=c:(fe([e],!0),c=e.style.display||c,l=C.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===C.css(e,"float")&&(u||(h.done(function(){p.display=c}),null==c&&(l=p.display,c="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),u=!1,d)u||(y?"hidden"in y&&(v=y.hidden):y=Q.access(e,"fxshow",{display:c}),o&&(y.hidden=!v),v&&fe([e],!0),h.done(function(){for(i in v||fe([e]),Q.remove(e,"fxshow"),d)C.style(e,i,d[i])})),u=ct(v?y[i]:0,i,h),i in y||(y[i]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=C.isEmptyObject(e),o=C.speed(t,n,i),s=function(){var t=lt(this,C.extend({},e),o);(r||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=C.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ot.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||C.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=C.timers,s=i?i.length:0;for(n.finish=!0,C.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),C.each(["toggle","show","hide"],function(e,t){var n=C.fn[t];C.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,i,r)}}),C.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){C.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),nt=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){it||(it=!0,st())},C.fx.stop=function(){it=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,ht=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return z(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(r=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&P(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ht[t]||C.find.attr;ht[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=ht[s],ht[s]=r,r=null!=n(e,t,i)?s:null,ht[s]=o),r}});var dt=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function vt(e){return(e.match(R)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}C.fn.extend({prop:function(e,t){return z(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(e)||(t=C.propFix[t]||t,r=C.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,u=0;if(g(e))return this.each(function(t){C(this).addClass(e.call(this,t,yt(this)))});if((t=mt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+vt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=vt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,u=0;if(g(e))return this.each(function(t){C(this).removeClass(e.call(this,t,yt(this)))});if(!arguments.length)return this.attr("class","");if((t=mt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+vt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=vt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){C(this).toggleClass(e.call(this,n,yt(this),t),t)}):this.each(function(){var t,r,o,s;if(i)for(r=0,o=C(this),s=mt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+vt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var gt=/\r/g;C.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=g(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,C(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=C.map(r,function(e){return null==e?"":e+""})),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=C.valHooks[r.type]||C.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(gt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:vt(C.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=C.makeArray(t),s=r.length;s--;)((i=r[s]).selected=C.inArray(C.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,i,r){var o,a,u,c,l,f,h,d,v=[i||s],y=p.call(e,"type")?e.type:e,m=p.call(e,"namespace")?e.namespace.split("."):[];if(a=d=u=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!bt.test(y+C.event.triggered)&&(y.indexOf(".")>-1&&(y=(m=y.split(".")).shift(),m.sort()),l=y.indexOf(":")<0&&"on"+y,(e=e[C.expando]?e:new C.Event(y,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:C.makeArray(t,[e]),h=C.event.special[y]||{},r||!h.trigger||!1!==h.trigger.apply(i,t))){if(!r&&!h.noBubble&&!b(i)){for(c=h.delegateType||y,bt.test(c+y)||(a=a.parentNode);a;a=a.parentNode)v.push(a),u=a;u===(i.ownerDocument||s)&&v.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?c:h.bindType||y,(f=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&f.apply(a,t),(f=l&&a[l])&&f.apply&&Y(a)&&(e.result=f.apply(a,t),!1===e.result&&e.preventDefault());return e.type=y,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),t)||!Y(i)||l&&g(i[y])&&!b(i)&&((u=i[l])&&(i[l]=null),C.event.triggered=y,e.isPropagationStopped()&&d.addEventListener(y,wt),i[y](),e.isPropagationStopped()&&d.removeEventListener(y,wt),C.event.triggered=void 0,u&&(i[l]=u)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Q.access(i,t);r||i.addEventListener(e,n,!0),Q.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Q.access(i,t)-1;r?Q.access(i,t,r):(i.removeEventListener(e,n,!0),Q.remove(i,t))}}});var xt=n.location,kt=Date.now(),Ct=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Tt=/\[\]$/,jt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function _t(e,t,n,i){var r;if(Array.isArray(t))C.each(t,function(t,r){n||Tt.test(e)?i(e,r):_t(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==k(t))i(e,t);else for(r in t)_t(e+"["+r+"]",t[r],n,i)}C.param=function(e,t){var n,i=[],r=function(e,t){var n=g(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){r(this.name,this.value)});else for(n in e)_t(n,e[n],t,r);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Ot.test(this.nodeName)&&!Et.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(jt,"\r\n")}}):{name:t.name,value:n.replace(jt,"\r\n")}}).get()}});var St=/%20/g,Pt=/#.*$/,Nt=/([?&])_=[^&]*/,At=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:GET|HEAD)$/,Dt=/^\/\//,Mt={},Ft={},Ht="*/".concat("*"),Rt=s.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(R)||[];if(g(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function qt(e,t,n,i){var r={},o=e===Ft;function s(a){var u;return r[a]=!0,C.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||o||r[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),s(c),!1)}),u}return s(t.dataTypes[0])||!r["*"]&&s("*")}function $t(e,t){var n,i,r=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&C.extend(!0,e,i),e}Rt.href=xt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,C.ajaxSettings),t):$t(C.ajaxSettings,e)},ajaxPrefilter:Bt(Mt),ajaxTransport:Bt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,u,c,l,f,h,d,p=C.ajaxSetup({},t),v=p.context||p,y=p.context&&(v.nodeType||v.jquery)?C(v):C.event,m=C.Deferred(),g=C.Callbacks("once memory"),b=p.statusCode||{},w={},x={},k="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(l){if(!a)for(a={};t=At.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==l&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return i&&i.abort(t),j(0,t),this}};if(m.promise(T),p.url=((e||p.url||xt.href)+"").replace(Dt,xt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){c=s.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Rt.protocol+"//"+Rt.host!=c.protocol+"//"+c.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=C.param(p.data,p.traditional)),qt(Mt,p,t,T),l)return T;for(h in(f=C.event&&p.global)&&0==C.active++&&C.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Lt.test(p.type),r=p.url.replace(Pt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(St,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Ct.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Nt,"$1"),d=(Ct.test(r)?"&":"?")+"_="+kt+++d),p.url=r+d),p.ifModified&&(C.lastModified[r]&&T.setRequestHeader("If-Modified-Since",C.lastModified[r]),C.etag[r]&&T.setRequestHeader("If-None-Match",C.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ht+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(v,T,p)||l))return T.abort();if(k="abort",g.add(p.complete),T.done(p.success),T.fail(p.error),i=qt(Ft,p,t,T)){if(T.readyState=1,f&&y.trigger("ajaxSend",[T,p]),l)return T;p.async&&p.timeout>0&&(u=n.setTimeout(function(){T.abort("timeout")},p.timeout));try{l=!1,i.send(w,j)}catch(e){if(l)throw e;j(-1,e)}}else j(-1,"No Transport");function j(e,t,s,a){var c,h,d,w,x,k=t;l||(l=!0,u&&n.clearTimeout(u),i=void 0,o=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(w=function(e,t,n){for(var i,r,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,T,s)),w=function(e,t,n,i){var r,o,s,a,u,c={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=c[u+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(p,w,T,c),c?(p.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(C.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(C.etag[r]=x)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=w.state,h=w.data,c=!(d=w.error))):(d=k,!e&&k||(k="error",e<0&&(e=0))),T.status=e,T.statusText=(t||k)+"",c?m.resolveWith(v,[h,k,T]):m.rejectWith(v,[T,k,d]),T.statusCode(b),b=void 0,f&&y.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?h:d]),g.fireWith(v,[T,k]),f&&(y.trigger("ajaxComplete",[T,p]),--C.active||C.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,t){C[t]=function(e,n,i,r){return g(n)&&(r=r||i,i=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:r,data:n,success:i},C.isPlainObject(e)&&e))}}),C._evalUrl=function(e){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){C(this).wrapInner(e.call(this,t))}):this.each(function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){C(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},It=C.ajaxSettings.xhr();m.cors=!!It&&"withCredentials"in It,m.ajax=It=!!It,C.ajaxTransport(function(e){var t,i;if(m.cors||It&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Wt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=C("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ut,zt=[],Xt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||C.expando+"_"+kt++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,i){var r,o,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||C.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?C(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,zt.push(r)),s&&g(o)&&o(s[0]),s=o=void 0}),"script"}),m.createHTMLDocument=((Ut=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(i)):t=s),r=N.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=xe([e],t,o),o&&o.length&&C(o).remove(),C.merge([],r.childNodes)));var i,r,o},C.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=vt(e.slice(a)),e=e.slice(0,a)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&C.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.expr.pseudos.animated=function(e){return C.grep(C.timers,function(t){return e===t.elem}).length},C.offset={setOffset:function(e,t,n){var i,r,o,s,a,u,c=C.css(e,"position"),l=C(e),f={};"static"===c&&(e.style.position="relative"),a=l.offset(),o=C.css(e,"top"),u=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(s=(i=l.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),g(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):l.css(f)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){C.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),r.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-C.css(i,"marginTop",!0),left:t.left-r.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||ke})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;C.fn[e]=function(i){return z(this,function(e,i,r){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),C.each(["top","left"],function(e,t){C.cssHooks[t]=Ue(m.pixelPosition,function(e,n){if(n)return n=Ie(e,t),qe.test(n)?C(e).position()[t]+"px":n})}),C.each({Height:"height",Width:"width"},function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){C.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return z(this,function(t,n,r){var o;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?C.css(t,n,a):C.style(t,n,r,a)},t,s?r:void 0,s)}})}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),C.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),C.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return i=u.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(u.call(arguments)))}).guid=e.guid=e.guid||C.guid++,r},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=P,C.isFunction=g,C.isWindow=b,C.camelCase=J,C.type=k,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return C}.apply(t,[]))||(e.exports=i);var Vt=n.jQuery,Gt=n.$;return C.noConflict=function(e){return n.$===C&&(n.$=Gt),e&&n.jQuery===C&&(n.jQuery=Vt),C},r||(n.jQuery=n.$=C),C})},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.Dispatcher=void 0;var o=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"events",{}),e.instance)return e.instance;e.instance=this}var t,n,o;return t=e,(n=[{key:"on",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"off",value:function(e,t){e in this.events!=!1&&this.events[e].splice(this.events[e].indexOf(t),1)}},{key:"trigger",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];if(e in this.events!=!1)for(var r in this.events[e])this.events[e][r]&&this.events[e][r].apply(this,Array.prototype.slice.call(arguments,1))}}])&&i(t.prototype,n),o&&i(t,o),e}();t.Dispatcher=o,r(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransition=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1);function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"$oldContainer",void 0),a(this,"$newContainer",void 0),a(this,"newContainerLoading",void 0),a(this,"deferred",void 0),a(this,"debug",(0,r.default)("barba:BaseTransition"))}var t,n,i;return t=e,(n=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.deferred=o.Utils.deferred();var i=o.Utils.deferred();return this.newContainerLoading=i.promise,this.start(),t.then(function(e){n.$newContainer=e,i.resolve()}),this.deferred.promise}},{key:"done",value:function(){this.debug("done"),this.$oldContainer.remove(),this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}])&&s(t.prototype,n),i&&s(t,i),e}();t.BaseTransition=u},function(e,t,n){e.exports=function(){"use strict";var e=["prefix","templateDelimiters","rootInterface","preloadData","handler"],t=["binders","formatters","components","adapters"],n=0,i=1,r=0,o=1,s=/^'.*'$|^".*"$/;function a(e){var t=n,r=e;return s.test(e)?r=e.slice(1,-1):"true"===e?r=!0:"true"===e?r=!0:"false"===e?r=!1:"null"===e?r=null:"undefined"===e?r=void 0:isNaN(e)?function(e){try{var t=JSON.parse(e);return t instanceof Array||t instanceof Object}catch(e){return!1}}(e)?r=JSON.parse(e):t=i:r=Number(e),{type:t,value:r}}function u(e,t){for(var n,i=e.length,s=0,a=0,u=t[0],c=t[1];a<i;){if((s=e.indexOf(u,a))<0){n&&n.push({type:r,value:e.slice(a)});break}if(n=n||[],s>0&&a<s&&n.push({type:r,value:e.slice(a,s)}),a=s+u.length,(s=e.indexOf(c,a))<0){var l=e.slice(a-c.length),f=n[n.length-1];f&&f.type===r?f.value+=l:n.push({type:r,value:l});break}var h=e.slice(a,s).trim();n.push({type:o,value:h}),a=s+c.length}return n}var c,l,f,h={binders:{},components:{},formatters:{},adapters:{},_prefix:"rv",_fullPrefix:"rv-",get prefix(){return this._prefix},set prefix(e){this._prefix=e,this._fullPrefix=e+"-"},parseTemplate:u,parseType:a,templateDelimiters:["{","}"],rootInterface:".",preloadData:!0,handler:function(e,t,n){this.call(e,t,n.view.models)},fallbackBinder:function(e,t){null!=t?e.setAttribute(this.type,t):e.removeAttribute(this.type)},configure:function(e){var n=this;e&&Object.keys(e).forEach(function(i){var r=e[i];t.indexOf(i)>-1?Object.keys(r).forEach(function(e){n[i][e]=r[e]}):n[i]=r})}};function d(e){return"object"==typeof e&&null!==e}function p(e,t,n){this.keypath=t,this.callback=n,this.objectPath=[],this.parse(),this.obj=this.getRootObject(e),d(this.target=this.realize())&&this.set(!0,this.key,this.target,this.callback)}p.updateOptions=function(e){c=e.adapters,l=Object.keys(c),f=e.rootInterface},p.tokenize=function(e,t){var n,i,r=[],o={i:t,path:""};for(n=0;n<e.length;n++)i=e.charAt(n),~l.indexOf(i)?(r.push(o),o={i:i,path:""}):o.path+=i;return r.push(o),r},p.prototype.parse=function(){var e,t;l.length||function(e){throw new Error("[Observer] "+e)}("Must define at least one adapter interface."),~l.indexOf(this.keypath[0])?(t=this.keypath[0],e=this.keypath.substr(1)):(t=f,e=this.keypath),this.tokens=p.tokenize(e,t),this.key=this.tokens.pop()},p.prototype.realize=function(){for(var e,t,n=this.obj,i=-1,r=0;r<this.tokens.length;r++)t=this.tokens[r],d(n)?(void 0!==this.objectPath[r]?n!==(e=this.objectPath[r])&&(this.set(!1,t,e,this),this.set(!0,t,n,this),this.objectPath[r]=n):(this.set(!0,t,n,this),this.objectPath[r]=n),n=this.get(t,n)):(-1===i&&(i=r),(e=this.objectPath[r])&&this.set(!1,t,e,this));return-1!==i&&this.objectPath.splice(i),n},p.prototype.sync=function(){var e,t,n;(e=this.realize())!==this.target?(d(this.target)&&this.set(!1,this.key,this.target,this.callback),d(e)&&this.set(!0,this.key,e,this.callback),t=this.value(),this.target=e,((n=this.value())!==t||n instanceof Function)&&this.callback.sync()):e instanceof Array&&this.callback.sync()},p.prototype.value=function(){if(d(this.target))return this.get(this.key,this.target)},p.prototype.setValue=function(e){d(this.target)&&c[this.key.i].set(this.target,this.key.path,e)},p.prototype.get=function(e,t){return c[e.i].get(t,e.path)},p.prototype.set=function(e,t,n,i){var r=e?"observe":"unobserve";c[t.i][r](n,t.path,i)},p.prototype.unobserve=function(){for(var e,t,n=0;n<this.tokens.length;n++)t=this.tokens[n],(e=this.objectPath[n])&&this.set(!1,t,e,this);d(this.target)&&this.set(!1,this.key,this.target,this.callback)},p.prototype.getRootObject=function(e){var t,n;if(!e.$parent)return e;for(t=this.tokens.length?this.tokens[0].path:this.key.path,n=e;n.$parent&&void 0===n[t];)n=n.$parent;return n};var v=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},m=/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g,g=/\s+/,b=function(){function e(t,n,i,r,o,s,a){v(this,e),this.view=t,this.el=n,this.type=i,this.keypath=r,this.binder=o,this.arg=s,this.formatters=a,this.formatterObservers={},this.model=void 0}return e.prototype.observe=function(e,t){return new p(e,t,this)},e.prototype.parseTarget=function(){if(this.keypath){var e=a(this.keypath);0===e.type?this.value=e.value:(this.observer=this.observe(this.view.models,this.keypath),this.model=this.observer.target)}else this.value=void 0},e.prototype.parseFormatterArguments=function(e,t){var n=this;return e.map(a).map(function(e,i){var r=e.type,o=e.value;if(0===r)return o;n.formatterObservers[t]||(n.formatterObservers[t]={});var s=n.formatterObservers[t][i];return s||(s=n.observe(n.view.models,o),n.formatterObservers[t][i]=s),s.value()})},e.prototype.formattedValue=function(e){var t=this;return this.formatters.reduce(function(e,n,i){var r=n.match(m),o=r.shift(),s=t.view.options.formatters[o],a=t.parseFormatterArguments(r,i);return s&&s.read instanceof Function?e=s.read.apply(s,[e].concat(a)):s instanceof Function&&(e=s.apply(void 0,[e].concat(a))),e},e)},e.prototype.eventHandler=function(e){var t=this,n=t.view.options.handler;return function(i){n.call(e,this,i,t)}},e.prototype.set=function(e){e=e instanceof Function&&!this.binder.function?this.formattedValue(e.call(this.model)):this.formattedValue(e);var t=this.binder.routine||this.binder;t instanceof Function&&t.call(this,this.el,e)},e.prototype.sync=function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)},e.prototype.publish=function(){var e=this;if(this.observer){var t=this.formatters.reduceRight(function(t,n,i){var r=n.split(g),o=r.shift(),s=e.view.options.formatters[o],a=e.parseFormatterArguments(r,i);return s&&s.publish&&(t=s.publish.apply(s,[t].concat(a))),t},this.getValue(this.el));this.observer.setValue(t)}},e.prototype.bind=function(){this.parseTarget(),this.binder.hasOwnProperty("bind")&&this.binder.bind.call(this,this.el),this.view.options.preloadData&&this.sync()},e.prototype.unbind=function(){var e=this;this.binder.unbind&&this.binder.unbind.call(this,this.el),this.observer&&this.observer.unobserve(),Object.keys(this.formatterObservers).forEach(function(t){var n=e.formatterObservers[t];Object.keys(n).forEach(function(e){n[e].unobserve()})}),this.formatterObservers={}},e.prototype.update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.observer&&(this.model=this.observer.target),this.binder.update&&this.binder.update.call(this,e)},e.prototype.getValue=function(e){return this.binder&&this.binder.getValue?this.binder.getValue.call(this,e):function(e){var t=[];return"checkbox"===e.type?e.checked:"select-multiple"===e.type?(e.options.forEach(function(e){e.selected&&t.push(e.value)}),t):e.value}(e)},e}(),w=function(n){function i(e,t,r){v(this,i);var o=y(this,n.call(this,e,t,r,null,null,null,null));o.view=e,o.el=t,o.type=r,o.component=e.options.components[o.type],o.static={},o.observers={},o.upstreamObservers={};for(var s=h._fullPrefix,a=0,u=t.attributes.length;a<u;a++){var c=t.attributes[a];if(0!==c.name.indexOf(s)){var l=o.camelCase(c.name),f=o.component.static;f&&f.indexOf(l)>-1?o.static[l]=c.value:o.observers[l]=c.value}}return o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.sync=function(){},i.prototype.update=function(){},i.prototype.publish=function(){},i.prototype.locals=function(){var e=this,t={};return Object.keys(this.static).forEach(function(n){t[n]=e.static[n]}),Object.keys(this.observers).forEach(function(n){t[n]=e.observers[n].value()}),t},i.prototype.camelCase=function(e){return e.replace(/-([a-z])/g,function(e){e[1].toUpperCase()})},i.prototype.bind=function(){var n=this,i={};if(this.bound||(Object.keys(this.observers).forEach(function(e){var t=n.observers[e];n.observers[e]=n.observe(n.view.models,t,function(e){return function(){n.componentView.models[e]=n.observers[e].value()}}.call(n,e))}),this.bound=!0),this.componentView)this.componentView.bind();else{this.el.innerHTML=this.component.template.call(this);var r=this.component.initialize.call(this,this.el,this.locals());this.el._bound=!0,t.forEach(function(e){i[e]={},n.component[e]&&Object.keys(n.component[e]).forEach(function(t){i[e][t]=n.component[e][t]}),Object.keys(n.view.options[e]).forEach(function(t){i[e][t]&&(i[e][t]=n.view[e][t])})}),e.forEach(function(e){null!=n.component[e]?i[e]=n.component[e]:i[e]=n.view[e]}),this.componentView=h.bind(Array.prototype.slice.call(this.el.childNodes),r,i),Object.keys(this.observers).forEach(function(e){var t=n.observers[e],i=n.componentView.models,r=n.observe(i,e,function(e,t){return function(){t.setValue(n.componentView.models[e])}}.call(n,e,t));n.upstreamObservers[e]=r})}},i.prototype.unbind=function(){var e=this;Object.keys(this.upstreamObservers).forEach(function(t){e.upstreamObservers[t].unobserve()}),Object.keys(this.observers).forEach(function(t){e.observers[t].unobserve()}),this.componentView&&this.componentView.unbind.call(this)},i}(b),x={routine:function(e,t){e.data=null!=t?t:""}},k=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g,C=function e(t,n){var i=!1;if(3===n.nodeType){var r=u(n.data,h.templateDelimiters);if(r){for(var o=0;o<r.length;o++){var s=r[o],a=document.createTextNode(s.value);n.parentNode.insertBefore(a,n),1===s.type&&t.buildBinding(a,null,s.value,x,null)}n.parentNode.removeChild(n)}i=!0}else 1===n.nodeType&&(i=t.traverse(n));if(!i)for(var c=0;c<n.childNodes.length;c++)e(t,n.childNodes[c])},T=function(e,t){var n=e.binder&&e.binder.priority||0,i=t.binder&&t.binder.priority||0;return i-n},j=function(e){return e.trim()},E=function(){function e(t,n,i){v(this,e),t.jquery||t instanceof Array?this.els=t:this.els=[t],this.models=n,this.options=i,this.build()}return e.prototype.buildBinding=function(e,t,n,i,r){var o=n.match(k).map(j),s=o.shift();this.bindings.push(new b(this,e,t,s,i,r,o))},e.prototype.build=function(){this.bindings=[];var e=this.els,t=void 0,n=void 0;for(t=0,n=e.length;t<n;t++)C(this,e[t]);this.bindings.sort(T)},e.prototype.traverse=function(e){for(var t,n,i,r,o=h._fullPrefix,s="SCRIPT"===e.nodeName||"STYLE"===e.nodeName,a=e.attributes,u=[],c=this.options.starBinders,l=0,f=a.length;l<f;l++){var d=a[l];if(0===d.name.indexOf(o)){if(t=d.name.slice(o.length),n=this.options.binders[t],r=void 0,!n)for(var p=0;p<c.length;p++)if(i=c[p],t.slice(0,i.length-1)===i.slice(0,-1)){n=this.options.binders[i],r=t.slice(i.length-1);break}if(n||(n=h.fallbackBinder),n.block)return this.buildBinding(e,t,d.value,n,r),e.removeAttribute(d.name),!0;u.push({attr:d,binder:n,type:t,arg:r})}}for(var v=0;v<u.length;v++){var y=u[v];this.buildBinding(e,y.type,y.attr.value,y.binder,y.arg),e.removeAttribute(y.attr.name)}return s||(t=e.nodeName.toLowerCase(),this.options.components[t]&&!e._bound&&(this.bindings.push(new w(this,e,t)),s=!0)),s},e.prototype.bind=function(){this.bindings.forEach(function(e){e.bind()})},e.prototype.unbind=function(){this.bindings.forEach(function(e){e.unbind()})},e.prototype.sync=function(){this.bindings.forEach(function(e){e.sync()})},e.prototype.publish=function(){this.bindings.forEach(function(e){e.binder&&e.binder.publishes&&e.publish()})},e.prototype.update=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(t).forEach(function(n){e.models[n]=t[n]}),this.bindings.forEach(function(e){e.update&&e.update(t)})},e}(),O=["push","pop","shift","unshift","sort","reverse","splice"],_={counter:0,weakmap:{},weakReference:function(e){if(!e.hasOwnProperty("__rv")){var t=this.counter++;Object.defineProperty(e,"__rv",{value:t})}return this.weakmap[e.__rv]||(this.weakmap[e.__rv]={callbacks:{}}),this.weakmap[e.__rv]},cleanupWeakReference:function(e,t){Object.keys(e.callbacks).length||e.pointers&&Object.keys(e.pointers).length||delete this.weakmap[t]},stubFunction:function(e,t){var n=e[t],i=this.weakReference(e),r=this.weakmap;e[t]=function(){for(var t=arguments.length,o=Array(t),s=0;s<t;s++)o[s]=arguments[s];var a=n.apply(e,o);return Object.keys(i.pointers).forEach(function(e){var t=i.pointers[e];r[e]&&r[e].callbacks[t]instanceof Array&&r[e].callbacks[t].forEach(function(e){e.sync()})}),a}},observeMutations:function(e,t,n){var i=this;if(e instanceof Array){var r=this.weakReference(e);r.pointers||(r.pointers={},O.forEach(function(t){i.stubFunction(e,t)})),r.pointers[t]||(r.pointers[t]=[]),-1===r.pointers[t].indexOf(n)&&r.pointers[t].push(n)}},unobserveMutations:function(e,t,n){if(e instanceof Array&&null!=e.__rv){var i=this.weakmap[e.__rv];if(i){var r=i.pointers[t];if(r){var o=r.indexOf(n);o>-1&&r.splice(o,1),r.length||delete i.pointers[t],this.cleanupWeakReference(i,e.__rv)}}}},observe:function(e,t,n){var i,r=this,o=this.weakReference(e).callbacks;if(!o[t]){o[t]=[];var s=Object.getOwnPropertyDescriptor(e,t);s&&(s.get||s.set||!s.configurable)||(i=e[t],Object.defineProperty(e,t,{enumerable:!0,get:function(){return i},set:function(n){if(n!==i){r.unobserveMutations(i,e.__rv,t),i=n;var o=r.weakmap[e.__rv];if(o){var s=o.callbacks[t];s&&s.forEach(function(e){e.sync()}),r.observeMutations(n,e.__rv,t)}}}}))}-1===o[t].indexOf(n)&&o[t].push(n),this.observeMutations(e[t],e.__rv,t)},unobserve:function(e,t,n){var i=this.weakmap[e.__rv];if(i){var r=i.callbacks[t];if(r){var o=r.indexOf(n);o>-1&&(r.splice(o,1),r.length||(delete i.callbacks[t],this.unobserveMutations(e[t],e.__rv,t))),this.cleanupWeakReference(i,e.__rv)}}},get:function(e,t){return e[t]},set:function(e,t,n){e[t]=n}},S=function(e){return null!=e?e.toString():void 0};function P(e,t,n){var i=e.el.cloneNode(!0),r=new E(i,t,e.view.options);return r.bind(),e.marker.parentNode.insertBefore(i,n),r}var N={"on-*":{function:!0,priority:1e3,unbind:function(e){this.handler&&e.removeEventListener(this.arg,this.handler)},routine:function(e,t){this.handler&&e.removeEventListener(this.arg,this.handler),this.handler=this.eventHandler(t),e.addEventListener(this.arg,this.handler)}},"each-*":{block:!0,priority:4e3,bind:function(e){this.marker?this.iterated.forEach(function(e){e.bind()}):(this.marker=document.createComment(" tinybind: "+this.type+" "),this.iterated=[],e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e))},unbind:function(e){this.iterated&&this.iterated.forEach(function(e){e.unbind()})},routine:function(e,t){var n=this,i=this.arg;t=t||[];var r=e.getAttribute("index-property")||"$index";t.forEach(function(e,t){var o={$parent:n.view.models};o[r]=t,o[i]=e;var s=n.iterated[t];if(s)if(s.models[i]!==e){for(var a=void 0,u=void 0,c=t+1;c<n.iterated.length;c++)if((u=n.iterated[c]).models[i]===e){a=c;break}void 0!==a?(n.iterated.splice(a,1),n.marker.parentNode.insertBefore(u.els[0],s.els[0]),u.models[r]=t):u=P(n,o,s.els[0]),n.iterated.splice(t,0,u)}else s.models[r]=t;else{var l=n.marker;n.iterated.length&&(l=n.iterated[n.iterated.length-1].els[0]),s=P(n,o,l.nextSibling),n.iterated.push(s)}}),this.iterated.length>t.length&&function(e,t){for(var n=0;n<e;n++)t()}(this.iterated.length-t.length,function(){var e=n.iterated.pop();e.unbind(),n.marker.parentNode.removeChild(e.els[0])}),"OPTION"===e.nodeName&&this.view.bindings.forEach(function(e){e.el===n.marker.parentNode&&"value"===e.type&&e.sync()})},update:function(e){var t=this,n={};Object.keys(e).forEach(function(i){i!==t.arg&&(n[i]=e[i])}),this.iterated.forEach(function(e){e.update(n)})}},"class-*":function(e,t){var n=" "+e.className+" ";t!==n.indexOf(" "+this.arg+" ")>-1&&(e.className=t?e.className+" "+this.arg:n.replace(" "+this.arg+" "," ").trim())},text:function(e,t){e.textContent=null!=t?t:""},html:function(e,t){e.innerHTML=null!=t?t:""},show:function(e,t){e.style.display=t?"":"none"},hide:function(e,t){e.style.display=t?"none":""},enabled:function(e,t){e.disabled=!t},disabled:function(e,t){e.disabled=!!t},checked:{publishes:!0,priority:2e3,bind:function(e){var t=this;this.callback||(this.callback=function(){t.publish()}),e.addEventListener("change",this.callback)},unbind:function(e){e.removeEventListener("change",this.callback)},routine:function(e,t){"radio"===e.type?e.checked=S(e.value)===S(t):e.checked=!!t}},value:{publishes:!0,priority:3e3,bind:function(e){if(this.isRadio="INPUT"===e.tagName&&"radio"===e.type,!this.isRadio){this.event=e.getAttribute("event-name")||("SELECT"===e.tagName?"change":"input");var t=this;this.callback||(this.callback=function(){t.publish()}),e.addEventListener(this.event,this.callback)}},unbind:function(e){this.isRadio||e.removeEventListener(this.event,this.callback)},routine:function(e,t){if(this.isRadio)e.setAttribute("value",t);else if("select-multiple"===e.type){if(t instanceof Array)for(var n=0;n<e.length;n++){var i=e[n];i.selected=t.indexOf(i.value)>-1}}else S(t)!==S(e.value)&&(e.value=null!=t?t:"")}},if:{block:!0,priority:4e3,bind:function(e){this.marker?!1===this.bound&&this.nested&&this.nested.bind():(this.marker=document.createComment(" tinybind: "+this.type+" "+this.keypath+" "),this.attached=!1,e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)),this.bound=!0},unbind:function(){this.nested&&(this.nested.unbind(),this.bound=!1)},routine:function(e,t){(t=!!t)!==this.attached&&(t?(this.nested||(this.nested=new E(e,this.view.models,this.view.options),this.nested.bind()),this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.attached=!0):(e.parentNode.removeChild(e),this.attached=!1))},update:function(e){this.nested&&this.nested.update(e)}}};return h.binders=N,h.adapters["."]=_,h.bind=function(n,i,r){var o={};i=i||{},r=r||{},t.forEach(function(e){o[e]=Object.create(null),r[e]&&Object.keys(r[e]).forEach(function(t){o[e][t]=r[e][t]}),Object.keys(h[e]).forEach(function(t){o[e][t]||(o[e][t]=h[e][t])})}),e.forEach(function(e){var t=r[e];o[e]=null!=t?t:h[e]}),o.starBinders=Object.keys(o.binders).filter(function(e){return e.indexOf("*")>0}),p.updateOptions(o);var s=new E(n,i,o);return s.bind(),s},h.init=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t||(t=document.createElement("div")),e=h.components[e],t.innerHTML=e.template.call(h,t);var i=e.initialize.call(h,t,n),r=h.bind(t,i);return r.bind(),r},h.formatters.negate=h.formatters.not=function(e){return!e},h}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pjax=void 0;var i=n(3),r=n(1),o=n(10),s=n(9),a=n(7),u=n(8);function c(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function l(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"dom",new a.Dom),f(this,"history",new u.HistoryManager),f(this,"cacheEnabled",void 0),f(this,"transitionProgress",!1),f(this,"dispatcher",new i.Dispatcher),f(this,"transition",void 0),this.transition=t||new s.HideShowTransition}return l(e,null,[{key:"preventCheck",value:function(e,t){if(!window.history.pushState)return!1;var n=this.getHref(t);return!(!t||!n)&&(!(e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey)&&((!t.target||"_blank"!==t.target)&&(window.location.protocol===t.protocol&&window.location.hostname===t.hostname&&(r.Utils.getPort()===r.Utils.getPort(t.port)&&(!(n.indexOf("#")>-1)&&((!t.getAttribute||"string"!=typeof t.getAttribute("download"))&&(r.Utils.cleanLink(n)!==r.Utils.cleanLink(location.href)&&!t.classList.contains(this.ignoreClassLink))))))))}},{key:"getHref",value:function(e){if(e)return e.getAttribute&&"string"==typeof e.getAttribute("xlink:href")?e.getAttribute("xlink:href"):"string"==typeof e.href?e.href:void 0}}]),l(e,[{key:"start",value:function(){this.init()}},{key:"getCurrentUrl",value:function(){return r.Utils.cleanLink(r.Utils.getUrl())}},{key:"goTo",value:function(e,t){return t?window.open(e,"_blank").focus():0!==e.indexOf("http")?(window.history.pushState(null,null,e),this.onStateChange()):void this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition}},{key:"bindEvents",value:function(){window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(e){e instanceof Location&&(window.location=e),"string"==typeof e&&(window.location.href=e)}},{key:"load",value:function(t){var n,i=r.Utils.deferred(),o=this;return(n=e.cache.get(t))||(n=r.Utils.xhr(t),e.cache.set(t,n)),n.then(function(t){var n=o.dom.parseResponse(t);o.dom.putContainer(n),o.cacheEnabled||e.cache.reset(),i.resolve(n)},function(){o.forceGoTo(t),i.reject()}),i.promise}},{key:"onLinkClick",value:function(t){for(var n=t.target;n&&!e.getHref(n);)n=n.parentNode;if(e.preventCheck(t,n)){t.stopPropagation(),t.preventDefault(),this.dispatcher.trigger("linkClicked",n,t);var i=e.getHref(n);this.goTo(i)}}},{key:"onStateChange",value:function(){var e=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(e),this.history.currentStatus().url===e)return!1;this.history.add(e);var t=this.load(e),n=this.getTransition();this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.history.currentStatus(),this.history.prevStatus());var i=n.init(this.dom.getContainer(),t);t.then(this.onNewContainerLoaded.bind(this)),i.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(e){this.history.currentStatus().namespace=this.dom.getNamespace(e),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),this.history.prevStatus(),e,this.dom.currentHTML,!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(){var e=this.dom.getContainer();this.dom.getWrapper().attr("aria-live","polite"),this.history.add(this.getCurrentUrl(),this.dom.getNamespace(e)),this.dispatcher.trigger("initStateChange",this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),{},e,this.dom.currentHTML,!0),this.dispatcher.trigger("transitionCompleted",this.history.currentStatus()),this.bindEvents()}}]),e}();t.Pjax=h,f(h,"ignoreClassLink","no-barba"),f(h,"cache",new o.BaseCache)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dom=void 0;var i,r=(i=n(2))&&i.__esModule?i:{default:i};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"dataNamespace","namespace"),s(this,"wrapperId","barba-wrapper"),s(this,"containerClass","barba-container"),s(this,"currentHTML",void 0)}var t,n,i;return t=e,(n=[{key:"parseResponse",value:function(e){this.currentHTML=e;var t=(0,r.default)(r.default.parseHTML(e)),n=t.filter("title");return n.length&&(document.title=n.text()),this.getContainer(t)}},{key:"getWrapper",value:function(){var e=(0,r.default)("#"+this.wrapperId);if(!e)throw new Error("Barba.js: wrapper not found!");return e}},{key:"getContainer",value:function(e){if(e||(e=(0,r.default)(document.body)),!e)throw new Error("Barba.js: DOM not ready!");var t=this.parseContainer(e);if(!t)throw new Error("Barba.js: no container found");return t}},{key:"getNamespace",value:function(e){return e&&e.data()?e.data("namespace"):null}},{key:"putContainer",value:function(e){e.css("visibility","hidden"),this.getWrapper().append(e)}},{key:"parseContainer",value:function(e){return e.find("."+this.containerClass)}}])&&o(t.prototype,n),i&&o(t,i),e}();t.Dom=a},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryManager=void 0;var o=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"history",new Array),e.instance?e.instance:(e.instance=this,e.instance)}var t,n,o;return t=e,(n=[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){var e=this.history;return e.length<2?null:e[e.length-2]}},{key:"add",value:function(e,t){t||(t=void 0),this.history.push({namespace:t,url:e})}}])&&i(t.prototype,n),o&&i(t,o),e}();t.HistoryManager=o,r(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return i.CustomTransition}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return r.BaseTransition}}),Object.defineProperty(t,"ITransition",{enumerable:!0,get:function(){return r.ITransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return o.HideShowTransition}});var i=n(30),r=n(4),o=n(29)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCache=void 0;var i=n(1);function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(){var t,n,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i=void 0,(n="data")in(t=this)?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i,this.data={}}var t,n,o;return t=e,(n=[{key:"set",value:function(e,t){return this.data[e]=t}},{key:"get",value:function(e){return this.data[e]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(e){return i.Utils.extend(!1,this,e)}}])&&r(t.prototype,n),o&&r(t,o),e}();t.BaseCache=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tetris=void 0;var i,r,o,s=(i=n(2))&&i.__esModule?i:{default:i};function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e[e.UP=0]="UP",e[e.RIGHT=1]="RIGHT",e[e.DOWN=2]="DOWN",e[e.LEFT=3]="LEFT",e[e.MIN=0]="MIN",e[e.MAX=3]="MAX"}(r||(r={})),function(e){e[e.ESC=27]="ESC",e[e.SPACE=32]="SPACE",e[e.LEFT=37]="LEFT",e[e.UP=38]="UP",e[e.RIGHT=39]="RIGHT",e[e.DOWN=40]="DOWN"}(o||(o={}));var c=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"$canvas",void 0),u(this,"$playBtn",void 0),u(this,"$rows",void 0),u(this,"$score",void 0),u(this,"ctx",void 0),u(this,"$ucanvas",void 0),u(this,"$menu",void 0),u(this,"uctx",void 0),u(this,"speed",{start:.6,decrement:.005,min:.1}),u(this,"nu",5),u(this,"vw",void 0),u(this,"vh",void 0),u(this,"aspectRatio",void 0),u(this,"orientation",void 0),u(this,"nx",void 0),u(this,"ny",void 0),u(this,"lineWidthXl",void 0),u(this,"dx",void 0),u(this,"dy",void 0),u(this,"dnextx",void 0),u(this,"dnexty",void 0),u(this,"blocks",void 0),u(this,"actions",void 0),u(this,"playing",void 0),u(this,"dt",void 0),u(this,"current",void 0),u(this,"next",void 0),u(this,"score",void 0),u(this,"vscore",void 0),u(this,"rows",void 0),u(this,"step",void 0),u(this,"i",{name:"i",size:4,blocks:[3840,8738,240,17476],color:"#0A9177"}),u(this,"j",{name:"j",size:3,blocks:[17600,36352,25664,3616],color:"#AB1A62"}),u(this,"l",{name:"l",size:3,blocks:[17504,3712,50240,11776],color:"#050506"}),u(this,"o",{name:"o",size:2,blocks:[52224,52224,52224,52224],color:"#0A9177"}),u(this,"s",{name:"s",size:3,blocks:[1728,35904,27648,17952],color:"#AB1A62"}),u(this,"t",{name:"t",size:3,blocks:[3648,19520,19968,17984],color:"#050506"}),u(this,"z",{name:"z",size:3,blocks:[3168,19584,50688,9792],color:"#0A9177"}),u(this,"pieces",new Array),u(this,"invalid",{court:!1,next:!1,rows:!1,score:!1}),this.$canvas=(0,s.default)("#canvas"),this.$playBtn=(0,s.default)("#start"),this.$rows=(0,s.default)("#rows"),this.$score=(0,s.default)("#score"),this.$ucanvas=(0,s.default)("#upcoming"),this.$menu=(0,s.default)("#menu"),!this.$canvas.length)throw new Error("$canvas not set");if(this.ctx=this.$canvas.get(0).getContext("2d"),null===this.ctx)throw new Error("ctx not set");this.uctx=this.$ucanvas.get(0).getContext("2d"),this.speed={start:.6,decrement:.005,min:.1},this.nu=5,this.vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0),this.vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0),this.aspectRatio=this.vh<this.vw?[1,2]:[2,1],this.orientation=this.aspectRatio[0]<this.aspectRatio[1]?"landscape":"portrait",this.nx=10*this.aspectRatio[1],this.ny=10*this.aspectRatio[0],this.lineWidthXl=3,this.$menu.hide(),this.resize(),this.reset()}var t,n,i;return t=e,(n=[{key:"run",value:function(){var e=this;this.addEvents();var t=this.timestamp(),n=t;this.resize(),this.reset(),function i(){t=e.timestamp(),e.update(Math.min(1,(t-n)/1e3)),e.draw(),n=t,window.requestAnimationFrame(i)}()}},{key:"get",value:function(e){return document.getElementById(e)}},{key:"timestamp",value:function(){return(new Date).getTime()}},{key:"random",value:function(e,t){return e+Math.random()*(t-e)}},{key:"eachblock",value:function(e,t,n,i,r){var o,s=0,a=0,u=e.blocks[i];for(o=32768;o>0;o>>=1)u&o&&r(t+a,n+s),4==++a&&(a=0,++s)}},{key:"occupied",value:function(e,t,n,i){var r=this,o=!1;return this.eachblock(e,t,n,i,function(e,t){(e<0||e>=r.nx||t<0||t>=r.ny||r.getBlock(e,t))&&(o=!0)}),o}},{key:"unoccupied",value:function(e,t,n,i){return!this.occupied(e,t,n,i)}},{key:"randomPiece",value:function(){0===this.pieces.length&&(this.pieces=[this.i,this.i,this.i,this.i,this.j,this.j,this.j,this.j,this.l,this.l,this.l,this.l,this.o,this.o,this.o,this.o,this.s,this.s,this.s,this.s,this.t,this.t,this.t,this.t,this.z,this.z,this.z,this.z]);var e=this.pieces.splice(this.random(0,this.pieces.length-1),1)[0];return{type:e,dir:r.UP,x:Math.round(this.random(0,this.nx-e.size)),y:0}}},{key:"addEvents",value:function(){var e=this;document.addEventListener("keydown",function(t){e.keydown(t)},!1),window.addEventListener("resize",function(t){e.resize(t)},!1),this.$playBtn.click(function(){e.playing?e.lose():e.play()})}},{key:"resize",value:function(e){this.vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0),this.vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0),this.aspectRatio=this.vh<this.vw?[1,2]:[2,1],this.orientation=this.aspectRatio[0]<this.aspectRatio[1]?"landscape":"portrait",this.nx=10*this.aspectRatio[1],this.ny=10*this.aspectRatio[0],"landscape"===this.orientation?this.$canvas.height(this.$canvas.width()/this.aspectRatio[1]):this.$canvas.height(this.$canvas.width()*this.aspectRatio[0]),this.$canvas.attr("width",this.$canvas.width()),this.$canvas.attr("height",this.$canvas.height()),this.$ucanvas.attr("width",this.$ucanvas.width()),this.$ucanvas.attr("height",this.$ucanvas.height()),this.$ucanvas.height(this.$ucanvas.width()),this.dx=this.$canvas.width()/this.nx,this.dy=this.$canvas.height()/this.ny,this.dnextx=this.$ucanvas.width()/this.nu,this.dnexty=this.$ucanvas.height()/this.nu,this.invalidate(),this.invalidateNext()}},{key:"keydown",value:function(e){var t=!1;if(this.playing)switch(e.keyCode){case o.LEFT:this.actions.push(r.LEFT),t=!0;break;case o.RIGHT:this.actions.push(r.RIGHT),t=!0;break;case o.UP:this.actions.push(r.UP),t=!0;break;case o.DOWN:this.actions.push(r.DOWN),t=!0;break;case o.ESC:this.lose(),t=!0}else e.keyCode===o.SPACE&&(this.play(),t=!0);t&&e.preventDefault()}},{key:"swipe",value:function(e,t){if(this.playing)switch(t.direction){case"left":this.actions.push(r.LEFT),!0;break;case"right":this.actions.push(r.RIGHT),!0;break;case"up":this.actions.push(r.UP),!0;break;case"down":this.actions.push(r.DOWN),!0}}},{key:"tab",value:function(e,t){this.playing&&this.actions.push(r.UP)}},{key:"play",value:function(){this.$menu.show(),this.$playBtn.text("Give Up"),this.reset(),this.playing=!0}},{key:"lose",value:function(){this.$playBtn.text("Play"),this.setVisualScore(),this.playing=!1}},{key:"setVisualScore",value:function(e){this.vscore=e||this.score,this.invalidateScore()}},{key:"setScore",value:function(e){this.score=e,this.setVisualScore(e)}},{key:"addScore",value:function(e){this.score=this.score+e}},{key:"clearScore",value:function(){this.setScore(0)}},{key:"clearRows",value:function(){this.setRows(0)}},{key:"setRows",value:function(e){this.rows=e,this.step=Math.max(this.speed.min,this.speed.start-this.speed.decrement*this.rows),this.invalidateRows()}},{key:"addRows",value:function(e){this.setRows(this.rows+e)}},{key:"getBlock",value:function(e,t){return this.blocks&&this.blocks[e]?this.blocks[e][t]:null}},{key:"setBlock",value:function(e,t,n){this.blocks[e]=this.blocks[e]||[],this.blocks[e][t]=n,this.invalidate()}},{key:"clearBlocks",value:function(){this.blocks=[],this.invalidate()}},{key:"clearActions",value:function(){this.actions=new Array}},{key:"setCurrentPiece",value:function(e){this.current=e||this.randomPiece(),this.invalidate()}},{key:"setNextPiece",value:function(e){this.next=e||this.randomPiece(),this.invalidateNext()}},{key:"reset",value:function(){this.dt=0,this.clearActions(),this.clearBlocks(),this.clearRows(),this.clearScore(),this.setCurrentPiece(this.next),this.setNextPiece()}},{key:"update",value:function(e){this.playing&&(this.vscore<this.score&&this.setVisualScore(this.vscore+1),this.handle(this.actions.shift()),this.dt=this.dt+e,this.dt>this.step&&(this.dt=this.dt-this.step,this.drop()))}},{key:"handle",value:function(e){switch(e){case r.LEFT:this.move(r.LEFT);break;case r.RIGHT:this.move(r.RIGHT);break;case r.UP:this.rotate();break;case r.DOWN:this.drop()}}},{key:"move",value:function(e){var t=this.current.x,n=this.current.y;switch(e){case r.RIGHT:t+=1;break;case r.LEFT:t-=1;break;case r.DOWN:n+=1}return!!this.unoccupied(this.current.type,t,n,this.current.dir)&&(this.current.x=t,this.current.y=n,this.invalidate(),!0)}},{key:"rotate",value:function(){var e=this.current.dir===r.MAX?r.MIN:this.current.dir+1;this.unoccupied(this.current.type,this.current.x,this.current.y,e)&&(this.current.dir=e,this.invalidate())}},{key:"drop",value:function(){this.move(r.DOWN)||(this.addScore(10),this.dropPiece(),this.removeLines(),this.setCurrentPiece(this.next),this.setNextPiece(this.randomPiece()),this.clearActions(),this.occupied(this.current.type,this.current.x,this.current.y,this.current.dir)&&this.lose())}},{key:"dropPiece",value:function(){var e=this;this.eachblock(this.current.type,this.current.x,this.current.y,this.current.dir,function(t,n){e.setBlock(t,n,e.current.type)})}},{key:"removeLines",value:function(){var e,t,n,i=0;for(t=this.ny;t>0;--t){for(n=!0,e=0;e<this.nx;++e)this.getBlock(e,t)||(n=!1);n&&(this.removeLine(t),t+=1,i++)}i>0&&(this.addRows(i),this.addScore(100*Math.pow(2,i-1)))}},{key:"removeLine",value:function(e){var t,n;for(n=e;n>=0;--n)for(t=0;t<this.nx;++t)this.setBlock(t,n,0===n?null:this.getBlock(t,n-1))}},{key:"invalidate",value:function(){this.invalid.court=!0}},{key:"invalidateNext",value:function(){this.invalid.next=!0}},{key:"invalidateScore",value:function(){this.invalid.score=!0}},{key:"invalidateRows",value:function(){this.invalid.rows=!0}},{key:"draw",value:function(){this.ctx.save(),this.ctx.lineWidth=this.lineWidthXl,this.ctx.translate(this.lineWidthXl/2,this.lineWidthXl/2),this.drawCourt(),this.drawNext(),this.drawScore(),this.drawRows(),this.ctx.restore()}},{key:"drawCourt",value:function(){if(this.invalid.court){var e,t,n;for(this.ctx.clearRect(0,0,this.$canvas.width()||0,this.$canvas.height()||0),this.playing&&this.drawPiece(this.ctx,this.current.type,this.current.x,this.current.y,this.current.dir,this.dx,this.dy),t=0;t<this.ny;t++)for(e=0;e<this.nx;e++)(n=this.getBlock(e,t))&&this.drawBlock(this.ctx,e,t,n.color,this.dx,this.dy);this.ctx.strokeStyle="black",this.ctx.lineWidth=this.lineWidthXl,this.ctx.strokeRect(0,0,this.nx*this.dx-this.lineWidthXl,this.ny*this.dy-this.lineWidthXl),this.invalid.court=!1}}},{key:"drawNext",value:function(){if(this.invalid.next){var e=(this.nu-this.next.type.size)/2;this.uctx.save(),this.uctx.translate(this.lineWidthXl/2,this.lineWidthXl/2),this.uctx.clearRect(0,0,this.$ucanvas.width(),this.$ucanvas.height()),this.drawPiece(this.uctx,this.next.type,e,e,this.next.dir,this.dnextx,this.dnexty),this.uctx.strokeStyle="black",this.ctx.lineWidth=this.lineWidthXl,this.uctx.strokeRect(0,0,this.nu*this.dnextx-this.lineWidthXl,this.nu*this.dnexty-this.lineWidthXl),this.uctx.restore(),this.invalid.next=!1}}},{key:"drawScore",value:function(){this.invalid.score&&(this.$score.text(("00000"+Math.floor(this.vscore)).slice(-5)),this.invalid.score=!1)}},{key:"drawRows",value:function(){this.invalid.rows&&(this.$rows.text(this.rows),this.invalid.rows=!1)}},{key:"drawPiece",value:function(e,t,n,i,r,o,s){var a=this;this.eachblock(t,n,i,r,function(n,i){a.drawBlock(e,n,i,t.color,o,s)})}},{key:"drawBlock",value:function(e,t,n,i,r,o){e.fillStyle="transparent",e.lineWidth=this.lineWidthXl,e.strokeStyle=i,e.fillRect(t*r,n*o,r,o),e.strokeRect(t*r,n*o,r,o)}}])&&a(t.prototype,n),i&&a(t,i),e}();t.Tetris=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatters=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a={};t.formatters=a;var u=(0,r.default)("rivets:formatters");a.eq=function(e,t){return e===t},a.ueq=function(e,t){return e!==t},a.includes=function(e,t){return e.indexOf(t)>=0},a.match=function(e,t,n){return e.match(new RegExp(t,n))},a.lt=function(e,t){return u("[lt]",e,t),e<t},a.elt=function(e,t){return u("[elt]",e,t),e<=t},a.gt=function(e,t){return u("[gt]",e,t),e>t},a.egt=function(e,t){return u("[egt]",e,t),e>=t},a.not=function(e){return!e},a.empty=function(e){return!a.size(e)},a.and=function(e,t){return e&&t},a.or=function(e,t){return e||t},a.parse=function(e){return o.Utils.isString(e)?JSON.parse(e):null},a.random=function(e){return o.Utils.isArray(e)?e[Math.floor(Math.random()*e.length)]:null},a.plus=function(e,t){return Number(e)+Number(t)},a.minus=function(e,t){return Number(e)-Number(t)},a.times=function(e,t){return Number(e)*Number(t)},a.divided_by=function(e,t){return Number(e)/Number(t)},a.modulo=function(e,t){return Number(e)%Number(t)},a.prepend=function(e,t){return t+e},a.append=function(e,t){return e+t},a.slice=function(e,t,n){return e.slice(t,n)},a.pluralize=function(e,t,n){return null===n&&(n=t+"s"),o.Utils.isArray(e)&&(e=e.length),1===e?t:n},a.index=function(e,t){return e&&e.length>=t?e[t]:null},a.first=function(e){return e&&e.length?e[0]:null},a.last=function(e){return e&&e.length?e[e.length-1]:null},a.currency=function(e,t){var n=e.toFixed(2).toString().replace(".",",");return t&&(n+=t),n},a.moneyWithCurrency=a.money_with_currency,a.weightWithUnit=a.weight_with_unit,a.productImageSize=a.product_image_size,a.size=function(e){return e&&e.length?e.length:0},a.length=a.size,a.count=a.size,a.strip=function(e){return $.trim(e)},a.upcase=function(e){return e.toUpperCase()},a.downcase=function(e){return e.toLowerCase()},a.handleize=function(e){return e=(e=a.strip(e)).replace(/[^\w\s]/gi,""),(e=a.downcase(e)).replace(/ /g,"-")},a.default=function(e,t){return void 0!==e&&null!==e?e:t},a.json=function(e){return JSON.stringify(e)},a.contains=function(e,t,n){if(!o.Utils.isArray(e)||!o.Utils.isObject(e)||!o.Utils.isString(e))return!1;if(o.Utils.isUndefined(n)&&(n=t),o.Utils.isString(e))return-1!==e.indexOf(n);if(o.Utils.isArray(e))for(var i in e)if((e.hasOwnProperty(i).hasOwnProperty(t)||o.Utils.isDefined(e[i])&&o.Utils.isDefined(e[i][t]))&&e[i][t]===n)return!0;return!1},a.justDigits=function(e){if(o.Utils.isNumber(e))return e;var t=e.replace(/[^-\d\.]/g,"");return isNaN(Number(t))?0:Number(t)},a.even=function(e){return e%2==0},a.uneven=function(e){return e%2!=0},a.isString=function(e){return o.Utils.isString(e)},a.filledString=function(e){return o.Utils.isString(e)&&!a.empty(e.replace(/\s/g,""))},a.last=function(e,t){return e.length===t+1},a.get=function(e,t){return u("get",e,t),o.Utils.isObject(e)||o.Utils.isArray(e)?(u("get",e,t,e[t]),e[t]):null},a.set=function(e,t,n){return e&&"object"===s(e)&&(e[t]=n),e},a.gcd=function(e,t){return 0===t?e:a.gcd(t,e%t)}},function(e,t){e.exports='<nav-items linklist=linklist pills=false vertical=true></nav-items> <footer class=footer> <div rv-autoscroll=\'{"angle": "horizontal", "jumps": 10, "delay": 200, "width":"100vw"}\'> <div rv-each-index=[0,1,2,3,4,5,6,7,8,9,10] class="brand-light px-3" style=pointer-events:all> <div class="font-weight-bold brand-text">Art</div> <img class=brand-image rv-src="system.assets | get \'icon_heart_px.png\'" alt="Art + Code Studio"> <div class="font-weight-bold brand-text">Code</div> <div class="font-weight-normal brand-text hidden-xs-down">&nbsp;Studio</div> </div> </div> <div rv-autoscroll=\'{"angle": "horizontal", "direction":-1, "jumps": 10, "delay": 300, "width":"100vw" }\'> <nav-items linklist=system.linklists.footer pills=false vertical=false></nav-items> <nav-items linklist=system.linklists.footer pills=false vertical=false></nav-items> </div> </footer>'},function(e,t,n){"use strict";var i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};t.__esModule=!0;var r=function(){function e(){i(this,e)}return e.prototype.on=function(e,t){return this._eventCollection=this._eventCollection||{},this._eventCollection[e]=this._eventCollection[e]||[],this._eventCollection[e].push(t),this},e.prototype.once=function(e,t){var n=this;function i(){n.off(e,i),t.apply(this,arguments)}return i.listener=t,this.on(e,i),this},e.prototype.off=function(e,t){var n=void 0;return this._eventCollection&&(n=this._eventCollection[e])?(n.forEach(function(e,i){e!==t&&e.listener!==t||n.splice(i,1)}),0===n.length&&delete this._eventCollection[e],this):this},e.prototype.emit=function(e){for(var t=this,n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var o=void 0;return this._eventCollection&&(o=this._eventCollection[e])?((o=o.slice(0)).forEach(function(e){return e.apply(t,i)}),this):this},e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";var i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)};e.exports=function(e,t,n){var r,o=!1;function s(e){r=e,o||(i(a),o=!0)}function a(){n.call(e,r),o=!1}return e.addEventListener(t,s,!1),s}},function(e,t,n){"use strict";var i,r,o,s=n(15),a=n(14),u=!1,c=window.document,l=c.documentElement,f=window.navigator.msPointerEnabled,h={start:f?"MSPointerDown":"touchstart",move:f?"MSPointerMove":"touchmove",end:f?"MSPointerUp":"touchend"},d=function(){var e=/^(Webkit|Khtml|Moz|ms|O)(?=[A-Z])/,t=c.getElementsByTagName("script")[0].style;for(var n in t)if(e.test(n))return"-"+n.match(e)[0].toLowerCase()+"-";return"WebkitOpacity"in t?"-webkit-":"KhtmlOpacity"in t?"-khtml-":""}();function p(e){e=e||{},this._startOffsetX=0,this._currentOffsetX=0,this._opening=!1,this._moved=!1,this._opened=!1,this._preventOpen=!1,this._touch=void 0===e.touch||e.touch&&!0,this._side=e.side||"left",this.panel=e.panel,this.menu=e.menu,this.panel.classList.contains("slideout-panel")||this.panel.classList.add("slideout-panel"),this.panel.classList.contains("slideout-panel-"+this._side)||this.panel.classList.add("slideout-panel-"+this._side),this.menu.classList.contains("slideout-menu")||this.menu.classList.add("slideout-menu"),this.menu.classList.contains("slideout-menu-"+this._side)||this.menu.classList.add("slideout-menu-"+this._side),this._fx=e.fx||"ease",this._duration=parseInt(e.duration,10)||300,this._tolerance=parseInt(e.tolerance,10)||70,this._padding=this._translateTo=parseInt(e.padding,10)||256,this._orientation="right"===this._side?-1:1,this._translateTo*=this._orientation,this._touch&&this._initTouchEvents()}o=a,(r=p).prototype=function(e,t){for(var n in t)t[n]&&(e[n]=t[n]);return e}(r.prototype||{},o.prototype),p.prototype.open=function(){var e=this;return this.emit("beforeopen"),l.classList.contains("slideout-open")||l.classList.add("slideout-open"),this._setTransition(),this._translateXTo(this._translateTo),this._opened=!0,setTimeout(function(){e.panel.style.transition=e.panel.style["-webkit-transition"]="",e.emit("open")},this._duration+50),this},p.prototype.close=function(){var e=this;return this.isOpen()||this._opening?(this.emit("beforeclose"),this._setTransition(),this._translateXTo(0),this._opened=!1,setTimeout(function(){l.classList.remove("slideout-open"),e.panel.style.transition=e.panel.style["-webkit-transition"]=e.panel.style[d+"transform"]=e.panel.style.transform="",e.emit("close")},this._duration+50),this):this},p.prototype.toggle=function(){return this.isOpen()?this.close():this.open()},p.prototype.isOpen=function(){return this._opened},p.prototype._translateXTo=function(e){return this._currentOffsetX=e,this.panel.style[d+"transform"]=this.panel.style.transform="translateX("+e+"px)",this},p.prototype._setTransition=function(){return this.panel.style[d+"transition"]=this.panel.style.transition=d+"transform "+this._duration+"ms "+this._fx,this},p.prototype._initTouchEvents=function(){var e=this;return this._onScrollFn=s(c,"scroll",function(){e._moved||(clearTimeout(i),u=!0,i=setTimeout(function(){u=!1},250))}),this._preventMove=function(t){e._moved&&t.preventDefault()},c.addEventListener(h.move,this._preventMove),this._resetTouchFn=function(t){void 0!==t.touches&&(e._moved=!1,e._opening=!1,e._startOffsetX=t.touches[0].pageX,e._preventOpen=!e._touch||!e.isOpen()&&0!==e.menu.clientWidth)},this.panel.addEventListener(h.start,this._resetTouchFn),this._onTouchCancelFn=function(){e._moved=!1,e._opening=!1},this.panel.addEventListener("touchcancel",this._onTouchCancelFn),this._onTouchEndFn=function(){e._moved&&(e.emit("translateend"),e._opening&&Math.abs(e._currentOffsetX)>e._tolerance?e.open():e.close()),e._moved=!1},this.panel.addEventListener(h.end,this._onTouchEndFn),this._onTouchMoveFn=function(t){if(!(u||e._preventOpen||void 0===t.touches||function(e){for(;e.parentNode;){if(null!==e.getAttribute("data-slideout-ignore"))return e;e=e.parentNode}return null}(t.target))){var n=t.touches[0].clientX-e._startOffsetX,i=e._currentOffsetX=n;if(!(Math.abs(i)>e._padding)&&Math.abs(n)>20){e._opening=!0;var r=n*e._orientation;if(e._opened&&r>0||!e._opened&&r<0)return;e._moved||e.emit("translatestart"),r<=0&&(i=n+e._padding*e._orientation,e._opening=!1),e._moved&&l.classList.contains("slideout-open")||l.classList.add("slideout-open"),e.panel.style[d+"transform"]=e.panel.style.transform="translateX("+i+"px)",e.emit("translate",i),e._moved=!0}}},this.panel.addEventListener(h.move,this._onTouchMoveFn),this},p.prototype.enableTouch=function(){return this._touch=!0,this},p.prototype.disableTouch=function(){return this._touch=!1,this},p.prototype.destroy=function(){return this.close(),c.removeEventListener(h.move,this._preventMove),this.panel.removeEventListener(h.start,this._resetTouchFn),this.panel.removeEventListener("touchcancel",this._onTouchCancelFn),this.panel.removeEventListener(h.end,this._onTouchEndFn),this.panel.removeEventListener(h.move,this._onTouchMoveFn),c.removeEventListener("scroll",this._onScrollFn),this.open=this.close=function(){},this},e.exports=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slideoutComponent=void 0;var i=u(n(0)),r=u(n(2)),o=u(n(16)),s=n(1),a=u(n(13));function u(e){return e&&e.__esModule?e:{default:e}}t.slideoutComponent=function(e){var t=(0,i.default)("rivets:slideout");return{template:function(){return a.default},initialize:function(n,i){return this.linklist=window.model.system.linklists["main-menu"],this.system=window.model.system,t("initialize",this),setTimeout(function(){var i={duration:800,menu:n,padding:s.Utils.getViewportDimensions().w,panel:document.getElementById("slideout-panel"),side:"right",tolerance:70},a=new o.default(i);e.trigger("slideout.component:initialize",a),(0,r.default)(window).resize(function(){a._opened||(a.destroy(),i.padding=s.Utils.getViewportDimensions().w,a=new o.default(i),e.trigger("slideout.component:initialize",a)),t("resize",a)}),e.on("initStateChange",function(){a.close()}),a.on("open",function(){t("open")})},0),this}}}},function(e,t){e.exports=" <nav class=nav rv-add-class=linklist.handle rv-class-nav-pills=pills rv-class-flex-column=vertical> <div class=nav-item rv-each-link=linklist.links> <a class=nav-link rv-class-active=link.active rv-route=link.href rv-href=link.href>{link.text}</a> </div> </nav> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navItems=void 0;var i=s(n(0)),r=s(n(2)),o=s(n(18));function s(e){return e&&e.__esModule?e:{default:e}}var a={template:function(){return o.default},initialize:function(e,t){(0,r.default)(e);return(0,i.default)("rivets:nav-items")("initialize",t,o.default),this.linklist=t.linklist,this.pills=t.pills,this.vertical=t.vertical,this}};t.navItems=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"slideoutComponent",{enumerable:!0,get:function(){return s.slideoutComponent}}),t.components=void 0;var i,r=(i=n(5))&&i.__esModule?i:{default:i},o=n(19),s=n(17);var a=r.default.components;t.components=a,a["nav-items"]=o.navItems},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoscrollBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}var a=(0,i.default)("binders:autoscroll");t.autoscrollBinder=function(){return function(e,t){var n=(0,r.default)(e);a("init",t),o.Utils.isString(t.width)&&n.css("width",t.width),n.addClass("rv-autoscroll-".concat(t.angle)),setTimeout(function(){!function(e,t){var n=t.direction,i=t.jumps,r=t.delay,o=!1,s=null,a=e.prop("scrollWidth")-e.outerWidth();n<0?e.scrollLeft(a):e.scrollLeft(0),e.hover(function(){setTimeout(function(){e.filter(":hover").length&&(o=!0,n*=-1)},10)},function(){setTimeout(function(){o&&!e.filter(":hover").length&&(o=!1)},500)}),setTimeout(function t(){return o?setTimeout(t,200):(s=e.scrollLeft(),n>0?s+=i:s-=i,s<=5?n=1:s>=a&&(n=-1),e.animate({scrollLeft:s},r,"linear",t))},0)}(n,t)},1e3)}}},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.TypingTextService=void 0;var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"toRotate",void 0),r(this,"el",void 0),r(this,"loopNum",0),r(this,"period",void 0),r(this,"txt",""),r(this,"isDeleting",!1),r(this,"fullTxt",void 0),this.el=t,this.loopNum=0,this.txt="",this.period=n||2e3}var t,n,o;return t=e,(n=[{key:"auto",value:function(e){this.toRotate=e,this.loopNum=0,this.txt="",this.tick(),this.isDeleting=!1}},{key:"delete",value:function(e){this.isDeleting=!0,this.fullTxt=this.el.innerHTML,this.txt=this.fullTxt,this.deleteTick(e),this.isDeleting=!1}},{key:"write",value:function(e,t){this.fullTxt=e,this.txt="",this.isDeleting=!1,this.writeTick(t)}},{key:"tick",value:function(){var e=this.loopNum%this.toRotate.length;this.fullTxt=this.toRotate[e],this.isDeleting?this.txt=this.fullTxt.substring(0,this.txt.length-1):this.txt=this.fullTxt.substring(0,this.txt.length+1),this.el.innerHTML=this.txt;var t=this,n=300-100*Math.random();this.isDeleting&&(n/=2),this.isDeleting||this.txt!==this.fullTxt?this.isDeleting&&""===this.txt&&(this.isDeleting=!1,this.loopNum++,n=500):(n=this.period,this.isDeleting=!0),setTimeout(function(){t.tick()},n)}},{key:"deleteTick",value:function(e){var t=this,n=300-100*Math.random();return n/=2,this.txt=this.fullTxt.substring(0,this.txt.length-1),this.el.innerHTML=this.txt,""===this.txt?(this.isDeleting=!1,this.loopNum++,n=500,setTimeout(function(){if(e)return e()},n)):setTimeout(function(){t.deleteTick(e)},n)}},{key:"writeTick",value:function(e){var t=this;this.txt=this.fullTxt.substring(0,this.txt.length+1),this.el.innerHTML=this.txt;var n=300-100*Math.random();return this.txt===this.fullTxt?(n=this.period,this.isDeleting=!0,setTimeout(function(){if(e)return e()},n)):setTimeout(function(){t.writeTick(e)},n)}}])&&i(t.prototype,n),o&&i(t,o),e}();t.TypingTextService=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slideoutTogglerBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(22);function s(e){return e&&e.__esModule?e:{default:e}}t.slideoutTogglerBinder=function(e){var t=(0,i.default)("binders:slideout-toggler");return function(n,i){var s=(0,r.default)(n);t("init",n,i);var a=null,u=s.html(),c=new o.TypingTextService(s[0],2e3);e.on("slideout.component:initialize",function(e){t("slideout.component:initialize",e),null!==a&&s.off("click"),a=e,s.on("click",function(){a.toggle()}),a.on("beforeopen",function(){u=s.html(),s.css("color","white"),s.css("min-height",s.outerHeight()),c.delete(function(){t("delete Close done"),c.write("Close")})}),a.on("beforeclose",function(){s.css("min-height",s.outerHeight()),c.delete(function(){t("delete ".concat(u," done")),s.css("color","black"),c.write(u)})})})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.routeBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}t.routeBinder=function(e,t,n){var s=(0,i.default)("binders:route");return function(i,a){var u=(0,r.default)(i),c=!1;s("getBinder",i,a),a||(a=u.attr("href")),"_blank"===u.attr("target")&&(c=!0);var l=o.Utils.getLocation(),f=l.protocol+"//"+l.hostname;o.Utils.isAbsoluteUrl(a)&&(0===a.indexOf(f)?a=a.replace(f,""):c=!0);var h=function(e){var t=o.Utils.getLocation().pathname;return s("checkURL",t,e),e===t},d=function(e){return h(e)?(u.addClass("active"),!0):(u.removeClass("active"),!1)};e.on("newPageReady",function(){return d(a)}),u.off("click").on("click",function(e){e.preventDefault(),h(a)?s("already on this site"):t.goTo(a,c)}),c||h(a)||u.off("mouseenter touchstart").on("mouseenter touchstart",function(e){n.onLinkEnter(e,a)}),d(a)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"routeBinder",{enumerable:!0,get:function(){return a.routeBinder}}),Object.defineProperty(t,"slideoutTogglerBinder",{enumerable:!0,get:function(){return u.slideoutTogglerBinder}}),Object.defineProperty(t,"autoscrollBinder",{enumerable:!0,get:function(){return c.autoscrollBinder}}),t.binders=void 0;var i=l(n(0)),r=l(n(2)),o=l(n(5)),s=n(1),a=n(24),u=n(23),c=n(21);function l(e){return e&&e.__esModule?e:{default:e}}var f=o.default.binders;t.binders=f;var h=(0,i.default)("rivets:binders");f.html=function(e,t){var n=(0,r.default)(e);s.Utils.isString(t)||(t=n.attr("rv-html")),h("rv-html",n,t),(0,r.default)(e).html(t)},f["append-html"]=function(e,t){var n=(0,r.default)(e);s.Utils.isString(t)||(t=n.attr("rv-append-html")),h("rv-append-html",n,t);var i=r.default.parseHTML(t);(0,r.default)(e).append(i)},f.mailto=function(e,t){(0,r.default)(e).attr("href","mailto:"+t)},f.tel=function(e,t){(0,r.default)(e).attr("href","tel:"+t)},f["background-image"]=function(e,t){(0,r.default)(e).css("background-image","url("+t+")")},f["image-box"]=function(e,t){var n=(0,r.default)(e);if(n.addClass("image-box"),t){var i=t.split(":"),o=new Array;o[0]=Number(i[0]),o[1]=Number(i[1]);var s=o[1]/o[0]*100,a="ratio-"+o[0]+"-"+o[1],u="padding-top: "+s+"%;";n.addClass(a),(0,r.default)("head").append("<style>.image-box."+a+":before{"+u+"}</style>"),h("ratio",t,u)}},f["class-*"]=function(e,t){var n=(0,r.default)(e);h(this.arg);var i=this.arg[0];return t?n.addClass(i):n.removeClass(i),t},f["add-class"]=function(e,t){var n=(0,r.default)(e);return t&&n.addClass(t),t},f["remove-class"]=function(e,t){var n=(0,r.default)(e);return t&&n.removeClass(t),t},f["for-*-*"]=function(e,t){var n=(0,r.default)(e),i=Number(this.arg[0]),o=Number(this.arg[1]);h("start",i,"end",o);for(var s=n.html(),a=i;a<o;a++)h("index",a);return h("html",s),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Prefetch=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1),s=n(6);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"ignoreClassLink","no-barba-prefetch"),u(this,"debug",(0,r.default)("Prefetch"))}var t,n,i;return t=e,(n=[{key:"init",value:function(){if(!window.history.pushState)return!1}},{key:"onLinkEnter",value:function(e,t){var n=e.target;if(!t){for(;n&&!s.Pjax.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;t=s.Pjax.getHref(n)}if(this.debug("onLinkEnter",t),s.Pjax.preventCheck(e,n)&&!s.Pjax.cache.get(t)){var i=o.Utils.xhr(t);s.Pjax.cache.set(t,i)}}}])&&a(t.prototype,n),i&&a(t,i),e}();t.Prefetch=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"HistoryManager",{enumerable:!0,get:function(){return i.HistoryManager}}),Object.defineProperty(t,"IState",{enumerable:!0,get:function(){return i.IState}}),Object.defineProperty(t,"Dom",{enumerable:!0,get:function(){return r.Dom}}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return o.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return s.Prefetch}});var i=n(8),r=n(7),o=n(6),s=n(26)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseView=void 0;var i=n(3),r=n(1);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"namespace",void 0),s(this,"container",void 0),s(this,"dispatcher",new i.Dispatcher)}var t,n,a;return t=e,(n=[{key:"extend",value:function(e){return r.Utils.extend(!1,this,e)}},{key:"init",value:function(){var e=this;this.dispatcher.on("initStateChange",function(t,n){n&&n.namespace===e.namespace&&e.onLeave()}),this.dispatcher.on("newPageReady",function(t,n,i){e.container=i,t.namespace===e.namespace&&e.onEnter()}),this.dispatcher.on("transitionCompleted",function(t,n){t.namespace===e.namespace&&e.onEnterCompleted(),n&&n.namespace===e.namespace&&e.onLeaveCompleted()})}}])&&o(t.prototype,n),a&&o(t,a),e}();t.BaseView=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HideShowTransition=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(4);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(){var e,n,i,o,a,c,f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var h=arguments.length,d=new Array(h),p=0;p<h;p++)d[p]=arguments[p];return i=this,n=!(o=(e=u(t)).call.apply(e,[this].concat(d)))||"object"!==s(o)&&"function"!=typeof o?l(i):o,a=l(l(n)),c="debug",f=(0,r.default)("barba:HideShowTransition"),c in a?Object.defineProperty(a,c,{value:f,enumerable:!0,configurable:!0,writable:!0}):a[c]=f,n}var n,i,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,o.BaseTransition),n=t,(i=[{key:"start",value:function(){this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){document.body.scrollTop=0,this.done()}}])&&a(n.prototype,i),f&&a(n,f),t}();t.HideShowTransition=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomTransition=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1),s=n(4);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var h=function(e){function t(){var e,n,i,o,s,u,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var h=arguments.length,d=new Array(h),p=0;p<h;p++)d[p]=arguments[p];return i=this,n=!(o=(e=c(t)).call.apply(e,[this].concat(d)))||"object"!==a(o)&&"function"!=typeof o?f(i):o,s=f(f(n)),u="debug",l=(0,r.default)("rivets:CustomTransition"),u in s?Object.defineProperty(s,u,{value:l,enumerable:!0,configurable:!0,writable:!0}):s[u]=l,n}var n,i,h;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,s.BaseTransition),n=t,(i=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.debug("init"),this.deferred=o.Utils.deferred();var i=o.Utils.deferred();return this.newContainerLoading=i.promise,this.start(),t.then(function(e){n.$newContainer=e,i.resolve()}),this.deferred.promise}},{key:"start",value:function(){this.debug("CustomTransition start"),this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(e){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}])&&u(n.prototype,i),h&&u(n,h),t}();t.CustomTransition=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"BaseCache",{enumerable:!0,get:function(){return i.BaseCache}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return r.BaseTransition}}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return r.CustomTransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return r.HideShowTransition}}),Object.defineProperty(t,"BaseView",{enumerable:!0,get:function(){return o.BaseView}}),Object.defineProperty(t,"HistoryManager",{enumerable:!0,get:function(){return s.HistoryManager}}),Object.defineProperty(t,"IState",{enumerable:!0,get:function(){return s.IState}}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return s.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return s.Prefetch}});var i=n(10),r=n(9),o=n(28),s=n(27)},function(e,t){var n=1e3,i=60*n,r=60*i,o=24*r,s=365.25*o;function a(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*i;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?a(u=e,o,"day")||a(u,r,"hour")||a(u,i,"minute")||a(u,n,"second")||u+" ms":function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=r)return Math.round(e/r)+"h";if(e>=i)return Math.round(e/i)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function i(e){var n;function i(){if(i.enabled){var e=i,r=+new Date,o=r-(n||r);e.diff=o,e.prev=n,e.curr=r,n=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,i){if("%%"===n)return n;u++;var r=t.formatters[i];if("function"==typeof r){var o=s[u];n=r.call(e,o),s.splice(u,1),u--}return n}),t.formatArgs.call(e,s),(i.log||t.log||console.log.bind(console)).apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var n,i=0;for(n in e)i=(i<<5)-i+e.charCodeAt(n),i|=0;return t.colors[Math.abs(i)%t.colors.length]}(e),i.destroy=r,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function r(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var i=("string"==typeof e?e:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(e=i[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var o=t.instances[n];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,i;for(n=0,i=t.skips.length;n<i;n++)if(t.skips[n].test(e))return!1;for(n=0,i=t.names.length;n<i;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(32),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=a(h);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var i=h(n(0)),r=h(n(2)),o=h(n(5)),s=n(31),a=n(25),u=n(20),c=n(3),l=n(12),f=n(11);function h(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.View=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"prefetch",new s.Prefetch),d(this,"dispatcher",new c.Dispatcher),d(this,"pjax",new s.Pjax(new s.CustomTransition)),d(this,"outsite",null),d(this,"insite",null),d(this,"debug",(0,i.default)("View")),o.default.components=u.components,o.default.components.slideout=(0,u.slideoutComponent)(this.dispatcher),o.default.formatters.get=l.formatters.get,o.default.binders=a.binders,o.default.binders.route=(0,a.routeBinder)(this.dispatcher,this.pjax,this.prefetch),o.default.binders["slideout-toggler"]=(0,a.slideoutTogglerBinder)(this.dispatcher),o.default.binders.autoscroll=(0,a.autoscrollBinder)(),this.outsite=o.default.bind((0,r.default)("#rivets-top, #rivets-bottom").get(),window.model),this.dispatcher.on("newPageReady",function(e,n,i,r,s){t.debug("newPageReady"),s||null===t.insite||t.insite.unbind(),t.insite=o.default.bind(i.get(),window.model),"page.tetris"===i.data().template&&(new f.Tetris).run()}),this.prefetch.init(),this.pjax.start()}},function(e,t,n){"use strict";var i,r=(i=n(2))&&i.__esModule?i:{default:i},o=n(35);(0,r.default)(function(){new o.View})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,