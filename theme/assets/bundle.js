!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=76)}([function(e,t,n){(function(i){function r(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==i&&"env"in i&&(e=i.env.DEBUG),e}(t=e.exports=n(74)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(o=++r)}),e.splice(o,0,i)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=r,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(r())}).call(this,n(75))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(2));function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,null,[{key:"isUndefined",value:function(e){return void 0===e}},{key:"isDefined",value:function(e){return!this.isUndefined(e)}},{key:"isFunction",value:function(e){return"function"==typeof e}},{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isNumber",value:function(e){return!isNaN(parseFloat(e))&&!isNaN(e-0)}},{key:"isObject",value:function(e){return this.isDefined(e)&&"object"===r(e)}},{key:"isBoolean",value:function(e){return r(e)===r(!0)}},{key:"isString",value:function(e){return this.isDefined(e)&&"string"==typeof e}},{key:"stringHasNumber",value:function(e){return this.isString(e)&&/\d/.test(e)}},{key:"stringHasOnlyNumber",value:function(e){return/^\d+$/.test(e)}},{key:"stringIsPhoneNumber",value:function(e){return/^[0-9 ()+-]+$/.test(e)}},{key:"justDigits",value:function(t){var n=t.replace(/[^-\d\.]/g,"");return e.isNumber(n)?Number(n):0}},{key:"extend",value:function(e,t,n,r){return e?i.default.extend(!0,t,n,r):i.default.extend(t,n,r)}},{key:"concat",value:function(e,t,n){return this.extend(e,{},t,n)}},{key:"xhr",value:function(e){var t=this.deferred(),n=new XMLHttpRequest;return n.onreadystatechange=function(){if(4===n.readyState)return 200===n.status?t.resolve(n.responseText):t.reject(new Error("xhr: HTTP code is not 200"))},n.ontimeout=function(){return t.reject(new Error("xhr: Timeout exceeded"))},n.open("GET",e),n.timeout=this.xhrTimeout,n.setRequestHeader("x-barba","yes"),n.send(),t.promise}},{key:"deferred",value:function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.promise=t,e}},{key:"getLocation",value:function(e){return e?(0,i.default)('<a href="'.concat(e,'"></a>'))[0]:window.location}},{key:"getUrl",value:function(t){var n=e.getLocation(t);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(e){return e.replace(/#.*/,"")}},{key:"getPort",value:function(t,n){var i=e.getLocation(n),r=void 0!==t?t:i.port,o=i.protocol;return""!==r?Number(r):"http:"===o?80:"https:"===o?443:void 0}},{key:"isAbsoluteUrl",value:function(e){return/^https?:\/\//i.test(e)}},{key:"getUrlParameter",value:function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(t){return e.getLocation(t).hash}},{key:"updateHash",value:function(e){return window.location.hash=e}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){var e=Math.max(document.documentElement.clientWidth,window.innerWidth||0);return{h:Math.max(document.documentElement.clientHeight,window.innerHeight||0),w:e}}}]),e}();t.Utils=s,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(s,"xhrTimeout",void 0)},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,d={},h=d.toString,p=d.hasOwnProperty,v=p.toString,m=v.call(Object),y={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function x(e,t,n){var i,r=(t=t||s).createElement("script");if(r.text=e,n)for(i in w)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[h.call(e)]||"object":typeof e}var C=function(e,t){return new C.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function j(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!g(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:"3.3.1",constructor:C,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||g(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(C.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&C.isPlainObject(n)?n:{},s[t]=C.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&v.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){x(e)},each:function(e,t){var n,i=0;if(j(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?C.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(j(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return c.apply([],s)},guid:1,support:y}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var O=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,i,r,o,s,a,u,c,l,f,d,h,p,v,m,y,g,b,w="sizzle"+1*new Date,x=e.document,k=0,C=0,T=se(),j=se(),O=se(),_=function(e,t){return e===t&&(f=!0),0},P={}.hasOwnProperty,E=[],S=E.pop,D=E.push,N=E.push,A=E.slice,M=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+B+"*("+F+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+F+"))|)"+B+"*\\]",H=":("+F+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",I=new RegExp(B+"+","g"),$=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g"),q=new RegExp("^"+B+"*,"+B+"*"),W=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),U=new RegExp("="+B+"*([^\\]'\"]*?)"+B+"*\\]","g"),z=new RegExp(H),V=new RegExp("^"+F+"$"),X={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),TAG:new RegExp("^("+F+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+H),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+B+"?|("+B+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},re=ge(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{N.apply(E=A.call(x.childNodes),x.childNodes),E[x.childNodes.length].nodeType}catch(e){N={apply:E.length?function(e,t){D.apply(e,A.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,a,c,l,f,p,y,g=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&((t?t.ownerDocument||t:x)!==h&&d(t),t=t||h,v)){if(11!==k&&(f=K.exec(e)))if(o=f[1]){if(9===k){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(g&&(c=g.getElementById(o))&&b(t,c)&&c.id===o)return i.push(c),i}else{if(f[2])return N.apply(i,t.getElementsByTagName(e)),i;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return N.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!O[e+" "]&&(!m||!m.test(e))){if(1!==k)g=t,y=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=w),a=(p=s(e)).length;a--;)p[a]="#"+l+" "+ye(p[a]);y=p.join(","),g=Q.test(e)&&ve(t.parentNode)||t}if(y)try{return N.apply(i,g.querySelectorAll(y)),i}catch(e){}finally{l===w&&t.removeAttribute("id")}}}return u(e.replace($,"$1"),t,i,r)}function se(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[w]=!0,e}function ue(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function le(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:x;return s!==h&&9===s.nodeType&&s.documentElement?(p=(h=s).documentElement,v=!o(h),x!==h&&(r=h.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(h.getElementsByClassName),n.getById=ue(function(e){return p.appendChild(e).id=w,!h.getElementsByName||!h.getElementsByName(w).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Y.test(h.querySelectorAll))&&(ue(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+B+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+B+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+w+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+B+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=Y.test(g=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),y.push("!=",H)}),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Y.test(p.compareDocumentPosition),b=t||Y.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},_=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===h||e.ownerDocument===x&&b(x,e)?-1:t===h||t.ownerDocument===x&&b(x,t)?1:l?M(l,e)-M(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===h?-1:t===h?1:r?-1:o?1:l?M(l,e)-M(l,t):0;if(r===o)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?le(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0},h):h},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&d(e),t=t.replace(U,"='$1']"),n.matchesSelector&&v&&!O[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var i=g.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,h,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==h&&d(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==h&&d(e);var r=i.attrHandle[t.toLowerCase()],o=r&&P.call(i.attrHandle,t.toLowerCase())?r(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(_),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return l=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:ae,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+B+")"+e+"("+B+"|$)"))&&T(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(I," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,h,p,v=o!==s?"nextSibling":"previousSibling",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),g=!u&&!a,b=!1;if(m){if(o){for(;v;){for(d=t;d=d[v];)if(a?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;p=v="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?m.firstChild:m.lastChild],s&&g){for(b=(h=(c=(l=(f=(d=m)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],d=h&&m.childNodes[h];d=++h&&d&&d[v]||(b=h=0)||p.pop();)if(1===d.nodeType&&++b&&d===t){l[e]=[k,h,b];break}}else if(g&&(b=h=(c=(l=(f=(d=t)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===b)for(;(d=++h&&d&&d[v]||(b=h=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==y:1!==d.nodeType)||!++b||(g&&((l=(f=d[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[k,b]),d!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[w]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=M(e,o[s])]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=a(e.replace($,"$1"));return i[w]?ae(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return V.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:pe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=de(t);function me(){}function ye(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ge(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=C++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,u){var c,l,f,d=[k,a];if(u){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(l=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=l[o])&&c[0]===k&&c[1]===a)return d[2]=c[2];if(l[o]=d,d[2]=e(t,n,u))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var o,s=[],a=0,u=e.length,c=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function xe(e,t,n,i,r,o){return i&&!i[w]&&(i=xe(i)),r&&!r[w]&&(r=xe(r,o)),ae(function(o,s,a,u){var c,l,f,d=[],h=[],p=s.length,v=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?v:we(v,d,e,a,u),y=n?r||(o?e:p||i)?[]:s:m;if(n&&n(m,y,a,u),i)for(c=we(y,h),i(c,[],a,u),l=c.length;l--;)(f=c[l])&&(y[h[l]]=!(m[h[l]]=f));if(o){if(r||e){if(r){for(c=[],l=y.length;l--;)(f=y[l])&&c.push(m[l]=f);r(null,y=[],c,u)}for(l=y.length;l--;)(f=y[l])&&(c=r?M(o,f):d[l])>-1&&(o[c]=!(s[c]=f))}}else y=we(y===s?y.splice(p,y.length):y),r?r(null,s,y,u):N.apply(s,y)})}function ke(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],u=s?1:0,l=ge(function(e){return e===t},a,!0),f=ge(function(e){return M(t,e)>-1},a,!0),d=[function(e,n,i){var r=!s&&(i||n!==c)||((t=n).nodeType?l(e,n,i):f(e,n,i));return t=null,r}];u<o;u++)if(n=i.relative[e[u].type])d=[ge(be(d),n)];else{if((n=i.filter[e[u].type].apply(null,e[u].matches))[w]){for(r=++u;r<o&&!i.relative[e[r].type];r++);return xe(u>1&&be(d),u>1&&ye(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace($,"$1"),n,u<r&&ke(e.slice(u,r)),r<o&&ke(e=e.slice(r)),r<o&&ye(e))}d.push(n)}return be(d)}return me.prototype=i.filters=i.pseudos,i.setFilters=new me,s=oe.tokenize=function(e,t){var n,r,o,s,a,u,c,l=j[e+" "];if(l)return t?0:l.slice(0);for(a=e,u=[],c=i.preFilter;a;){for(s in n&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=W.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace($," ")}),a=a.slice(n.length)),i.filter)!(r=X[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):j(e,u).slice(0)},a=oe.compile=function(e,t){var n,r=[],o=[],a=O[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=ke(t[n]))[w]?r.push(a):o.push(a);(a=O(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,u,l){var f,p,m,y=0,g="0",b=o&&[],w=[],x=c,C=o||r&&i.find.TAG("*",l),T=k+=null==x?1:Math.random()||.1,j=C.length;for(l&&(c=s===h||s||l);g!==j&&null!=(f=C[g]);g++){if(r&&f){for(p=0,s||f.ownerDocument===h||(d(f),a=!v);m=e[p++];)if(m(f,s||h,a)){u.push(f);break}l&&(k=T)}n&&((f=!m&&f)&&y--,o&&b.push(f))}if(y+=g,n&&g!==y){for(p=0;m=t[p++];)m(b,w,s,a);if(o){if(y>0)for(;g--;)b[g]||w[g]||(w[g]=S.call(u));w=we(w)}N.apply(u,w),l&&!o&&w.length>0&&y+t.length>1&&oe.uniqueSort(u)}return l&&(k=T,c=x),b};return n?ae(o):o}(o,r))).selector=e}return a},u=oe.select=function(e,t,n,r){var o,u,c,l,f,d="function"==typeof e&&e,h=!r&&s(e=d.selector||e);if(n=n||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&v&&i.relative[u[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=X.needsContext.test(e)?0:u.length;o--&&(c=u[o],!i.relative[l=c.type]);)if((f=i.find[l])&&(r=f(c.matches[0].replace(Z,ee),Q.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=r.length&&ye(u)))return N.apply(n,r),n;break}}return(d||a(e,h))(r,t,!v,n,!t||Q.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(_).join("")===w,n.detectDuplicates=!!f,d(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(L,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(n);C.find=O,C.expr=O.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=O.uniqueSort,C.text=O.getText,C.isXMLDoc=O.isXML,C.contains=O.contains,C.escapeSelector=O.escape;var _=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&C(e).is(n))break;i.push(e)}return i},P=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},E=C.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return g(t)?C.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?C.grep(e,function(e){return e===t!==n}):"string"!=typeof t?C.grep(e,function(e){return f.call(t,e)>-1!==n}):C.filter(t,e,n)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<i;t++)if(C.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,r[t],n);return i>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&E.test(e)?C(e):e||[],!1).length}});var A,M=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:M.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),D.test(i[1])&&C.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,A=C(s);var L=/^(?:parents|prev(?:Until|All))/,B={children:!0,contents:!0,next:!0,prev:!0};function F(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&C(e);if(!E.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(C(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return F(e,"nextSibling")},prev:function(e){return F(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return P((e.parentNode||{}).firstChild,e)},children:function(e){return P(e.firstChild)},contents:function(e){return S(e,"iframe")?e.contentDocument:(S(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(e,t){C.fn[e]=function(n,i){var r=C.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=C.filter(i,r)),this.length>1&&(B[e]||C.uniqueSort(r),L.test(e)&&r.reverse()),this.pushStack(r)}});var R=/[^\x20\t\r\n\f]+/g;function H(e){return e}function I(e){throw e}function $(e,t,n,i){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(R)||[],function(e,n){t[n]=!0}),t}(e):C.extend({},e);var t,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){C.each(n,function(n,i){g(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==k(i)&&t(i)})}(arguments),n&&!t&&u()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;(n=C.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?C.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return C.Deferred(function(n){C.each(t,function(t,i){var r=g(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var o=0;function s(e,t,i,r){return function(){var a=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=i.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(c)?r?c.call(n,s(o,t,H,r),s(o,t,I,r)):(o++,c.call(n,s(o,t,H,r),s(o,t,I,r),s(o,t,H,t.notifyWith))):(i!==H&&(a=void 0,u=[n]),(r||t.resolveWith)(a,u))}},l=r?c:function(){try{c()}catch(n){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(i!==I&&(a=void 0,u=[n]),t.rejectWith(a,u))}};e?l():(C.Deferred.getStackHook&&(l.stackTrace=C.Deferred.getStackHook()),n.setTimeout(l))}}return C.Deferred(function(n){t[0][3].add(s(0,n,g(r)?r:H,n.notifyWith)),t[1][3].add(s(0,n,g(e)?e:H)),t[2][3].add(s(0,n,g(i)?i:I))}).promise()},promise:function(e){return null!=e?C.extend(e,r):r}},o={};return C.each(t,function(e,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=u.call(arguments),o=C.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&($(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||g(r[n]&&r[n].then)))return o.then();for(;n--;)$(r[n],s(n),o.reject);return o.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&q.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){n.setTimeout(function(){throw e})};var W=C.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),C.ready()}C.fn.ready=function(e){return W.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||W.resolveWith(s,[C]))}}),C.ready.then=W.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(C.ready):(s.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var z=function(e,t,n,i,r,o,s){var a=0,u=e.length,c=null==n;if("object"===k(n))for(a in r=!0,n)z(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,g(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;a<u;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):u?t(e[0],n):o},V=/^-ms-/,X=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function J(e){return e.replace(V,"ms-").replace(X,G)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=C.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[J(t)]=n;else for(i in t)r[J(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][J(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(J):(t=J(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||C.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var Q=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=J(i.slice(5)),ne(o,i,r[i]));Q.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Z.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Q.get(e,t),n&&(!i||Array.isArray(n)?i=Q.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,r=n.shift(),o=C._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){C.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:C.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each(function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=C.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&C.contains(e.ownerDocument,e)&&"none"===C.css(e,"display")},ae=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r};function ue(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},u=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),l=(C.cssNumber[t]||"px"!==c&&+u)&&re.exec(C.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;s--;)C.style(e,t,l+c),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),l/=o;l*=2,C.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=l,i.end=r)),r}var ce={};function le(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=C.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function fe(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=Q.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&se(i)&&(r[o]=le(i))):"none"!==n&&(r[o]="none",Q.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}C.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?C(this).show():C(this).hide()})}});var de=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?C.merge([e],n):n}function ye(e,t){for(var n=0,i=e.length;n<i;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ve.optgroup=ve.option,ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td;var ge=/<|&#?\w+;/;function be(e,t,n,i,r){for(var o,s,a,u,c,l,f=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((o=e[h])||0===o)if("object"===k(o))C.merge(d,o.nodeType?[o]:o);else if(ge.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(he.exec(o)||["",""])[1].toLowerCase(),u=ve[a]||ve._default,s.innerHTML=u[1]+C.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;C.merge(d,s.childNodes),(s=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",h=0;o=d[h++];)if(i&&C.inArray(o,i)>-1)r&&r.push(o);else if(c=C.contains(o.ownerDocument,o),s=me(f.appendChild(o),"script"),c&&ye(s),n)for(l=0;o=s[l++];)pe.test(o.type||"")&&n.push(o);return f}!function(){var e=s.createDocumentFragment().appendChild(s.createElement("div")),t=s.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),y.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var we=s.documentElement,xe=/^key/,ke=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function je(){return!1}function Oe(){try{return s.activeElement}catch(e){}}function _e(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)_e(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=je;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,r,i,n)})}C.event={global:{},add:function(e,t,n,i,r){var o,s,a,u,c,l,f,d,h,p,v,m=Q.get(e);if(m)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&C.find.matchesSelector(we,r),n.guid||(n.guid=C.guid++),(u=m.events)||(u=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)h=v=(a=Ce.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),h&&(f=C.event.special[h]||{},h=(r?f.delegateType:f.bindType)||h,f=C.event.special[h]||{},l=C.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:p.join(".")},o),(d=u[h])||((d=u[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,p,s)||e.addEventListener&&e.addEventListener(h,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,l):d.push(l),C.event.global[h]=!0)},remove:function(e,t,n,i,r){var o,s,a,u,c,l,f,d,h,p,v,m=Q.hasData(e)&&Q.get(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(h=v=(a=Ce.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),h){for(f=C.event.special[h]||{},d=u[h=(i?f.delegateType:f.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)l=d[o],!r&&v!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(d.splice(o,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));s&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,p,m.handle)||C.removeEvent(e,h,m.handle),delete u[h])}else for(h in u)C.event.remove(e,h+t[c],n,i,!0);C.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=C.event.fix(e),u=new Array(arguments.length),c=(Q.get(this,"events")||{})[a.type]||[],l=C.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=C.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((C.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,u))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?C(r,this).index(c)>-1:C.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,u<t.length&&a.push({elem:c,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Oe()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Oe()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S(this,"input"))return this.click(),!1},_default:function(e){return S(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:je,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:je,isPropagationStopped:je,isImmediatePropagationStopped:je,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ke.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||C.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),C.fn.extend({on:function(e,t,n,i){return _e(this,e,t,n,i)},one:function(e,t,n,i){return _e(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=je),this.each(function(){C.event.remove(this,e,n,t)})}});var Pe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ee=/<script|<style|<link/i,Se=/checked\s*(?:[^=]|=\s*.checked.)/i,De=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Ae(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Me(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,i,r,o,s,a,u,c;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),s=Q.set(t,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)C.event.add(t,r,c[r][n]);Z.hasData(e)&&(a=Z.access(e),u=C.extend({},a),Z.set(t,u))}}function Be(e,t){var n=t.nodeName.toLowerCase();"input"===n&&de.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,i){t=c.apply([],t);var r,o,s,a,u,l,f=0,d=e.length,h=d-1,p=t[0],v=g(p);if(v||d>1&&"string"==typeof p&&!y.checkClone&&Se.test(p))return e.each(function(r){var o=e.eq(r);v&&(t[0]=p.call(this,r,o.html())),Fe(o,t,n,i)});if(d&&(o=(r=be(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=C.map(me(r,"script"),Ae)).length;f<d;f++)u=r,f!==h&&(u=C.clone(u,!0,!0),a&&C.merge(s,me(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,C.map(s,Me),f=0;f<a;f++)u=s[f],pe.test(u.type||"")&&!Q.access(u,"globalEval")&&C.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?C._evalUrl&&C._evalUrl(u.src):x(u.textContent.replace(De,""),l,u))}return e}function Re(e,t,n){for(var i,r=t?C.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||C.cleanData(me(i)),i.parentNode&&(n&&C.contains(i.ownerDocument,i)&&ye(me(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e.replace(Pe,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a=e.cloneNode(!0),u=C.contains(e.ownerDocument,e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=me(a),i=0,r=(o=me(e)).length;i<r;i++)Be(o[i],s[i]);if(t)if(n)for(o=o||me(e),s=s||me(a),i=0,r=o.length;i<r;i++)Le(o[i],s[i]);else Le(e,a);return(s=me(a,"script")).length>0&&ye(s,!u&&me(e,"script")),a},cleanData:function(e){for(var t,n,i,r=C.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[Q.expando]){if(t.events)for(i in t.events)r[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return z(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Fe(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)})},prepend:function(){return Fe(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Fe(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ee.test(e)&&!ve[(he.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(me(this)),n&&n.replaceChild(t,this))},e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){C.fn[e]=function(e){for(var n,i=[],r=C(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),C(r[s])[t](n),l.apply(i,n.get());return this.pushStack(i)}});var He=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},$e=new RegExp(oe.join("|"),"i");function qe(e,t,n){var i,r,o,s,a=e.style;return(n=n||Ie(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||C.contains(e.ownerDocument,e)||(s=C.style(e,t)),!y.pixelBoxStyles()&&He.test(s)&&$e.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function We(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",we.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);i="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),r=36===t(e.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",we.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,u,c=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===l.style.backgroundClip,C.extend(y,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var Ue=/^(none|table(?!-c[ea]).+)/,ze=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Xe={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Je=s.createElement("div").style;function Ye(e){var t=C.cssProps[e];return t||(t=C.cssProps[e]=function(e){if(e in Je)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Je)return e}(e)||e),t}function Ke(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Qe(e,t,n,i,r,o){var s="width"===t?1:0,a=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=C.css(e,n+oe[s],!0,r)),i?("content"===n&&(u-=C.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(u-=C.css(e,"border"+oe[s]+"Width",!0,r))):(u+=C.css(e,"padding"+oe[s],!0,r),"padding"!==n?u+=C.css(e,"border"+oe[s]+"Width",!0,r):a+=C.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))),u}function Ze(e,t,n){var i=Ie(e),r=qe(e,t,i),o="border-box"===C.css(e,"boxSizing",!1,i),s=o;if(He.test(r)){if(!n)return r;r="auto"}return s=s&&(y.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===C.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(r=parseFloat(r)||0)+Qe(e,t,n||(o?"border":"content"),s,i,r)+"px"}function et(e,t,n,i,r){return new et.prototype.init(e,t,n,i,r)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=J(t),u=ze.test(t),c=e.style;if(u||(t=Ye(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(C.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=J(t);return ze.test(t)||(t=Ye(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=qe(e,t,i)),"normal"===r&&t in Xe&&(r=Xe[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),C.each(["height","width"],function(e,t){C.cssHooks[t]={get:function(e,n,i){if(n)return!Ue.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Ze(e,t,i):ae(e,Ve,function(){return Ze(e,t,i)})},set:function(e,n,i){var r,o=Ie(e),s="border-box"===C.css(e,"boxSizing",!1,o),a=i&&Qe(e,t,i,s,o);return s&&y.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Qe(e,t,"border",!1,o)-.5)),a&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),Ke(0,n,a)}}}),C.cssHooks.marginLeft=We(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(e,t){C.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(C.cssHooks[e+t].set=Ke)}),C.fn.extend({css:function(e,t){return z(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=Ie(e),r=t.length;s<r;s++)o[t[s]]=C.css(e,t[s],!1,i);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,arguments.length>1)}}),C.Tween=et,et.prototype={constructor:et,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}},et.prototype.init.prototype=et.prototype,et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[C.cssProps[e.prop]]&&!C.cssHooks[e.prop]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},et.propHooks.scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=et.prototype.init,C.fx.step={};var tt,nt,it=/^(?:toggle|show|hide)$/,rt=/queueHooks$/;function ot(){nt&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ot):n.setTimeout(ot,C.fx.interval),C.fx.tick())}function st(){return n.setTimeout(function(){tt=void 0}),tt=Date.now()}function at(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ut(e,t,n){for(var i,r=(ct.tweeners[t]||[]).concat(ct.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function ct(e,t,n){var i,r,o=0,s=ct.prefilters.length,a=C.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var t=tt||st(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:tt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var i=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=J(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(l,c.opts.specialEasing);o<s;o++)if(i=ct.prefilters[o].call(c,e,l,c.opts))return g(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(l,ut,c),g(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(ct,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],ct.tweeners[n]=ct.tweeners[n]||[],ct.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,u,c,l,f="width"in t||"height"in t,d=this,h={},p=e.style,v=e.nodeType&&se(e),m=Q.get(e,"fxshow");for(i in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],it.test(r)){if(delete t[i],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;v=!0}h[i]=m&&m[i]||C.style(e,i)}if((u=!C.isEmptyObject(t))||!C.isEmptyObject(h))for(i in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=Q.get(e,"display")),"none"===(l=C.css(e,"display"))&&(c?l=c:(fe([e],!0),c=e.style.display||c,l=C.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===C.css(e,"float")&&(u||(d.done(function(){p.display=c}),null==c&&(l=p.display,c="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),u=!1,h)u||(m?"hidden"in m&&(v=m.hidden):m=Q.access(e,"fxshow",{display:c}),o&&(m.hidden=!v),v&&fe([e],!0),d.done(function(){for(i in v||fe([e]),Q.remove(e,"fxshow"),h)C.style(e,i,h[i])})),u=ut(v?m[i]:0,i,d),i in m||(m[i]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?ct.prefilters.unshift(e):ct.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=C.isEmptyObject(e),o=C.speed(t,n,i),s=function(){var t=ct(this,C.extend({},e),o);(r||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=C.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&rt.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||C.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=C.timers,s=i?i.length:0;for(n.finish=!0,C.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),C.each(["toggle","show","hide"],function(e,t){var n=C.fn[t];C.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(at(t,!0),e,i,r)}}),C.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){C.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),tt=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){nt||(nt=!0,ot())},C.fx.stop=function(){nt=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var lt,ft=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return z(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(r=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?lt:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),lt={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ft[t]||C.find.attr;ft[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=ft[s],ft[s]=r,r=null!=n(e,t,i)?s:null,ft[s]=o),r}});var dt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function pt(e){return(e.match(R)||[]).join(" ")}function vt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}C.fn.extend({prop:function(e,t){return z(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(e)||(t=C.propFix[t]||t,r=C.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,u=0;if(g(e))return this.each(function(t){C(this).addClass(e.call(this,t,vt(this)))});if((t=mt(e)).length)for(;n=this[u++];)if(r=vt(n),i=1===n.nodeType&&" "+pt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=pt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,u=0;if(g(e))return this.each(function(t){C(this).removeClass(e.call(this,t,vt(this)))});if(!arguments.length)return this.attr("class","");if((t=mt(e)).length)for(;n=this[u++];)if(r=vt(n),i=1===n.nodeType&&" "+pt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=pt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){C(this).toggleClass(e.call(this,n,vt(this),t),t)}):this.each(function(){var t,r,o,s;if(i)for(r=0,o=C(this),s=mt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=vt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+pt(vt(n))+" ").indexOf(t)>-1)return!0;return!1}});var yt=/\r/g;C.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=g(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,C(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=C.map(r,function(e){return null==e?"":e+""})),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=C.valHooks[r.type]||C.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(yt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:pt(C.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=C.makeArray(t),s=r.length;s--;)((i=r[s]).selected=C.inArray(C.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},y.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in n;var gt=/^(?:focusinfocus|focusoutblur)$/,bt=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,i,r){var o,a,u,c,l,f,d,h,v=[i||s],m=p.call(e,"type")?e.type:e,y=p.call(e,"namespace")?e.namespace.split("."):[];if(a=h=u=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!gt.test(m+C.event.triggered)&&(m.indexOf(".")>-1&&(m=(y=m.split(".")).shift(),y.sort()),l=m.indexOf(":")<0&&"on"+m,(e=e[C.expando]?e:new C.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:C.makeArray(t,[e]),d=C.event.special[m]||{},r||!d.trigger||!1!==d.trigger.apply(i,t))){if(!r&&!d.noBubble&&!b(i)){for(c=d.delegateType||m,gt.test(c+m)||(a=a.parentNode);a;a=a.parentNode)v.push(a),u=a;u===(i.ownerDocument||s)&&v.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)h=a,e.type=o>1?c:d.bindType||m,(f=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&f.apply(a,t),(f=l&&a[l])&&f.apply&&Y(a)&&(e.result=f.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),t)||!Y(i)||l&&g(i[m])&&!b(i)&&((u=i[l])&&(i[l]=null),C.event.triggered=m,e.isPropagationStopped()&&h.addEventListener(m,bt),i[m](),e.isPropagationStopped()&&h.removeEventListener(m,bt),C.event.triggered=void 0,u&&(i[l]=u)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),y.focusin||C.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Q.access(i,t);r||i.addEventListener(e,n,!0),Q.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Q.access(i,t)-1;r?Q.access(i,t,r):(i.removeEventListener(e,n,!0),Q.remove(i,t))}}});var wt=n.location,xt=Date.now(),kt=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Ct=/\[\]$/,Tt=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function _t(e,t,n,i){var r;if(Array.isArray(t))C.each(t,function(t,r){n||Ct.test(e)?i(e,r):_t(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==k(t))i(e,t);else for(r in t)_t(e+"["+r+"]",t[r],n,i)}C.param=function(e,t){var n,i=[],r=function(e,t){var n=g(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){r(this.name,this.value)});else for(n in e)_t(n,e[n],t,r);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Ot.test(this.nodeName)&&!jt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}}):{name:t.name,value:n.replace(Tt,"\r\n")}}).get()}});var Pt=/%20/g,Et=/#.*$/,St=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,At=/^\/\//,Mt={},Lt={},Bt="*/".concat("*"),Ft=s.createElement("a");function Rt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(R)||[];if(g(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ht(e,t,n,i){var r={},o=e===Lt;function s(a){var u;return r[a]=!0,C.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||o||r[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),s(c),!1)}),u}return s(t.dataTypes[0])||!r["*"]&&s("*")}function It(e,t){var n,i,r=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&C.extend(!0,e,i),e}Ft.href=wt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?It(It(e,C.ajaxSettings),t):It(C.ajaxSettings,e)},ajaxPrefilter:Rt(Mt),ajaxTransport:Rt(Lt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,u,c,l,f,d,h,p=C.ajaxSetup({},t),v=p.context||p,m=p.context&&(v.nodeType||v.jquery)?C(v):C.event,y=C.Deferred(),g=C.Callbacks("once memory"),b=p.statusCode||{},w={},x={},k="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(l){if(!a)for(a={};t=Dt.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==l&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return i&&i.abort(t),j(0,t),this}};if(y.promise(T),p.url=((e||p.url||wt.href)+"").replace(At,wt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){c=s.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Ft.protocol+"//"+Ft.host!=c.protocol+"//"+c.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=C.param(p.data,p.traditional)),Ht(Mt,p,t,T),l)return T;for(d in(f=C.event&&p.global)&&0==C.active++&&C.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Nt.test(p.type),r=p.url.replace(Et,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Pt,"+")):(h=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(kt.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(St,"$1"),h=(kt.test(r)?"&":"?")+"_="+xt+++h),p.url=r+h),p.ifModified&&(C.lastModified[r]&&T.setRequestHeader("If-Modified-Since",C.lastModified[r]),C.etag[r]&&T.setRequestHeader("If-None-Match",C.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Bt+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(!1===p.beforeSend.call(v,T,p)||l))return T.abort();if(k="abort",g.add(p.complete),T.done(p.success),T.fail(p.error),i=Ht(Lt,p,t,T)){if(T.readyState=1,f&&m.trigger("ajaxSend",[T,p]),l)return T;p.async&&p.timeout>0&&(u=n.setTimeout(function(){T.abort("timeout")},p.timeout));try{l=!1,i.send(w,j)}catch(e){if(l)throw e;j(-1,e)}}else j(-1,"No Transport");function j(e,t,s,a){var c,d,h,w,x,k=t;l||(l=!0,u&&n.clearTimeout(u),i=void 0,o=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(w=function(e,t,n){for(var i,r,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,T,s)),w=function(e,t,n,i){var r,o,s,a,u,c={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=c[u+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(p,w,T,c),c?(p.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(C.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(C.etag[r]=x)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=w.state,d=w.data,c=!(h=w.error))):(h=k,!e&&k||(k="error",e<0&&(e=0))),T.status=e,T.statusText=(t||k)+"",c?y.resolveWith(v,[d,k,T]):y.rejectWith(v,[T,k,h]),T.statusCode(b),b=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?d:h]),g.fireWith(v,[T,k]),f&&(m.trigger("ajaxComplete",[T,p]),--C.active||C.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,t){C[t]=function(e,n,i,r){return g(n)&&(r=r||i,i=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:r,data:n,success:i},C.isPlainObject(e)&&e))}}),C._evalUrl=function(e){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){C(this).wrapInner(e.call(this,t))}):this.each(function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){C(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},qt=C.ajaxSettings.xhr();y.cors=!!qt&&"withCredentials"in qt,y.ajax=qt=!!qt,C.ajaxTransport(function(e){var t,i;if(y.cors||qt&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o($t[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=C("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Wt=[],Ut=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||C.expando+"_"+xt++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,i){var r,o,s,a=!1!==e.jsonp&&(Ut.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ut.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ut,"$1"+r):!1!==e.jsonp&&(e.url+=(kt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||C.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?C(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Wt.push(r)),s&&g(o)&&o(s[0]),s=o=void 0}),"script"}),y.createHTMLDocument=function(){var e=s.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((i=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(i)):t=s),r=D.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=be([e],t,o),o&&o.length&&C(o).remove(),C.merge([],r.childNodes)));var i,r,o},C.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=pt(e.slice(a)),e=e.slice(0,a)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&C.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.expr.pseudos.animated=function(e){return C.grep(C.timers,function(t){return e===t.elem}).length},C.offset={setOffset:function(e,t,n){var i,r,o,s,a,u,c=C.css(e,"position"),l=C(e),f={};"static"===c&&(e.style.position="relative"),a=l.offset(),o=C.css(e,"top"),u=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(s=(i=l.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),g(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):l.css(f)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){C.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),r.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-C.css(i,"marginTop",!0),left:t.left-r.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||we})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;C.fn[e]=function(i){return z(this,function(e,i,r){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),C.each(["top","left"],function(e,t){C.cssHooks[t]=We(y.pixelPosition,function(e,n){if(n)return n=qe(e,t),He.test(n)?C(e).position()[t]+"px":n})}),C.each({Height:"height",Width:"width"},function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){C.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return z(this,function(t,n,r){var o;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?C.css(t,n,a):C.style(t,n,r,a)},t,s?r:void 0,s)}})}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),C.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),C.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return i=u.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(u.call(arguments)))}).guid=e.guid=e.guid||C.guid++,r},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=S,C.isFunction=g,C.isWindow=b,C.camelCase=J,C.type=k,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return C}.apply(t,[]))||(e.exports=i);var zt=n.jQuery,Vt=n.$;return C.noConflict=function(e){return n.$===C&&(n.$=Vt),e&&n.jQuery===C&&(n.jQuery=zt),C},r||(n.jQuery=n.$=C),C})},function(e,t,n){"use strict";function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.times=t.getString=t.isObject=t.isJson=t.mergeObject=void 0;t.mergeObject=function(e,t){return t&&Object.keys(t).forEach(function(n){e[n]&&e[n]!=={}||(e[n]=t[n])}),e};t.isJson=function(e){try{var t=JSON.parse(e);return t instanceof Array||t instanceof Object}catch(e){return!1}};t.isObject=function(e){return"object"===i(e)&&null!==e};t.getString=function(e){return null!=e?e.toString():void 0};t.times=function(e,t){for(var n=0;n<e;n++)t()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseType=function(e){var t=r,n=e;u.test(e)?n=e.slice(1,-1):"true"===e?n=!0:"false"===e?n=!1:"null"===e?n=null:"undefined"===e?n=void 0:isNaN(Number(e))?(0,i.isJson)(e)?n=JSON.parse(e):t=o:n=Number(e);return{type:t,value:n}},t.parseTemplate=function(e,t){var n=null,i=e.length,r=0,o=0,u=t[0],c=t[1];for(;o<i;){if((r=e.indexOf(u,o))<0){n&&n.push({type:s,value:e.slice(o)});break}if(n=n||[],r>0&&o<r&&n.push({type:s,value:e.slice(o,r)}),o=r+u.length,(r=e.indexOf(c,o))<0){var l=e.slice(o-c.length),f=n[n.length-1];f&&f.type===s?f.value+=l:n.push({type:s,value:l});break}var d=e.slice(o,r).trim();n.push({type:a,value:d}),o=r+c.length}return n},t.BINDING=t.TEXT=t.KEYPATH=t.PRIMITIVE=void 0;var i=n(3),r=0;t.PRIMITIVE=r;var o=1;t.KEYPATH=o;var s=0;t.TEXT=s;var a=1;t.BINDING=a;var u=/^'.*'$|^".*"$/},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.get=void 0;var i=n(1);t.get=function(e,t){return i.Utils.isObject(e)||i.Utils.isArray(e)?e[t]:null}},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.Dispatcher=void 0;var o=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"events",{}),e.instance)return e.instance;e.instance=this}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"on",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"off",value:function(e,t){e in this.events!=!1&&this.events[e].splice(this.events[e].indexOf(t),1)}},{key:"trigger",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];if(e in this.events!=!1)for(var r in this.events[e])this.events[e][r]&&this.events[e][r].apply(this,Array.prototype.slice.call(arguments,1))}}]),e}();t.Dispatcher=o,r(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransition=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),r=n(1);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"$oldContainer",void 0),s(this,"$newContainer",void 0),s(this,"newContainerLoading",void 0),s(this,"deferred",void 0),s(this,"debug",(0,i.default)("barba:BaseTransition"))}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.deferred=r.Utils.deferred();var i=r.Utils.deferred();return this.newContainerLoading=i.promise,this.start(),t.then(function(e){n.$newContainer=e,i.resolve()}),this.deferred.promise}},{key:"done",value:function(){this.debug("done"),this.$oldContainer.remove(),this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}]),e}();t.BaseTransition=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var i=n(9),r=n(17),o=n(69),s=n(4);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c={routine:function(e,t){e.data=null!=t?t:""}},l=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g,f=function e(t,n){var r=!1;if(3===(n=n).nodeType){if(!n.data)throw new Error("node has no data");var o=(0,s.parseTemplate)(n.data,i.tinybind.templateDelimiters);if(o){if(!n.parentNode)throw new Error("Node has no parent node");for(var a=0;a<o.length;a++){var u=o[a],l=document.createTextNode(u.value);n.parentNode.insertBefore(l,n),1===u.type&&t.buildBinding(l,null,u.value,c,null)}n.parentNode.removeChild(n)}r=!0}else 1===n.nodeType&&(r=t.traverse(n));if(!r&&n.childNodes)for(var f=0;f<n.childNodes.length;f++)e(t,n.childNodes[f])},d=function(e,t){var n=e.binder&&e.binder.priority||0;return(t.binder&&t.binder.priority||0)-n},h=function(e){return e.trim()},p=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"els",void 0),u(this,"models",void 0),u(this,"options",void 0),u(this,"bindings",[]),u(this,"componentView",null),t instanceof Array?this.els=t:this.els=[t],this.models=n,this.options=i,this.build()}return function(e,t,n){t&&a(e.prototype,t),n&&a(e,n)}(e,[{key:"buildBinding",value:function(e,t,n,i,o){var s=n.match(l);if(null===s)throw new Error("no matches");var a=s.map(h),u=a.shift()||null;this.bindings.push(new r.Binding(this,e,t,u,i,o,a))}},{key:"build",value:function(){this.bindings=[];var e,t,n=this.els;for(e=0,t=n.length;e<t;e++)f(this,n[e]);this.bindings.sort(d)}},{key:"traverse",value:function(e){for(var t,n,r,s,a=i.tinybind._fullPrefix,u="SCRIPT"===e.nodeName||"STYLE"===e.nodeName,c=e.attributes,l=[],f=this.options.starBinders,d=0,h=c.length;d<h;d++){var p=c[d];if(0===p.name.indexOf(a)){if(t=p.name.slice(a.length),s=[],!(n=this.options.binders[t]))for(var v=0;v<f.length;v++)if(r=f[v],t.slice(0,r.length-1)===r.slice(0,-1)){n=this.options.binders[r],s.push(t.slice(r.length-1));break}if(n||(n=i.tinybind.fallbackBinder),n.block)return this.buildBinding(e,t,p.value,n,s),e.removeAttribute(p.name),!0;l.push({attr:p,binder:n,type:t,args:s})}}for(var m=0;m<l.length;m++){var y=l[m];this.buildBinding(e,y.type,y.attr.value,y.binder,y.args),e.removeAttribute(y.attr.name)}return u||(t=e.nodeName.toLowerCase(),this.options.components[t]&&!e._bound&&(this.bindings.push(new o.ComponentBinding(this,e,t)),u=!0)),u}},{key:"bind",value:function(){this.bindings.forEach(function(e){e.bind()})}},{key:"unbind",value:function(){Array.isArray(this.bindings)&&this.bindings.forEach(function(e){e.unbind()}),this.componentView&&this.componentView.unbind()}},{key:"sync",value:function(){this.bindings.forEach(function(e){e.sync()})}},{key:"publish",value:function(){this.bindings.forEach(function(e){e.binder&&e.binder.publishes&&e.publish()})}},{key:"update",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(t).forEach(function(n){e.models[n]=t[n]}),this.bindings.forEach(function(e){e.update&&e.update(t)})}}]),e}();t.View=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.tinybind=void 0;var i=n(3),r=n(4),o=n(71),s=n(70),a=n(18),u=n(8),c=n(16),l={binders:a.binders,components:{},formatters:o.formatters,adapters:{".":s.adapter},_prefix:"rv",_fullPrefix:"rv-",get prefix(){return this._prefix},set prefix(e){this._prefix=e,this._fullPrefix=e+"-"},parseTemplate:r.parseTemplate,parseType:r.parseType,templateDelimiters:["{","}"],rootInterface:".",preloadData:!0,handler:function(e,t,n){this.call(e,t,n.view.models)},fallbackBinder:function(e,t){if(!this.type)throw new Error("Can't set atttribute of "+this.type);null!=t?e.setAttribute(this.type,t):e.removeAttribute(this.type)},configure:function(e){var t=this;e&&Object.keys(e).forEach(function(n){var r=e[n];switch(n){case"binders":(0,i.mergeObject)(t.binders,r);break;case"formatters":(0,i.mergeObject)(t.formatters,r);break;case"components":(0,i.mergeObject)(t.components,r);break;case"adapters":case"adapter":(0,i.mergeObject)(t.adapters,r);break;case"prefix":t.prefix=r;break;case"parseTemplate":t.parseTemplate=r;break;case"parseType":t.parseType=r;break;case"prefix":t.prefix=r;break;case"templateDelimiters":t.templateDelimiters=r;break;case"rootInterface":t.rootInterface=r;break;case"preloadData":t.preloadData=r;break;default:console.warn("Option not supported",n,r)}})},init:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t||(t=document.createElement("div"));var i=l.components[e];t.innerHTML=i.template.call(l,t);var r=i.initialize.call(l,t,n),o=l.bind(t,r);return o.bind(),o},bind:function(e,t,n){var r={binders:Object.create(null),formatters:Object.create(null),components:Object.create(null),adapters:Object.create(null),starBinders:Object.create(null),rootInterface:Object.create(null)};t=t||Object.create(null),n&&((0,i.mergeObject)(r.binders,n.binders),(0,i.mergeObject)(r.formatters,n.formatters),(0,i.mergeObject)(r.components,n.components),(0,i.mergeObject)(r.adapters,n.adapters)),r.prefix=n&&n.prefix?n.prefix:l.prefix,r.templateDelimiters=n&&n.templateDelimiters?n.templateDelimiters:l.templateDelimiters,r.rootInterface=n&&n.rootInterface?n.rootInterface:l.rootInterface,r.preloadData=n&&n.preloadData?n.preloadData:l.preloadData,r.handler=n&&n.handler?n.handler:l.handler,(0,i.mergeObject)(r.binders,l.binders),(0,i.mergeObject)(r.formatters,l.formatters),(0,i.mergeObject)(r.components,l.components),(0,i.mergeObject)(r.adapters,l.adapters),r.starBinders=Object.keys(r.binders).filter(function(e){return e.indexOf("*")>0}),c.Observer.updateOptions(r);var o=new u.View(e,t,r);return o.bind(),o}};t.tinybind=l;var f=l;t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pjax=void 0;var i=n(6),r=n(1),o=n(14),s=n(13),a=n(11),u=n(12);function c(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function l(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"dom",new a.Dom),f(this,"history",new u.HistoryManager),f(this,"cacheEnabled",void 0),f(this,"transitionProgress",!1),f(this,"dispatcher",new i.Dispatcher),f(this,"transition",void 0),this.transition=t||new s.HideShowTransition}return l(e,null,[{key:"preventCheck",value:function(e,t){if(!window.history.pushState)return!1;var n=this.getHref(t);return!(!t||!n)&&(!(e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey)&&((!t.target||"_blank"!==t.target)&&(window.location.protocol===t.protocol&&window.location.hostname===t.hostname&&(r.Utils.getPort()===r.Utils.getPort(t.port)&&(!(n.indexOf("#")>-1)&&((!t.getAttribute||"string"!=typeof t.getAttribute("download"))&&(r.Utils.cleanLink(n)!==r.Utils.cleanLink(location.href)&&!t.classList.contains(this.ignoreClassLink))))))))}},{key:"getHref",value:function(e){if(e)return e.getAttribute&&"string"==typeof e.getAttribute("xlink:href")?e.getAttribute("xlink:href"):"string"==typeof e.href?e.href:void 0}}]),l(e,[{key:"start",value:function(){this.init()}},{key:"getCurrentUrl",value:function(){return r.Utils.cleanLink(r.Utils.getUrl())}},{key:"goTo",value:function(e,t){return t?window.open(e,"_blank").focus():0!==e.indexOf("http")?(window.history.pushState(null,null,e),this.onStateChange()):void this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition}},{key:"bindEvents",value:function(){window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(e){e instanceof Location&&(window.location=e),"string"==typeof e&&(window.location.href=e)}},{key:"load",value:function(t){var n,i=r.Utils.deferred(),o=this;return(n=e.cache.get(t))||(n=r.Utils.xhr(t),e.cache.set(t,n)),n.then(function(t){var n=o.dom.parseResponse(t);o.dom.putContainer(n),o.cacheEnabled||e.cache.reset(),i.resolve(n)},function(){o.forceGoTo(t),i.reject()}),i.promise}},{key:"onLinkClick",value:function(t){for(var n=t.target;n&&!e.getHref(n);)n=n.parentNode;if(e.preventCheck(t,n)){t.stopPropagation(),t.preventDefault(),this.dispatcher.trigger("linkClicked",n,t);var i=e.getHref(n);this.goTo(i)}}},{key:"onStateChange",value:function(){var e=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(e),this.history.currentStatus().url===e)return!1;this.history.add(e);var t=this.load(e),n=this.getTransition();this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.history.currentStatus(),this.history.prevStatus());var i=n.init(this.dom.getContainer(),t);t.then(this.onNewContainerLoaded.bind(this)),i.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(e){this.history.currentStatus().namespace=this.dom.getNamespace(e),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),this.history.prevStatus(),e,this.dom.currentHTML,!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(){var e=this.dom.getContainer();this.dom.getWrapper().attr("aria-live","polite"),this.history.add(this.getCurrentUrl(),this.dom.getNamespace(e)),this.dispatcher.trigger("initStateChange",this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),{},e,this.dom.currentHTML,!0),this.dispatcher.trigger("transitionCompleted",this.history.currentStatus()),this.bindEvents()}}]),e}();t.Pjax=d,f(d,"ignoreClassLink","no-barba"),f(d,"cache",new o.BaseCache)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dom=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(2));function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"dataNamespace","namespace"),o(this,"wrapperId","barba-wrapper"),o(this,"containerClass","barba-container"),o(this,"currentHTML",void 0)}return function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(e,[{key:"parseResponse",value:function(e){this.currentHTML=e;var t=(0,i.default)(i.default.parseHTML(e)),n=t.filter("title");return n.length&&(document.title=n.text()),this.getContainer(t)}},{key:"getWrapper",value:function(){var e=(0,i.default)("#"+this.wrapperId);if(!e)throw new Error("Barba.js: wrapper not found!");return e}},{key:"getContainer",value:function(e){if(e||(e=(0,i.default)(document.body)),!e)throw new Error("Barba.js: DOM not ready!");var t=this.parseContainer(e);if(!t)throw new Error("Barba.js: no container found");return t}},{key:"getNamespace",value:function(e){return e&&e.data()?e.data("namespace"):null}},{key:"putContainer",value:function(e){e.css("visibility","hidden"),this.getWrapper().append(e)}},{key:"parseContainer",value:function(e){return e.find("."+this.containerClass)}}]),e}();t.Dom=s},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryManager=void 0;var o=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"history",new Array),e.instance?e.instance:(e.instance=this,e.instance)}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){var e=this.history;return e.length<2?null:e[e.length-2]}},{key:"add",value:function(e,t){t||(t=void 0),this.history.push({namespace:t,url:e})}}]),e}();t.HistoryManager=o,r(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return i.CustomTransition}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return r.BaseTransition}}),Object.defineProperty(t,"ITransition",{enumerable:!0,get:function(){return r.ITransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return o.HideShowTransition}});var i=n(67),r=n(7),o=n(66)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCache=void 0;var i=n(1);function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(this,"data",void 0),this.data={}}return function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(e,[{key:"set",value:function(e,t){return this.data[e]=t}},{key:"get",value:function(e){return this.data[e]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(e){return i.Utils.extend(!1,this,e)}}]),e}();t.BaseCache=o},function(e,t,n){"use strict";n(15)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Observer=void 0;var i,r,o,s=n(3);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"keypath",void 0),u(this,"callback",void 0),u(this,"objectPath",void 0),u(this,"obj",void 0),u(this,"target",void 0),u(this,"key",void 0),u(this,"tokens",void 0),this.keypath=n,this.callback=i,this.objectPath=[];var r=this.parse();this.key=r.key,this.tokens=r.tokens,this.obj=this.getRootObject(t),this.target=this.realize(),(0,s.isObject)(this.target)&&this.set(!0,this.key,this.target,this.callback)}return function(e,t,n){t&&a(e.prototype,t),n&&a(e,n)}(e,[{key:"parse",value:function(){var t,n;if(r.length||function(e){throw new Error("[Observer] "+e)}("Must define at least one adapter interface."),~r.indexOf(this.keypath[0])?(n=this.keypath[0],t=this.keypath.substr(1)):(n=o,t=this.keypath),this.tokens=e.tokenize(t,n),!this.tokens.length)throw new Error("no tokens");return this.key=this.tokens.pop(),{key:this.key,tokens:this.tokens}}},{key:"realize",value:function(){for(var e,t,n=this.obj,i=-1,r=0;r<this.tokens.length;r++)t=this.tokens[r],(0,s.isObject)(n)?(void 0!==this.objectPath[r]?n!==(e=this.objectPath[r])&&(this.set(!1,t,e,this),this.set(!0,t,n,this),this.objectPath[r]=n):(this.set(!0,t,n,this),this.objectPath[r]=n),n=this.get(t,n)):(-1===i&&(i=r),(e=this.objectPath[r])&&this.set(!1,t,e,this));return-1!==i&&this.objectPath.splice(i),n}},{key:"sync",value:function(){var e,t,n;(e=this.realize())!==this.target?((0,s.isObject)(this.target)&&this.set(!1,this.key,this.target,this.callback),(0,s.isObject)(e)&&this.set(!0,this.key,e,this.callback),t=this.value(),this.target=e,((n=this.value())!==t||n instanceof Function)&&this.callback.sync()):e instanceof Array&&this.callback.sync()}},{key:"value",value:function(){if((0,s.isObject)(this.target))return this.get(this.key,this.target)}},{key:"setValue",value:function(e){(0,s.isObject)(this.target)&&i[this.key.i].set(this.target,this.key.path,e)}},{key:"get",value:function(e,t){return i[e.i].get(t,e.path)}},{key:"set",value:function(e,t,n,r){e?i[t.i].observe(n,t.path,r):i[t.i].unobserve(n,t.path,r)}},{key:"unobserve",value:function(){for(var e,t,n=0;n<this.tokens.length;n++)t=this.tokens[n],(e=this.objectPath[n])&&this.set(!1,t,e,this);(0,s.isObject)(this.target)&&this.set(!1,this.key,this.target,this.callback)}},{key:"getRootObject",value:function(e){var t,n;if(!e.$parent)return e;for(t=this.tokens.length?this.tokens[0].path:this.key.path,n=e;n.$parent&&void 0===n[t];)n=n.$parent;return n}}]),e}();t.Observer=c,u(c,"updateOptions",function(e){i=e.adapters,r=Object.keys(i),o=e.rootInterface}),u(c,"tokenize",function(e,t){var n,i,o=[],s={i:t,path:""};for(n=0;n<e.length;n++)i=e.charAt(n),~r.indexOf(i)?(o.push(s),s={i:i,path:""}):s.path+=i;return o.push(s),o})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Binding=void 0;var i=n(4),r=n(16);function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g,c=/\s+/,l=function(){function e(t,n,i,r,o,s,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"value",void 0),a(this,"observer",void 0),a(this,"view",void 0),a(this,"el",void 0),a(this,"type",void 0),a(this,"binder",void 0),a(this,"formatters",void 0),a(this,"formatterObservers",void 0),a(this,"keypath",void 0),a(this,"args",void 0),a(this,"model",void 0),a(this,"marker",void 0),a(this,"_bound",void 0),a(this,"customData",void 0),this.view=t,this.el=n,this.type=i,this.keypath=r,this.binder=o,this.args=s,this.formatters=u,this.formatterObservers={},this.model=void 0,this.customData={}}return function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(e,[{key:"observe",value:function(e,t,n){return n?new r.Observer(e,t,n):new r.Observer(e,t,this)}},{key:"parseTarget",value:function(){if(this.keypath){var e=(0,i.parseType)(this.keypath);if(e.type===i.PRIMITIVE)this.value=e.value;else{if(e.type!==i.KEYPATH)throw new Error("Unknown type in token");this.observer=this.observe(this.view.models,this.keypath),this.model=this.observer.target}}else this.value=void 0}},{key:"getIterationAlias",value:function(e){return"%"+e+"%"}},{key:"parseFormatterArguments",value:function(e,t){var n=this;return e.map(i.parseType).map(function(e,r){var o=e.type,s=e.value;if(o===i.PRIMITIVE)return s;if(o===i.KEYPATH){var a=s;n.formatterObservers[t]||(n.formatterObservers[t]={});var u=n.formatterObservers[t][r];return u||(u=n.observe(n.view.models,a),n.formatterObservers[t][r]=u),u.value()}throw new Error("Unknown argument type")})}},{key:"formattedValue",value:function(e){var t=this;if(null===this.formatters)throw new Error("formatters is null");return this.formatters.reduce(function(e,n,i){var r=n.match(u);if(null===r)throw new Error("No args matched from FORMATTER_ARGS");var s=r.shift();if(!s)throw new Error("No id found in args");var a=t.view.options.formatters[s],c=t.parseFormatterArguments(r,i);return a&&a.read instanceof Function?e=a.read.apply(a,[e].concat(o(c))):a instanceof Function&&(e=a.apply(void 0,[e].concat(o(c)))),e},e)}},{key:"eventHandler",value:function(e){var t=this,n=this,i=n.view.options.handler;return function(r){if(!i)throw new Error("No handler defined in binding.view.options.handler");i.call(e,t,r,n)}}},{key:"set",value:function(e){var t;if(e instanceof Function&&!this.binder.function?(e=e,e=this.formattedValue(e.call(this.model))):(e=e,e=this.formattedValue(e)),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("routine")?(this.binder=this.binder,t=this.binder.routine):(this.binder=this.binder,t=this.binder),t instanceof Function&&t.call(this,this.el,e)}},{key:"sync",value:function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)}},{key:"publish",value:function(){var e=this;if(this.observer){if(null===this.formatters)throw new Error("formatters is null");var t=this.formatters.reduceRight(function(t,n,i){var r=n.split(c),s=r.shift();if(!s)throw new Error("id not defined");var a=e.view.options.formatters[s],u=e.parseFormatterArguments(r,i);return a&&a.publish&&(t=a.publish.apply(a,[t].concat(o(u)))),t},this.getValue(this.el));this.observer.setValue(t)}}},{key:"bind",value:function(){if(this.parseTarget(),this.binder&&this.binder.hasOwnProperty("bind")){if(this.binder=this.binder,!this.binder.bind&&"function"!=typeof this.binder.bind)throw new Error("the method bind is not a function");this.binder.bind.call(this,this.el)}this.view.options.preloadData&&this.sync()}},{key:"unbind",value:function(){var e=this;if(null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("bind")&&(this.binder=this.binder,this.binder.unbind&&this.binder.unbind.call(this,this.el)),this.observer&&this.observer.unobserve(),Object.keys(this.formatterObservers).forEach(function(t){var n=e.formatterObservers[t];Object.keys(n).forEach(function(e){n[e].unobserve()})}),this.formatterObservers={}}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.observer&&(this.model=this.observer.target),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("update")&&(this.binder=this.binder,this.binder.update&&this.binder.update.call(this,e))}},{key:"getValue",value:function(e){if(null===this.binder)throw new Error("binder is null");if(this.binder.hasOwnProperty("getValue")){if(this.binder=this.binder,"function"!=typeof this.binder.getValue)throw new Error("getValue is not a function");return this.binder.getValue.call(this,e)}return function(e){var t=[];if("checkbox"===e.type)return e.checked;if("select-multiple"===e.type){var n=e.options;for(var i in n)if(n.hasOwnProperty(i)){var r=n[i];r.selected&&t.push(r.value)}return t}return e.value}(e)}}]),e}();t.Binding=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.binders=void 0;var i=n(8),r=n(3),o=function(e,t,n){var r=e.el.cloneNode(!0),o=new i.View(r,t,e.view.options);if(o.bind(),!e||!e.marker||null===e.marker.parentNode)throw new Error("No parent node for binding!");return e.marker.parentNode.insertBefore(r,n),o},s={"on-*":{function:!0,priority:1e3,bind:function(e){this.customData||(this.customData={handler:null})},unbind:function(e){if(this.customData.handler){if(null===this.args)throw new Error("args is null");e.removeEventListener(this.args[0],this.customData)}},routine:function(e,t){if(this.customData.handler){if(null===this.args)throw new Error("args is null");e.removeEventListener(this.args[0],this.customData.handler)}if(this.customData.handler=this.eventHandler(t),null===this.args)throw new Error("args is null");e.addEventListener(this.args[0],this.customData.handler)}},"each-*":{block:!0,priority:4e3,bind:function(e){if(this.marker)this.customData.iterated.forEach(function(e){e.bind()});else{if(this.marker=document.createComment(" tinybind: ".concat(this.type," ")),this.customData={iterated:[]},!e.parentNode)throw new Error("No parent node!");e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)}},unbind:function(e){this.customData.iterated&&this.customData.iterated.forEach(function(e){e.unbind()})},routine:function(e,t){var n=this;if(null===this.args)throw new Error("args is null");var i=this.args[0];if(t=t||[],!Array.isArray(t))throw new Error("each-"+i+" needs an array to iterate over, but it is");var s=e.getAttribute("index-property")||this.getIterationAlias(i);t.forEach(function(e,t){var r={$parent:n.view.models};r[s]=t,r[i]=e;var a=n.customData.iterated[t];if(a)if(a.models[i]!==e){for(var u,c,l=t+1;l<n.customData.iterated.length;l++)if((c=n.customData.iterated[l]).models[i]===e){u=l;break}if(void 0!==u){if(n.customData.iterated.splice(u,1),!n.marker||!n.marker.parentNode)throw new Error("Marker has no parent node");n.marker.parentNode.insertBefore(c.els[0],a.els[0]),c.models[s]=t}else c=o(n,r,a.els[0]);n.customData.iterated.splice(t,0,c)}else a.models[s]=t;else{var f;if(n.customData.iterated.length)f=n.customData.iterated[n.customData.iterated.length-1].els[0];else{if(!n.marker)throw new Error("previous not defined");f=n.marker}a=o(n,r,f.nextSibling),n.customData.iterated.push(a)}}),this.customData.iterated.length>t.length&&(0,r.times)(this.customData.iterated.length-t.length,function(){var e=n.customData.iterated.pop();if(e.unbind(),!n.marker||!n.marker.parentNode)throw new Error("Marker has no parent node");n.marker.parentNode.removeChild(e.els[0])}),"OPTION"===e.nodeName&&this.view.bindings&&this.view.bindings.forEach(function(e){n.marker&&e.el===n.marker.parentNode&&"value"===e.type&&e.sync()})},update:function(e){var t=this,n={};Object.keys(e).forEach(function(i){if(null===t.args)throw new Error("args is null");i!==t.args[0]&&(n[i]=e[i])}),this.customData.iterated.forEach(function(e){e.update(n)})}},"class-*":function(e,t){var n=" ".concat(e.className," ");if(null===this.args)throw new Error("args is null");t!==n.indexOf(" ".concat(this.args[0]," "))>-1&&(e.className=t?"".concat(e.className," ").concat(this.args[0]):n.replace(" ".concat(this.args[0]," ")," ").trim())},text:function(e,t){e.textContent=null!=t?t:""},html:function(e,t){e.innerHTML=null!=t?t:""},show:function(e,t){e.style.display=t?"":"none"},hide:function(e,t){e.style.display=t?"none":""},enabled:function(e,t){e.disabled=!t},disabled:function(e,t){e.disabled=!!t},checked:{publishes:!0,priority:2e3,bind:function(e){var t=this;this.customData={},this.customData.callback||(this.customData.callback=function(){t.publish()}),e.addEventListener("change",this.customData.callback)},unbind:function(e){e.removeEventListener("change",this.customData.callback)},routine:function(e,t){"radio"===e.type?e.checked=(0,r.getString)(e.value)===(0,r.getString)(t):e.checked=!!t}},value:{publishes:!0,priority:3e3,bind:function(e){if(this.customData={},this.customData.isRadio="INPUT"===e.tagName&&"radio"===e.type,!this.customData.isRadio){this.customData.event=e.getAttribute("event-name")||("SELECT"===e.tagName?"change":"input");var t=this;this.customData.callback||(this.customData.callback=function(){t.publish()}),e.addEventListener(this.customData.event,this.customData.callback)}},unbind:function(e){this.customData.isRadio||e.removeEventListener(this.customData.event,this.customData.callback)},routine:function(e,t){if(this.customData&&this.customData.isRadio)e.setAttribute("value",t);else if("select-multiple"===e.type&&e instanceof HTMLSelectElement){if(t instanceof Array)for(var n=0;n<e.length;n++){var i=e[n];i.selected=t.indexOf(i.value)>-1}}else(0,r.getString)(t)!==(0,r.getString)(e.value)&&(e.value=null!=t?t:"")}},if:{block:!0,priority:4e3,bind:function(e){if(this.customData={},this.marker)!1===this.customData.bound&&this.customData.nested&&this.customData.nested.bind();else{if(this.marker=document.createComment(" tinybind: "+this.type+" "+this.keypath+" "),this.customData.attached=!1,!e.parentNode)throw new Error("Element has no parent node");e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)}this.customData.bound=!0},unbind:function(){this.customData.nested&&(this.customData.nested.unbind(),this.customData.bound=!1)},routine:function(e,t){if((t=!!t)!==this.customData.attached)if(t){if(this.customData.nested||(this.customData.nested=new i.View(e,this.view.models,this.view.options),this.customData.nested.bind()),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.customData.attached=!0}else{if(!e.parentNode)throw new Error("Element has no parent node");e.parentNode.removeChild(e),this.customData.attached=!1}},update:function(e){this.customData.nested&&this.customData.nested.update(e)}}};t.binders=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tetris=void 0;var i,r,o=function(e){return e&&e.__esModule?e:{default:e}}(n(2));function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e[e.UP=0]="UP",e[e.RIGHT=1]="RIGHT",e[e.DOWN=2]="DOWN",e[e.LEFT=3]="LEFT",e[e.MIN=0]="MIN",e[e.MAX=3]="MAX"}(i||(i={})),function(e){e[e.ESC=27]="ESC",e[e.SPACE=32]="SPACE",e[e.LEFT=37]="LEFT",e[e.UP=38]="UP",e[e.RIGHT=39]="RIGHT",e[e.DOWN=40]="DOWN"}(r||(r={}));var u=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"$canvas",void 0),a(this,"$playBtn",void 0),a(this,"$rows",void 0),a(this,"$score",void 0),a(this,"ctx",void 0),a(this,"$ucanvas",void 0),a(this,"$menu",void 0),a(this,"uctx",void 0),a(this,"speed",{start:.6,decrement:.005,min:.1}),a(this,"nu",5),a(this,"vw",void 0),a(this,"vh",void 0),a(this,"aspectRatio",void 0),a(this,"orientation",void 0),a(this,"nx",void 0),a(this,"ny",void 0),a(this,"lineWidthXl",void 0),a(this,"dx",void 0),a(this,"dy",void 0),a(this,"dnextx",void 0),a(this,"dnexty",void 0),a(this,"blocks",void 0),a(this,"actions",void 0),a(this,"playing",void 0),a(this,"dt",void 0),a(this,"current",void 0),a(this,"next",void 0),a(this,"score",void 0),a(this,"vscore",void 0),a(this,"rows",void 0),a(this,"step",void 0),a(this,"i",{name:"i",size:4,blocks:[3840,8738,240,17476],color:"#0A9177"}),a(this,"j",{name:"j",size:3,blocks:[17600,36352,25664,3616],color:"#AB1A62"}),a(this,"l",{name:"l",size:3,blocks:[17504,3712,50240,11776],color:"#050506"}),a(this,"o",{name:"o",size:2,blocks:[52224,52224,52224,52224],color:"#0A9177"}),a(this,"s",{name:"s",size:3,blocks:[1728,35904,27648,17952],color:"#AB1A62"}),a(this,"t",{name:"t",size:3,blocks:[3648,19520,19968,17984],color:"#050506"}),a(this,"z",{name:"z",size:3,blocks:[3168,19584,50688,9792],color:"#0A9177"}),a(this,"pieces",new Array),a(this,"invalid",{court:!1,next:!1,rows:!1,score:!1}),this.$canvas=(0,o.default)("#canvas"),this.$playBtn=(0,o.default)("#start"),this.$rows=(0,o.default)("#rows"),this.$score=(0,o.default)("#score"),this.$ucanvas=(0,o.default)("#upcoming"),this.$menu=(0,o.default)("#menu"),!this.$canvas.length)throw new Error("$canvas not set");if(this.ctx=this.$canvas.get(0).getContext("2d"),null===this.ctx)throw new Error("ctx not set");this.uctx=this.$ucanvas.get(0).getContext("2d"),this.speed={start:.6,decrement:.005,min:.1},this.nu=5,this.vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0),this.vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0),this.aspectRatio=this.vh<this.vw?[1,2]:[2,1],this.orientation=this.aspectRatio[0]<this.aspectRatio[1]?"landscape":"portrait",this.nx=10*this.aspectRatio[1],this.ny=10*this.aspectRatio[0],this.lineWidthXl=3,this.$menu.hide(),this.resize(),this.reset()}return function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(e,[{key:"run",value:function(){var e=this;this.addEvents();var t=this.timestamp(),n=t;this.resize(),this.reset(),function i(){t=e.timestamp(),e.update(Math.min(1,(t-n)/1e3)),e.draw(),n=t,window.requestAnimationFrame(i)}()}},{key:"get",value:function(e){return document.getElementById(e)}},{key:"timestamp",value:function(){return(new Date).getTime()}},{key:"random",value:function(e,t){return e+Math.random()*(t-e)}},{key:"eachblock",value:function(e,t,n,i,r){var o,s=0,a=0,u=e.blocks[i];for(o=32768;o>0;o>>=1)u&o&&r(t+a,n+s),4==++a&&(a=0,++s)}},{key:"occupied",value:function(e,t,n,i){var r=this,o=!1;return this.eachblock(e,t,n,i,function(e,t){(e<0||e>=r.nx||t<0||t>=r.ny||r.getBlock(e,t))&&(o=!0)}),o}},{key:"unoccupied",value:function(e,t,n,i){return!this.occupied(e,t,n,i)}},{key:"randomPiece",value:function(){0===this.pieces.length&&(this.pieces=[this.i,this.i,this.i,this.i,this.j,this.j,this.j,this.j,this.l,this.l,this.l,this.l,this.o,this.o,this.o,this.o,this.s,this.s,this.s,this.s,this.t,this.t,this.t,this.t,this.z,this.z,this.z,this.z]);var e=this.pieces.splice(this.random(0,this.pieces.length-1),1)[0];return{type:e,dir:i.UP,x:Math.round(this.random(0,this.nx-e.size)),y:0}}},{key:"addEvents",value:function(){var e=this;document.addEventListener("keydown",function(t){e.keydown(t)},!1),window.addEventListener("resize",function(t){e.resize(t)},!1),this.$playBtn.click(function(){e.playing?e.lose():e.play()})}},{key:"resize",value:function(e){this.vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0),this.vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0),this.aspectRatio=this.vh<this.vw?[1,2]:[2,1],this.orientation=this.aspectRatio[0]<this.aspectRatio[1]?"landscape":"portrait",this.nx=10*this.aspectRatio[1],this.ny=10*this.aspectRatio[0],"landscape"===this.orientation?this.$canvas.height(this.$canvas.width()/this.aspectRatio[1]):this.$canvas.height(this.$canvas.width()*this.aspectRatio[0]),this.$canvas.attr("width",this.$canvas.width()),this.$canvas.attr("height",this.$canvas.height()),this.$ucanvas.attr("width",this.$ucanvas.width()),this.$ucanvas.attr("height",this.$ucanvas.height()),this.$ucanvas.height(this.$ucanvas.width()),this.dx=this.$canvas.width()/this.nx,this.dy=this.$canvas.height()/this.ny,this.dnextx=this.$ucanvas.width()/this.nu,this.dnexty=this.$ucanvas.height()/this.nu,this.invalidate(),this.invalidateNext()}},{key:"keydown",value:function(e){var t=!1;if(this.playing)switch(e.keyCode){case r.LEFT:this.actions.push(i.LEFT),t=!0;break;case r.RIGHT:this.actions.push(i.RIGHT),t=!0;break;case r.UP:this.actions.push(i.UP),t=!0;break;case r.DOWN:this.actions.push(i.DOWN),t=!0;break;case r.ESC:this.lose(),t=!0}else e.keyCode===r.SPACE&&(this.play(),t=!0);t&&e.preventDefault()}},{key:"swipe",value:function(e,t){if(this.playing)switch(t.direction){case"left":this.actions.push(i.LEFT),!0;break;case"right":this.actions.push(i.RIGHT),!0;break;case"up":this.actions.push(i.UP),!0;break;case"down":this.actions.push(i.DOWN),!0}}},{key:"tab",value:function(e,t){this.playing&&this.actions.push(i.UP)}},{key:"play",value:function(){this.$menu.show(),this.$playBtn.text("Give Up"),this.reset(),this.playing=!0}},{key:"lose",value:function(){this.$playBtn.text("Play"),this.setVisualScore(),this.playing=!1}},{key:"setVisualScore",value:function(e){this.vscore=e||this.score,this.invalidateScore()}},{key:"setScore",value:function(e){this.score=e,this.setVisualScore(e)}},{key:"addScore",value:function(e){this.score=this.score+e}},{key:"clearScore",value:function(){this.setScore(0)}},{key:"clearRows",value:function(){this.setRows(0)}},{key:"setRows",value:function(e){this.rows=e,this.step=Math.max(this.speed.min,this.speed.start-this.speed.decrement*this.rows),this.invalidateRows()}},{key:"addRows",value:function(e){this.setRows(this.rows+e)}},{key:"getBlock",value:function(e,t){return this.blocks&&this.blocks[e]?this.blocks[e][t]:null}},{key:"setBlock",value:function(e,t,n){this.blocks[e]=this.blocks[e]||[],this.blocks[e][t]=n,this.invalidate()}},{key:"clearBlocks",value:function(){this.blocks=[],this.invalidate()}},{key:"clearActions",value:function(){this.actions=new Array}},{key:"setCurrentPiece",value:function(e){this.current=e||this.randomPiece(),this.invalidate()}},{key:"setNextPiece",value:function(e){this.next=e||this.randomPiece(),this.invalidateNext()}},{key:"reset",value:function(){this.dt=0,this.clearActions(),this.clearBlocks(),this.clearRows(),this.clearScore(),this.setCurrentPiece(this.next),this.setNextPiece()}},{key:"update",value:function(e){this.playing&&(this.vscore<this.score&&this.setVisualScore(this.vscore+1),this.handle(this.actions.shift()),this.dt=this.dt+e,this.dt>this.step&&(this.dt=this.dt-this.step,this.drop()))}},{key:"handle",value:function(e){switch(e){case i.LEFT:this.move(i.LEFT);break;case i.RIGHT:this.move(i.RIGHT);break;case i.UP:this.rotate();break;case i.DOWN:this.drop()}}},{key:"move",value:function(e){var t=this.current.x,n=this.current.y;switch(e){case i.RIGHT:t+=1;break;case i.LEFT:t-=1;break;case i.DOWN:n+=1}return!!this.unoccupied(this.current.type,t,n,this.current.dir)&&(this.current.x=t,this.current.y=n,this.invalidate(),!0)}},{key:"rotate",value:function(){var e=this.current.dir===i.MAX?i.MIN:this.current.dir+1;this.unoccupied(this.current.type,this.current.x,this.current.y,e)&&(this.current.dir=e,this.invalidate())}},{key:"drop",value:function(){this.move(i.DOWN)||(this.addScore(10),this.dropPiece(),this.removeLines(),this.setCurrentPiece(this.next),this.setNextPiece(this.randomPiece()),this.clearActions(),this.occupied(this.current.type,this.current.x,this.current.y,this.current.dir)&&this.lose())}},{key:"dropPiece",value:function(){var e=this;this.eachblock(this.current.type,this.current.x,this.current.y,this.current.dir,function(t,n){e.setBlock(t,n,e.current.type)})}},{key:"removeLines",value:function(){var e,t,n,i=0;for(t=this.ny;t>0;--t){for(n=!0,e=0;e<this.nx;++e)this.getBlock(e,t)||(n=!1);n&&(this.removeLine(t),t+=1,i++)}i>0&&(this.addRows(i),this.addScore(100*Math.pow(2,i-1)))}},{key:"removeLine",value:function(e){var t,n;for(n=e;n>=0;--n)for(t=0;t<this.nx;++t)this.setBlock(t,n,0===n?null:this.getBlock(t,n-1))}},{key:"invalidate",value:function(){this.invalid.court=!0}},{key:"invalidateNext",value:function(){this.invalid.next=!0}},{key:"invalidateScore",value:function(){this.invalid.score=!0}},{key:"invalidateRows",value:function(){this.invalid.rows=!0}},{key:"draw",value:function(){this.ctx.save(),this.ctx.lineWidth=this.lineWidthXl,this.ctx.translate(this.lineWidthXl/2,this.lineWidthXl/2),this.drawCourt(),this.drawNext(),this.drawScore(),this.drawRows(),this.ctx.restore()}},{key:"drawCourt",value:function(){if(this.invalid.court){var e,t,n;for(this.ctx.clearRect(0,0,this.$canvas.width()||0,this.$canvas.height()||0),this.playing&&this.drawPiece(this.ctx,this.current.type,this.current.x,this.current.y,this.current.dir,this.dx,this.dy),t=0;t<this.ny;t++)for(e=0;e<this.nx;e++)(n=this.getBlock(e,t))&&this.drawBlock(this.ctx,e,t,n.color,this.dx,this.dy);this.ctx.strokeStyle="black",this.ctx.lineWidth=this.lineWidthXl,this.ctx.strokeRect(0,0,this.nx*this.dx-this.lineWidthXl,this.ny*this.dy-this.lineWidthXl),this.invalid.court=!1}}},{key:"drawNext",value:function(){if(this.invalid.next){var e=(this.nu-this.next.type.size)/2;this.uctx.save(),this.uctx.translate(this.lineWidthXl/2,this.lineWidthXl/2),this.uctx.clearRect(0,0,this.$ucanvas.width(),this.$ucanvas.height()),this.drawPiece(this.uctx,this.next.type,e,e,this.next.dir,this.dnextx,this.dnexty),this.uctx.strokeStyle="black",this.ctx.lineWidth=this.lineWidthXl,this.uctx.strokeRect(0,0,this.nu*this.dnextx-this.lineWidthXl,this.nu*this.dnexty-this.lineWidthXl),this.uctx.restore(),this.invalid.next=!1}}},{key:"drawScore",value:function(){this.invalid.score&&(this.$score.text(("00000"+Math.floor(this.vscore)).slice(-5)),this.invalid.score=!1)}},{key:"drawRows",value:function(){this.invalid.rows&&(this.$rows.text(this.rows),this.invalid.rows=!1)}},{key:"drawPiece",value:function(e,t,n,i,r,o,s){var a=this;this.eachblock(t,n,i,r,function(n,i){a.drawBlock(e,n,i,t.color,o,s)})}},{key:"drawBlock",value:function(e,t,n,i,r,o){e.fillStyle="transparent",e.lineWidth=this.lineWidthXl,e.strokeStyle=i,e.fillRect(t*r,n*o,r,o),e.strokeRect(t*r,n*o,r,o)}}]),e}();t.Tetris=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debug=void 0;var i=(0,function(e){return e&&e.__esModule?e:{default:e}}(n(0)).default)("formatter");t.debug=function(e){return i(e),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.match=void 0;t.match=function(e,t,n){return e.match(new RegExp(t,n))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contains=void 0;var i=n(1);t.contains=function(e,t,n){if(!i.Utils.isArray(e)||!i.Utils.isObject(e)||!i.Utils.isString(e))return!1;if(i.Utils.isUndefined(n)&&(n=t),i.Utils.isString(e))return-1!==e.indexOf(n);if(i.Utils.isArray(e))for(var r in e)if((e.hasOwnProperty(r).hasOwnProperty(t)||i.Utils.isDefined(e[r])&&i.Utils.isDefined(e[r][t]))&&e[r][t]===n)return!0;return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var i=n(5);t.last=function(e){return(0,i.get)(e,e.length-1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var i=n(5);t.first=function(e){return(0,i.get)(e,0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0;t.not=function(e){return!e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultFormatter=void 0;var i=n(1);t.defaultFormatter=function(e,t){return i.Utils.isDefined(e)?i.Utils.isString(e)?e.length>0?e:t:e:t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.or=void 0;t.or=function(e,t){return e||t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.elt=void 0;t.elt=function(e,t){return e<=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lt=void 0;t.lt=function(e,t){return e<t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ne=void 0;t.ne=function(e,t){return e!==t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.eq=void 0;t.eq=function(e,t){return e===t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.and=void 0;t.and=function(e,t){return e&&t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"and",{enumerable:!0,get:function(){return o.and}}),Object.defineProperty(t,"eq",{enumerable:!0,get:function(){return s.eq}}),Object.defineProperty(t,"ne",{enumerable:!0,get:function(){return a.ne}}),Object.defineProperty(t,"lt",{enumerable:!0,get:function(){return u.lt}}),Object.defineProperty(t,"elt",{enumerable:!0,get:function(){return c.elt}}),Object.defineProperty(t,"or",{enumerable:!0,get:function(){return l.or}}),Object.defineProperty(t,"defaultFormatter",{enumerable:!0,get:function(){return f.defaultFormatter}}),Object.defineProperty(t,"not",{enumerable:!0,get:function(){return d.not}}),Object.defineProperty(t,"first",{enumerable:!0,get:function(){return h.first}}),Object.defineProperty(t,"last",{enumerable:!0,get:function(){return p.last}}),Object.defineProperty(t,"contains",{enumerable:!0,get:function(){return v.contains}}),Object.defineProperty(t,"get",{enumerable:!0,get:function(){return m.get}}),Object.defineProperty(t,"match",{enumerable:!0,get:function(){return y.match}}),Object.defineProperty(t,"debug",{enumerable:!0,get:function(){return g.debug}}),t.gcd=t.filledString=t.isString=t.uneven=t.even=t.justDigits=t.json=t.handleize=t.downcase=t.upcase=t.strip=t.count=t.currency=t.isLast=t.set=t.pluralize=t.slice=t.append=t.prepend=t.modulo=t.dividedBy=t.times=t.minus=t.plus=t.random=t.parse=t.empty=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),r=n(1),o=n(32),s=n(31),a=n(30),u=n(29),c=n(28),l=n(27),f=n(26),d=n(25),h=n(24),p=n(23),v=n(22),m=n(5),y=n(21),g=n(20);(0,i.default)("formatter");var b=function(e){return!w(e)};t.empty=b;t.parse=function(e){return r.Utils.isString(e)?JSON.parse(e):null};t.random=function(e){return r.Utils.isArray(e)?e[Math.floor(Math.random()*e.length)]:null};t.plus=function(e,t){return Number(e)+Number(t)};t.minus=function(e,t){return Number(e)-Number(t)};t.times=function(e,t){return Number(e)*Number(t)};t.dividedBy=function(e,t){return Number(e)/Number(t)};t.modulo=function(e,t){return Number(e)%Number(t)};t.prepend=function(e,t){return t+e};t.append=function(e,t){return e+t};t.slice=function(e,t,n){return e.slice(t,n)};t.pluralize=function(e,t,n){return null===n&&(n=t+"s"),r.Utils.isArray(e)&&(e=e.length),1===e?t:n};t.set=function(e,t,n){return(r.Utils.isObject(e)||r.Utils.isArray(e))&&(e[t]=n),e};t.isLast=function(e,t){return e.length===t+1};t.currency=function(e,t){var n=e.toFixed(2).toString().replace(".",",");return t&&(n+=t),n};var w=function(e){return e&&e.length?e.length:0};t.count=w;var x=function(e){return $.trim(e)};t.strip=x;t.upcase=function(e){return e.toUpperCase()};var k=function(e){return e.toLowerCase()};t.downcase=k;t.handleize=function(e){return e=(e=x(e)).replace(/[^\w\s]/gi,""),(e=k(e)).replace(/ /g,"-")};t.json=function(e){return JSON.stringify(e)};t.justDigits=function(e){if(r.Utils.isNumber(e))return e;var t=e.replace(/[^-\d\.]/g,"");return isNaN(Number(t))?0:Number(t)};t.even=function(e){return e%2==0};t.uneven=function(e){return e%2!=0};t.isString=function(e){return r.Utils.isString(e)};t.filledString=function(e){return r.Utils.isString(e)&&!b(e.replace(/\s/g,""))};t.gcd=function e(t,n){return 0===n?t:e(n,t%n)}},function(e,t){e.exports='<div class="h-100 d-flex flex-column justify-content-between"> <div class="top container-fluid"> <nav-items linklist=linklist pills=false vertical=true></nav-items> <div class=row> <div class="col pt-5"> <contact></contact> </div> </div> </div> <footer class="footer pb-2"> <div rv-autoscroll=\'{"angle": "horizontal", "jumps": 10, "delay": 200, "width":"100vw"}\'> <div rv-each-index=[0,1,2,3,4,5,6,7,8,9,10] class="brand-light px-3" style=pointer-events:all> <div class="font-weight-bold brand-text">Art</div> <img class=brand-image rv-src="system.assets | get \'icon_heart_px.png\'" alt="Art + Code Studio"> <div class="font-weight-bold brand-text">Code</div> <div class="font-weight-normal brand-text hidden-xs-down">&nbsp;Studio</div> </div> </div> <div rv-autoscroll=\'{"angle": "horizontal", "direction":-1, "jumps": 10, "delay": 300, "width":"100vw" }\'> <nav-items linklist=system.linklists.footer pills=false vertical=false></nav-items> <nav-items linklist=system.linklists.footer pills=false vertical=false></nav-items> </div> </footer> </div>'},function(e,t,n){"use strict";var i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};t.__esModule=!0;var r=function(){function e(){i(this,e)}return e.prototype.on=function(e,t){return this._eventCollection=this._eventCollection||{},this._eventCollection[e]=this._eventCollection[e]||[],this._eventCollection[e].push(t),this},e.prototype.once=function(e,t){var n=this;function i(){n.off(e,i),t.apply(this,arguments)}return i.listener=t,this.on(e,i),this},e.prototype.off=function(e,t){var n=void 0;return this._eventCollection&&(n=this._eventCollection[e])?(n.forEach(function(e,i){e!==t&&e.listener!==t||n.splice(i,1)}),0===n.length&&delete this._eventCollection[e],this):this},e.prototype.emit=function(e){for(var t=this,n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var o=void 0;return this._eventCollection&&(o=this._eventCollection[e])?((o=o.slice(0)).forEach(function(e){return e.apply(t,i)}),this):this},e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";var i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)};e.exports=function(e,t,n){var r,o=!1;function s(e){r=e,o||(i(a),o=!0)}function a(){n.call(e,r),o=!1}return e.addEventListener(t,s,!1),s}},function(e,t,n){"use strict";var i,r=n(36),o=n(35),s=!1,a=window.document,u=a.documentElement,c=window.navigator.msPointerEnabled,l={start:c?"MSPointerDown":"touchstart",move:c?"MSPointerMove":"touchmove",end:c?"MSPointerUp":"touchend"},f=function(){var e=/^(Webkit|Khtml|Moz|ms|O)(?=[A-Z])/,t=a.getElementsByTagName("script")[0].style;for(var n in t)if(e.test(n))return"-"+n.match(e)[0].toLowerCase()+"-";return"WebkitOpacity"in t?"-webkit-":"KhtmlOpacity"in t?"-khtml-":""}();function d(e){e=e||{},this._startOffsetX=0,this._currentOffsetX=0,this._opening=!1,this._moved=!1,this._opened=!1,this._preventOpen=!1,this._touch=void 0===e.touch||e.touch&&!0,this._side=e.side||"left",this.panel=e.panel,this.menu=e.menu,this.panel.classList.contains("slideout-panel")||this.panel.classList.add("slideout-panel"),this.panel.classList.contains("slideout-panel-"+this._side)||this.panel.classList.add("slideout-panel-"+this._side),this.menu.classList.contains("slideout-menu")||this.menu.classList.add("slideout-menu"),this.menu.classList.contains("slideout-menu-"+this._side)||this.menu.classList.add("slideout-menu-"+this._side),this._fx=e.fx||"ease",this._duration=parseInt(e.duration,10)||300,this._tolerance=parseInt(e.tolerance,10)||70,this._padding=this._translateTo=parseInt(e.padding,10)||256,this._orientation="right"===this._side?-1:1,this._translateTo*=this._orientation,this._touch&&this._initTouchEvents()}!function(e,t){e.prototype=function(e,t){for(var n in t)t[n]&&(e[n]=t[n]);return e}(e.prototype||{},t.prototype)}(d,o),d.prototype.open=function(){var e=this;return this.emit("beforeopen"),u.classList.contains("slideout-open")||u.classList.add("slideout-open"),this._setTransition(),this._translateXTo(this._translateTo),this._opened=!0,setTimeout(function(){e.panel.style.transition=e.panel.style["-webkit-transition"]="",e.emit("open")},this._duration+50),this},d.prototype.close=function(){var e=this;return this.isOpen()||this._opening?(this.emit("beforeclose"),this._setTransition(),this._translateXTo(0),this._opened=!1,setTimeout(function(){u.classList.remove("slideout-open"),e.panel.style.transition=e.panel.style["-webkit-transition"]=e.panel.style[f+"transform"]=e.panel.style.transform="",e.emit("close")},this._duration+50),this):this},d.prototype.toggle=function(){return this.isOpen()?this.close():this.open()},d.prototype.isOpen=function(){return this._opened},d.prototype._translateXTo=function(e){return this._currentOffsetX=e,this.panel.style[f+"transform"]=this.panel.style.transform="translateX("+e+"px)",this},d.prototype._setTransition=function(){return this.panel.style[f+"transition"]=this.panel.style.transition=f+"transform "+this._duration+"ms "+this._fx,this},d.prototype._initTouchEvents=function(){var e=this;return this._onScrollFn=r(a,"scroll",function(){e._moved||(clearTimeout(i),s=!0,i=setTimeout(function(){s=!1},250))}),this._preventMove=function(t){e._moved&&t.preventDefault()},a.addEventListener(l.move,this._preventMove),this._resetTouchFn=function(t){void 0!==t.touches&&(e._moved=!1,e._opening=!1,e._startOffsetX=t.touches[0].pageX,e._preventOpen=!e._touch||!e.isOpen()&&0!==e.menu.clientWidth)},this.panel.addEventListener(l.start,this._resetTouchFn),this._onTouchCancelFn=function(){e._moved=!1,e._opening=!1},this.panel.addEventListener("touchcancel",this._onTouchCancelFn),this._onTouchEndFn=function(){e._moved&&(e.emit("translateend"),e._opening&&Math.abs(e._currentOffsetX)>e._tolerance?e.open():e.close()),e._moved=!1},this.panel.addEventListener(l.end,this._onTouchEndFn),this._onTouchMoveFn=function(t){if(!(s||e._preventOpen||void 0===t.touches||function(e){for(;e.parentNode;){if(null!==e.getAttribute("data-slideout-ignore"))return e;e=e.parentNode}return null}(t.target))){var n=t.touches[0].clientX-e._startOffsetX,i=e._currentOffsetX=n;if(!(Math.abs(i)>e._padding)&&Math.abs(n)>20){e._opening=!0;var r=n*e._orientation;if(e._opened&&r>0||!e._opened&&r<0)return;e._moved||e.emit("translatestart"),r<=0&&(i=n+e._padding*e._orientation,e._opening=!1),e._moved&&u.classList.contains("slideout-open")||u.classList.add("slideout-open"),e.panel.style[f+"transform"]=e.panel.style.transform="translateX("+i+"px)",e.emit("translate",i),e._moved=!0}}},this.panel.addEventListener(l.move,this._onTouchMoveFn),this},d.prototype.enableTouch=function(){return this._touch=!0,this},d.prototype.disableTouch=function(){return this._touch=!1,this},d.prototype.destroy=function(){return this.close(),a.removeEventListener(l.move,this._preventMove),this.panel.removeEventListener(l.start,this._resetTouchFn),this.panel.removeEventListener("touchcancel",this._onTouchCancelFn),this.panel.removeEventListener(l.end,this._onTouchEndFn),this.panel.removeEventListener(l.move,this._onTouchMoveFn),a.removeEventListener("scroll",this._onScrollFn),this.open=this.close=function(){},this},e.exports=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slideoutComponent=void 0;var i=u(n(0)),r=u(n(2)),o=u(n(37)),s=n(1),a=u(n(34));function u(e){return e&&e.__esModule?e:{default:e}}t.slideoutComponent=function(e){var t=(0,i.default)("component:slideout");return{name:"slideout",template:function(){return a.default},initialize:function(n,i){return this.linklist=window.model.system.linklists["main-menu"],this.system=window.model.system,t("initialize",this),setTimeout(function(){var i={duration:800,menu:n,padding:s.Utils.getViewportDimensions().w,panel:document.getElementById("slideout-panel"),side:"right",tolerance:70},a=new o.default(i);e.trigger("slideout.component:initialize",a),(0,r.default)(window).resize(function(){a._opened||(a.destroy(),i.padding=s.Utils.getViewportDimensions().w,a=new o.default(i),e.trigger("slideout.component:initialize",a)),t("resize",a)}),e.on("initStateChange",function(){a.close()}),a.on("open",function(){t("open")})},0),this}}}},function(e,t){e.exports=' <nav class=nav rv-add-class=linklist.handle rv-class-nav-pills=pills rv-class-flex-column=vertical rv-class-flex-row="vertical | not"> <div class=nav-item rv-each-link=linklist.links> <a class=nav-link rv-class-active=link.active rv-route=link.href rv-href=link.href>{link.text}</a> </div> </nav> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navItemsComponent=void 0;var i=o(n(0)),r=o(n(39));function o(e){return e&&e.__esModule?e:{default:e}}t.navItemsComponent=function(){var e=(0,i.default)("component:nav-items");return{name:"nav-items",template:function(){return r.default},initialize:function(t,n){return e("initialize",n,r.default),this.linklist=n.linklist,this.pills=n.pills,this.vertical=!!n.vertical,this}}}},function(e,t){e.exports=" "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iconsetComponent=void 0;var i=s(n(0)),r=s(n(2)),o=s(n(41));function s(e){return e&&e.__esModule?e:{default:e}}t.iconsetComponent=function(){var e=(0,i.default)("component:iconset");return{name:"iconset",template:function(){return o.default},initialize:function(t,n){(0,r.default)(t);var i=n.src||window.model.system.assetsPath+n.name,s=n.color||null,a=n.direction||"top",u=n.size||32,c="iconset direction-".concat(a," size-").concat(u," color-").concat(s);return e("initialize",n,o.default),"left"===a?c+=" rotate-270":"left-top"===a||"left-up"===a||"top-left"===a||"up-left"===a?c+=" rotate-315":"top"===a||"up"===a?c+=" rotate-0":"top-right"===a||"up-right"===a||"right-top"===a||"right-up"===a?c+=" rotate-45":"right"===a?c+=" rotate-90":"right-bottom"===a||"right-down"===a||"bottom-right"===a||"down-right"===a?c+=" rotate-135":"bottom"===a||"down"===a?c+=" rotate-180":"left-bottom"!==a&&"left-down"!==a&&"bottom-left"!==a&&"down-left"!==a||(c+=" rotate-225"),(0,r.default)(t).load(i).css({color:s,height:u+"px",width:u+"px"}).addClass(c).attr("aria-hidden","true").attr("role","img"),this}}}},function(e,t){e.exports="<h1 class=lead>schreib uns</h1> <p> Hey @ Art+Code Studio,<br/> ich bin <span class=text-danger contenteditable=true rv-value=\"name | default 'Name'\"></span> und möchte <span class=text-danger contenteditable=true rv-value=\"message | default 'Nachricht'\"></span>.<br/> <br> Meldet euch, <span class=text-danger contenteditable=true rv-value=\"regards | default 'hasta la vista'\"></span><br/> <span rv-html=name></span><br> <br> P.S.<br> Schreibt mir an <span class=text-danger contenteditable=true rv-value=\"mail | default 'E-Mail'\"></span> oder ruft mich unter <span class=text-danger contenteditable=true rv-value=\"phone | default 'Telefon'\"></span> an. </p> <a class=text-light href=# rv-on-click=send>Absenden</a>"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contactComponent=void 0;var i=s(n(0)),r=s(n(2)),o=s(n(43));function s(e){return e&&e.__esModule?e:{default:e}}t.contactComponent=function(){var e=(0,i.default)("component:contact");return{name:"contact",template:function(){return o.default},initialize:function(t,n){return(0,r.default)(t),this.name="",this.message="",this.regards="",this.mail="",this.phone="",this.send=function(){e("send")},this}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"contactComponent",{enumerable:!0,get:function(){return i.contactComponent}}),Object.defineProperty(t,"iconsetComponent",{enumerable:!0,get:function(){return r.iconsetComponent}}),Object.defineProperty(t,"navItemsComponent",{enumerable:!0,get:function(){return o.navItemsComponent}}),Object.defineProperty(t,"slideoutComponent",{enumerable:!0,get:function(){return s.slideoutComponent}});var i=n(44),r=n(42),o=n(40),s=n(38)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}t.valueBinder=function(){var e=(0,i.default)("binder:value");return{binder:{bind:function(t){var n=this;e("bind",this),this.customData={},this.customData.$el=(0,r.default)(t),this.customData.type=this.customData.$el.prop("type"),this.customData.tagName=this.customData.$el.prop("tagName"),this.customData.contenteditable=!!this.customData.$el.attr("contenteditable"),this.customData.$el.on("change input keyup paste blur focus",function(){n.publish()})},unbind:function(e){this.customData.$el.off("change input keyup paste blur focus"),delete this.customData},routine:function(t,n){if(e("routine newValue",n),o.Utils.isString(n)){var i=this.getValue(t);if(e("routine",i,n),i!==n)switch(this.customData.tagName){case"INPUT":case"TEXTAREA":this.customData.$el.val(n);break;default:this.customData.$el.html(n)}}},getValue:function(t){var n;switch(this.customData.tagName){case"INPUT":switch(this.customData.type){case"number":n=parseFloat(this.customData.$el.val())||0;break;default:n=this.customData.$el.val().toString()}break;case"TEXTAREA":n=this.customData.$el.val().toString();break;default:n=this.customData.$el.html()}return e("getValue",n),n},priority:3e3,publishes:!0},name:"value"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backgroundImageBinder=t.backgroundImage=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(2));var r=function(e,t){(0,i.default)(e).css("background-image","url("+t+")")};t.backgroundImage=r;t.backgroundImageBinder=function(){return{binder:r,name:"background-image"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.imageBoxBinder=t.imageBox=void 0;var i=function(e,t){var n=$(e);if(n.addClass("image-box"),t){var i=t.split(":"),r=new Array;r[0]=Number(i[0]),r[1]=Number(i[1]);var o=r[1]/r[0]*100,s="ratio-"+r[0]+"-"+r[1],a="padding-top: "+o+"%;";n.addClass(s),$("head").append("<style>.image-box."+s+":before{"+a+"}</style>")}};t.imageBox=i;t.imageBoxBinder=function(){return{binder:i,name:"image-box"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.appendHtmlBinder=void 0;var i=n(1);t.appendHtmlBinder=function(){return{binder:function(e,t){var n=$(e);i.Utils.isString(t)||(t=n.attr("rv-append-html"));var r=$.parseHTML(t);$(e).append(r)},name:"append-html"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.htmlBinder=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(2)),r=n(1);t.htmlBinder=function(){return{binder:function(e,t){var n=(0,i.default)(e);r.Utils.isString(t)||(t=n.attr("rv-html")),(0,i.default)(e).html(t)},name:"html"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.classAddRemoveBinder=t.classAddRemove=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(2));var r=function(e,t){var n=(0,i.default)(e),r=this.args[0];return t?n.addClass(r):n.removeClass(r),t};t.classAddRemove=r;t.classAddRemoveBinder=function(){return{binder:r,name:"class-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addClassBinder=t.addClass=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(2));var r=function(e,t){var n=(0,i.default)(e);return t&&n.addClass(t),t};t.addClass=r;t.addClassBinder=function(){return{binder:r,name:"add-class"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeClassBinder=t.removeClass=void 0;var i=function(e,t){var n=$(e);return t&&n.removeClass(t),t};t.removeClass=i;t.removeClassBinder=function(){return{binder:i,name:"remove-class"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.forFromToBinder=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0));t.forFromToBinder=function(){var e=(0,i.default)("binders:for-*.*");return{binder:function(t,n){var i=$(t),r=Number((void 0).arg[0]),o=Number((void 0).arg[1]);e("start",r,"end",o);for(var s=i.html(),a=r;a<o;a++)e("index",a);return e("html",s),n},name:"for-*.*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.telBinder=void 0;t.telBinder=function(){return{binder:function(e,t){$(e).attr("href","tel:"+t)},name:"tel"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mailtoBinder=void 0;t.mailtoBinder=function(){return{binder:function(e,t){$(e).attr("href","mailto:"+t)},name:"mailto"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoscrollBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}t.autoscrollBinder=function(){(0,i.default)("binder:autoscroll");var e=function(e,t){return"100vw"===t.width?o.Utils.getViewportDimensions().w:e.prop("scrollWidth")-e.outerWidth()};return{binder:function(t,n){var i=(0,r.default)(t);o.Utils.isString(n.width)&&(n.width,i.css("width",n.width)),i.addClass("rv-autoscroll-".concat(n.angle)),setTimeout(function(){!function(t,n){var i=n.direction,o=n.jumps,s=n.delay,a=!1,u=null,c=e(t,n);(0,r.default)(window).resize(function(){c=e(t,n)}),i<0?t.scrollLeft(c):t.scrollLeft(0),t.hover(function(){setTimeout(function(){t.filter(":hover").length&&(a=!0,i*=-1)},10)},function(){setTimeout(function(){a&&!t.filter(":hover").length&&(a=!1)},500)}),setTimeout(function e(){return a?setTimeout(e,200):(u=t.scrollLeft(),i>0?u+=o:u-=o,u<=5?i=1:u>=c&&(i=-1),t.animate({scrollLeft:u},s,"linear",e))},0)}(i,n)},1e3)},name:"autoscroll"}}},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.TypingTextService=void 0;var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"toRotate",void 0),r(this,"el",void 0),r(this,"loopNum",0),r(this,"period",void 0),r(this,"txt",""),r(this,"isDeleting",!1),r(this,"fullTxt",void 0),this.el=t,this.loopNum=0,this.txt="",this.period=n||2e3}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"auto",value:function(e){this.toRotate=e,this.loopNum=0,this.txt="",this.tick(),this.isDeleting=!1}},{key:"delete",value:function(e){this.isDeleting=!0,this.fullTxt=this.el.innerHTML,this.txt=this.fullTxt,this.deleteTick(e),this.isDeleting=!1}},{key:"write",value:function(e,t){this.fullTxt=e,this.txt="",this.isDeleting=!1,this.writeTick(t)}},{key:"tick",value:function(){var e=this.loopNum%this.toRotate.length;this.fullTxt=this.toRotate[e],this.isDeleting?this.txt=this.fullTxt.substring(0,this.txt.length-1):this.txt=this.fullTxt.substring(0,this.txt.length+1),this.el.innerHTML=this.txt;var t=this,n=300-100*Math.random();this.isDeleting&&(n/=2),this.isDeleting||this.txt!==this.fullTxt?this.isDeleting&&""===this.txt&&(this.isDeleting=!1,this.loopNum++,n=500):(n=this.period,this.isDeleting=!0),setTimeout(function(){t.tick()},n)}},{key:"deleteTick",value:function(e){var t=this,n=300-100*Math.random();return n/=2,this.txt=this.fullTxt.substring(0,this.txt.length-1),this.el.innerHTML=this.txt,""===this.txt?(this.isDeleting=!1,this.loopNum++,n=500,setTimeout(function(){if(e)return e()},n)):setTimeout(function(){t.deleteTick(e)},n)}},{key:"writeTick",value:function(e){var t=this;this.txt=this.fullTxt.substring(0,this.txt.length+1),this.el.innerHTML=this.txt;var n=300-100*Math.random();return this.txt===this.fullTxt?(n=this.period,this.isDeleting=!0,setTimeout(function(){if(e)return e()},n)):setTimeout(function(){t.writeTick(e)},n)}}]),e}();t.TypingTextService=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slideoutTogglerBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(58);function s(e){return e&&e.__esModule?e:{default:e}}t.slideoutTogglerBinder=function(e){var t=(0,i.default)("binders:slideout-toggler");return{binder:function(n,i){var s=(0,r.default)(n);t("init",n,i);var a=null,u=s.find(".text"),c=(0,r.default)(".subbar .nav-link"),l=u.html(),f=new o.TypingTextService(u[0],2e3);e.on("slideout.component:initialize",function(e){t("slideout.component:initialize",e),null!==a&&s.off("click"),a=e,s.on("click",function(){a.toggle()}),a.on("beforeopen",function(){l=u.html(),s.css("color","white"),c.css("color","white"),f.delete(function(){t("delete Close done"),f.write("Close")})}),a.on("beforeclose",function(){f.delete(function(){t("delete ".concat(l," done")),s.css("color","unset"),c.css("color","unset"),f.write(l)})})})},name:"slideout-toggler"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.routeBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}t.routeBinder=function(e,t,n){var s=(0,i.default)("binders:route");return{binder:function(i,a){var u=(0,r.default)(i),c=!1;s("getBinder",i,a),a||(a=u.attr("href")),"_blank"===u.attr("target")&&(c=!0);var l=o.Utils.getLocation(),f=l.protocol+"//"+l.hostname;o.Utils.isAbsoluteUrl(a)&&(0===a.indexOf(f)?a=a.replace(f,""):c=!0);var d=function(e){var t=o.Utils.getLocation().pathname;return s("checkURL",t,e),e===t},h=function(e){return d(e)?(u.addClass("active"),!0):(u.removeClass("active"),!1)};e.on("newPageReady",function(){return h(a)}),u.off("click").on("click",function(e){e.preventDefault(),d(a)?s("already on this site"):t.goTo(a,c)}),c||d(a)||u.off("mouseenter touchstart").on("mouseenter touchstart",function(e){n.onLinkEnter(e,a)}),h(a)},name:"route"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindersService=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0));function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"tinybind",void 0),o(this,"debug",(0,i.default)("binders:binder-service")),this.tinybind=t}return function(e,t,n){t&&r(e.prototype,t),n&&r(e,n)}(e,[{key:"registWrapper",value:function(e,t){t||(t=e.name);var n=e.binder;return this.tinybind.binders[t]=n,this.tinybind.binders}},{key:"regist",value:function(e,t){if(t||(e.hasOwnProperty("constructor")&&(t=e.constructor.name),e.hasOwnProperty("name")&&(t=e.name)),this.debug("name",t,e),!t)throw new Error("name is required");return this.tinybind.binders[t]=e,this.tinybind.binders}}]),e}();t.BindersService=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"BindersService",{enumerable:!0,get:function(){return i.BindersService}}),Object.defineProperty(t,"BinderWrapper",{enumerable:!0,get:function(){return i.BinderWrapper}}),Object.defineProperty(t,"routeBinder",{enumerable:!0,get:function(){return r.routeBinder}}),Object.defineProperty(t,"slideoutTogglerBinder",{enumerable:!0,get:function(){return o.slideoutTogglerBinder}}),Object.defineProperty(t,"autoscrollBinder",{enumerable:!0,get:function(){return s.autoscrollBinder}}),Object.defineProperty(t,"mailtoBinder",{enumerable:!0,get:function(){return a.mailtoBinder}}),Object.defineProperty(t,"telBinder",{enumerable:!0,get:function(){return u.telBinder}}),Object.defineProperty(t,"forFromToBinder",{enumerable:!0,get:function(){return c.forFromToBinder}}),Object.defineProperty(t,"removeClassBinder",{enumerable:!0,get:function(){return l.removeClassBinder}}),Object.defineProperty(t,"addClassBinder",{enumerable:!0,get:function(){return f.addClassBinder}}),Object.defineProperty(t,"classAddRemoveBinder",{enumerable:!0,get:function(){return d.classAddRemoveBinder}}),Object.defineProperty(t,"htmlBinder",{enumerable:!0,get:function(){return h.htmlBinder}}),Object.defineProperty(t,"appendHtmlBinder",{enumerable:!0,get:function(){return p.appendHtmlBinder}}),Object.defineProperty(t,"imageBoxBinder",{enumerable:!0,get:function(){return v.imageBoxBinder}}),Object.defineProperty(t,"backgroundImageBinder",{enumerable:!0,get:function(){return m.backgroundImageBinder}}),Object.defineProperty(t,"valueBinder",{enumerable:!0,get:function(){return y.valueBinder}});var i=n(61),r=n(60),o=n(59),s=n(57),a=n(56),u=n(55),c=n(54),l=n(53),f=n(52),d=n(51),h=n(50),p=n(49),v=n(48),m=n(47),y=n(46)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Prefetch=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),r=n(1),o=n(10);function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"ignoreClassLink","no-barba-prefetch"),a(this,"debug",(0,i.default)("Prefetch"))}return function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(e,[{key:"init",value:function(){if(!window.history.pushState)return!1}},{key:"onLinkEnter",value:function(e,t){var n=e.target;if(!t){for(;n&&!o.Pjax.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;t=o.Pjax.getHref(n)}if(this.debug("onLinkEnter",t),o.Pjax.preventCheck(e,n)&&!o.Pjax.cache.get(t)){var i=r.Utils.xhr(t);o.Pjax.cache.set(t,i)}}}]),e}();t.Prefetch=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"HistoryManager",{enumerable:!0,get:function(){return i.HistoryManager}}),Object.defineProperty(t,"IState",{enumerable:!0,get:function(){return i.IState}}),Object.defineProperty(t,"Dom",{enumerable:!0,get:function(){return r.Dom}}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return o.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return s.Prefetch}});var i=n(12),r=n(11),o=n(10),s=n(63)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseView=void 0;var i=n(6),r=n(1);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"namespace",void 0),s(this,"container",void 0),s(this,"dispatcher",new i.Dispatcher)}return function(e,t,n){t&&o(e.prototype,t),n&&o(e,n)}(e,[{key:"extend",value:function(e){return r.Utils.extend(!1,this,e)}},{key:"init",value:function(){var e=this;this.dispatcher.on("initStateChange",function(t,n){n&&n.namespace===e.namespace&&e.onLeave()}),this.dispatcher.on("newPageReady",function(t,n,i){e.container=i,t.namespace===e.namespace&&e.onEnter()}),this.dispatcher.on("transitionCompleted",function(t,n){t.namespace===e.namespace&&e.onEnterCompleted(),n&&n.namespace===e.namespace&&e.onLeaveCompleted()})}}]),e}();t.BaseView=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HideShowTransition=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),r=n(7);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var l=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,s=new Array(r),u=0;u<r;u++)s[u]=arguments[u];return function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(c(c(n=function(e,t){return!t||"object"!==o(t)&&"function"!=typeof t?c(e):t}(this,(e=a(t)).call.apply(e,[this].concat(s))))),"debug",(0,i.default)("barba:HideShowTransition")),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r.BaseTransition),function(e,t,n){t&&s(e.prototype,t),n&&s(e,n)}(t,[{key:"start",value:function(){this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){document.body.scrollTop=0,this.done()}}]),t}();t.HideShowTransition=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomTransition=void 0;var i=function(e){return e&&e.__esModule?e:{default:e}}(n(0)),r=n(1),o=n(7);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(){var e,n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];return function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(l(l(n=function(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?l(e):t}(this,(e=u(t)).call.apply(e,[this].concat(o))))),"debug",(0,i.default)("rivets:CustomTransition")),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,o.BaseTransition),function(e,t,n){t&&a(e.prototype,t),n&&a(e,n)}(t,[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.debug("init"),this.deferred=r.Utils.deferred();var i=r.Utils.deferred();return this.newContainerLoading=i.promise,this.start(),t.then(function(e){n.$newContainer=e,i.resolve()}),this.deferred.promise}},{key:"start",value:function(){this.debug("CustomTransition start"),this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(e){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}]),t}();t.CustomTransition=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"BaseCache",{enumerable:!0,get:function(){return i.BaseCache}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return r.BaseTransition}}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return r.CustomTransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return r.HideShowTransition}}),Object.defineProperty(t,"BaseView",{enumerable:!0,get:function(){return o.BaseView}}),Object.defineProperty(t,"HistoryManager",{enumerable:!0,get:function(){return s.HistoryManager}}),Object.defineProperty(t,"IState",{enumerable:!0,get:function(){return s.IState}}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return s.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return s.Prefetch}});var i=n(14),r=n(13),o=n(65),s=n(64)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentBinding=void 0;var i=n(9),r=n(4),o=n(17),s=n(3);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(e){function t(e,n,r){var o;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),d(f(f(o=function(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?f(e):t}(this,c(t).call(this,e,n,r,null,null,null,null)))),"view",void 0),d(f(f(o)),"componentView",void 0),d(f(f(o)),"el",void 0),d(f(f(o)),"type",void 0),d(f(f(o)),"component",void 0),d(f(f(o)),"static",{}),d(f(f(o)),"keypaths",{}),d(f(f(o)),"observers",void 0),d(f(f(o)),"bindingPrefix",i.tinybind._fullPrefix),o.view=e,o.el=n,o.type=r,o.component=e.options.components[o.type],o.static={},o.observers={},o.parseTarget(),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,o.Binding),function(e,t,n){t&&u(e.prototype,t),n&&u(e,n)}(t,[{key:"sync",value:function(){var e=this;Object.keys(this.observers).forEach(function(t){e.componentView&&(e.componentView.models[t]=e.observers[t].target)})}},{key:"update",value:function(){}},{key:"publish",value:function(){}},{key:"locals",value:function(){var e=this,t={};return Object.keys(this.static).forEach(function(n){t[n]=e.static[n]}),Object.keys(this.observers).forEach(function(n){t[n]=e.observers[n].value()}),t}},{key:"camelCase",value:function(e){return e.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})}},{key:"getMergedOptions",value:function(){var e={binders:Object.create(null),formatters:Object.create(null),components:Object.create(null),adapters:Object.create(null)};return(0,s.mergeObject)(e.binders,this.component.binders),(0,s.mergeObject)(e.formatters,this.component.formatters),(0,s.mergeObject)(e.components,this.component.components),(0,s.mergeObject)(e.adapters,this.component.adapters),(0,s.mergeObject)(e.binders,this.view.options.binders),(0,s.mergeObject)(e.formatters,this.view.options.formatters),(0,s.mergeObject)(e.components,this.view.options.components),(0,s.mergeObject)(e.adapters,this.view.options.adapters),e.prefix=this.component.prefix?this.component.prefix:this.view.options.prefix,e.templateDelimiters=this.component.templateDelimiters?this.component.templateDelimiters:this.view.options.templateDelimiters,e.rootInterface=this.component.rootInterface?this.component.rootInterface:this.view.options.rootInterface,e.preloadData=this.component.preloadData?this.component.preloadData:this.view.options.preloadData,e.handler=this.component.handler?this.component.handler:this.view.options.handler,e}},{key:"bind",value:function(){if(this.componentView)this.componentView.bind();else{this.el.innerHTML=this.component.template.call(this);var e=this.component.initialize.call(this,this.el,this.locals());this.componentView=i.tinybind.bind(Array.prototype.slice.call(this.el.childNodes),e,this.getMergedOptions()),this.el._bound=!0}}},{key:"parseTarget",value:function(){for(var e=0,t=this.el.attributes.length;e<t;e++){var n=this.el.attributes[e];if(0!==n.name.indexOf(this.bindingPrefix)){var i=this.camelCase(n.name),o=(0,r.parseType)(n.value);if(o.type===r.PRIMITIVE)this.static[i]=o.value;else{if(o.type!==r.KEYPATH)throw new Error("can't parse component attribute");this.keypaths[i]=n.value,this.observers[i]=this.observe(this.view.models,this.keypaths[i],this)}}}}},{key:"unbind",value:function(){var e=this;Object.keys(this.observers).forEach(function(t){e.observers[t].unobserve()}),this.componentView&&this.componentView.unbind.call(this)}}]),t}();t.ComponentBinding=h},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.adapter=t.Adapter=void 0;var o=["push","pop","shift","unshift","sort","reverse","splice"],s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"counter",0),r(this,"weakmap",{})}return function(e,t,n){t&&i(e.prototype,t),n&&i(e,n)}(e,[{key:"weakReference",value:function(e){if(!e.hasOwnProperty("__rv")){var t=this.counter++;Object.defineProperty(e,"__rv",{value:t})}return this.weakmap[e.__rv]||(this.weakmap[e.__rv]={callbacks:{}}),this.weakmap[e.__rv]}},{key:"cleanupWeakReference",value:function(e,t){Object.keys(e.callbacks).length||e.pointers&&Object.keys(e.pointers).length||delete this.weakmap[t]}},{key:"stubFunction",value:function(e,t){var n=e[t],i=this.weakReference(e),r=this.weakmap;e[t]=function(){for(var t=arguments.length,o=new Array(t),s=0;s<t;s++)o[s]=arguments[s];var a=n.apply(e,o);return Object.keys(i.pointers).forEach(function(e){var t=i.pointers[e];r[e]&&r[e].callbacks[t]instanceof Array&&r[e].callbacks[t].forEach(function(e){e.sync()})}),a}}},{key:"observeMutations",value:function(e,t,n){var i=this;if(e instanceof Array){var r=this.weakReference(e);r.pointers||(r.pointers={},o.forEach(function(t){i.stubFunction(e,t)})),r.pointers[t]||(r.pointers[t]=[]),-1===r.pointers[t].indexOf(n)&&r.pointers[t].push(n)}}},{key:"unobserveMutations",value:function(e,t,n){if(e instanceof Array&&null!=e.__rv){var i=this.weakmap[e.__rv];if(i){var r=i.pointers[t];if(r){var o=r.indexOf(n);o>-1&&r.splice(o,1),r.length||delete i.pointers[t],this.cleanupWeakReference(i,e.__rv)}}}}},{key:"observe",value:function(e,t,n){var i,r=this,o=this.weakReference(e).callbacks;if(!o[t]){o[t]=[];var s=Object.getOwnPropertyDescriptor(e,t);s&&(s.get||s.set||!s.configurable)||(i=e[t],Object.defineProperty(e,t,{enumerable:!0,get:function(){return i},set:function(n){if(n!==i){r.unobserveMutations(i,e.__rv,t),i=n;var o=r.weakmap[e.__rv];if(o){var s=o.callbacks[t];s&&s.forEach(function(e){e.sync()}),r.observeMutations(n,e.__rv,t)}}}}))}-1===o[t].indexOf(n)&&o[t].push(n),this.observeMutations(e[t],e.__rv,t)}},{key:"unobserve",value:function(e,t,n){var i=this.weakmap[e.__rv];if(i){var r=i.callbacks[t];if(r){var o=r.indexOf(n);o>-1&&(r.splice(o,1),r.length||(delete i.callbacks[t],this.unobserveMutations(e[t],e.__rv,t))),this.cleanupWeakReference(i,e.__rv)}}}},{key:"get",value:function(e,t){return e[t]}},{key:"set",value:function(e,t,n){e[t]=n}}]),e}();t.Adapter=s;var a=new s;t.adapter=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatters=void 0;var i={};t.formatters=i,i.not=function(e){return!e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"tinybind",{enumerable:!0,get:function(){return i.tinybind}}),Object.defineProperty(t,"ITinybind",{enumerable:!0,get:function(){return i.ITinybind}}),Object.defineProperty(t,"View",{enumerable:!0,get:function(){return r.View}}),Object.defineProperty(t,"IComponent",{enumerable:!0,get:function(){return o.IComponent}}),Object.defineProperty(t,"IOneWayBinder",{enumerable:!0,get:function(){return s.IOneWayBinder}}),Object.defineProperty(t,"ITwoWayBinder",{enumerable:!0,get:function(){return s.ITwoWayBinder}}),Object.defineProperty(t,"Binder",{enumerable:!0,get:function(){return s.Binder}}),Object.defineProperty(t,"IBinders",{enumerable:!0,get:function(){return s.IBinders}});var i=n(9),r=n(8),o=n(15),s=n(18)},function(e,t){var n=1e3,i=60*n,r=60*i,o=24*r,s=365.25*o;function a(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u=typeof e;if("string"===u&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*i;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===u&&!1===isNaN(e))return t.long?function(e){return a(e,o,"day")||a(e,r,"hour")||a(e,i,"minute")||a(e,n,"second")||e+" ms"}(e):function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=r)return Math.round(e/r)+"h";if(e>=i)return Math.round(e/i)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function i(e){var n;function i(){if(i.enabled){var e=i,r=+new Date,o=r-(n||r);e.diff=o,e.prev=n,e.curr=r,n=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,i){if("%%"===n)return n;u++;var r=t.formatters[i];if("function"==typeof r){var o=s[u];n=r.call(e,o),s.splice(u,1),u--}return n}),t.formatArgs.call(e,s),(i.log||t.log||console.log.bind(console)).apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var n,i=0;for(n in e)i=(i<<5)-i+e.charCodeAt(n),i|=0;return t.colors[Math.abs(i)%t.colors.length]}(e),i.destroy=r,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function r(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var i=("string"==typeof e?e:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(e=i[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var o=t.instances[n];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,i;for(n=0,i=t.skips.length;n<i;n++)if(t.skips[n].test(e))return!1;for(n=0,i=t.names.length;n<i;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(73),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&h())}function h(){if(!l){var e=a(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||l||a(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Main=void 0;var i=d(n(0)),r=d(n(2)),o=n(72),s=n(68),a=n(62),u=n(45),c=n(6),l=n(33),f=n(19);function d(e){return e&&e.__esModule?e:{default:e}}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),h(this,"prefetch",new s.Prefetch),h(this,"dispatcher",new c.Dispatcher),h(this,"pjax",new s.Pjax(new s.CustomTransition)),h(this,"views",{dynamic:null,static:null}),h(this,"binderRegister",new a.BindersService(o.tinybind)),h(this,"debug",(0,i.default)("View")),console.log(o.tinybind),o.tinybind.components.contact=(0,u.contactComponent)(),o.tinybind.components["nav-items"]=(0,u.navItemsComponent)(),o.tinybind.components.slideout=(0,u.slideoutComponent)(this.dispatcher),o.tinybind.components.iconset=(0,u.iconsetComponent)(),o.tinybind.formatters.debug=l.debug,o.tinybind.formatters.default=l.defaultFormatter,o.tinybind.formatters.get=l.get,o.tinybind.formatters.not=l.not,this.binderRegister.registWrapper((0,a.routeBinder)(this.dispatcher,this.pjax,this.prefetch)),this.binderRegister.registWrapper((0,a.slideoutTogglerBinder)(this.dispatcher)),this.binderRegister.registWrapper((0,a.autoscrollBinder)()),this.binderRegister.registWrapper((0,a.htmlBinder)()),this.binderRegister.registWrapper((0,a.removeClassBinder)()),this.binderRegister.registWrapper((0,a.addClassBinder)()),this.binderRegister.registWrapper((0,a.valueBinder)()),this.views.static=o.tinybind.bind((0,r.default)("body")[0],window.model),this.dispatcher.on("newPageReady",function(e,n,i,r,s){(t.debug("newPageReady"),s||null===t.views.dynamic||t.views.dynamic.unbind(),t.views.dynamic=o.tinybind.bind(i[0],window.model),"page.tetris"===i.data().template)&&(new f.Tetris).run()}),this.prefetch.init(),this.pjax.start()};t.Main=p,(0,r.default)(function(){new p})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,