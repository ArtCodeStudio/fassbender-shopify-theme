!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=109)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=t.getInputValue=t.times=t.getString=t.isObject=t.isJson=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.isJson=function(e){try{var t=JSON.parse(e);return t instanceof Array||t instanceof Object}catch(e){return!1}};t.isObject=function(e){return"object"===a(e)&&null!==e};t.getString=function(e){return null!=e?e.toString():void 0};t.times=function(e,t){for(var n=0;n<e;n++)t()};t.getInputValue=function(e){var t=[];if("checkbox"===e.type)return e.checked;if("select-multiple"===e.type){var n=e.options;for(var r in n)if(n.hasOwnProperty(r)){var i=n[r];i.selected&&t.push(i.value)}return t}return e.value};var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"isUndefined",value:function(e){return void 0===e}},{key:"isDefined",value:function(e){return!this.isUndefined(e)}},{key:"isFunction",value:function(e){return"function"==typeof e}},{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isNumber",value:function(e){return!isNaN(parseFloat(e))&&!isNaN(e-0)}},{key:"isObject",value:function(e){return this.isDefined(e)&&"object"===a(e)}},{key:"isBoolean",value:function(e){return a(e)===a(!0)}},{key:"isString",value:function(e){return this.isDefined(e)&&"string"==typeof e}},{key:"stringHasNumber",value:function(e){return this.isString(e)&&/\d/.test(e)}},{key:"stringHasOnlyNumber",value:function(e){return/^\d+$/.test(e)}},{key:"stringIsPhoneNumber",value:function(e){return/^[0-9 ()+-]+$/.test(e)}},{key:"justDigits",value:function(t){var n=t.replace(/[^-\d\.]/g,"");return e.isNumber(n)?Number(n):0}},{key:"extend",value:function(e,t,n,r){return e?i.default.extend(!0,t,n,r):i.default.extend(t,n,r)}},{key:"concat",value:function(e,t,n){return this.extend(e,{},t,n)}},{key:"xhr",value:function(e){var t=this.deferred(),n=new XMLHttpRequest;return n.onreadystatechange=function(){if(4===n.readyState)return 200===n.status?t.resolve(n.responseText):t.reject(new Error("xhr: HTTP code is not 200"))},n.ontimeout=function(){return t.reject(new Error("xhr: Timeout exceeded"))},n.open("GET",e),n.timeout=this.xhrTimeout,n.setRequestHeader("x-barba","yes"),n.send(),t.promise}},{key:"deferred",value:function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.promise=t,e}},{key:"getLocation",value:function(e){return e?(0,i.default)('<a href="'.concat(e,'"></a>'))[0]:window.location}},{key:"getUrl",value:function(t){var n=e.getLocation(t);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(e){return e.replace(/#.*/,"")}},{key:"getPort",value:function(t,n){var r=e.getLocation(n),i=void 0!==t?t:r.port,o=r.protocol;return""!==i?Number(i):"http:"===o?80:"https:"===o?443:void 0}},{key:"isAbsoluteUrl",value:function(e){return/^https?:\/\//i.test(e)}},{key:"getUrlParameter",value:function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(t){return e.getLocation(t).hash}},{key:"updateHash",value:function(e){return window.location.hash=e}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){var e=Math.max(document.documentElement.clientWidth,window.innerWidth||0);return{h:Math.max(document.documentElement.clientHeight,window.innerHeight||0),w:e}}}],(n=null)&&o(t.prototype,n),r&&o(t,r),e}();t.Utils=s,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(s,"xhrTimeout",void 0)},function(e,t,n){(function(r){function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(106)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(o=++i)}),e.splice(o,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())}).call(this,n(107))},function(e,t,n){var r;!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,d={},p=d.toString,h=d.hasOwnProperty,v=h.toString,m=v.call(Object),g={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function x(e,t,n){var r,i=(t=t||a).createElement("script");if(i.text=e,n)for(r in w)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var _=function(e,t){return new _.fn.init(e,t)},j=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function O(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!b(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}_.fn=_.prototype={jquery:"3.3.1",constructor:_,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=_.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return _.each(this,e)},map:function(e){return this.pushStack(_.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},_.extend=_.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(c&&r&&(_.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&_.isPlainObject(n)?n:{},a[t]=_.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},_.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=s(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&v.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){x(e)},each:function(e,t){var n,r=0;if(O(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(j,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(O(Object(e))?_.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(O(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return c.apply([],a)},guid:1,support:g}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=o[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var T=function(e){var t,n,r,i,o,a,s,u,c,l,f,d,p,h,v,m,g,b,y,w="sizzle"+1*new Date,x=e.document,k=0,_=0,j=ae(),O=ae(),T=ae(),C=function(e,t){return e===t&&(f=!0),0},E={}.hasOwnProperty,P=[],S=P.pop,M=P.push,D=P.push,N=P.slice,A=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+F+"*("+B+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+F+"*\\]",I=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",R=new RegExp(F+"+","g"),q=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),U=new RegExp("^"+F+"*,"+F+"*"),$=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),X=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),Y=new RegExp(I),W=new RegExp("^"+B+"$"),z={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){d()},ie=be(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{D.apply(P=N.call(x.childNodes),x.childNodes),P[x.childNodes.length].nodeType}catch(e){D={apply:P.length?function(e,t){M.apply(e,N.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var o,s,c,l,f,h,g,b=t&&t.ownerDocument,k=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return r;if(!i&&((t?t.ownerDocument||t:x)!==p&&d(t),t=t||p,v)){if(11!==k&&(f=K.exec(e)))if(o=f[1]){if(9===k){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(b&&(c=b.getElementById(o))&&y(t,c)&&c.id===o)return r.push(c),r}else{if(f[2])return D.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!T[e+" "]&&(!m||!m.test(e))){if(1!==k)b=t,g=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=w),s=(h=a(e)).length;s--;)h[s]="#"+l+" "+ge(h[s]);g=h.join(","),b=Q.test(e)&&ve(t.parentNode)||t}if(g)try{return D.apply(r,b.querySelectorAll(g)),r}catch(e){}finally{l===w&&t.removeAttribute("id")}}}return u(e.replace(q,"$1"),t,r,i)}function ae(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function se(e){return e[w]=!0,e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:x;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,v=!o(p),x!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=w,!p.getElementsByName||!p.getElementsByName(w).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},g=[],m=[],(n.qsa=J.test(p.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+F+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+w+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=J.test(b=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),g.push("!=",I)}),m=m.length&&new RegExp(m.join("|")),g=g.length&&new RegExp(g.join("|")),t=J.test(h.compareDocumentPosition),y=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===p||e.ownerDocument===x&&y(x,e)?-1:t===p||t.ownerDocument===x&&y(x,t)?1:l?A(l,e)-A(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===p?-1:t===p?1:i?-1:o?1:l?A(l,e)-A(l,t):0;if(i===o)return le(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?le(a[r],s[r]):a[r]===x?-1:s[r]===x?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&d(e),t=t.replace(X,"='$1']"),n.matchesSelector&&v&&!T[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t)))try{var r=b.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&d(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&d(e);var i=r.attrHandle[t.toLowerCase()],o=i&&E.call(r.attrHandle,t.toLowerCase())?i(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(C),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return l=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=j[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&j(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,v=o!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),b=!u&&!s,y=!1;if(m){if(o){for(;v;){for(d=t;d=d[v];)if(s?d.nodeName.toLowerCase()===g:1===d.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&b){for(y=(p=(c=(l=(f=(d=m)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[v]||(y=p=0)||h.pop();)if(1===d.nodeType&&++y&&d===t){l[e]=[k,p,y];break}}else if(b&&(y=p=(c=(l=(f=(d=t)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===y)for(;(d=++p&&d&&d[v]||(y=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==g:1!==d.nodeType)||!++y||(b&&((l=(f=d[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[k,y]),d!==t)););return(y-=i)===r||y%r==0&&y/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[w]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=A(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(q,"$1"));return r[w]?se(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return W.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function me(){}function ge(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=_++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,d=[k,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===k&&c[1]===s)return d[2]=c[2];if(l[o]=d,d[2]=e(t,n,u))return!0}return!1}}function ye(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function xe(e,t,n,r,i,o){return r&&!r[w]&&(r=xe(r)),i&&!i[w]&&(i=xe(i,o)),se(function(o,a,s,u){var c,l,f,d=[],p=[],h=a.length,v=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?v:we(v,d,e,s,u),g=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,g,s,u),r)for(c=we(g,p),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(g[p[l]]=!(m[p[l]]=f));if(o){if(i||e){if(i){for(c=[],l=g.length;l--;)(f=g[l])&&c.push(m[l]=f);i(null,g=[],c,u)}for(l=g.length;l--;)(f=g[l])&&(c=i?A(o,f):d[l])>-1&&(o[c]=!(a[c]=f))}}else g=we(g===a?g.splice(h,g.length):g),i?i(null,a,g,u):D.apply(a,g)})}function ke(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=be(function(e){return e===t},s,!0),f=be(function(e){return A(t,e)>-1},s,!0),d=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])d=[be(ye(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[w]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return xe(u>1&&ye(d),u>1&&ge(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(q,"$1"),n,u<i&&ke(e.slice(u,i)),i<o&&ke(e=e.slice(i)),i<o&&ge(e))}d.push(n)}return ye(d)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,c,l=O[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=U.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=$.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(q," ")}),s=s.slice(n.length)),r.filter)!(i=z[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):O(e,u).slice(0)},s=oe.compile=function(e,t){var n,i=[],o=[],s=T[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=ke(t[n]))[w]?i.push(s):o.push(s);(s=T(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,l){var f,h,m,g=0,b="0",y=o&&[],w=[],x=c,_=o||i&&r.find.TAG("*",l),j=k+=null==x?1:Math.random()||.1,O=_.length;for(l&&(c=a===p||a||l);b!==O&&null!=(f=_[b]);b++){if(i&&f){for(h=0,a||f.ownerDocument===p||(d(f),s=!v);m=e[h++];)if(m(f,a||p,s)){u.push(f);break}l&&(k=j)}n&&((f=!m&&f)&&g--,o&&y.push(f))}if(g+=b,n&&b!==g){for(h=0;m=t[h++];)m(y,w,a,s);if(o){if(g>0)for(;b--;)y[b]||w[b]||(w[b]=S.call(u));w=we(w)}D.apply(u,w),l&&!o&&w.length>0&&g+t.length>1&&oe.uniqueSort(u)}return l&&(k=j,c=x),y};return n?se(o):o}(o,i))).selector=e}return s},u=oe.select=function(e,t,n,i){var o,u,c,l,f,d="function"==typeof e&&e,p=!i&&a(e=d.selector||e);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&v&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=z.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(Z,ee),Q.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ge(u)))return D.apply(n,i),n;break}}return(d||s(e,p))(i,t,!v,n,!t||Q.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(C).join("")===w,n.detectDuplicates=!!f,d(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(L,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(n);_.find=T,_.expr=T.selectors,_.expr[":"]=_.expr.pseudos,_.uniqueSort=_.unique=T.uniqueSort,_.text=T.getText,_.isXMLDoc=T.isXML,_.contains=T.contains,_.escapeSelector=T.escape;var C=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&_(e).is(n))break;r.push(e)}return r},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=_.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,n){return b(t)?_.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?_.grep(e,function(e){return e===t!==n}):"string"!=typeof t?_.grep(e,function(e){return f.call(t,e)>-1!==n}):_.filter(t,e,n)}_.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?_.find.matchesSelector(r,e)?[r]:[]:_.find.matches(e,_.grep(t,function(e){return 1===e.nodeType}))},_.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(_(e).filter(function(){for(t=0;t<r;t++)if(_.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)_.find(e,i[t],n);return r>1?_.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&P.test(e)?_(e):e||[],!1).length}});var N,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(_.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:A.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof _?t[0]:t,_.merge(this,_.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),M.test(r[1])&&_.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(_):_.makeArray(e,this)}).prototype=_.fn,N=_(a);var L=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function B(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}_.fn.extend({has:function(e){var t=_(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(_.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&_(e);if(!P.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&_.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?_.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(_(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),_.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return B(e,"nextSibling")},prev:function(e){return B(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return S(e,"iframe")?e.contentDocument:(S(e,"template")&&(e=e.content||e),_.merge([],e.childNodes))}},function(e,t){_.fn[e]=function(n,r){var i=_.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=_.filter(r,i)),this.length>1&&(F[e]||_.uniqueSort(i),L.test(e)&&i.reverse()),this.pushStack(i)}});var H=/[^\x20\t\r\n\f]+/g;function I(e){return e}function R(e){throw e}function q(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}_.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return _.each(e.match(H)||[],function(e,n){t[n]=!0}),t}(e):_.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){_.each(n,function(n,r){b(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==k(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return _.each(arguments,function(e,t){for(var n;(n=_.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?_.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},_.extend({Deferred:function(e){var t=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return _.Deferred(function(n){_.each(t,function(t,r){var i=b(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,b(c)?i?c.call(n,a(o,t,I,i),a(o,t,R,i)):(o++,c.call(n,a(o,t,I,i),a(o,t,R,i),a(o,t,I,t.notifyWith))):(r!==I&&(s=void 0,u=[n]),(i||t.resolveWith)(s,u))}},l=i?c:function(){try{c()}catch(n){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(r!==R&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(_.Deferred.getStackHook&&(l.stackTrace=_.Deferred.getStackHook()),n.setTimeout(l))}}return _.Deferred(function(n){t[0][3].add(a(0,n,b(i)?i:I,n.notifyWith)),t[1][3].add(a(0,n,b(e)?e:I)),t[2][3].add(a(0,n,b(r)?r:R))}).promise()},promise:function(e){return null!=e?_.extend(e,i):i}},o={};return _.each(t,function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add(function(){r=s},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=u.call(arguments),o=_.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(q(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||b(i[n]&&i[n].then)))return o.then();for(;n--;)q(i[n],a(n),o.reject);return o.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&U.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},_.readyException=function(e){n.setTimeout(function(){throw e})};var $=_.Deferred();function X(){a.removeEventListener("DOMContentLoaded",X),n.removeEventListener("load",X),_.ready()}_.fn.ready=function(e){return $.then(e).catch(function(e){_.readyException(e)}),this},_.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--_.readyWait:_.isReady)||(_.isReady=!0,!0!==e&&--_.readyWait>0||$.resolveWith(a,[_]))}}),_.ready.then=$.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(_.ready):(a.addEventListener("DOMContentLoaded",X),n.addEventListener("load",X));var Y=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===k(n))for(s in i=!0,n)Y(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(_(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},W=/^-ms-/,z=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(W,"ms-").replace(z,V)}var J=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=_.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},J(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||_.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!_.isEmptyObject(t)}};var Q=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}_.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),_.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Z.set(this,e)}):Y(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),_.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,_.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=_.queue(e,t),r=n.length,i=n.shift(),o=_._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){_.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:_.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),_.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?_.queue(this[0],e):void 0===t?this:this.each(function(){var n=_.queue(this,e,t);_._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&_.dequeue(this,e)})},dequeue:function(e){return this.each(function(){_.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=_.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&_.contains(e.ownerDocument,e)&&"none"===_.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return _.css(e,t,"")},u=s(),c=n&&n[3]||(_.cssNumber[t]?"":"px"),l=(_.cssNumber[t]||"px"!==c&&+u)&&ie.exec(_.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)_.style(e,t,l+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),l/=o;l*=2,_.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var ce={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,i=ce[r];return i||(t=n.body.appendChild(n.createElement(r)),i=_.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ce[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=le(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}_.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?_(this).show():_(this).hide()})}});var de=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?_.merge([e],n):n}function ge(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ve.optgroup=ve.option,ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td;var be,ye,we=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,u,c,l,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===k(o))_.merge(d,o.nodeType?[o]:o);else if(we.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(pe.exec(o)||["",""])[1].toLowerCase(),u=ve[s]||ve._default,a.innerHTML=u[1]+_.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;_.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&_.inArray(o,r)>-1)i&&i.push(o);else if(c=_.contains(o.ownerDocument,o),a=me(f.appendChild(o),"script"),c&&ge(a),n)for(l=0;o=a[l++];)he.test(o.type||"")&&n.push(o);return f}be=a.createDocumentFragment().appendChild(a.createElement("div")),(ye=a.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),be.appendChild(ye),g.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var ke=a.documentElement,_e=/^key/,je=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Oe=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ce(){return!1}function Ee(){try{return a.activeElement}catch(e){}}function Pe(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Pe(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return _().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=_.guid++)),e.each(function(){_.event.add(this,t,i,r,n)})}_.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,d,p,h,v,m=Q.get(e);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&_.find.matchesSelector(ke,i),n.guid||(n.guid=_.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==_&&_.event.triggered!==t.type?_.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(H)||[""]).length;c--;)p=v=(s=Oe.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=_.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=_.event.special[p]||{},l=_.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&_.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,l):d.push(l),_.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,d,p,h,v,m=Q.hasData(e)&&Q.get(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(p=v=(s=Oe.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=_.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)l=d[o],!i&&v!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(o,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,m.handle)||_.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)_.event.remove(e,p+t[c],n,r,!0);_.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=_.event.fix(e),u=new Array(arguments.length),c=(Q.get(this,"events")||{})[s.type]||[],l=_.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,s)){for(a=_.event.handlers.call(this,s,c),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((_.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?_(i,this).index(c)>-1:_.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(_.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[_.expando]?e:new _.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ee()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ee()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S(this,"input"))return this.click(),!1},_default:function(e){return S(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},_.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},_.Event=function(e,t){if(!(this instanceof _.Event))return new _.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&_.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&_e.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&je.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},_.event.addProp),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){_.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||_.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),_.fn.extend({on:function(e,t,n,r){return Pe(this,e,t,n,r)},one:function(e,t,n,r){return Pe(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,_(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){_.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Me=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&_(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,r,i,o,a,s,u,c;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),c=o.events))for(i in delete a.handle,a.events={},c)for(n=0,r=c[i].length;n<r;n++)_.event.add(t,i,c[i][n]);Z.hasData(e)&&(s=Z.access(e),u=_.extend({},s),Z.set(t,u))}}function He(e,t,n,r){t=c.apply([],t);var i,o,a,s,u,l,f=0,d=e.length,p=d-1,h=t[0],v=b(h);if(v||d>1&&"string"==typeof h&&!g.checkClone&&De.test(h))return e.each(function(i){var o=e.eq(i);v&&(t[0]=h.call(this,i,o.html())),He(o,t,n,r)});if(d&&(o=(i=xe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=_.map(me(i,"script"),Le)).length;f<d;f++)u=i,f!==p&&(u=_.clone(u,!0,!0),s&&_.merge(a,me(u,"script"))),n.call(e[f],u,f);if(s)for(l=a[a.length-1].ownerDocument,_.map(a,Fe),f=0;f<s;f++)u=a[f],he.test(u.type||"")&&!Q.access(u,"globalEval")&&_.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?_._evalUrl&&_._evalUrl(u.src):x(u.textContent.replace(Ne,""),l,u))}return e}function Ie(e,t,n){for(var r,i=t?_.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||_.cleanData(me(r)),r.parentNode&&(n&&_.contains(r.ownerDocument,r)&&ge(me(r,"script")),r.parentNode.removeChild(r));return e}_.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,c,l=e.cloneNode(!0),f=_.contains(e.ownerDocument,e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||_.isXMLDoc(e)))for(a=me(l),r=0,i=(o=me(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(c=u.nodeName.toLowerCase())&&de.test(s.type)?u.checked=s.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||me(e),a=a||me(l),r=0,i=o.length;r<i;r++)Be(o[r],a[r]);else Be(e,l);return(a=me(l,"script")).length>0&&ge(a,!f&&me(e,"script")),l},cleanData:function(e){for(var t,n,r,i=_.event.special,o=0;void 0!==(n=e[o]);o++)if(J(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?_.event.remove(n,r):_.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),_.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return Y(this,function(e){return void 0===e?_.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(_.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return _.clone(this,e,t)})},html:function(e){return Y(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ve[(pe.exec(e)||["",""])[1].toLowerCase()]){e=_.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(_.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;_.inArray(this,e)<0&&(_.cleanData(me(this)),n&&n.replaceChild(t,this))},e)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){_.fn[e]=function(e){for(var n,r=[],i=_(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),_(i[a])[t](n),l.apply(r,n.get());return this.pushStack(r)}});var Re=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ue=new RegExp(oe.join("|"),"i");function $e(e,t,n){var r,i,o,a,s=e.style;return(n=n||qe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||_.contains(e.ownerDocument,e)||(a=_.style(e,t)),!g.pixelBoxStyles()&&Re.test(a)&&Ue.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Xe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ke.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",s=36===t(e.right),i=36===t(e.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",ke.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,s,u,c=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===l.style.backgroundClip,_.extend(g,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var Ye=/^(none|table(?!-c[ea]).+)/,We=/^--/,ze={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Je=a.createElement("div").style;function Ke(e){var t=_.cssProps[e];return t||(t=_.cssProps[e]=function(e){if(e in Je)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Je)return e}(e)||e),t}function Qe(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=_.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=_.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=_.css(e,"border"+oe[a]+"Width",!0,i))):(u+=_.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=_.css(e,"border"+oe[a]+"Width",!0,i):s+=_.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=qe(e),i=$e(e,t,r),o="border-box"===_.css(e,"boxSizing",!1,r),a=o;if(Re.test(i)){if(!n)return i;i="auto"}return a=a&&(g.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===_.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}_.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=We.test(t),c=e.style;if(u||(t=Ke(s)),a=_.cssHooks[t]||_.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"===(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(_.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return We.test(t)||(t=Ke(s)),(a=_.cssHooks[t]||_.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=$e(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),_.each(["height","width"],function(e,t){_.cssHooks[t]={get:function(e,n,r){if(n)return!Ye.test(_.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,ze,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=qe(e),a="border-box"===_.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&g.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=_.css(e,t)),Qe(0,n,s)}}}),_.cssHooks.marginLeft=Xe(g.reliableMarginLeft,function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),_.each({margin:"",padding:"",border:"Width"},function(e,t){_.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(_.cssHooks[e+t].set=Qe)}),_.fn.extend({css:function(e,t){return Y(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=qe(e),i=t.length;a<i;a++)o[t[a]]=_.css(e,t[a],!1,r);return o}return void 0!==n?_.style(e,t,n):_.css(e,t)},e,t,arguments.length>1)}}),_.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||_.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(_.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=_.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=_.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){_.fx.step[e.prop]?_.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[_.cssProps[e.prop]]&&!_.cssHooks[e.prop]?e.elem[e.prop]=e.now:_.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},_.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},_.fx=tt.prototype.init,_.fx.step={};var nt,rt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){rt&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,_.fx.interval),_.fx.tick())}function st(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function lt(e,t,n){var r,i,o=0,a=lt.prefilters.length,s=_.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:_.extend({},t),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=_.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=G(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=_.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(l,c.opts.specialEasing);o<a;o++)if(r=lt.prefilters[o].call(c,e,l,c.opts))return b(r.stop)&&(_._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return _.map(l,ct,c),b(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),_.fx.timer(_.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}_.Animation=_.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){b(e)?(t=e,e=["*"]):e=e.match(H);for(var n,r=0,i=e.length;r<i;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,l,f="width"in t||"height"in t,d=this,p={},h=e.style,v=e.nodeType&&ae(e),m=Q.get(e,"fxshow");for(r in n.queue||(null==(a=_._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,_.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;v=!0}p[r]=m&&m[r]||_.style(e,r)}if((u=!_.isEmptyObject(t))||!_.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=Q.get(e,"display")),"none"===(l=_.css(e,"display"))&&(c?l=c:(fe([e],!0),c=e.style.display||c,l=_.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===_.css(e,"float")&&(u||(d.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,p)u||(m?"hidden"in m&&(v=m.hidden):m=Q.access(e,"fxshow",{display:c}),o&&(m.hidden=!v),v&&fe([e],!0),d.done(function(){for(r in v||fe([e]),Q.remove(e,"fxshow"),p)_.style(e,r,p[r])})),u=ct(v?m[r]:0,r,d),r in m||(m[r]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),_.speed=function(e,t,n){var r=e&&"object"==typeof e?_.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return _.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in _.fx.speeds?r.duration=_.fx.speeds[r.duration]:r.duration=_.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b(r.old)&&r.old.call(this),r.queue&&_.dequeue(this,r.queue)},r},_.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=_.isEmptyObject(e),o=_.speed(t,n,r),a=function(){var t=lt(this,_.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=_.timers,a=Q.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||_.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=_.timers,a=r?r.length:0;for(n.finish=!0,_.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),_.each(["toggle","show","hide"],function(e,t){var n=_.fn[t];_.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),_.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){_.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),_.timers=[],_.fx.tick=function(){var e,t=0,n=_.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||_.fx.stop(),nt=void 0},_.fx.timer=function(e){_.timers.push(e),_.fx.start()},_.fx.interval=13,_.fx.start=function(){rt||(rt=!0,at())},_.fx.stop=function(){rt=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(e,t){return e=_.fx&&_.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var ft,dt=_.expr.attrHandle;_.fn.extend({attr:function(e,t){return Y(this,_.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){_.removeAttr(this,e)})}}),_.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?_.prop(e,t,n):(1===o&&_.isXMLDoc(e)||(i=_.attrHooks[t.toLowerCase()]||(_.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void _.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=_.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?_.removeAttr(e,n):e.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||_.find.attr;dt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=dt[a],dt[a]=i,i=null!=n(e,t,r)?a:null,dt[a]=o),i}});var pt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function vt(e){return(e.match(H)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function gt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}_.fn.extend({prop:function(e,t){return Y(this,_.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[_.propFix[e]||e]})}}),_.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&_.isXMLDoc(e)||(t=_.propFix[t]||t,i=_.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=_.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(_.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){_.propFix[this.toLowerCase()]=this}),_.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(b(e))return this.each(function(t){_(this).addClass(e.call(this,t,mt(this)))});if((t=gt(e)).length)for(;n=this[u++];)if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(b(e))return this.each(function(t){_(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=gt(e)).length)for(;n=this[u++];)if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):b(e)?this.each(function(n){_(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r)for(i=0,o=_(this),a=gt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;_.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=b(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,_(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=_.map(i,function(e){return null==e?"":e+""})),(t=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=_.valHooks[i.type]||_.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n:void 0}}),_.extend({valHooks:{option:{get:function(e){var t=_.find.attr(e,"value");return null!=t?t:vt(_.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=_(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=_.makeArray(t),a=i.length;a--;)((r=i[a]).selected=_.inArray(_.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),_.each(["radio","checkbox"],function(){_.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=_.inArray(_(e).val(),t)>-1}},g.checkOn||(_.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),g.focusin="onfocusin"in n;var yt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};_.extend(_.event,{trigger:function(e,t,r,i){var o,s,u,c,l,f,d,p,v=[r||a],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(s=p=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!yt.test(m+_.event.triggered)&&(m.indexOf(".")>-1&&(m=(g=m.split(".")).shift(),g.sort()),l=m.indexOf(":")<0&&"on"+m,(e=e[_.expando]?e:new _.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:_.makeArray(t,[e]),d=_.event.special[m]||{},i||!d.trigger||!1!==d.trigger.apply(r,t))){if(!i&&!d.noBubble&&!y(r)){for(c=d.delegateType||m,yt.test(c+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(r.ownerDocument||a)&&v.push(u.defaultView||u.parentWindow||n)}for(o=0;(s=v[o++])&&!e.isPropagationStopped();)p=s,e.type=o>1?c:d.bindType||m,(f=(Q.get(s,"events")||{})[e.type]&&Q.get(s,"handle"))&&f.apply(s,t),(f=l&&s[l])&&f.apply&&J(s)&&(e.result=f.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),t)||!J(r)||l&&b(r[m])&&!y(r)&&((u=r[l])&&(r[l]=null),_.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,wt),r[m](),e.isPropagationStopped()&&p.removeEventListener(m,wt),_.event.triggered=void 0,u&&(r[l]=u)),e.result}},simulate:function(e,t,n){var r=_.extend(new _.Event,n,{type:e,isSimulated:!0});_.event.trigger(r,null,t)}}),_.fn.extend({trigger:function(e,t){return this.each(function(){_.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return _.event.trigger(e,t,n,!0)}}),g.focusin||_.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){_.event.simulate(t,e.target,_.event.fix(e))};_.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}});var xt=n.location,kt=Date.now(),_t=/\?/;_.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||_.error("Invalid XML: "+e),t};var jt=/\[\]$/,Ot=/\r?\n/g,Tt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Et(e,t,n,r){var i;if(Array.isArray(t))_.each(t,function(t,i){n||jt.test(e)?r(e,i):Et(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==k(t))r(e,t);else for(i in t)Et(e+"["+i+"]",t[i],n,r)}_.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!_.isPlainObject(e))_.each(e,function(){i(this.name,this.value)});else for(n in e)Et(n,e[n],t,i);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=_.prop(this,"elements");return e?_.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!_(this).is(":disabled")&&Ct.test(this.nodeName)&&!Tt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}}):{name:t.name,value:n.replace(Ot,"\r\n")}}).get()}});var Pt=/%20/g,St=/#.*$/,Mt=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,At=/^\/\//,Lt={},Ft={},Bt="*/".concat("*"),Ht=a.createElement("a");function It(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(H)||[];if(b(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Rt(e,t,n,r){var i={},o=e===Ft;function a(s){var u;return i[s]=!0,_.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function qt(e,t){var n,r,i=_.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&_.extend(!0,e,r),e}Ht.href=xt.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?qt(qt(e,_.ajaxSettings),t):qt(_.ajaxSettings,e)},ajaxPrefilter:It(Lt),ajaxTransport:It(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,u,c,l,f,d,p,h=_.ajaxSetup({},t),v=h.context||h,m=h.context&&(v.nodeType||v.jquery)?_(v):_.event,g=_.Deferred(),b=_.Callbacks("once memory"),y=h.statusCode||{},w={},x={},k="canceled",j={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Dt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==l&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)j.always(e[j.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||k;return r&&r.abort(t),O(0,t),this}};if(g.promise(j),h.url=((e||h.url||xt.href)+"").replace(At,xt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(H)||[""],null==h.crossDomain){c=a.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=_.param(h.data,h.traditional)),Rt(Lt,h,t,j),l)return j;for(d in(f=_.event&&h.global)&&0==_.active++&&_.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Nt.test(h.type),i=h.url.replace(St,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pt,"+")):(p=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(_t.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Mt,"$1"),p=(_t.test(i)?"&":"?")+"_="+kt+++p),h.url=i+p),h.ifModified&&(_.lastModified[i]&&j.setRequestHeader("If-Modified-Since",_.lastModified[i]),_.etag[i]&&j.setRequestHeader("If-None-Match",_.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&j.setRequestHeader("Content-Type",h.contentType),j.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Bt+"; q=0.01":""):h.accepts["*"]),h.headers)j.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(v,j,h)||l))return j.abort();if(k="abort",b.add(h.complete),j.done(h.success),j.fail(h.error),r=Rt(Ft,h,t,j)){if(j.readyState=1,f&&m.trigger("ajaxSend",[j,h]),l)return j;h.async&&h.timeout>0&&(u=n.setTimeout(function(){j.abort("timeout")},h.timeout));try{l=!1,r.send(w,O)}catch(e){if(l)throw e;O(-1,e)}}else O(-1,"No Transport");function O(e,t,a,s){var c,d,p,w,x,k=t;l||(l=!0,u&&n.clearTimeout(u),r=void 0,o=s||"",j.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(h,j,a)),w=function(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(h,w,j,c),c?(h.ifModified&&((x=j.getResponseHeader("Last-Modified"))&&(_.lastModified[i]=x),(x=j.getResponseHeader("etag"))&&(_.etag[i]=x)),204===e||"HEAD"===h.type?k="nocontent":304===e?k="notmodified":(k=w.state,d=w.data,c=!(p=w.error))):(p=k,!e&&k||(k="error",e<0&&(e=0))),j.status=e,j.statusText=(t||k)+"",c?g.resolveWith(v,[d,k,j]):g.rejectWith(v,[j,k,p]),j.statusCode(y),y=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[j,h,c?d:p]),b.fireWith(v,[j,k]),f&&(m.trigger("ajaxComplete",[j,h]),--_.active||_.event.trigger("ajaxStop")))}return j},getJSON:function(e,t,n){return _.get(e,t,n,"json")},getScript:function(e,t){return _.get(e,void 0,t,"script")}}),_.each(["get","post"],function(e,t){_[t]=function(e,n,r,i){return b(n)&&(i=i||r,r=n,n=void 0),_.ajax(_.extend({url:e,type:t,dataType:i,data:n,success:r},_.isPlainObject(e)&&e))}}),_._evalUrl=function(e){return _.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},_.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=_(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b(e)?this.each(function(t){_(this).wrapInner(e.call(this,t))}):this.each(function(){var t=_(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b(e);return this.each(function(n){_(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){_(this).replaceWith(this.childNodes)}),this}}),_.expr.pseudos.hidden=function(e){return!_.expr.pseudos.visible(e)},_.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},$t=_.ajaxSettings.xhr();g.cors=!!$t&&"withCredentials"in $t,g.ajax=$t=!!$t,_.ajaxTransport(function(e){var t,r;if(g.cors||$t&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ut[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),_.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return _.globalEval(e),e}}}),_.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),_.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=_("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Xt,Yt=[],Wt=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||_.expando+"_"+kt++;return this[e]=!0,e}}),_.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(Wt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Wt,"$1"+i):!1!==e.jsonp&&(e.url+=(_t.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?_(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(i)),a&&b(o)&&o(a[0]),a=o=void 0}),"script"}),g.createHTMLDocument=((Xt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),_.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=M.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=xe([e],t,o),o&&o.length&&_(o).remove(),_.merge([],i.childNodes)));var r,i,o},_.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&_.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?_("<div>").append(_.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){_.fn[t]=function(e){return this.on(t,e)}}),_.expr.pseudos.animated=function(e){return _.grep(_.timers,function(t){return e===t.elem}).length},_.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=_.css(e,"position"),l=_(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),o=_.css(e,"top"),u=_.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,_.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):l.css(f)}},_.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){_.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===_.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===_.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=_(e).offset()).top+=_.css(e,"borderTopWidth",!0),i.left+=_.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-_.css(r,"marginTop",!0),left:t.left-i.left-_.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===_.css(e,"position");)e=e.offsetParent;return e||ke})}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;_.fn[e]=function(r){return Y(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),_.each(["top","left"],function(e,t){_.cssHooks[t]=Xe(g.pixelPosition,function(e,n){if(n)return n=$e(e,t),Re.test(n)?_(e).position()[t]+"px":n})}),_.each({Height:"height",Width:"width"},function(e,t){_.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){_.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Y(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?_.css(t,n,s):_.style(t,n,i,s)},t,a?i:void 0,a)}})}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){_.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),_.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),_.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),_.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=u.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||_.guid++,i},_.holdReady=function(e){e?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=S,_.isFunction=b,_.isWindow=y,_.camelCase=G,_.type=k,_.now=Date.now,_.isNumeric=function(e){var t=_.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return _}.apply(t,[]))||(e.exports=r);var zt=n.jQuery,Vt=n.$;return _.noConflict=function(e){return n.$===_&&(n.$=Vt),e&&n.jQuery===_&&(n.jQuery=zt),_},i||(n.jQuery=n.$=_),_})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var r=n(19),i=n(15),o=n(14),a=n(4);function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t&&s(e.prototype,t),n&&s(e,n),e}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"els",void 0),c(this,"models",void 0),c(this,"options",void 0),c(this,"bindings",[]),t instanceof Array?this.els=t:this.els=[t],this.models=n,this.options=r,this.build()}return u(e,null,[{key:"create",value:function(t,n,r){var i=t.el.cloneNode(!0),o=new e(i,n,t.view.options);if(o.bind(),!t||!t.marker||null===t.marker.parentNode)throw new Error("[View] No parent node for binding!");return t.marker.parentNode.insertBefore(i,r),o}}]),u(e,[{key:"buildBinding",value:function(e,t,n,r,o){var s=(0,a.parseDeclaration)(n),u=s.keypath,c=s.pipes;this.bindings.push(new i.Binding(this,e,t,u,r,o,c))}},{key:"build",value:function(){this.bindings=[];var t,n,r=this.els;for(t=0,n=r.length;t<n;t++){if(!this.options.templateDelimiters)throw new Error("templateDelimiters required");(0,a.parseNode)(this,r[t],this.options.templateDelimiters)}this.bindings.sort(e.bindingComparator)}},{key:"traverse",value:function(e){var t=this.options.prefix;if(!t)throw new Error("prefix is required");t+="-";for(var n,i,a,s,u="SCRIPT"===e.nodeName||"STYLE"===e.nodeName,c=e.attributes,l=[],f=this.options.starBinders,d=0,p=c.length;d<p;d++){var h=c[d];if(0===h.name.indexOf(t)){if(n=h.name.slice(t.length),s=[],!(i=this.options.binders[n]))for(var v=0;v<f.length;v++)if(a=f[v],n.slice(0,a.length-1)===a.slice(0,-1)){i=this.options.binders[a],s.push(n.slice(a.length-1));break}if(i||(i=r.Tinybind.fallbackBinder),i.block)return this.buildBinding(e,n,h.value,i,s),e.removeAttribute(h.name),!0;l.push({attr:h,binder:i,type:n,args:s})}}for(var m=0;m<l.length;m++){var g=l[m];this.buildBinding(e,g.type,g.attr.value,g.binder,g.args),e.removeAttribute(g.attr.name)}return u||(n=e.nodeName.toLowerCase(),this.options.components[n]&&!e._bound&&(this.bindings.push(new o.ComponentBinding(this,e,n)),u=!0)),u}},{key:"bind",value:function(){this.bindings.forEach(function(e){e.bind()})}},{key:"unbind",value:function(){Array.isArray(this.bindings)&&this.bindings.forEach(function(e){e.unbind()})}},{key:"sync",value:function(){this.bindings.forEach(function(e){e.sync&&e.sync()})}},{key:"publish",value:function(){this.bindings.forEach(function(e){e.binder&&e.publish&&e.binder.publishes&&e.publish()})}},{key:"update",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(t).forEach(function(n){e.models[n]=t[n]}),this.bindings.forEach(function(e){e.update&&e.update(t)})}}]),e}();t.View=l,c(l,"DECLARATION_SPLIT",/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g),c(l,"textBinder",{routine:function(e,t){e.data=null!=t?t:""}}),c(l,"bindingComparator",function(e,t){var n=e.binder&&e.binder.priority||0;return(t.binder&&t.binder.priority||0)-n})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseType=function(e){var t=o,n=e;if(void 0===e)return{type:t,value:void 0};c.test(e)?n=e.slice(1,-1):"true"===e?n=!0:"false"===e?n=!1:"null"===e?n=null:"undefined"===e?n=void 0:""===e?n=void 0:isNaN(Number(e))?(0,r.isJson)(e)?n=JSON.parse(e):t=a:n=Number(e);return{type:t,value:n}},t.parseTemplate=f,t.parseNode=function e(t,n,r){var o=!1;n=n;if(3===n.nodeType){var a=null;if(n.data&&(a=f(n.data,r)),a&&a.length){if(!n.parentNode)throw new Error("[View] Node (TEXT_NODE) has no parent node");for(var s=0;s<a.length;s++){var u=a[s],c=document.createTextNode(u.value);n.parentNode.insertBefore(c,n),1===u.type&&t.buildBinding(c,null,u.value,i.View.textBinder,null)}n.parentNode.removeChild(n)}o=!0}else 1===n.nodeType&&(o=t.traverse(n));if(!o&&n.childNodes)for(var l=0;l<n.childNodes.length;l++)e(t,n.childNodes[l],r)},t.parseDeclaration=function(e){var t=e.match(l);if(null===t)throw new Error("[View] No matches");var n=t.map(function(e){return e.trim()});return{keypath:n.shift()||void 0,pipes:n}},t.BINDING=t.TEXT=t.KEYPATH=t.PRIMITIVE=void 0;var r=n(0),i=n(3),o=0;t.PRIMITIVE=o;var a=1;t.KEYPATH=a;var s=0;t.TEXT=s;var u=1;t.BINDING=u;var c=/^'.*'$|^".*"$/,l=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g;function f(e,t){for(var n=null,r=e.length,i=0,o=0,a=t[0],c=t[1];o<r;){if((i=e.indexOf(a,o))<0){n&&n.push({type:s,value:e.slice(o)});break}if(n=n||[],i>0&&o<i&&n.push({type:s,value:e.slice(o,i)}),o=i+a.length,(i=e.indexOf(c,o))<0){var l=e.slice(o-c.length),f=n[n.length-1];f&&f.type===s?f.value+=l:n.push({type:s,value:l});break}var d=e.slice(o,i).trim();n.push({type:u,value:d}),o=i+c.length}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;var r=n(11);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function a(e){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),o(this,a(t).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(t,r.Utils),t}();t.Utils=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.get=void 0;var r=n(0);t.get=function(e,t){return r.Utils.isObject(e)||r.Utils.isArray(e)?e[t]:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentService=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};n(7);function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"components",void 0),a(this,"debug",(0,i.default)("components:ComponentService")),this.components=t}var t,n,r;return t=e,(n=[{key:"registWrapper",value:function(e,t){t||(t=e.name);var n=e;return this.components[t]=n,this.components}},{key:"regist",value:function(e,t){if(t||(e.hasOwnProperty("constructor")&&(t=e.constructor.name),e.hasOwnProperty("name")&&(t=e.name)),this.debug("name",t,e),!t)throw new Error("[ComponentService] name is required");return this.components[t]=e,this.components}},{key:"regists",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.regist(e[t],t);return this.components}}])&&o(t.prototype,n),r&&o(t,r),e}();t.ComponentService=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Observer=void 0;var r=n(0);function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"keypath",void 0),a(this,"callback",void 0),a(this,"objectPath",void 0),a(this,"obj",void 0),a(this,"target",void 0),a(this,"key",void 0),a(this,"tokens",void 0),this.keypath=n,this.callback=i,this.objectPath=[];var o=this.parse();this.key=o.key,this.tokens=o.tokens,this.obj=this.getRootObject(t),this.target=this.realize(),(0,r.isObject)(this.target)&&this.set(!0,this.key,this.target,this.callback)}return o(e,null,[{key:"updateOptions",value:function(t){e.adapters=t.adapters,e.interfaces=Object.keys(e.adapters),e.rootInterface=t.rootInterface}},{key:"tokenize",value:function(t,n){var r,i,o=[],a={i:n,path:""};for(r=0;r<t.length;r++)i=t.charAt(r),~e.interfaces.indexOf(i)?(o.push(a),a={i:i,path:""}):a.path+=i;return o.push(a),o}}]),o(e,[{key:"parse",value:function(){var t,n;if(!e.interfaces.length)throw new Error("[Observer] Must define at least one adapter interface.");if(~e.interfaces.indexOf(this.keypath[0])?(n=this.keypath[0],t=this.keypath.substr(1)):(n=e.rootInterface,t=this.keypath),this.tokens=e.tokenize(t,n),!this.tokens.length)throw new Error("[Observer] No tokens");return this.key=this.tokens.pop(),{key:this.key,tokens:this.tokens}}},{key:"realize",value:function(){for(var e,t,n=this.obj,i=-1,o=0;o<this.tokens.length;o++)t=this.tokens[o],(0,r.isObject)(n)?(void 0!==this.objectPath[o]?n!==(e=this.objectPath[o])&&(this.set(!1,t,e,this),this.set(!0,t,n,this),this.objectPath[o]=n):(this.set(!0,t,n,this),this.objectPath[o]=n),n=this.get(t,n)):(-1===i&&(i=o),(e=this.objectPath[o])&&this.set(!1,t,e,this));return-1!==i&&this.objectPath.splice(i),n}},{key:"sync",value:function(){var e,t,n;(e=this.realize())!==this.target?((0,r.isObject)(this.target)&&this.set(!1,this.key,this.target,this.callback),(0,r.isObject)(e)&&this.set(!0,this.key,e,this.callback),t=this.value(),this.target=e,((n=this.value())!==t||n instanceof Function)&&this.callback.sync()):e instanceof Array&&this.callback.sync()}},{key:"value",value:function(){if((0,r.isObject)(this.target))return this.get(this.key,this.target)}},{key:"setValue",value:function(t){(0,r.isObject)(this.target)&&e.adapters[this.key.i].set(this.target,this.key.path,t)}},{key:"get",value:function(t,n){return e.adapters[t.i].get(n,t.path)}},{key:"set",value:function(t,n,r,i){t?e.adapters[n.i].observe(r,n.path,i):e.adapters[n.i].unobserve(r,n.path,i)}},{key:"unobserve",value:function(){for(var e,t,n=0;n<this.tokens.length;n++)t=this.tokens[n],(e=this.objectPath[n])&&this.set(!1,t,e,this);(0,r.isObject)(this.target)&&this.set(!1,this.key,this.target,this.callback)}},{key:"getRootObject",value:function(e){var t,n;if(!e.$parent)return e;for(t=this.tokens.length?this.tokens[0].path:this.key.path,n=e;n.$parent&&void 0===n[t];)n=n.$parent;return n}}]),e}();t.Observer=s,a(s,"adapters",void 0),a(s,"interfaces",void 0),a(s,"rootInterface",void 0)},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalEvent=void 0;var o=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"events",{}),e.instance)return e.instance;e.instance=this}var t,n,o;return t=e,(n=[{key:"on",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"off",value:function(e,t){e in this.events!=!1&&this.events[e].splice(this.events[e].indexOf(t),1)}},{key:"trigger",value:function(e){if(e in this.events!=!1){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var i=0;i<this.events[e].length;i++)this.events[e][i].apply(this,n)}}}])&&r(t.prototype,n),o&&r(t,o),e}();t.GlobalEvent=o,i(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransition=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(0);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"$oldContainer",void 0),s(this,"$newContainer",void 0),s(this,"newContainerLoading",void 0),s(this,"deferred",void 0),s(this,"debug",(0,i.default)("barba:BaseTransition"))}var t,n,r;return t=e,(n=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.deferred=o.Utils.deferred();var r=o.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),t.then(function(e){n.$newContainer=e,r.resolve()}),this.deferred.promise}},{key:"done",value:function(){if(this.debug("done"),!this.$oldContainer)throw new Error("Can't remove old container");if(this.$oldContainer.remove(),!this.$newContainer)throw new Error("Can't show new container");this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}])&&a(t.prototype,n),r&&a(t,r),e}();t.BaseTransition=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(102);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.empty=void 0;var r=n(13);t.empty=function(e){return!(0,r.count)(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;t.count=function(e){return e&&e.length?e.length:0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentBinding=void 0;var r=n(4),i=n(3),o=n(8),a=n(0);function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"view",void 0),u(this,"componentView",void 0),u(this,"el",void 0),u(this,"type",void 0),u(this,"component",void 0),u(this,"static",{}),u(this,"keypaths",{}),u(this,"formattersObservers",{}),u(this,"observers",void 0),u(this,"bindingPrefix",void 0),u(this,"pipes",{}),this.view=t,this.el=n,this.type=r,this.component=t.options.components[this.type],this.static={},this.observers={},this.bindingPrefix=t.options.prefix+"-",this.parseTarget(),this.sync()}var t,n,c;return t=e,(n=[{key:"observe",value:function(e,t,n){return new o.Observer(e,t,n)}},{key:"sync",value:function(){var e=this;Object.keys(this.static).forEach(function(t){e.component.bind&&-1!==e.component.bind.indexOf(t)&&(e[t]=e.static[t])}),Object.keys(this.observers).forEach(function(t){e.component.bind&&-1!==e.component.bind.indexOf(t)&&(e[t]=e.observers[t].value())})}},{key:"publish",value:function(e,t){e&&this.observers[e]&&this.observers[e].setValue(t)}},{key:"locals",value:function(){var e=this,t={};return Object.keys(this.static).forEach(function(n){t[n]=e.static[n]}),Object.keys(this.observers).forEach(function(n){t[n]=e.observers[n].value()}),t}},{key:"camelCase",value:function(e){return e.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})}},{key:"getMergedOptions",value:function(){var e={adapters:Object.create(null),binders:Object.create(null),components:Object.create(null),formatters:Object.create(null),starBinders:Object.create(null),rootInterface:Object.create(null)};return this.component.binders&&(e.binders=a.Utils.concat(!1,e.binders,this.component.binders)),this.component.formatters&&(e.formatters=a.Utils.concat(!1,e.formatters,this.component.formatters)),this.component.components&&(e.components=a.Utils.concat(!1,e.components,this.component.components)),this.component.adapters&&(e.adapters=a.Utils.concat(!1,e.adapters,this.component.adapters)),e.binders=a.Utils.concat(!1,e.binders,this.view.options.binders),e.formatters=a.Utils.concat(!1,e.formatters,this.view.options.formatters),e.components=a.Utils.concat(!1,e.components,this.view.options.components),e.adapters=a.Utils.concat(!1,e.adapters,this.view.options.adapters),e.prefix=this.component.prefix?this.component.prefix:this.view.options.prefix,e.templateDelimiters=this.component.templateDelimiters?this.component.templateDelimiters:this.view.options.templateDelimiters,e.rootInterface=this.component.rootInterface?this.component.rootInterface:this.view.options.rootInterface,e.preloadData=this.component.preloadData?this.component.preloadData:this.view.options.preloadData,e.handler=this.component.handler?this.component.handler:this.view.options.handler,e.starBinders=Object.keys(e.binders).filter(function(e){return e.indexOf("*")>0}),e}},{key:"bind",value:function(){if(this.el._bound)this.view.bind();else{var e=this.component.template.call(this);null!==e&&(this.el.innerHTML=e);var t=this.component.initialize.call(this,this.el,this.locals());new i.View(Array.prototype.slice.call(this.el.childNodes),t,this.getMergedOptions()).bind(),this.el._bound=!0}}},{key:"parseTarget",value:function(){for(var e=0,t=this.el.attributes.length;e<t;e++){var n=this.el.attributes[e];if(0!==n.name.indexOf(this.bindingPrefix)){var i=this.camelCase(n.name),o=n.value,a=(0,r.parseDeclaration)(o);a.pipes.length>0&&console.warn("Formatters on component arguments not supported for the moment",a.pipes),this.pipes[i]=a.pipes;var s=(0,r.parseType)(a.keypath);if(void 0!==this.component.static&&-1!==this.component.static.indexOf(i))this.static[i]=n.value;else if(s.type===r.PRIMITIVE)this.static[i]=s.value;else{if(s.type!==r.KEYPATH)throw new Error("can't parse component attribute");this.keypaths[i]=n.value,this.observers[i]=this.observe(this.view.models,this.keypaths[i],this)}}}}},{key:"unbind",value:function(){var e=this;Object.keys(this.observers).forEach(function(t){e.observers[t].unobserve()}),Object.keys(this.formattersObservers).forEach(function(t){Object.keys(e.formattersObservers[t]).forEach(function(n){Object.keys(e.formattersObservers[t][n]).forEach(function(r){e.formattersObservers[t][n][r].unobserve()})})}),this.componentView&&this.componentView.unbind.call(this)}}])&&s(t.prototype,n),c&&s(t,c),e}();t.ComponentBinding=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Binding=void 0;var r=n(4),i=n(8),o=n(0);function a(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(t,n,r,i,o,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"value",void 0),u(this,"observer",void 0),u(this,"view",void 0),u(this,"el",void 0),u(this,"type",void 0),u(this,"binder",void 0),u(this,"formatters",void 0),u(this,"formatterObservers",{}),u(this,"keypath",void 0),u(this,"args",void 0),u(this,"model",void 0),u(this,"marker",void 0),u(this,"_bound",void 0),u(this,"customData",void 0),this.view=t,this.el=n,this.type=r,this.keypath=i,this.binder=o,this.args=a,this.formatters=s,this.model=void 0,this.customData={}}var t,n,c;return t=e,(n=[{key:"observe",value:function(e,t,n){return new i.Observer(e,t,n)}},{key:"parseTarget",value:function(){if(this.keypath){var e=(0,r.parseType)(this.keypath);if(e.type===r.PRIMITIVE)this.value=e.value;else{if(e.type!==r.KEYPATH)throw new Error("Unknown type in token");this.observer=this.observe(this.view.models,this.keypath,this),this.model=this.observer.target}}else this.value=void 0}},{key:"getIterationAlias",value:function(e){return"%"+e+"%"}},{key:"parseFormatterArguments",value:function(e,t){var n=this;return e.map(r.parseType).map(function(e,i){var o=e.type,a=e.value;if(o===r.PRIMITIVE)return a;if(o===r.KEYPATH){var s=a;n.formatterObservers[t]||(n.formatterObservers[t]={});var u=n.formatterObservers[t][i];return u||(u=n.observe(n.view.models,s,n),n.formatterObservers[t][i]=u),u.value()}throw new Error("Unknown argument type")})}},{key:"formattedValue",value:function(t){var n=this;if(null===this.formatters)throw new Error("formatters is null");return this.formatters.reduce(function(t,r,i){var o=r.match(e.FORMATTER_ARGS);if(null===o)throw new Error("No args matched from FORMATTER_ARGS");var s=o.shift();if(!s)throw new Error("No id found in args");var u,c=n.view.options.formatters[s],l=n.parseFormatterArguments(o,i);return c&&c.read instanceof Function?u=c.read:c instanceof Function&&(u=c),u instanceof Function&&(t=u.apply(void 0,[t].concat(a(l)))),t},t)}},{key:"eventHandler",value:function(e,t){var n=this,r=this,i=r.view.options.handler;return function(o){if(!i)throw new Error("No handler defined in binding.view.options.handler");i.call(e,n,o,r,t)}}},{key:"set",value:function(e){var t;if(e instanceof Function&&!this.binder.function?(e=e,e=this.formattedValue(e.call(this.model))):(e=e,e=this.formattedValue(e)),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("routine")?(this.binder=this.binder,t=this.binder.routine):(this.binder=this.binder,t=this.binder),t instanceof Function&&t.call(this,this.el,e)}},{key:"sync",value:function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)}},{key:"publish",value:function(){var t=this;if(this.observer){if(null===this.formatters)throw new Error("formatters is null");var n=this.formatters.reduceRight(function(n,r,i){var o=r.split(e.FORMATTER_SPLIT),s=o.shift();if(!s)throw new Error("id not defined");var u,c=t.view.options.formatters[s],l=t.parseFormatterArguments(o,i);c&&c.publish&&(n=(u=c).publish.apply(u,[n].concat(a(l))));return n},this.getValue(this.el));this.observer.setValue(n)}}},{key:"bind",value:function(){if(this.parseTarget(),this.binder&&this.binder.hasOwnProperty("bind")){if(this.binder=this.binder,!this.binder.bind&&"function"!=typeof this.binder.bind)throw new Error("the method bind is not a function");this.binder.bind.call(this,this.el)}this.view.options.preloadData&&this.sync()}},{key:"unbind",value:function(){var e=this;if(null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("bind")&&(this.binder=this.binder,this.binder.unbind&&this.binder.unbind.call(this,this.el)),this.observer&&this.observer.unobserve(),Object.keys(this.formatterObservers).forEach(function(t){var n=e.formatterObservers[t];Object.keys(n).forEach(function(e){n[e].unobserve()})}),this.formatterObservers={}}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.observer&&(this.model=this.observer.target),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("update")&&(this.binder=this.binder,this.binder.update&&this.binder.update.call(this,e))}},{key:"getValue",value:function(e){if(null===this.binder)throw new Error("binder is null");if(this.binder.hasOwnProperty("getValue")){if(this.binder=this.binder,"function"!=typeof this.binder.getValue)throw new Error("getValue is not a function");return this.binder.getValue.call(this,e)}return(0,o.getInputValue)(e)}}])&&s(t.prototype,n),c&&s(t,c),e}();t.Binding=c,u(c,"FORMATTER_ARGS",/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g),u(c,"FORMATTER_SPLIT",/\s+/)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindersService=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"binders",void 0),a(this,"debug",(0,i.default)("binders:BindersService")),this.binders=t}var t,n,r;return t=e,(n=[{key:"registWrapper",value:function(e,t){t||(t=e.name);var n=e.binder;return this.binders[t]=n,this.binders}},{key:"regist",value:function(e,t){if(e.hasOwnProperty("binder")&&(e=e,t||(t=e.name),e=e.binder),this.debug("name",t,e),!t)throw new Error("[BindersService] name is required");return this.binders[t]=e,this.binders}},{key:"regists",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.regist(e[t],t);return this.binders}}])&&o(t.prototype,n),r&&o(t,r),e}();t.BindersService=s},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.adapter=t.Adapter=void 0;var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"counter",0),i(this,"weakmap",{})}var t,n,o;return t=e,(n=[{key:"weakReference",value:function(e){if(!e.hasOwnProperty("__rv")){var t=this.counter++;Object.defineProperty(e,"__rv",{value:t})}return this.weakmap[e.__rv]||(this.weakmap[e.__rv]={callbacks:{}}),this.weakmap[e.__rv]}},{key:"cleanupWeakReference",value:function(e,t){Object.keys(e.callbacks).length||e.pointers&&Object.keys(e.pointers).length||delete this.weakmap[t]}},{key:"stubFunction",value:function(e,t){var n=e[t],r=this.weakReference(e),i=this.weakmap;e[t]=function(){for(var t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];var s=n.apply(e,o);return Object.keys(r.pointers).forEach(function(e){var t=r.pointers[e];i[e]&&i[e].callbacks[t]instanceof Array&&i[e].callbacks[t].forEach(function(e){e.sync()})}),s}}},{key:"observeMutations",value:function(t,n,r){var i=this;if(t instanceof Array){var o=this.weakReference(t);o.pointers||(o.pointers={},e.ARRAY_METHODS.forEach(function(e){i.stubFunction(t,e)})),o.pointers[n]||(o.pointers[n]=[]),-1===o.pointers[n].indexOf(r)&&o.pointers[n].push(r)}}},{key:"unobserveMutations",value:function(e,t,n){if(e instanceof Array&&null!=e.__rv){var r=this.weakmap[e.__rv];if(r){var i=r.pointers[t];if(i){var o=i.indexOf(n);o>-1&&i.splice(o,1),i.length||delete r.pointers[t],this.cleanupWeakReference(r,e.__rv)}}}}},{key:"observe",value:function(e,t,n){var r,i=this,o=this.weakReference(e).callbacks;if(!o[t]){o[t]=[];var a=Object.getOwnPropertyDescriptor(e,t);a&&(a.get||a.set||!a.configurable)||(r=e[t],Object.defineProperty(e,t,{enumerable:!0,get:function(){return r},set:function(n){if(n!==r){i.unobserveMutations(r,e.__rv,t),r=n;var o=i.weakmap[e.__rv];if(o){var a=o.callbacks[t];a&&a.forEach(function(e){e.sync()}),i.observeMutations(n,e.__rv,t)}}}}))}-1===o[t].indexOf(n)&&o[t].push(n),this.observeMutations(e[t],e.__rv,t)}},{key:"unobserve",value:function(e,t,n){var r=this.weakmap[e.__rv];if(r){var i=r.callbacks[t];if(i){var o=i.indexOf(n);o>-1&&(i.splice(o,1),i.length||(delete r.callbacks[t],this.unobserveMutations(e[t],e.__rv,t))),this.cleanupWeakReference(r,e.__rv)}}}},{key:"get",value:function(e,t){return e[t]}},{key:"set",value:function(e,t,n){e[t]=n}}])&&r(t.prototype,n),o&&r(t,o),e}();t.Adapter=o,i(o,"ARRAY_METHODS",["push","pop","shift","unshift","sort","reverse","splice"]);var a=new o;t.adapter=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FormatterService=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"formatters",void 0),a(this,"debug",(0,i.default)("formatters:FormatterService")),this.formatters=t}var t,n,r;return t=e,(n=[{key:"regist",value:function(e,t){if(t||(e.hasOwnProperty("constructor")&&(t=e.constructor.name),e.hasOwnProperty("name")&&(t=e.name)),this.debug("name",t,e),!t)throw new Error("[FormatterService] name is required");return this.formatters[t]=e,this.formatters}},{key:"regists",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.regist(e[t],t);return this.formatters}}])&&o(t.prototype,n),r&&o(t,r),e}();t.FormatterService=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tinybind=void 0;var r=n(0),i=n(4),o=n(18),a=n(17),s=n(16),u=n(3),c=n(8),l=n(7);function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"binderService",void 0),p(this,"componentService",void 0),p(this,"formatterService",void 0),p(this,"binders",{}),p(this,"components",{}),p(this,"formatters",{}),p(this,"adapters",{".":a.adapter}),p(this,"parseTemplate",i.parseTemplate),p(this,"parseType",i.parseType),p(this,"templateDelimiters",["{","}"]),p(this,"rootInterface","."),p(this,"preloadData",!0),p(this,"_prefix","rv"),p(this,"_fullPrefix","rv-"),this.binderService=new s.BindersService(this.binders),this.componentService=new l.ComponentService(this.components),this.formatterService=new o.FormatterService(this.formatters)}return d(e,[{key:"prefix",set:function(e){this._prefix=e,this._fullPrefix=e+"-"},get:function(){return this._prefix}},{key:"fullPrefix",get:function(){return this._fullPrefix}}],[{key:"handler",value:function(e,t,n,r){this.call(e,t,n.view.models,r)}},{key:"fallbackBinder",value:function(e,t){if(!this.type)throw new Error("Can't set atttribute of "+this.type);null!=t?e.setAttribute(this.type,t):e.removeAttribute(this.type)}}]),d(e,[{key:"configure",value:function(e){var t=this;e&&Object.keys(e).forEach(function(n){var i=e[n];switch(n){case"binders":t.binders=r.Utils.concat(!1,t.binders,i);break;case"formatters":t.formatters=r.Utils.concat(!1,t.formatters,i);break;case"components":t.components=r.Utils.concat(!1,t.components,i);break;case"adapters":case"adapter":t.adapters=r.Utils.concat(!1,t.adapters,i);break;case"prefix":t.prefix=i;break;case"parseTemplate":t.parseTemplate=i;break;case"parseType":t.parseType=i;break;case"prefix":t.prefix=i;break;case"templateDelimiters":t.templateDelimiters=i;break;case"rootInterface":t.rootInterface=i;break;case"preloadData":t.preloadData=i;break;default:console.warn("Option not supported",n,i)}})}},{key:"init",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t||(t=document.createElement("div"));var r=this.components[e];t.innerHTML=r.template.call(this,t);var i=r.initialize.call(this,t,n),o=this.bind(t,i);return o.bind(),o}},{key:"bind",value:function(t,n,i){var o={adapters:Object.create(null),binders:Object.create(null),components:Object.create(null),formatters:Object.create(null),starBinders:Object.create(null),rootInterface:Object.create(null)};n=n||Object.create(null),i&&(o.binders=r.Utils.concat(!1,o.binders,i.binders),o.formatters=r.Utils.concat(!1,o.formatters,i.formatters),o.components=r.Utils.concat(!1,o.components,i.components),o.adapters=r.Utils.concat(!1,o.adapters,i.adapters)),o.prefix=i&&i.prefix?i.prefix:this.prefix,o.templateDelimiters=i&&i.templateDelimiters?i.templateDelimiters:this.templateDelimiters,o.rootInterface=i&&i.rootInterface?i.rootInterface:this.rootInterface,o.preloadData=i&&i.preloadData?i.preloadData:this.preloadData,o.handler=i&&i.handler?i.handler:e.handler,o.binders=r.Utils.concat(!1,o.binders,this.binders),o.formatters=r.Utils.concat(!1,o.formatters,this.formatters),o.components=r.Utils.concat(!1,o.components,this.components),o.adapters=r.Utils.concat(!1,o.adapters,this.adapters),o.starBinders=Object.keys(o.binders).filter(function(e){return e.indexOf("*")>0}),c.Observer.updateOptions(o);var a=new u.View(t,n,o);return a.bind(),a}}]),e}();t.Tinybind=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={Pjax:!0};t.Pjax=void 0;var i=n(96);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}}))});var o=n(95);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}}))});var a=n(94);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}}))});var s=n(9),u=n(0),c=n(22),l=n(21);function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"dom",void 0),p(this,"history",new i.HistoryManager),p(this,"cacheEnabled",!0),p(this,"transitionProgress",!1),p(this,"dispatcher",new s.GlobalEvent),p(this,"transition",new l.HideShowTransition),e.instance)return e.instance;e.instance=this}return d(e,null,[{key:"preventCheck",value:function(e,t){if(!window.history.pushState)return!1;var n=this.getHref(t);return!(!t||!n)&&(!(e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey)&&((!t.target||"_blank"!==t.target)&&(window.location.protocol===t.protocol&&window.location.hostname===t.hostname&&(u.Utils.getPort()===u.Utils.getPort(t.port)&&(!(n.indexOf("#")>-1)&&((!t.getAttribute||"string"!=typeof t.getAttribute("download"))&&(u.Utils.cleanLink(n)!==u.Utils.cleanLink(location.href)&&!t.classList.contains(this.ignoreClassLink))))))))}},{key:"getHref",value:function(e){return e.getAttribute&&"string"==typeof e.getAttribute("xlink:href")?e.getAttribute("xlink:href")||void 0:"string"==typeof e.href?e.href:void 0}}]),d(e,[{key:"start",value:function(e,t){this.dom=new o.Dom(e),t&&(this.transition=t),this.init(e)}},{key:"getCurrentUrl",value:function(){return u.Utils.cleanLink(u.Utils.getUrl())}},{key:"goTo",value:function(e,t){if(t){var n=window.open(e,"_blank");return!!n&&n.focus()}if(0!==e.indexOf("http"))return window.history.pushState(null,void 0,e),this.onStateChange();this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition}},{key:"bindEvents",value:function(){window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(e){e instanceof Location&&(window.location=e),"string"==typeof e&&(window.location.href=e)}},{key:"load",value:function(t){var n,r=u.Utils.deferred(),i=this;return(n=e.cache.get(t))||(n=u.Utils.xhr(t),e.cache.set(t,n)),n.then(function(t){if(!i.dom)throw new Error("[Pjax] you need to call the start method first!");var n=i.dom.parseResponse(t);i.dom.putContainer(n),i.cacheEnabled||e.cache.reset(),r.resolve(n)},function(){i.forceGoTo(t),r.reject()}),r.promise}},{key:"onLinkClick",value:function(t){for(var n=t.target;n&&!e.getHref(n);)n=n.parentNode;if(e.preventCheck(t,n)){t.stopPropagation(),t.preventDefault(),this.dispatcher.trigger("linkClicked",n,t);var r=e.getHref(n);if(!r)throw new Error("href is null");this.goTo(r)}}},{key:"onStateChange",value:function(){var e=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(e),this.history.currentStatus().url===e)return!1;this.history.add(e);var t=this.load(e),n=this.getTransition();if(this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.history.currentStatus(),this.history.prevStatus()),!this.dom)throw new Error("[Pjax] you need to call the start method first!");var r=n.init(this.dom.getContainer(),t);t.then(this.onNewContainerLoaded.bind(this)),r.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(e){var t=this.history.currentStatus();if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");t.namespace=this.dom.getNamespace(e),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),this.history.prevStatus(),e,this.dom.currentHTML,e.data(),!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(e){if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");var t=this.dom.getContainer();e.attr("aria-live","polite"),this.history.add(this.getCurrentUrl(),this.dom.getNamespace(t)),this.dispatcher.trigger("initStateChange",this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),{},t,this.dom.currentHTML,t.data(),!0),this.dispatcher.trigger("transitionCompleted",this.history.currentStatus()),this.bindEvents()}}]),e}();t.Pjax=h,p(h,"ignoreClassLink","no-barba"),p(h,"cache",new c.BaseCache),p(h,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return r.CustomTransition}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return i.BaseTransition}}),Object.defineProperty(t,"ITransition",{enumerable:!0,get:function(){return i.ITransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return o.HideShowTransition}});var r=n(99),i=n(10),o=n(98)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCache=void 0;var r=n(0);function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(){var t,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=void 0,(n="data")in(t=this)?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,this.data={}}var t,n,o;return t=e,(n=[{key:"set",value:function(e,t){return this.data[e]=t}},{key:"get",value:function(e){return this.data[e]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(e){return r.Utils.extend(!1,this,e)}}])&&i(t.prototype,n),o&&i(t,o),e}();t.BaseCache=o},function(e,t,n){e.exports=n.p+"bundle.css"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.shopifySectionProductScrollbarComponent=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(11);t.shopifySectionProductScrollbarComponent=function(e){var t=(0,i.default)("component:shopify-section-product-scrollbar"),n=new o.Pjax,r=new o.Prefetch;return{name:"shopify-section-product-scrollbar",template:function(){return null},initialize:function(i,o){return this.customData={},this.$el=e(i),t("initialize",o),this.onProductTap=function(t,r,i){var o=e(i).data("url");n.goTo(o)},this.onProductMouseenter=function(t,n,i){var o=e(i).data("url");r.onLinkEnter(t,o)},this}}}},function(e,t){e.exports=' <nav class=nav rv-add-class=linklist.handle rv-class-nav-pills=pills rv-class-flex-column=vertical rv-class-flex-row="vertical | not"> <div class=nav-item rv-each-link=linklist.links> <a class=nav-link rv-class-active=link.active rv-route=link.href rv-href=link.href>{link.text}</a> </div> </nav> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navItemsComponent=void 0;var r=o(n(1)),i=o(n(25));function o(e){return e&&e.__esModule?e:{default:e}}t.navItemsComponent=function(){var e=(0,r.default)("component:nav-items");return{name:"nav-items",template:function(){return i.default},initialize:function(t,n){return e("initialize",n,i.default),this.linklist=n.linklist,this.pills=n.pills,this.vertical=!!n.vertical,this}}}},function(e,t){e.exports=" "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iconsetComponent=void 0;var r=a(n(1)),i=a(n(2)),o=a(n(27));function a(e){return e&&e.__esModule?e:{default:e}}t.iconsetComponent=function(){var e=(0,r.default)("component:iconset");return{name:"iconset",template:function(){return o.default},initialize:function(t,n){(0,i.default)(t);var r=n.src||window.model.system.assetsPath+n.name,a=n.color||null,s=n.direction||"top",u=n.size||32,c="iconset direction-".concat(s," size-").concat(u," color-").concat(a);return e("initialize",n,o.default),"left"===s?c+=" rotate-270":"left-top"===s||"left-up"===s||"top-left"===s||"up-left"===s?c+=" rotate-315":"top"===s||"up"===s?c+=" rotate-0":"top-right"===s||"up-right"===s||"right-top"===s||"right-up"===s?c+=" rotate-45":"right"===s?c+=" rotate-90":"right-bottom"===s||"right-down"===s||"bottom-right"===s||"down-right"===s?c+=" rotate-135":"bottom"===s||"down"===s?c+=" rotate-180":"left-bottom"!==s&&"left-down"!==s&&"bottom-left"!==s&&"down-left"!==s||(c+=" rotate-225"),(0,i.default)(t).load(r).css({color:a,height:u+"px",width:u+"px"}).addClass(c).attr("aria-hidden","true").attr("role","img"),this}}}},function(e,t){e.exports="<h1 class=lead>schreib uns</h1> <p> Hey @ Art+Code Studio,<br/> ich bin <span class=text-danger contenteditable=true rv-value=\"name | default 'Name'\"></span> und möchte <span class=text-danger contenteditable=true rv-value=\"message | default 'Nachricht'\"></span>.<br/> <br> Meldet euch, <span class=text-danger contenteditable=true rv-value=\"regards | default 'hasta la vista'\"></span><br/> <span rv-html=name></span><br> <br> P.S.<br> Schreibt mir an <span class=text-danger contenteditable=true rv-value=\"mail | default 'E-Mail'\"></span> oder ruft mich unter <span class=text-danger contenteditable=true rv-value=\"phone | default 'Telefon'\"></span> an. </p> <a class=text-light href=# rv-on-click=send>Absenden</a>"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contactComponent=void 0;var r=a(n(1)),i=a(n(2)),o=a(n(29));function a(e){return e&&e.__esModule?e:{default:e}}t.contactComponent=function(){var e=(0,r.default)("component:contact");return{name:"contact",template:function(){return o.default},initialize:function(t,n){return(0,i.default)(t),this.name="",this.message="",this.regards="",this.mail="",this.phone="",this.send=function(){e("send")},this}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"contactComponent",{enumerable:!0,get:function(){return r.contactComponent}}),Object.defineProperty(t,"iconsetComponent",{enumerable:!0,get:function(){return i.iconsetComponent}}),Object.defineProperty(t,"navItemsComponent",{enumerable:!0,get:function(){return o.navItemsComponent}}),Object.defineProperty(t,"shopifySectionProductScrollbarComponent",{enumerable:!0,get:function(){return a.shopifySectionProductScrollbarComponent}});var r=n(30),i=n(28),o=n(26),a=n(24)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scrollbarDragableBinder=t.Dragscroll=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"debug",(0,i.default)("binders:scrollbar-dragable")),a(this,"lastClientX",0),a(this,"lastClientY",0),a(this,"el",void 0),a(this,"pushed",!1),this.el=t,t.removeEventListener("mousedown",this.md.bind(this),!1),t.addEventListener("mousedown",this.md.bind(this),!1),n?(window.removeEventListener("mouseup",this.mu.bind(this),!1),window.removeEventListener("mousemove",this.mm.bind(this),!1),window.addEventListener("mouseup",this.mu.bind(this),!1),window.addEventListener("mousemove",this.mm.bind(this),!1)):(t.removeEventListener("mouseup",this.mu.bind(this),!1),t.removeEventListener("mousemove",this.mm.bind(this),!1),t.addEventListener("mouseup",this.mu.bind(this),!1),t.addEventListener("mousemove",this.mm.bind(this),!1))}var t,n,r;return t=e,(n=[{key:"md",value:function(e){this.pushed=!0,this.lastClientX=e.clientX,this.lastClientY=e.clientY,e.preventDefault()}},{key:"mu",value:function(e){this.pushed=!1}},{key:"mm",value:function(e){var t=0,n=0;this.pushed&&(this.el.scrollLeft-=t=-this.lastClientX+(this.lastClientX=e.clientX),this.el.scrollTop-=n=-this.lastClientY+(this.lastClientY=e.clientY),this.el===document.body&&(this.el=document.documentElement,this.el.scrollLeft-=t,this.el.scrollTop-=n))}}])&&o(t.prototype,n),r&&o(t,r),e}();t.Dragscroll=s;t.scrollbarDragableBinder=function(){return{binder:function(e,t){new s(e,!0).debug("ready")},name:"scrollbar-dragable"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueBinder=void 0;var r=a(n(1)),i=a(n(2)),o=n(5);function a(e){return e&&e.__esModule?e:{default:e}}t.valueBinder=function(){var e=(0,r.default)("binder:value");return{binder:{bind:function(t){var n=this;e("bind",this),this.customData={},this.customData.$el=(0,i.default)(t),this.customData.type=this.customData.$el.prop("type"),this.customData.tagName=this.customData.$el.prop("tagName"),this.customData.contenteditable=!!this.customData.$el.attr("contenteditable"),this.customData.$el.on("change input keyup paste blur focus",function(){n.publish()})},unbind:function(e){this.customData.$el.off("change input keyup paste blur focus"),delete this.customData},routine:function(t,n){if(t=t,e("routine newValue",n),o.Utils.isString(n)){var r=this.getValue(t);if(e("routine",r,n),r!==n)switch(this.customData.tagName){case"INPUT":case"TEXTAREA":this.customData.$el.val(n);break;default:this.customData.$el.html(n)}}},getValue:function(t){var n;switch(this.customData.tagName){case"INPUT":switch(this.customData.type){case"number":n=parseFloat(this.customData.$el.val())||0;break;default:n=this.customData.$el.val().toString()}break;case"TEXTAREA":n=this.customData.$el.val().toString();break;default:n=this.customData.$el.html()}return e("getValue",n),n},priority:3e3,publishes:!0},name:"value"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backgroundImageBinder=t.backgroundImage=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};var o=function(e,t){(0,i.default)(e).css("background-image","url("+t+")")};t.backgroundImage=o;t.backgroundImageBinder=function(){return{binder:o,name:"background-image"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.imageBoxBinder=t.imageBox=void 0;var r=function(e,t){var n=$(e);if(n.addClass("image-box"),t){var r=t.split(":"),i=new Array;i[0]=Number(r[0]),i[1]=Number(r[1]);var o=i[1]/i[0]*100,a="ratio-"+i[0]+"-"+i[1],s="padding-top: "+o+"%;";n.addClass(a),$("head").append("<style>.image-box."+a+":before{"+s+"}</style>")}};t.imageBox=r;t.imageBoxBinder=function(){return{binder:r,name:"image-box"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.appendHtmlBinder=void 0;var r=n(5);t.appendHtmlBinder=function(){return{binder:function(e,t){var n=$(e);r.Utils.isString(t)||(t=n.attr("rv-append-html")||"");var i=$.parseHTML(t);$(e).append(i)},name:"append-html"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.classAddRemoveBinder=t.classAddRemove=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};var o=function(e,t){var n=(0,i.default)(e),r=this.args[0];return t?n.addClass(r):n.removeClass(r),t};t.classAddRemove=o;t.classAddRemoveBinder=function(){return{binder:o,name:"class-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addClassBinder=t.addClass=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};var o=function(e,t){var n=(0,i.default)(e);return t&&n.addClass(t),t};t.addClass=o;t.addClassBinder=function(){return{binder:o,name:"add-class"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeClassBinder=t.removeClass=void 0;var r=function(e,t){var n=$(e);return t&&n.removeClass(t),t};t.removeClass=r;t.removeClassBinder=function(){return{binder:r,name:"remove-class"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.forFromToBinder=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};t.forFromToBinder=function(){var e=(0,i.default)("binders:for-*-*");return{binder:function(t,n){var r=$(t),i=Number(this.args[0]),o=Number(this.args[1]);e("start",i,"end",o);for(var a=r.html(),s=i;s<o;s++)e("index",s);return e("html",a),n},name:"for-*-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.telBinder=void 0;t.telBinder=function(){return{binder:function(e,t){$(e).attr("href","tel:"+t)},name:"tel"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mailtoBinder=void 0;t.mailtoBinder=function(){return{binder:function(e,t){$(e).attr("href","mailto:"+t)},name:"mailto"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoscrollBinder=void 0;var r=a(n(1)),i=a(n(2)),o=n(5);function a(e){return e&&e.__esModule?e:{default:e}}t.autoscrollBinder=function(){(0,r.default)("binder:autoscroll");var e=function(e,t){return"100vw"===t.width?o.Utils.getViewportDimensions().w:e.prop("scrollWidth")-(e.outerWidth()||0)};return{binder:function(t,n){var r=(0,i.default)(t);n&&n.width&&o.Utils.isString(n.width)&&(n.width,r.css("width",n.width)),r.addClass("rv-autoscroll-".concat(n.angle)),setTimeout(function(){!function(t,n){var r=n.direction,o=n.jumps,a=n.delay,s=!1,u=null,c=e(t,n);(0,i.default)(window).resize(function(){c=e(t,n)}),r<0?t.scrollLeft(c):t.scrollLeft(0),t.hover(function(){setTimeout(function(){t.filter(":hover").length&&(s=!0,r*=-1)},10)},function(){setTimeout(function(){s&&!t.filter(":hover").length&&(s=!1)},500)}),setTimeout(function e(){return s?setTimeout(e,200):(u=t.scrollLeft()||0,r>0?u+=o:u-=o,u<=5?r=1:u>=c&&(r=-1),t.animate({scrollLeft:u},a,"linear",e))},0)}(r,n)},1e3)},name:"autoscroll"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"autoscrollBinder",{enumerable:!0,get:function(){return r.autoscrollBinder}}),Object.defineProperty(t,"mailtoBinder",{enumerable:!0,get:function(){return i.mailtoBinder}}),Object.defineProperty(t,"telBinder",{enumerable:!0,get:function(){return o.telBinder}}),Object.defineProperty(t,"forFromToBinder",{enumerable:!0,get:function(){return a.forFromToBinder}}),Object.defineProperty(t,"removeClassBinder",{enumerable:!0,get:function(){return s.removeClassBinder}}),Object.defineProperty(t,"addClassBinder",{enumerable:!0,get:function(){return u.addClassBinder}}),Object.defineProperty(t,"classAddRemoveBinder",{enumerable:!0,get:function(){return c.classAddRemoveBinder}}),Object.defineProperty(t,"appendHtmlBinder",{enumerable:!0,get:function(){return l.appendHtmlBinder}}),Object.defineProperty(t,"imageBoxBinder",{enumerable:!0,get:function(){return f.imageBoxBinder}}),Object.defineProperty(t,"backgroundImageBinder",{enumerable:!0,get:function(){return d.backgroundImageBinder}}),Object.defineProperty(t,"valueBinder",{enumerable:!0,get:function(){return p.valueBinder}}),Object.defineProperty(t,"scrollbarDragableBinder",{enumerable:!0,get:function(){return h.scrollbarDragableBinder}});var r=n(43),i=n(42),o=n(41),a=n(40),s=n(39),u=n(38),c=n(37),l=n(36),f=n(35),d=n(34),p=n(33),h=n(32)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.upcase=void 0;t.upcase=function(e){return e.toUpperCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strip=void 0;t.strip=function(e){return e.trim()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slice=void 0;t.slice=function(e,t,n){return e.slice(t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prepend=void 0;t.prepend=function(e,t){return t+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pluralize=void 0;var r=n(0);t.pluralize=function(e,t,n){return null===n&&(n=t+"s"),r.Utils.isArray(e)&&(e=e.length),1===e?t:n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isString=void 0;var r=n(0);t.isString=function(e){return r.Utils.isString(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filled=void 0;var r=n(0),i=n(12);t.filled=function(e){return r.Utils.isString(e)&&!(0,i.empty)(e.replace(/\s/g,""))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.downcase=void 0;t.downcase=function(e){return e.toLowerCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.append=void 0;t.append=function(e,t){return e+t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"append",{enumerable:!0,get:function(){return r.append}}),Object.defineProperty(t,"downcase",{enumerable:!0,get:function(){return i.downcase}}),Object.defineProperty(t,"filled",{enumerable:!0,get:function(){return o.filled}}),Object.defineProperty(t,"isString",{enumerable:!0,get:function(){return a.isString}}),Object.defineProperty(t,"pluralize",{enumerable:!0,get:function(){return s.pluralize}}),Object.defineProperty(t,"prepend",{enumerable:!0,get:function(){return u.prepend}}),Object.defineProperty(t,"slice",{enumerable:!0,get:function(){return c.slice}}),Object.defineProperty(t,"strip",{enumerable:!0,get:function(){return l.strip}}),Object.defineProperty(t,"upcase",{enumerable:!0,get:function(){return f.upcase}}),t.stringFormatters=void 0;var r=n(53),i=n(52),o=n(51),a=n(50),s=n(49),u=n(48),c=n(47),l=n(46),f=n(45),d={append:r.append,downcase:i.downcase,filled:o.filled,isString:a.isString,pluralize:s.pluralize,prepend:u.prepend,slice:c.slice,strip:l.strip,upcase:f.upcase};t.stringFormatters=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.currency=void 0;t.currency=function(e,t){var n=e.toFixed(2).toString().replace(".",",");return t&&(n+=t),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.def=void 0;var r=n(0);t.def=function(e,t){return r.Utils.isDefined(e)?r.Utils.isString(e)?e.length>0?e:t:e:t}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.debug=void 0;var i=(0,((r=n(1))&&r.__esModule?r:{default:r}).default)("formatter");t.debug=function(e){return i(e),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"debug",{enumerable:!0,get:function(){return r.debug}}),Object.defineProperty(t,"def",{enumerable:!0,get:function(){return i.def}}),Object.defineProperty(t,"currency",{enumerable:!0,get:function(){return o.currency}}),t.specialFormatters=void 0;var r=n(57),i=n(56),o=n(55),a={debug:r.debug,def:i.def,currency:o.currency};t.specialFormatters=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLast=void 0;t.isLast=function(e,t){return e.length===t+1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.match=void 0;t.match=function(e,t,n){return e.match(new RegExp(t,n))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.set=void 0;var r=n(0);t.set=function(e,t,n){return(r.Utils.isObject(e)||r.Utils.isArray(e))&&(e[t]=n),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contains=void 0;var r=n(0);t.contains=function(e,t,n){if(!r.Utils.isArray(e)||!r.Utils.isObject(e)||!r.Utils.isString(e))return!1;if(r.Utils.isUndefined(n)&&(n=t),r.Utils.isString(e))return-1!==e.indexOf(n);if(r.Utils.isArray(e))for(var i in e)if((e.hasOwnProperty(i).hasOwnProperty(t)||r.Utils.isDefined(e[i])&&r.Utils.isDefined(e[i][t]))&&e[i][t]===n)return!0;return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var r=n(6);t.last=function(e){return(0,r.get)(e,e.length-1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var r=n(6);t.first=function(e){return(0,r.get)(e,0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.json=void 0;t.json=function(e){return JSON.stringify(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;var r=n(0);t.parse=function(e){return r.Utils.isString(e)?JSON.parse(e):null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.parse}}),Object.defineProperty(t,"json",{enumerable:!0,get:function(){return i.json}}),Object.defineProperty(t,"first",{enumerable:!0,get:function(){return o.first}}),Object.defineProperty(t,"last",{enumerable:!0,get:function(){return a.last}}),Object.defineProperty(t,"contains",{enumerable:!0,get:function(){return s.contains}}),Object.defineProperty(t,"get",{enumerable:!0,get:function(){return u.get}}),Object.defineProperty(t,"set",{enumerable:!0,get:function(){return c.set}}),Object.defineProperty(t,"match",{enumerable:!0,get:function(){return l.match}}),Object.defineProperty(t,"count",{enumerable:!0,get:function(){return f.count}}),Object.defineProperty(t,"empty",{enumerable:!0,get:function(){return d.empty}}),Object.defineProperty(t,"isLast",{enumerable:!0,get:function(){return p.isLast}}),t.propertyFormatters=void 0;var r=n(66),i=n(65),o=n(64),a=n(63),s=n(62),u=n(6),c=n(61),l=n(60),f=n(13),d=n(12),p=n(59),h={parse:r.parse,json:i.json,first:o.first,last:a.last,contains:s.contains,get:u.get,set:c.set,match:l.match,count:f.count,empty:d.empty,isLast:p.isLast};t.propertyFormatters=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.digits=void 0;var r=n(0);t.digits=function(e){if(r.Utils.isNumber(e))return e;var t=e.replace(/[^-\d\.]/g,"");return isNaN(Number(t))?0:Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uneven=void 0;t.uneven=function(e){return e%2!=0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.even=void 0;t.even=function(e){return e%2==0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gcd=void 0;t.gcd=function e(t,n){return 0===n?t:e(n,t%n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.modulo=void 0;t.modulo=function(e,t){return Number(e)%Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dividedBy=void 0;t.dividedBy=function(e,t){return Number(e)/Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.times=void 0;t.times=function(e,t){return Number(e)*Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.minus=void 0;t.minus=function(e,t){return Number(e)-Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.plus=void 0;t.plus=function(e,t){return Number(e)+Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.random=void 0;var r=n(0);t.random=function(e){return r.Utils.isArray(e)?e[Math.floor(Math.random()*e.length)]:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"random",{enumerable:!0,get:function(){return r.random}}),Object.defineProperty(t,"plus",{enumerable:!0,get:function(){return i.plus}}),Object.defineProperty(t,"minus",{enumerable:!0,get:function(){return o.minus}}),Object.defineProperty(t,"times",{enumerable:!0,get:function(){return a.times}}),Object.defineProperty(t,"dividedBy",{enumerable:!0,get:function(){return s.dividedBy}}),Object.defineProperty(t,"modulo",{enumerable:!0,get:function(){return u.modulo}}),Object.defineProperty(t,"gcd",{enumerable:!0,get:function(){return c.gcd}}),Object.defineProperty(t,"even",{enumerable:!0,get:function(){return l.even}}),Object.defineProperty(t,"uneven",{enumerable:!0,get:function(){return f.uneven}}),Object.defineProperty(t,"digits",{enumerable:!0,get:function(){return d.digits}}),t.mathFormatters=void 0;var r=n(77),i=n(76),o=n(75),a=n(74),s=n(73),u=n(72),c=n(71),l=n(70),f=n(69),d=n(68),p={digits:d.digits,dividedBy:s.dividedBy,even:l.even,gcd:c.gcd,minus:o.minus,modulo:u.modulo,plus:i.plus,random:r.random,times:a.times,uneven:f.uneven};t.mathFormatters=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0;t.not=function(e){return!e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.or=void 0;t.or=function(e,t){return e||t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.elt=void 0;t.elt=function(e,t){return e<=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lt=void 0;t.lt=function(e,t){return e<t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ne=void 0;t.ne=function(e,t){return e!==t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.eq=void 0;t.eq=function(e,t){return e===t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.and=void 0;t.and=function(e,t){return e&&t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"and",{enumerable:!0,get:function(){return r.and}}),Object.defineProperty(t,"eq",{enumerable:!0,get:function(){return i.eq}}),Object.defineProperty(t,"ne",{enumerable:!0,get:function(){return o.ne}}),Object.defineProperty(t,"lt",{enumerable:!0,get:function(){return a.lt}}),Object.defineProperty(t,"elt",{enumerable:!0,get:function(){return s.elt}}),Object.defineProperty(t,"or",{enumerable:!0,get:function(){return u.or}}),Object.defineProperty(t,"not",{enumerable:!0,get:function(){return c.not}}),t.compareFormatters=void 0;var r=n(85),i=n(84),o=n(83),a=n(82),s=n(81),u=n(80),c=n(79),l={and:r.and,elt:s.elt,eq:i.eq,lt:a.lt,ne:o.ne,not:c.not,or:u.or};t.compareFormatters=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"compareFormatters",{enumerable:!0,get:function(){return r.compareFormatters}}),Object.defineProperty(t,"mathFormatters",{enumerable:!0,get:function(){return i.mathFormatters}}),Object.defineProperty(t,"propertyFormatters",{enumerable:!0,get:function(){return o.propertyFormatters}}),Object.defineProperty(t,"specialFormatters",{enumerable:!0,get:function(){return a.specialFormatters}}),Object.defineProperty(t,"stringFormatters",{enumerable:!0,get:function(){return s.stringFormatters}});var r=n(86),i=n(78),o=n(67),a=n(58),s=n(54)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onStarBinderWrapper=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};t.onStarBinderWrapper=function(e){(0,i.default)("binders:on-*");return{binder:{function:!0,priority:1e3,bind:function(e){this.customData||(this.customData={handler:null})},unbind:function(t){if(this.customData.handler){if(null===this.args)throw new Error("args is null");e(t).off(this.args[0],this.customData)}},routine:function(t,n){if(null===this.args)throw new Error("args is null");var r=this.args[0];this.customData.handler&&e(t).off(r,this.customData),this.customData.handler=this.eventHandler(n,t),e(t).on(r,this.customData.handler)}},name:"on-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.disabled=void 0;t.disabled=function(e,t){e.disabled=!!t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.enabled=void 0;t.enabled=function(e,t){e.disabled=!t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.basicBindersWrapper=void 0;var r=n(3),i=n(0),o=n(90),a=n(89),s=n(88);t.basicBindersWrapper=function(e){return{"on-*":(0,s.onStarBinderWrapper)(e).binder,"each-*":{block:!0,priority:4e3,bind:function(e){if(this.marker)this.customData.iterated.forEach(function(e){e.bind()});else{if(this.marker=document.createComment(" tinybind: ".concat(this.type," ")),this.customData={iterated:[]},!e.parentNode)throw new Error("No parent node!");e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)}},unbind:function(e){this.customData.iterated&&this.customData.iterated.forEach(function(e){e.unbind()})},routine:function(e,t){var n=this;if(null===this.args)throw new Error("args is null");var o=this.args[0];if(t=t||[],!Array.isArray(t))throw new Error("each-"+o+" needs an array to iterate over, but it is");var a=e.getAttribute("index-property")||this.getIterationAlias(o);t.forEach(function(e,t){var i={$parent:n.view.models};i[a]=t,i[o]=e;var s=n.customData.iterated[t];if(s)if(s.models[o]!==e){for(var u,c,l=t+1;l<n.customData.iterated.length;l++)if((c=n.customData.iterated[l]).models[o]===e){u=l;break}if(void 0!==u){if(n.customData.iterated.splice(u,1),!n.marker||!n.marker.parentNode)throw new Error("Marker has no parent node");n.marker.parentNode.insertBefore(c.els[0],s.els[0]),c.models[a]=t}else c=r.View.create(n,i,s.els[0]);n.customData.iterated.splice(t,0,c)}else s.models[a]=t;else{var f;if(n.customData.iterated.length)f=n.customData.iterated[n.customData.iterated.length-1].els[0];else{if(!n.marker)throw new Error("previous not defined");f=n.marker}s=r.View.create(n,i,f.nextSibling),n.customData.iterated.push(s)}}),this.customData.iterated.length>t.length&&(0,i.times)(this.customData.iterated.length-t.length,function(){var e=n.customData.iterated.pop();if(e.unbind(),!n.marker||!n.marker.parentNode)throw new Error("Marker has no parent node");n.marker.parentNode.removeChild(e.els[0])}),"OPTION"===e.nodeName&&this.view.bindings&&this.view.bindings.forEach(function(e){n.marker&&e.el===n.marker.parentNode&&"value"===e.type&&e.sync&&e.sync()})},update:function(e){var t=this,n={};Object.keys(e).forEach(function(r){if(null===t.args)throw new Error("args is null");r!==t.args[0]&&(n[r]=e[r])}),this.customData.iterated.forEach(function(e){e.update(n)})}},"class-*":function(e,t){if(null===this.args)throw new Error("args is null");var n=e.className.split(" ").filter(function(e){return""!==e}),r=this.args[0].trim(),i=n.indexOf(r);-1===i?t&&(e.className+=" ".concat(r)):t||(e.className=n.filter(function(e,t){return t!==i}).join(" "))},text:function(e,t){e.textContent=null!=t?t:""},html:function(e,t){e.innerHTML=null!=t?t:""},show:function(e,t){e.style.display=t?"":"none"},hide:function(e,t){e.style.display=t?"none":""},enabled:o.enabled,disabled:a.disabled,checked:{publishes:!0,priority:2e3,bind:function(e){var t=this;this.customData={},this.customData.callback||(this.customData.callback=function(){t.publish()}),e.addEventListener("change",this.customData.callback)},unbind:function(e){e.removeEventListener("change",this.customData.callback)},routine:function(e,t){"radio"===e.type?e.checked=(0,i.getString)(e.value)===(0,i.getString)(t):e.checked=!!t}},value:{publishes:!0,priority:3e3,bind:function(e){if(this.customData={},this.customData.isRadio="INPUT"===e.tagName&&"radio"===e.type,!this.customData.isRadio){this.customData.event=e.getAttribute("event-name")||("SELECT"===e.tagName?"change":"input");var t=this;this.customData.callback||(this.customData.callback=function(){t.publish()}),e.addEventListener(this.customData.event,this.customData.callback)}},unbind:function(e){this.customData.isRadio||e.removeEventListener(this.customData.event,this.customData.callback)},routine:function(e,t){if(this.customData&&this.customData.isRadio)e.setAttribute("value",t);else if("select-multiple"===e.type&&e instanceof HTMLSelectElement){if(t instanceof Array)for(var n=0;n<e.length;n++){var r=e[n];r.selected=t.indexOf(r.value)>-1}}else(0,i.getString)(t)!==(0,i.getString)(e.value)&&(e.value=null!=t?t:"")}},if:{block:!0,priority:4e3,bind:function(e){if(this.customData={},this.marker)!1===this.customData.bound&&this.customData.nested&&this.customData.nested.bind();else{if(this.marker=document.createComment(" tinybind: "+this.type+" "+this.keypath+" "),this.customData.attached=!1,!e.parentNode)throw new Error("Element has no parent node");e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)}this.customData.bound=!0},unbind:function(){this.customData.nested&&(this.customData.nested.unbind(),this.customData.bound=!1)},routine:function(e,t){if((t=!!t)!==this.customData.attached)if(t){if(this.customData.nested||(this.customData.nested=new r.View(e,this.view.models,this.view.options),this.customData.nested.bind()),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.customData.attached=!0}else{if(!e.parentNode)throw new Error("Element has no parent node");e.parentNode.removeChild(e),this.customData.attached=!1}},update:function(e){this.customData.nested&&this.customData.nested.update(e)}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.routeBinder=void 0;var r=a(n(1)),i=a(n(2)),o=n(0);function a(e){return e&&e.__esModule?e:{default:e}}t.routeBinder=function(e,t,n){var a=(0,r.default)("binders:route");return{binder:function(r,s){var u=(0,i.default)(r),c=!1;a("getBinder",r,s),s||(s=u.attr("href")),"_blank"===u.attr("target")&&(c=!0);var l=o.Utils.getLocation(),f=l.protocol+"//"+l.hostname;s&&o.Utils.isAbsoluteUrl(s)&&(0===s.indexOf(f)?s=s.replace(f,""):c=!0);var d=function(e){if(e){var t=o.Utils.getLocation().pathname;if(a("checkURL",t,e),e===t)return!0}return!1},p=function(e){if(e){if(d(e))return u.addClass("active"),!0;u.removeClass("active")}return!1};e.on("newPageReady",function(){return p(s)}),u.off("click").on("click",function(e){a("go to ",s),e.preventDefault(),d(s)?a("already on this site"):s&&t.goTo(s,c)}),c||d(s)||u.off("mouseenter touchstart").on("mouseenter touchstart",function(e){n.onLinkEnter(e,s)}),p(s)},name:"route"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewBinder=void 0;var r=s(n(1)),i=s(n(2)),o=n(3),a=n(0);function s(e){return e&&e.__esModule?e:{default:e}}t.viewBinder=function(e,t,n){var s=(0,r.default)("binders:view");return{binder:function(r,u){var c=(0,i.default)(r),l=this;l.view.models.routerDispatcher=e,this.customData={nested:null},e.on("newPageReady",function(e,t,n,r,i,u){null!==l.customData.nested&&l.customData.nested.unbind(),a.Utils.isObject(l.view.models)||(l.view.models={}),l.view.models.dataset=n.data(),s("newPageReady dataset:",i),u||(l.customData.nested=new o.View(n[0],l.view.models,l.view.options),l.customData.nested.bind())}),setTimeout(function(){n.init(),t.start(c)},0)},name:"view"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Prefetch=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(0),a=n(20);function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"ignoreClassLink","no-barba-prefetch"),u(this,"debug",(0,i.default)("Prefetch")),e.instance)return e.instance;e.instance=this}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!window.history.pushState)return!1;e&&(document.body.addEventListener("mouseover",this.onLinkEnter.bind(this)),document.body.addEventListener("touchstart",this.onLinkEnter.bind(this)))}},{key:"onLinkEnter",value:function(e,t){var n=e.target;if(!t){for(;n&&!a.Pjax.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;t=a.Pjax.getHref(n)}if(this.debug("onLinkEnter",t),t||console.warn("Url is not defined, you can't cache the link without the url. Please make shure your element has the href attribute or pass the url directly to this function."),t&&a.Pjax.preventCheck(e,n)&&!a.Pjax.cache.get(t)){var r=o.Utils.xhr(t);a.Pjax.cache.set(t,r)}}}])&&s(t.prototype,n),r&&s(t,r),e}();t.Prefetch=c,u(c,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dom=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"dataNamespace","namespace"),a(this,"containerSelector",".rv-view-container"),a(this,"currentHTML",void 0),a(this,"_$wrapper",void 0),this._$wrapper=t}var t,n,r;return t=e,(n=[{key:"parseResponse",value:function(e){this.currentHTML=e;var t=(0,i.default)(i.default.parseHTML(e)),n=t.filter("title");return n.length&&(document.title=n.text()),this.getContainer(t)}},{key:"getWrapper",value:function(){return this._$wrapper}},{key:"getContainer",value:function(e){if(e||(e=(0,i.default)(document.body)),!e)throw new Error("[DOM] DOM not ready!");var t=this.parseContainer(e);if(!t)throw new Error("[DOM] No container found");return t}},{key:"getNamespace",value:function(e){if(e&&e.data())return e.data("namespace");throw new Error("[DOM] Missing data-namespace attribute")}},{key:"putContainer",value:function(e){e.css("visibility","hidden"),this.getWrapper().append(e)}},{key:"parseContainer",value:function(e){var t=e.find(this.containerSelector);if(!t.length)throw new Error('No container with selector "'.concat(this.containerSelector,'" found!'));return t}}])&&o(t.prototype,n),r&&o(t,r),e}();t.Dom=s},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryManager=void 0;var o=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"history",new Array),e.instance?e.instance:(e.instance=this,e.instance)}var t,n,o;return t=e,(n=[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){var e=this.history;return e.length<2?null:e[e.length-2]}},{key:"add",value:function(e,t){t||(t=void 0),this.history.push({namespace:t,url:e})}}])&&r(t.prototype,n),o&&r(t,o),e}();t.HistoryManager=o,i(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseView=void 0;var r=n(9),i=n(0);function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"namespace",void 0),a(this,"$container",void 0),a(this,"dispatcher",new r.GlobalEvent)}var t,n,s;return t=e,(n=[{key:"extend",value:function(e){return i.Utils.extend(!1,this,e)}},{key:"init",value:function(){var e=this;this.dispatcher.on("initStateChange",function(t,n){n&&n.namespace===e.namespace&&e.onLeave()}),this.dispatcher.on("newPageReady",function(t,n,r,i,o){e.$container=r,t.namespace===e.namespace&&e.onEnter()}),this.dispatcher.on("transitionCompleted",function(t,n){t.namespace===e.namespace&&e.onEnterCompleted(),n&&n.namespace===e.namespace&&e.onLeaveCompleted()})}}])&&o(t.prototype,n),s&&o(t,s),e}();t.BaseView=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HideShowTransition=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(10);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(){var e,n,r,o,s,c,f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var d=arguments.length,p=new Array(d),h=0;h<d;h++)p[h]=arguments[h];return r=this,n=!(o=(e=u(t)).call.apply(e,[this].concat(p)))||"object"!==a(o)&&"function"!=typeof o?l(r):o,s=l(l(n)),c="debug",f=(0,i.default)("barba:HideShowTransition"),c in s?Object.defineProperty(s,c,{value:f,enumerable:!0,configurable:!0,writable:!0}):s[c]=f,n}var n,r,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,o.BaseTransition),n=t,(r=[{key:"start",value:function(){if(!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){document.body.scrollTop=0,this.done()}}])&&s(n.prototype,r),f&&s(n,f),t}();t.HideShowTransition=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomTransition=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(0),a=n(10);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=function(e){function t(){var e,n,r,o,a,u,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var d=arguments.length,p=new Array(d),h=0;h<d;h++)p[h]=arguments[h];return r=this,n=!(o=(e=c(t)).call.apply(e,[this].concat(p)))||"object"!==s(o)&&"function"!=typeof o?f(r):o,a=f(f(n)),u="debug",l=(0,i.default)("rivets:CustomTransition"),u in a?Object.defineProperty(a,u,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[u]=l,n}var n,r,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,a.BaseTransition),n=t,(r=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.debug("init"),this.deferred=o.Utils.deferred();var r=o.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),t.then(function(e){n.$newContainer=e,r.resolve()}),this.deferred.promise}},{key:"start",value:function(){if(this.debug("CustomTransition start"),!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(e){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}])&&u(n.prototype,r),d&&u(n,d),t}();t.CustomTransition=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(22);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})});var i=n(21);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})});var o=n(97);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}})});var a=n(20);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})});var s=n(9);Object.keys(s).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return r.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return r.Prefetch}}),Object.defineProperty(t,"GlobalEvent",{enumerable:!0,get:function(){return r.GlobalEvent}}),t.routerBinders=void 0;var r=n(100),i=n(93),o=n(92),a=new r.GlobalEvent,s=new r.Pjax,u=new r.Prefetch,c={};t.routerBinders=c;var l=(0,i.viewBinder)(a,s,u),f=(0,o.routeBinder)(a,s,u);c[l.name]=l.binder,c[f.name]=f.binder},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(101);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})});var i=n(91);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})});var o=n(87);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}})});var a=n(17);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})});var s=n(16);Object.keys(s).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}})});var u=n(15);Object.keys(u).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return u[e]}})});var c=n(14);Object.keys(c).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return c[e]}})});var l=n(7);Object.keys(l).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return l[e]}})});var f=n(18);Object.keys(f).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return f[e]}})});var d=n(4);Object.keys(d).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return d[e]}})});var p=n(19);Object.keys(p).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return p[e]}})});var h=n(0);Object.keys(h).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return h[e]}})});var v=n(3);Object.keys(v).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return v[e]}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.attrFn=e.attrFn||{};var t="ontouchstart"in window,n={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,shake_threshold:15,touch_capable:t,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:t?"touchstart":"mousedown",endevent:t?"touchend":"mouseup",moveevent:t?"touchmove":"mousemove",tapevent:t?"tap":"click",scrollevent:t?"touchmove":"scroll",hold_timer:null,tap_timer:null};e.touch={},e.isTouchCapable=function(){return n.touch_capable},e.getStartEvent=function(){return n.startevent},e.getEndEvent=function(){return n.endevent},e.getMoveEvent=function(){return n.moveevent},e.getTapEvent=function(){return n.tapevent},e.getScrollEvent=function(){return n.scrollevent},e.touch.setSwipeThresholdX=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");n.swipe_h_threshold=e},e.touch.setSwipeThresholdY=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");n.swipe_v_threshold=e},e.touch.setDoubleTapInt=function(e){if("number"!=typeof e)throw new Error("Interval parameter must be a type of number");n.doubletap_int=e},e.touch.setTapHoldThreshold=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");n.taphold_threshold=e},e.touch.setTapRange=function(e){if("number"!=typeof e)throw new Error("Ranger parameter must be a type of number");n.tap_pixel_range=threshold},e.each(["tapstart","tapend","tapmove","tap","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange","tap2","taphold2"],function(t,n){e.fn[n]=function(e){return e?this.on(n,e):this.trigger(n)},e.attrFn[n]=!0}),e.event.special.tapstart={setup:function(){var t=this,r=e(t);r.on(n.startevent,function e(i){if(r.data("callee",e),i.which&&1!==i.which)return!1;var o=i.originalEvent,a={position:{x:n.touch_capable?o.touches[0].pageX:i.pageX,y:n.touch_capable?o.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:i.target};return g(t,"tapstart",i,a),!0})},remove:function(){e(this).off(n.startevent,e(this).data.callee)}},e.event.special.tapmove={setup:function(){var t=this,r=e(t);r.on(n.moveevent,function e(i){r.data("callee",e);var o=i.originalEvent,a={position:{x:n.touch_capable?o.touches[0].pageX:i.pageX,y:n.touch_capable?o.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:i.target};return g(t,"tapmove",i,a),!0})},remove:function(){e(this).off(n.moveevent,e(this).data.callee)}},e.event.special.tapend={setup:function(){var t=this,r=e(t);r.on(n.endevent,function e(i){r.data("callee",e);var o=i.originalEvent,a={position:{x:n.touch_capable?o.changedTouches[0].pageX:i.pageX,y:n.touch_capable?o.changedTouches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:i.target};return g(t,"tapend",i,a),!0})},remove:function(){e(this).off(n.endevent,e(this).data.callee)}},e.event.special.taphold={setup:function(){var t,r=this,i=e(r),o={x:0,y:0},a=0,s=0;i.on(n.startevent,function e(u){if(u.which&&1!==u.which)return!1;i.data("tapheld",!1),t=u.target;var c=u.originalEvent,l=Date.now();n.touch_capable?c.touches[0].pageX:u.pageX,n.touch_capable?c.touches[0].pageY:u.pageY,n.touch_capable?(c.touches[0].pageX,c.touches[0].target.offsetLeft):u.offsetX,n.touch_capable?(c.touches[0].pageY,c.touches[0].target.offsetTop):u.offsetY;o.x=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageX:u.pageX,o.y=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageY:u.pageY,a=o.x,s=o.y;var f=i.parent().data("threshold")?i.parent().data("threshold"):i.data("threshold"),d=void 0!==f&&!1!==f&&parseInt(f)?parseInt(f):n.taphold_threshold;return n.hold_timer=window.setTimeout(function(){var f=o.x-a,d=o.y-s;if(u.target==t&&(o.x==a&&o.y==s||f>=-n.tap_pixel_range&&f<=n.tap_pixel_range&&d>=-n.tap_pixel_range&&d<=n.tap_pixel_range)){i.data("tapheld",!0);for(var p=Date.now(),h=p-l,v=u.originalEvent.targetTouches?u.originalEvent.targetTouches:[u],m=[],b=0;b<v.length;b++){var y={position:{x:n.touch_capable?c.changedTouches[b].pageX:u.pageX,y:n.touch_capable?c.changedTouches[b].pageY:u.pageY},offset:{x:n.touch_capable?Math.round(c.changedTouches[b].pageX-(i.offset()?i.offset().left:0)):Math.round(u.pageX-(i.offset()?i.offset().left:0)),y:n.touch_capable?Math.round(c.changedTouches[b].pageY-(i.offset()?i.offset().top:0)):Math.round(u.pageY-(i.offset()?i.offset().top:0))},time:Date.now(),target:u.target,duration:h};m.push(y)}var w=2==v.length?"taphold2":"taphold";i.data("callee1",e),g(r,w,u,m)}},d),!0}).on(n.endevent,function e(){i.data("callee2",e),i.data("tapheld",!1),window.clearTimeout(n.hold_timer)}).on(n.moveevent,function e(t){i.data("callee3",e),a=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,s=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2).off(n.moveevent,e(this).data.callee3)}},e.event.special.doubletap={setup:function(){var t,r,i=this,o=e(i),a=null,s=!1;o.on(n.startevent,function t(i){return(!i.which||1===i.which)&&(o.data("doubletapped",!1),i.target,o.data("callee1",t),r=i.originalEvent,a||(a={position:{x:n.touch_capable?r.touches[0].pageX:i.pageX,y:n.touch_capable?r.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(i.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(i.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:i.target,element:i.originalEvent.srcElement,index:e(i.target).index()}),!0)}).on(n.endevent,function u(c){var l=Date.now(),f=o.data("lastTouch")||l+1,d=l-f;if(window.clearTimeout(t),o.data("callee2",u),d<n.doubletap_int&&e(c.target).index()==a.index&&d>100){o.data("doubletapped",!0),window.clearTimeout(n.tap_timer);var p={position:{x:n.touch_capable?c.originalEvent.changedTouches[0].pageX:c.pageX,y:n.touch_capable?c.originalEvent.changedTouches[0].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(c.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(c.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:c.target,element:c.originalEvent.srcElement,index:e(c.target).index()},h={firstTap:a,secondTap:p,interval:p.time-a.time};s||(g(i,"doubletap",c,h),a=null),s=!0,window.setTimeout(function(){s=!1},n.doubletap_int)}else o.data("lastTouch",l),t=window.setTimeout(function(){a=null,window.clearTimeout(t)},n.doubletap_int,[c]);o.data("lastTouch",l)})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2)}},e.event.special.singletap={setup:function(){var t=this,r=e(t),i=null,o=null,a={x:0,y:0};r.on(n.startevent,function e(t){return(!t.which||1===t.which)&&(o=Date.now(),i=t.target,r.data("callee1",e),a.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,a.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY,!0)}).on(n.endevent,function e(s){if(r.data("callee2",e),s.target==i){var u=s.originalEvent.changedTouches?s.originalEvent.changedTouches[0].pageX:s.pageX,c=s.originalEvent.changedTouches?s.originalEvent.changedTouches[0].pageY:s.pageY;n.tap_timer=window.setTimeout(function(){var e=a.x-u,i=a.y-c;if(!r.data("doubletapped")&&!r.data("tapheld")&&(a.x==u&&a.y==c||e>=-n.tap_pixel_range&&e<=n.tap_pixel_range&&i>=-n.tap_pixel_range&&i<=n.tap_pixel_range)){var l=s.originalEvent,f={position:{x:n.touch_capable?l.changedTouches[0].pageX:s.pageX,y:n.touch_capable?l.changedTouches[0].pageY:s.pageY},offset:{x:n.touch_capable?Math.round(l.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(s.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(l.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(s.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:s.target};f.time-o<n.taphold_threshold&&g(t,"singletap",s,f)}},n.doubletap_int)}})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2)}},e.event.special.tap={setup:function(){var t,r,i=this,o=e(i),a=!1,s=null,u={x:0,y:0};o.on(n.startevent,function e(n){return o.data("callee1",e),(!n.which||1===n.which)&&(a=!0,u.x=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageX:n.pageX,u.y=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageY:n.pageY,t=Date.now(),s=n.target,r=n.originalEvent.targetTouches?n.originalEvent.targetTouches:[n],!0)}).on(n.endevent,function e(c){o.data("callee2",e);var l=c.originalEvent.targetTouches?c.originalEvent.changedTouches[0].pageX:c.pageX,f=c.originalEvent.targetTouches?c.originalEvent.changedTouches[0].pageY:c.pageY,d=u.x-l,p=u.y-f;if(s==c.target&&a&&Date.now()-t<n.taphold_threshold&&(u.x==l&&u.y==f||d>=-n.tap_pixel_range&&d<=n.tap_pixel_range&&p>=-n.tap_pixel_range&&p<=n.tap_pixel_range)){for(var h=c.originalEvent,v=[],m=0;m<r.length;m++){var b={position:{x:n.touch_capable?h.changedTouches[m].pageX:c.pageX,y:n.touch_capable?h.changedTouches[m].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(h.changedTouches[m].pageX-(o.offset()?o.offset().left:0)):Math.round(c.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(h.changedTouches[m].pageY-(o.offset()?o.offset().top:0)):Math.round(c.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:c.target};v.push(b)}var y=2==r.length?"tap2":"tap";g(i,y,c,v)}})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2)}},e.event.special.swipe={setup:function(){var t,r=e(this),i=!1,o=!1,a={x:0,y:0},s={x:0,y:0};r.on(n.startevent,function o(u){r=e(u.currentTarget);r.data("callee1",o);a.x=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageX:u.pageX;a.y=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageY:u.pageY;s.x=a.x;s.y=a.y;i=!0;var c=u.originalEvent;t={position:{x:n.touch_capable?c.touches[0].pageX:u.pageX,y:n.touch_capable?c.touches[0].pageY:u.pageY},offset:{x:n.touch_capable?Math.round(c.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(u.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(c.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(u.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:u.target}}),r.on(n.moveevent,function u(c){r=e(c.currentTarget);r.data("callee2",u);s.x=c.originalEvent.targetTouches?c.originalEvent.targetTouches[0].pageX:c.pageX;s.y=c.originalEvent.targetTouches?c.originalEvent.targetTouches[0].pageY:c.pageY;var l;var f=r.parent().data("xthreshold")?r.parent().data("xthreshold"):r.data("xthreshold"),d=r.parent().data("ythreshold")?r.parent().data("ythreshold"):r.data("ythreshold"),p=void 0!==f&&!1!==f&&parseInt(f)?parseInt(f):n.swipe_h_threshold,h=void 0!==d&&!1!==d&&parseInt(d)?parseInt(d):n.swipe_v_threshold;a.y>s.y&&a.y-s.y>h&&(l="swipeup");a.x<s.x&&s.x-a.x>p&&(l="swiperight");a.y<s.y&&s.y-a.y>h&&(l="swipedown");a.x>s.x&&a.x-s.x>p&&(l="swipeleft");if(void 0!=l&&i){a.x=0,a.y=0,s.x=0,s.y=0,i=!1;var v=c.originalEvent,m={position:{x:n.touch_capable?v.touches[0].pageX:c.pageX,y:n.touch_capable?v.touches[0].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(v.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(c.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(v.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(c.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:c.target},g=Math.abs(t.position.x-m.position.x),b=Math.abs(t.position.y-m.position.y),y={startEvnt:t,endEvnt:m,direction:l.replace("swipe",""),xAmount:g,yAmount:b,duration:m.time-t.time};o=!0,r.trigger("swipe",y).trigger(l,y)}}),r.on(n.endevent,function a(s){r=e(s.currentTarget);var u="";r.data("callee3",a);if(o){var c=r.data("xthreshold"),l=r.data("ythreshold"),f=void 0!==c&&!1!==c&&parseInt(c)?parseInt(c):n.swipe_h_threshold,d=void 0!==l&&!1!==l&&parseInt(l)?parseInt(l):n.swipe_v_threshold,p=s.originalEvent,h={position:{x:n.touch_capable?p.changedTouches[0].pageX:s.pageX,y:n.touch_capable?p.changedTouches[0].pageY:s.pageY},offset:{x:n.touch_capable?Math.round(p.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(s.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(p.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(s.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:s.target};t.position.y>h.position.y&&t.position.y-h.position.y>d&&(u="swipeup"),t.position.x<h.position.x&&h.position.x-t.position.x>f&&(u="swiperight"),t.position.y<h.position.y&&h.position.y-t.position.y>d&&(u="swipedown"),t.position.x>h.position.x&&t.position.x-h.position.x>f&&(u="swipeleft");var v=Math.abs(t.position.x-h.position.x),m=Math.abs(t.position.y-h.position.y),g={startEvnt:t,endEvnt:h,direction:u.replace("swipe",""),xAmount:v,yAmount:m,duration:h.time-t.time};r.trigger("swipeend",g)}i=!1;o=!1})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.moveevent,e(this).data.callee2).off(n.endevent,e(this).data.callee3)}},e.event.special.scrollstart={setup:function(){var t,r,i=this,o=e(i);function a(e,n){g(i,(t=n)?"scrollstart":"scrollend",e)}o.on(n.scrollevent,function e(n){o.data("callee",e),t||a(n,!0),clearTimeout(r),r=setTimeout(function(){a(n,!1)},50)})},remove:function(){e(this).off(n.scrollevent,e(this).data.callee)}};var r,i,o,a,s=e(window),u={0:!0,180:!0};if(n.orientation_support){var c=window.innerWidth||s.width(),l=window.innerHeight||s.height();o=c>l&&c-l>50,a=u[window.orientation],(o&&a||!o&&!a)&&(u={"-90":!0,90:!0})}function f(){var e=r();e!==i&&(i=e,s.trigger("orientationchange"))}e.event.special.orientationchange={setup:function(){return!n.orientation_support&&(i=r(),s.on("throttledresize",f),!0)},teardown:function(){return!n.orientation_support&&(s.off("throttledresize",f),!0)},add:function(e){var t=e.handler;e.handler=function(e){return e.orientation=r(),t.apply(this,arguments)}}},e.event.special.orientationchange.orientation=r=function(){var e=document.documentElement;return(n.orientation_support?u[window.orientation]:e&&e.clientWidth/e.clientHeight<1.1)?"portrait":"landscape"},e.event.special.throttledresize={setup:function(){e(this).on("resize",v)},teardown:function(){e(this).off("resize",v)}};var d,p,h,v=function(){p=Date.now(),(h=p-m)>=250?(m=p,e(this).trigger("throttledresize")):(d&&window.clearTimeout(d),d=window.setTimeout(f,250-h))},m=0;function g(t,n,r,i){var o=r.type;r.type=n,e.event.dispatch.call(t,r,i),r.type=o}return e.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap",taphold2:"taphold"},function(t,n){e.event.special[t]={setup:function(){e(this).on(n,e.noop)}}}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2));function i(e){return e&&e.__esModule?e:{default:e}}var o=(0,i(n(103)).default)(r.default);t.default=o},function(e,t){var n=1e3,r=60*n,i=60*r,o=24*i,a=365.25*o;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*i;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(u=e,o,"day")||s(u,i,"hour")||s(u,r,"minute")||s(u,n,"second")||u+" ms":function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=i)return Math.round(e/i)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,i=+new Date,o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var i=t.formatters[r];if("function"==typeof i){var o=a[u];n=i.call(e,o),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=i,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function i(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var o=t.instances[n];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(105),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=s(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Main=void 0;var r=u(n(1)),i=u(n(104)),o=n(11),a=n(44),s=n(31);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"dispatcher",new o.GlobalEvent),c(this,"view",void 0),c(this,"debug",(0,r.default)("main")),c(this,"tinybind",new o.Tinybind),this.debug("init the main application"),this.tinybind.componentService.regist((0,s.contactComponent)()),this.tinybind.componentService.regist((0,s.navItemsComponent)()),this.tinybind.componentService.regist((0,s.iconsetComponent)()),this.tinybind.componentService.regist((0,s.shopifySectionProductScrollbarComponent)(i.default));var t=(0,o.basicBindersWrapper)(i.default);this.tinybind.binderService.regists(o.routerBinders),this.tinybind.binderService.regists(t),this.tinybind.binderService.regist((0,a.scrollbarDragableBinder)()),this.tinybind.binderService.registWrapper((0,a.autoscrollBinder)()),this.tinybind.binderService.registWrapper((0,a.removeClassBinder)()),this.tinybind.binderService.registWrapper((0,a.addClassBinder)()),this.tinybind.binderService.registWrapper((0,a.valueBinder)()),this.tinybind.formatterService.regists(o.compareFormatters),this.tinybind.formatterService.regists(o.mathFormatters),this.tinybind.formatterService.regists(o.propertyFormatters),this.tinybind.formatterService.regists(o.specialFormatters),this.tinybind.formatterService.regists(o.stringFormatters),this.view=this.tinybind.bind((0,i.default)("body")[0],window.model)};t.Main=l,(0,i.default)(function(e){new l})},function(e,t,n){n(108),e.exports=n(23)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvdmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9wYXJzZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9zZXJ2aWNlcy9VdGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L2dldC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvY29tcG9uZW50LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvb2JzZXJ2ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZ2xvYmFsLWV2ZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1RyYW5zaXRpb24vQmFzZVRyYW5zaXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3RpbnliaW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvZW1wdHkuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvY291bnQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2NvbXBvbmVudC1iaW5kaW5nLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYWRhcHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC90aW55YmluZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9QamF4L1BqYXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvYmFyYmEvVHJhbnNpdGlvbi9UcmFuc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL0NhY2hlLnRzIiwid2VicGFjazovLy8uL3NyYy9zY3NzL3RoZW1lLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvc2hvcGlmeS1zZWN0aW9uLXByb2R1Y3Qtc2Nyb2xsYmFyL3Nob3BpZnktc2VjdGlvbi1wcm9kdWN0LXNjcm9sbGJhci5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvbmF2LWl0ZW1zL25hdi1pdGVtcy5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9uYXYtaXRlbXMvbmF2LWl0ZW1zLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9pY29uc2V0L2ljb25zZXQuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvaWNvbnNldC9pY29uc2V0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9jb250YWN0L2NvbnRhY3QuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9zY3JvbGxiYXIvc2Nyb2xsYmFyLWRyYWdhYmxlLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy92YWx1ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvYmFja2dyb3VuZC1pbWFnZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvaW1hZ2UtYm94LmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9hcHBlbmQtaHRtbC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvY2xhc3MtYWRkLXJlbW92ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvYWRkLWNsYXNzLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9yZW1vdmUtY2xhc3MuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iaW5kZXJzL2Zvci1mcm9tLXRvLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy90ZWwuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iaW5kZXJzL21haWx0by5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvYXV0b3Njcm9sbC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zdHJpbmcvdXBjYXNlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3N0cmluZy9zdHJpcC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zdHJpbmcvc2xpY2UuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL3ByZXBlbmQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL3BsdXJhbGl6ZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zdHJpbmcvaXNTdHJpbmcuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL2ZpbGxlZC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zdHJpbmcvZG93bmNhc2UuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL2FwcGVuZC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zdHJpbmcvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zcGVjaWFsL2N1cnJlbmN5LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3NwZWNpYWwvZGVmLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3NwZWNpYWwvZGVidWcuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3BlY2lhbC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L2lzTGFzdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9tYXRjaC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9zZXQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvY29udGFpbnMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvbGFzdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9maXJzdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9qc29uLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L3BhcnNlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC9kaWdpdHMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC91bmV2ZW4uZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC9ldmVuLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvZ2NkLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvbW9kdWxvLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvZGl2aWRlZEJ5LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvdGltZXMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC9taW51cy5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9tYXRoL3BsdXMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC9yYW5kb20uZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvbm90LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvb3IuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvY29tcGFyZS9lbHQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvY29tcGFyZS9sdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9jb21wYXJlL25lLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvZXEuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvY29tcGFyZS9hbmQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvY29tcGFyZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvYmFzaWMvb24tc3Rhci5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9iYXNpYy9kaXNhYmxlZC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9iYXNpYy9lbmFibGVkLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL2Jhc2ljL2Jhc2ljLmJpbmRlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvcm91dGUuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL3ZpZXcuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1BqYXgvUHJlZmV0Y2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvYmFyYmEvUGpheC9Eb20udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvYmFyYmEvUGpheC9IaXN0b3J5TWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9WaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1RyYW5zaXRpb24vSGlkZVNob3dUcmFuc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1RyYW5zaXRpb24vQ3VzdG9tVHJhbnNpdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9iYXJiYS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9yb3V0ZXIuYmluZGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9qcXVlcnktdG91Y2gtZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy90cy9qcXVlcnkudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvbWFpbi50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9qcXVlcnkiLCJzdHIiLCJ2YWwiLCJKU09OIiwicGFyc2UiLCJBcnJheSIsImVycm9yIiwib2JqIiwiX3R5cGVvZiIsInRvU3RyaW5nIiwidW5kZWZpbmVkIiwiY2IiLCJlbCIsInJlc3VsdHMiLCJ0eXBlIiwiY2hlY2tlZCIsIm9wdGlvbnMiLCJvcHRpb24iLCJzZWxlY3RlZCIsInB1c2giLCJVdGlscyIsInRoaXMiLCJpc1VuZGVmaW5lZCIsImlzTmFOIiwicGFyc2VGbG9hdCIsImlzRGVmaW5lZCIsImlzU3RyaW5nIiwidGVzdCIsIm51bSIsInJlcGxhY2UiLCJpc051bWJlciIsIk51bWJlciIsImRlZXAiLCJ0YXJnZXQiLCJvYmplY3QxIiwib2JqZWN0TiIsImpRdWVyeSIsImV4dGVuZCIsIm9iamVjdDIiLCJ1cmwiLCJkZWZlcnJlZCIsInJlcSIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInJlc29sdmUiLCJyZXNwb25zZVRleHQiLCJyZWplY3QiLCJFcnJvciIsIm9udGltZW91dCIsIm9wZW4iLCJ0aW1lb3V0IiwieGhyVGltZW91dCIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwicHJvbWlzZSIsInByb20iLCJQcm9taXNlIiwiZGVmYXVsdCIsImNvbmNhdCIsIndpbmRvdyIsImxvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJwYXRobmFtZSIsInNlYXJjaCIsInBvcnQiLCJocmVmIiwiUmVnRXhwIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsImhhc2giLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwiZG9jdW1lbnQiLCJ0aXRsZSIsInciLCJNYXRoIiwibWF4IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiaCIsImNsaWVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicHJvY2VzcyIsImxvYWQiLCJzdG9yYWdlIiwiZGVidWciLCJlIiwiZW52IiwiREVCVUciLCJsb2ciLCJjb25zb2xlIiwiRnVuY3Rpb24iLCJhcHBseSIsImFyZ3VtZW50cyIsImZvcm1hdEFyZ3MiLCJhcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJzcGxpY2UiLCJpbmRleCIsImxhc3RDIiwibWF0Y2giLCJzYXZlIiwibmFtZXNwYWNlcyIsInJlbW92ZUl0ZW0iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsInN0eWxlIiwiV2Via2l0QXBwZWFyYW5jZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiJDEiLCJjaHJvbWUiLCJsb2NhbCIsImxvY2FsU3RvcmFnZSIsImxvY2Fsc3RvcmFnZSIsImNvbG9ycyIsImZvcm1hdHRlcnMiLCJqIiwidiIsInN0cmluZ2lmeSIsImVyciIsIm1lc3NhZ2UiLCJlbmFibGUiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsImZhY3RvcnkiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInNyYyIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJub2RlIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJlbmQiLCJzb3J0IiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwic3BsaXQiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJzb3J0T3JkZXIiLCJhIiwiYiIsInBvcCIsInB1c2hfbmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmF0dHJpYnV0ZVF1b3RlcyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwicmlucHV0cyIsInJoZWFkZXIiLCJybmF0aXZlIiwicnF1aWNrRXhwciIsInJzaWJsaW5nIiwicnVuZXNjYXBlIiwiZnVuZXNjYXBlIiwiXyIsImVzY2FwZWQiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImRpc2FibGVkQW5jZXN0b3IiLCJhZGRDb21iaW5hdG9yIiwiZGlzYWJsZWQiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImVscyIsInNlZWQiLCJuaWQiLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsImpvaW4iLCJ0ZXN0Q29udGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwidG9wIiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiY2xhc3NOYW1lIiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImZpbHRlciIsImF0dHJJZCIsImZpbmQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidGFnIiwidG1wIiwiaW5uZXJIVE1MIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwiZWxlbWVudHMiLCJhdHRyIiwic3BlY2lmaWVkIiwiZXNjYXBlIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwiPiIsIiAiLCIrIiwifiIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm5vdCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJ0YWJJbmRleCIsImVuYWJsZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJoZWFkZXIiLCJidXR0b24iLCJldmVuIiwib2RkIiwibHQiLCJndCIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJzZWxmIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNoaWxkcmVuIiwiY29udGVudHMiLCJwcmV2Iiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsIm5vVmFsdWUiLCJtZXRob2QiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsInJlbW92ZSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzZXRUaW1lb3V0Iiwic3RhdGVTdHJpbmciLCJ3aGVuIiwic2luZ2xlVmFsdWUiLCJyZW1haW5pbmciLCJyZXNvbHZlQ29udGV4dHMiLCJyZXNvbHZlVmFsdWVzIiwibWFzdGVyIiwidXBkYXRlRnVuYyIsInJlcnJvck5hbWVzIiwic3RhY2siLCJ3YXJuIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJhbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJjb25maWd1cmFibGUiLCJzZXQiLCJkYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2Iiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImhlaWdodCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsInJlc3BvbnNlVHlwZSIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIiQiLCJub0NvbmZsaWN0IiwiX3RpbnliaW5kIiwiX2JpbmRpbmciLCJfY29tcG9uZW50QmluZGluZyIsIl9wYXJzZXJzIiwiVmlldyIsIm1vZGVscyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsImJ1aWxkIiwiYmluZGluZyIsImFuY2hvckVsIiwidGVtcGxhdGUiLCJtYXJrZXIiLCJkZWNsYXJhdGlvbiIsImJpbmRlciIsInBhcnNlZERlY2xhcmF0aW9uIiwicGFyc2VEZWNsYXJhdGlvbiIsImtleXBhdGgiLCJwaXBlcyIsImJpbmRpbmdzIiwiQmluZGluZyIsInRlbXBsYXRlRGVsaW1pdGVycyIsInBhcnNlTm9kZSIsImJpbmRpbmdDb21wYXJhdG9yIiwiYmluZGluZ1ByZWZpeCIsImJsb2NrIiwiYmluZEluZm9zIiwic3RhckJpbmRlcnMiLCJhdHRyaWJ1dGUiLCJiaW5kZXJzIiwiayIsIlRpbnliaW5kIiwiZmFsbGJhY2tCaW5kZXIiLCJidWlsZEJpbmRpbmciLCJiaW5kSW5mbyIsImNvbXBvbmVudHMiLCJfYm91bmQiLCJDb21wb25lbnRCaW5kaW5nIiwiZm9yRWFjaCIsInN5bmMiLCJwdWJsaXNoIiwicHVibGlzaGVzIiwiX3RoaXMiLCJ1cGRhdGUiLCJyb3V0aW5lIiwiYVByaW9yaXR5IiwicHJpb3JpdHkiLCJQUklNSVRJVkUiLCJRVU9URURfU1RSIiwiX3V0aWxzIiwiaXNKc29uIiwiS0VZUEFUSCIsInBhcnNlVGVtcGxhdGUiLCJ0ZXh0QmluZGVyIiwidHJhdmVyc2UiLCJERUNMQVJBVElPTl9TUExJVCIsIl92aWV3IiwiVEVYVCIsIkJJTkRJTkciLCJkZWxpbWl0ZXJzIiwibGFzdEluZGV4IiwiY2xvc2UiLCJzdWJzdHJpbmciLCJsYXN0VG9rZW4iLCJ0aW55YmluZFV0aWxzIiwiaXNPYmplY3QiLCJfZGVidWciLCJDb21wb25lbnRTZXJ2aWNlIiwiY29tcG9uZW50V3JhcHBlciIsImNvbXBvbmVudCIsInJlZ2lzdCIsIk9ic2VydmVyIiwib2JqZWN0UGF0aCIsInBhcnNlUmVzdWx0IiwiZ2V0Um9vdE9iamVjdCIsInJlYWxpemUiLCJhZGFwdGVycyIsImludGVyZmFjZXMiLCJyb290SW50ZXJmYWNlIiwiY2hyIiwicGF0aCIsImNoYXJBdCIsInN1YnN0ciIsInVucmVhY2hlZCIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwicm9vdFByb3AiLCIkcGFyZW50IiwiR2xvYmFsRXZlbnQiLCJpbnN0YW5jZSIsImYiLCJfbGVuIiwiX2tleSIsIkJhc2VUcmFuc2l0aW9uIiwiJG9sZENvbnRhaW5lciIsIm5ld0NvbnRhaW5lciIsIm5ld0NvbnRhaW5lclJlYWR5IiwibmV3Q29udGFpbmVyTG9hZGluZyIsIiRuZXdDb250YWluZXIiLCJfaW5kZXgiLCJfY291bnQiLCJfb2JzZXJ2ZXIiLCJzdGF0aWMiLCJvYnNlcnZlcnMiLCJwYXJzZVRhcmdldCIsInByb3BlcnR5TmFtZSIsInNldFZhbHVlIiwiX3RoaXMyIiwiZ3JvdXBlZCIsInByZWxvYWREYXRhIiwic2NvcGUiLCJpbml0aWFsaXplIiwibG9jYWxzIiwiZ2V0TWVyZ2VkT3B0aW9ucyIsInBhcnNlVHlwZSIsImtleXBhdGhzIiwiX3RoaXMzIiwiZm9ybWF0dGVyc09ic2VydmVycyIsImZvcm1hdHRlckluZGV4IiwiYWkiLCJjb21wb25lbnRWaWV3IiwibW9kZWwiLCJjdXN0b21EYXRhIiwib2JzZXJ2ZXIiLCJtb2RlbE5hbWUiLCJfcmVmIiwiZm9ybWF0dGVyT2JzZXJ2ZXJzIiwicmVkdWNlIiwiRk9STUFUVEVSX0FSR1MiLCJmb3JtYXR0ZXJSZWFkRnVuY3Rpb24iLCJmb3JtYXR0ZXIiLCJwcm9jZXNzZWRBcmdzIiwicGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMiLCJyZWFkIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiZXYiLCJyb3V0aW5lRm4iLCJmdW5jdGlvbiIsImZvcm1hdHRlZFZhbHVlIiwiX3RoaXM0IiwicmVkdWNlUmlnaHQiLCJGT1JNQVRURVJfU1BMSVQiLCJfcmVmMiIsImdldFZhbHVlIiwiX3RoaXM1IiwiZmkiLCJnZXRJbnB1dFZhbHVlIiwiQmluZGVyc1NlcnZpY2UiLCJiaW5kZXJXcmFwcGVyIiwiQWRhcHRlciIsImNvdW50ZXIiLCJ3ZWFrbWFwIiwiX19ydiIsImNhbGxiYWNrcyIsInJlZiIsInBvaW50ZXJzIiwid2Vha1JlZmVyZW5jZSIsIkFSUkFZX01FVEhPRFMiLCJzdHViRnVuY3Rpb24iLCJjbGVhbnVwV2Vha1JlZmVyZW5jZSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1bm9ic2VydmVNdXRhdGlvbnMiLCJfY2FsbGJhY2tzIiwib2JzZXJ2ZU11dGF0aW9ucyIsImFkYXB0ZXIiLCJGb3JtYXR0ZXJTZXJ2aWNlIiwiX2Zvcm1hdHRlciIsIl9hZGFwdGVyIiwiX2JpbmRlciIsIl9jb21wb25lbnQiLCIuIiwiYmluZGVyU2VydmljZSIsImNvbXBvbmVudFNlcnZpY2UiLCJmb3JtYXR0ZXJTZXJ2aWNlIiwiX3ByZWZpeCIsIl9mdWxsUHJlZml4IiwiY29tcG9uZW50S2V5Iiwidmlld09wdGlvbnMiLCJ1cGRhdGVPcHRpb25zIiwiX0hpc3RvcnlNYW5hZ2VyIiwiX2V4cG9ydE5hbWVzIiwiX0RvbSIsIl9QcmVmZXRjaCIsIl9nbG9iYWxFdmVudCIsIl9DYWNoZSIsIl9UcmFuc2l0aW9uIiwiUGpheCIsIkhpc3RvcnlNYW5hZ2VyIiwiSGlkZVNob3dUcmFuc2l0aW9uIiwiZWxlbWVudCIsImdldEhyZWYiLCJob3N0bmFtZSIsImdldFBvcnQiLCJjbGVhbkxpbmsiLCJjbGFzc0xpc3QiLCJpZ25vcmVDbGFzc0xpbmsiLCIkd3JhcHBlciIsInRyYW5zaXRpb24iLCJkb20iLCJEb20iLCJnZXRVcmwiLCJuZXdUYWIiLCJvblN0YXRlQ2hhbmdlIiwiZm9yY2VHb1RvIiwiTG9jYXRpb24iLCIkY29udGFpbmVyIiwicGFyc2VSZXNwb25zZSIsInB1dENvbnRhaW5lciIsImNhY2hlRW5hYmxlZCIsInByZXZlbnRDaGVjayIsImRpc3BhdGNoZXIiLCJnb1RvIiwibmV3VXJsIiwiZ2V0Q3VycmVudFVybCIsInRyYW5zaXRpb25Qcm9ncmVzcyIsImN1cnJlbnRTdGF0dXMiLCJnZXRUcmFuc2l0aW9uIiwicHJldlN0YXR1cyIsInRyYW5zaXRpb25JbnN0YW5jZSIsImdldENvbnRhaW5lciIsIm9uTmV3Q29udGFpbmVyTG9hZGVkIiwib25UcmFuc2l0aW9uRW5kIiwiZ2V0TmFtZXNwYWNlIiwiY3VycmVudEhUTUwiLCJiaW5kRXZlbnRzIiwiQmFzZUNhY2hlIiwiX0N1c3RvbVRyYW5zaXRpb24iLCJfQmFzZVRyYW5zaXRpb24iLCJfSGlkZVNob3dUcmFuc2l0aW9uIiwicGpheCIsInByZWZldGNoIiwiUHJlZmV0Y2giLCIkZWwiLCJvblByb2R1Y3RUYXAiLCJldmVudEVsIiwib25Qcm9kdWN0TW91c2VlbnRlciIsIm9uTGlua0VudGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9uYXZJdGVtc0NvbXBvbmVudCIsImxpbmtsaXN0IiwicGlsbHMiLCJ2ZXJ0aWNhbCIsIl9pY29uc2V0Q29tcG9uZW50Iiwic3lzdGVtIiwiYXNzZXRzUGF0aCIsImRpcmVjdGlvbiIsInNpemUiLCJjbGFzc1N0cmluZyIsIl9jb250YWN0Q29tcG9uZW50IiwicmVnYXJkcyIsIm1haWwiLCJwaG9uZSIsIl9jb250YWN0IiwiX2ljb25zZXQiLCJfbmF2SXRlbXMiLCJfc2hvcGlmeVNlY3Rpb25Qcm9kdWN0U2Nyb2xsYmFyIiwiRHJhZ3Njcm9sbCIsImRldGVjdEdsb2JhbE1vdmUiLCJtZCIsIm11IiwibW0iLCJwdXNoZWQiLCJsYXN0Q2xpZW50WCIsImxhc3RDbGllbnRZIiwibmV3U2Nyb2xsWCIsIm5ld1Njcm9sbFkiLCJfVXRpbHMiLCJ0YWdOYW1lIiwiY29udGVudGVkaXRhYmxlIiwiYmFja2dyb3VuZEltYWdlIiwiaW1hZ2VCb3giLCJyYXRpb1N0cmluZ3MiLCJyYXRpb3MiLCJoZWlnaHRJblBlcmNlbnQiLCJyYXRpb0NsYXNzIiwiaHRtbE5vZGVzIiwiY2xhc3NBZGRSZW1vdmUiLCJodG1sU3RyaW5nIiwiZ2V0V2lkdGgiLCJnZXRWaWV3cG9ydERpbWVuc2lvbnMiLCJvdXRlcldpZHRoIiwiYW5nbGUiLCJqdW1wcyIsIm1heFNjcm9sbFdpZHRoIiwicmVzaXplIiwic2Nyb2xsIiwiaW5pdEF1dG9zY3JvbGwiLCJfYXV0b3Njcm9sbCIsIl9tYWlsdG8iLCJfdGVsIiwiX2ZvckZyb21UbyIsIl9yZW1vdmVDbGFzcyIsIl9hZGRDbGFzcyIsIl9jbGFzc0FkZFJlbW92ZSIsIl9hcHBlbmRIdG1sIiwiX2ltYWdlQm94IiwiX2JhY2tncm91bmRJbWFnZSIsIl92YWx1ZSIsIl9zY3JvbGxiYXJEcmFnYWJsZSIsInNpbmd1bGFyIiwicGx1cmFsIiwiX2VtcHR5IiwiX2FwcGVuZCIsIl9kb3duY2FzZSIsIl9maWxsZWQiLCJfaXNTdHJpbmciLCJfcGx1cmFsaXplIiwiX3ByZXBlbmQiLCJfc2xpY2UiLCJfc3RyaXAiLCJfdXBjYXNlIiwic3RyaW5nRm9ybWF0dGVycyIsImRvd25jYXNlIiwiZmlsbGVkIiwicGx1cmFsaXplIiwic3RyaXAiLCJ1cGNhc2UiLCJhbW91bnQiLCJzeW1ib2wiLCJ0b0ZpeGVkIiwiY29uc29sZURlYnVnIiwiX2RlZiIsIl9jdXJyZW5jeSIsInNwZWNpYWxGb3JtYXR0ZXJzIiwiZGVmIiwiY3VycmVuY3kiLCJhcnJheSIsInJlZ2V4cCIsImZsYWdzIiwiX2dldCIsImpzb25TdHJpbmciLCJfcGFyc2UiLCJfanNvbiIsIl9maXJzdCIsIl9sYXN0IiwiX2NvbnRhaW5zIiwiX3NldCIsIl9tYXRjaCIsIl9pc0xhc3QiLCJwcm9wZXJ0eUZvcm1hdHRlcnMiLCJpc0xhc3QiLCJnY2QiLCJmbG9vciIsIl9yYW5kb20iLCJfcGx1cyIsIl9taW51cyIsIl90aW1lcyIsIl9kaXZpZGVkQnkiLCJfbW9kdWxvIiwiX2djZCIsIl9ldmVuIiwiX3VuZXZlbiIsIl9kaWdpdHMiLCJtYXRoRm9ybWF0dGVycyIsImRpZ2l0cyIsImRpdmlkZWRCeSIsIm1pbnVzIiwibW9kdWxvIiwicGx1cyIsInRpbWVzIiwidW5ldmVuIiwiX2FuZCIsIl9lcSIsIl9uZSIsIl9sdCIsIl9lbHQiLCJfb3IiLCJfbm90IiwiY29tcGFyZUZvcm1hdHRlcnMiLCJhbmQiLCJlbHQiLCJuZSIsIm9yIiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsImV2ZW50TmFtZSIsImV2ZW50SGFuZGxlciIsIl9lbmFibGVkIiwiX2Rpc2FibGVkIiwiX29uU3RhciIsIm9uLSoiLCJvblN0YXJCaW5kZXJXcmFwcGVyIiwiZWFjaC0qIiwiaXRlcmF0ZWQiLCJpbmRleFByb3AiLCJnZXRJdGVyYXRpb25BbGlhcyIsIm1hdGNoSW5kZXgiLCJuZXh0VmlldyIsIm5leHRJbmRleCIsInByZXZpb3VzIiwiY2xhc3MtKiIsImVsZSIsImdldFN0cmluZyIsImlzUmFkaW8iLCJIVE1MU2VsZWN0RWxlbWVudCIsImlmIiwiYm91bmQiLCJuZXN0ZWQiLCJhdHRhY2hlZCIsImlzQWJzb2x1dGVVcmwiLCJhbHJlYWR5T25VUkwiLCJjaGVja1VybCIsImNoZWNrVVJMIiwidXJsVG9DaGVjayIsInJvdXRlckRpc3BhdGNoZXIiLCJuZXdQYWdlUmF3SFRNTCIsImRhdGFzZXQiLCJpc0luaXQiLCJSaXZldHNWaWV3IiwiX1BqYXgiLCJhdXRvYmluZExpbmtzIiwiXyR3cmFwcGVyIiwiJG5ld1BhZ2UiLCIkdGl0bGUiLCJwYXJzZUNvbnRhaW5lciIsIiRlbGVtZW50IiwiZ2V0V3JhcHBlciIsImNvbnRhaW5lclNlbGVjdG9yIiwiQmFzZVZpZXciLCJuZXdTdGF0dXMiLCJvbGRTdGF0dXMiLCJvbkxlYXZlIiwib25FbnRlciIsIm9uRW50ZXJDb21wbGV0ZWQiLCJvbkxlYXZlQ29tcGxldGVkIiwiX0Jhc2VUcmFuc2l0aW9uMiIsIkN1c3RvbVRyYW5zaXRpb24iLCJfVmlldyIsIl9iYXJiYSIsIl9yb3V0ZSIsInJvdXRlckJpbmRlcnMiLCJ2aWV3QmluZGVyV3JhcHBlciIsInZpZXdCaW5kZXIiLCJyb3V0ZUJpbmRlcldyYXBwZXIiLCJyb3V0ZUJpbmRlciIsIl9yb3V0ZXIiLCJfYmFzaWMiLCJhdHRyRm4iLCJ0b3VjaENhcGFibGUiLCJ0YXBfcGl4ZWxfcmFuZ2UiLCJzd2lwZV9oX3RocmVzaG9sZCIsInN3aXBlX3ZfdGhyZXNob2xkIiwidGFwaG9sZF90aHJlc2hvbGQiLCJkb3VibGV0YXBfaW50Iiwic2hha2VfdGhyZXNob2xkIiwidG91Y2hfY2FwYWJsZSIsIm9yaWVudGF0aW9uX3N1cHBvcnQiLCJzdGFydGV2ZW50IiwiZW5kZXZlbnQiLCJtb3ZlZXZlbnQiLCJ0YXBldmVudCIsInNjcm9sbGV2ZW50IiwiaG9sZF90aW1lciIsInRhcF90aW1lciIsInRvdWNoIiwiaXNUb3VjaENhcGFibGUiLCJnZXRTdGFydEV2ZW50IiwiZ2V0RW5kRXZlbnQiLCJnZXRNb3ZlRXZlbnQiLCJnZXRUYXBFdmVudCIsImdldFNjcm9sbEV2ZW50Iiwic2V0U3dpcGVUaHJlc2hvbGRYIiwidGhyZXNob2xkIiwic2V0U3dpcGVUaHJlc2hvbGRZIiwic2V0RG91YmxlVGFwSW50Iiwic2V0VGFwSG9sZFRocmVzaG9sZCIsInNldFRhcFJhbmdlIiwicmFuZ2UiLCJ0YXBzdGFydCIsInRoaXNPYmplY3QiLCIkdGhpcyIsInRhcFN0YXJ0RnVuYyIsIm9yaWdFdmVudCIsInRvdWNoRGF0YSIsIngiLCJ5IiwidHJpZ2dlckN1c3RvbUV2ZW50IiwiY2FsbGVlIiwidGFwbW92ZSIsInRhcE1vdmVGdW5jIiwidGFwZW5kIiwidGFwRW5kRnVuYyIsInRhcGhvbGQiLCJvcmlnVGFyZ2V0Iiwic3RhcnRfcG9zIiwiZW5kX3giLCJlbmRfeSIsInRhcEhvbGRGdW5jMSIsInN0YXJ0X3RpbWUiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwiZWxlX3RocmVzaG9sZCIsImRpZmZfeCIsImRpZmZfeSIsImVuZF90aW1lIiwiZXZ0X25hbWUiLCJ0YXBIb2xkRnVuYzIiLCJ0YXBIb2xkRnVuYzMiLCJjYWxsZWUxIiwiY2FsbGVlMiIsImNhbGxlZTMiLCJkb3VibGV0YXAiLCJhY3Rpb24iLCJmaXJzdFRhcCIsImNvb2xpbmciLCJkb3VibGVUYXBGdW5jMSIsInNyY0VsZW1lbnQiLCJkb3VibGVUYXBGdW5jMiIsImxhc3RUb3VjaCIsImxhc3RUYXAiLCJzZWNvbmRUYXAiLCJzaW5nbGV0YXAiLCJzaW5nbGVUYXBGdW5jMSIsInNpbmdsZVRhcEZ1bmMyIiwiZW5kX3Bvc194IiwiZW5kX3Bvc195IiwidGFwIiwic3RhcnRlZCIsInRhcEZ1bmMxIiwidGFwRnVuYzIiLCJzd2lwZSIsInN0YXJ0RXZudCIsImhhc1N3aXBlZCIsIm9yaWdpbmFsQ29vcmQiLCJmaW5hbENvb3JkIiwidG91Y2hTdGFydCIsInRvdWNoTW92ZSIsInN3aXBlZGlyIiwiZWxlX3hfdGhyZXNob2xkIiwiZWxlX3lfdGhyZXNob2xkIiwiaF90aHJlc2hvbGQiLCJ2X3RocmVzaG9sZCIsImVuZEV2bnQiLCJ4QW1vdW50IiwiYWJzIiwieUFtb3VudCIsInRvdWNoRW5kIiwic2Nyb2xsc3RhcnQiLCJzY3JvbGxpbmciLCJzY3JvbGxGdW5jIiwiZ2V0X29yaWVudGF0aW9uIiwibGFzdF9vcmllbnRhdGlvbiIsImluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlIiwiaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0IiwicG9ydHJhaXRfbWFwIiwiMTgwIiwid3ciLCJ3aCIsIm9yaWVudGF0aW9uIiwiLTkwIiwiOTAiLCJvcmllbnRhdGlvbmNoYW5nZSIsIm9sZF9oYW5kbGVyIiwidGhyb3R0bGVkcmVzaXplIiwidGhyb3R0bGVfaGFuZGxlciIsImhlbGRDYWxsIiwiY3VyciIsImxhc3RDYWxsIiwiZXZlbnRUeXBlIiwib3JpZ2luYWxUeXBlIiwic2Nyb2xsZW5kIiwic3dpcGV1cCIsInN3aXBlcmlnaHQiLCJzd2lwZWRvd24iLCJzd2lwZWxlZnQiLCJzd2lwZWVuZCIsInRhcDIiLCJ0YXBob2xkMiIsInNyY0UiLCJtcyIsImxvbmciLCJmbXRTaG9ydCIsImNyZWF0ZURlYnVnIiwicHJldlRpbWUiLCJjb2VyY2UiLCJmb3JtYXQiLCJzZWxlY3RDb2xvciIsImRlc3Ryb3kiLCJpbnN0YW5jZXMiLCJuYW1lcyIsInNraXBzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJNYWluIiwidGlueWJpbmQiLCJjb250YWN0Q29tcG9uZW50IiwibmF2SXRlbXNDb21wb25lbnQiLCJpY29uc2V0Q29tcG9uZW50Iiwic2hvcGlmeVNlY3Rpb25Qcm9kdWN0U2Nyb2xsYmFyQ29tcG9uZW50IiwiSlF1ZXJ5IiwiYmFzaWNCaW5kZXJzIiwiYmFzaWNCaW5kZXJzV3JhcHBlciIsInJlZ2lzdHMiLCJzY3JvbGxiYXJEcmFnYWJsZUJpbmRlciIsInJlZ2lzdFdyYXBwZXIiLCJhdXRvc2Nyb2xsQmluZGVyIiwicmVtb3ZlQ2xhc3NCaW5kZXIiLCJhZGRDbGFzc0JpbmRlciIsInZhbHVlQmluZGVyIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FG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dHpELEtBQUt3eUQsU0FBU3ZiLGlCQUFpQitiLFFBQVE1UCxxQkFDdkNwakQsS0FBS3d5RCxTQUFTdmIsaUJBQWlCK2IsUUFBUTNRLGtCQUN2Q3JpRCxLQUFLd3lELFNBQVN2YixpQkFBaUIrYixRQUFRelIsc0JBQ3ZDdmhELEtBQUt3eUQsU0FBU3ZiLGlCQUFpQitiLFFBQVF6UyxxQkFDdkN2Z0QsS0FBS3d5RCxTQUFTdmIsaUJBQWlCK2IsUUFBUXJULG9CQUV2QzMvQyxLQUFLK3VCLEtBQU8vdUIsS0FBS3d5RCxTQUFTcjBELE1BQUssRUFBQVEsRUFBQTJELFNBQU8sUUFBUSxHQUFJRSxPQUFPb3hDLGtCQUs3RCxFQUFBajFDLEVBQUEyRCxTQUFPLFNBQUN5cEMsR0FDTyxJQUFJd21CIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMDkpO1xuIiwiaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuXG4vLyBUT0RPXG5leHBvcnQgaW50ZXJmYWNlIElEZWZlcnJlZCB7XG4gIHJlc29sdmU6IGFueTtcbiAgcmVqZWN0OiBhbnk7XG59XG5cbi8qKlxuICogVGVzdCBpZiBzdHJpbmcgaXMgYSBqc29uIHN0cmluZ1xuICogQHBhcmFtIHN0clxuICovXG5leHBvcnQgY29uc3QgaXNKc29uID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdmFsID0gSlNPTi5wYXJzZShzdHIpO1xuICAgIHJldHVybiAodmFsIGluc3RhbmNlb2YgQXJyYXkgfHwgdmFsIGluc3RhbmNlb2YgT2JqZWN0KSA/IHRydWUgOiBmYWxzZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbiBvYmplY3QgdGhhbiBjYW4gYmUgb2JzZXJ2ZWQuXG4gKiBAcGFyYW0gb2JqXG4gKi9cbmV4cG9ydCBjb25zdCBpc09iamVjdCA9IChvYmo6IG9iamVjdCkgPT4ge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFN0cmluZyA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsID8gdmFsdWUudG9TdHJpbmcoKSA6IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBjb25zdCB0aW1lcyA9IChuOiBudW1iZXIsIGNiOiAoKSA9PiB2b2lkKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgY2IoKTtcbiAgfVxufTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgY29uc3QgZ2V0SW5wdXRWYWx1ZSA9IChlbDogSFRNTFNlbGVjdEVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50KSA9PiB7XG4gIGNvbnN0IHJlc3VsdHM6IHN0cmluZ1tdID0gW107XG4gIGlmIChlbC50eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgcmV0dXJuIChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkO1xuICB9IGVsc2UgaWYgKGVsLnR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnKSB7XG4gICAgY29uc3Qgb3B0aW9uczogSFRNTE9wdGlvbnNDb2xsZWN0aW9uID0gKGVsIGFzIEhUTUxTZWxlY3RFbGVtZW50KS5vcHRpb25zO1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zW2tleV07XG4gICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbC52YWx1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBKdXN0IGFuIENsYXNzIHdpdGggc29tZSBoZWxwZnVsIGZ1bmN0aW9uc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBVdGlsc1xuICovXG5leHBvcnQgY2xhc3MgVXRpbHMge1xuXG4gIC8qKlxuICAgKiBUaW1lIGluIG1pbGxpc2Vjb25kIGFmdGVyIHRoZSB4aHIgcmVxdWVzdCBnb2VzIGluIHRpbWVvdXRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHhoclRpbWVvdXQ6IDUwMDA7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhbHVlIGlzIHVuZGVmaW5lZFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1VuZGVmaW5lZCh2YWx1ZT86IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNEZWZpbmVkKHZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuICF0aGlzLmlzVW5kZWZpbmVkKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzRnVuY3Rpb24odmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhcmlhYmxlIGlzIGFuIEFycmF5XG4gICAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3NzU3MzcvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0FycmF5KHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCB2YWx1ZSApID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdmFyaWFibGUgaXMgbnVtYmVyIG9yIHN0cmluZyBpbiBKYXZhU2NyaXB0XG4gICAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0MjE5ODgvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc051bWJlcih2YWx1ZT86IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICYmICFpc05hTih2YWx1ZSAtIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlY2sgaWYgdHlwZSBpcyBPYmplY3RcbiAgICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc3NTczNy8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzT2JqZWN0KHZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNEZWZpbmVkKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHR5cGUgaXMgQm9vbGVhblxuICAgKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODgxNDYxNS8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzQm9vbGVhbih2YWx1ZT86IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSB0eXBlb2YodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNTdHJpbmcodmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5pc0RlZmluZWQodmFsdWUpICYmIHR5cGVvZih2YWx1ZSkgPT09ICdzdHJpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHN0cmluZyBjb250YWlucyBhIG51bWJlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdHJpbmdIYXNOdW1iZXIodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmlzU3RyaW5nKHZhbHVlKSAmJiAvXFxkLy50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBzdHJpbmcgY29udGFpbnMgb25seSBudW1iZXJzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0cmluZ0hhc09ubHlOdW1iZXIodmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gL15cXGQrJC8udGVzdCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbnVtYmVycywgKywgLSBhbmQgKClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RyaW5nSXNQaG9uZU51bWJlcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIC9eWzAtOSAoKSstXSskLy50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBKdXN0IGdldCB0aGUgZGlnaXRzIG9mIGEgc3RyaW5nLCB1c2VmdWwgdG8gcmVtb3ZlIHB4IHBpeGVsIGZyb20gY3NzIHZhbHVlXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTEwMDY1My8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGp1c3REaWdpdHMoc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBudW0gPSBzdHIucmVwbGFjZSgvW14tXFxkXFwuXS9nLCAnJyk7XG4gICAgaWYgKCFVdGlscy5pc051bWJlcihudW0pKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE51bWJlcihudW0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVlcCBJZiB0cnVlLCB0aGUgbWVyZ2UgYmVjb21lcyByZWN1cnNpdmUgKGFrYS4gZGVlcCBjb3B5KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCBBbiBvYmplY3QgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG5ldyBwcm9wZXJ0aWVzIGlmIGFkZGl0aW9uYWwgb2JqZWN0cyBhcmUgcGFzc2VkIGluIG9yIHRoYXQgd2lsbCBleHRlbmQgdGhlIGpRdWVyeSBuYW1lc3BhY2UgaWYgaXQgaXMgdGhlIHNvbGUgYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QxIEFuIG9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBtZXJnZSBpbi5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvYmplY3ROXSBBZGRpdGlvbmFsIG9iamVjdHMgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluLlxuICAgKiBAcmV0dXJuc1xuICAgKiBAbWVtYmVyb2YgVXRpbHNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZXh0ZW5kKGRlZXA6IGJvb2xlYW4sIHRhcmdldDogb2JqZWN0LCBvYmplY3QxOiBvYmplY3QsIG9iamVjdE4/OiBvYmplY3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmIChkZWVwKSB7XG4gICAgICByZXN1bHQgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIHRhcmdldCwgb2JqZWN0MSwgb2JqZWN0Tik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBhc3NpbmcgZmFsc2UgZm9yIGRlZXAgYXJndW1lbnQgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgIHJlc3VsdCA9IGpRdWVyeS5leHRlbmQodGFyZ2V0LCBvYmplY3QxLCBvYmplY3ROKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25jYXQgdGhlIGNvbnRlbnRzIG9mIHR3byBvYmplY3RzIHRvZ2V0aGVyIGludG8gdGhlIGZpcnN0IG9iamVjdC5cbiAgICogQHBhcmFtIHtib29sZWFufSBkZWVwIElmIHRydWUsIHRoZSBtZXJnZSBiZWNvbWVzIHJlY3Vyc2l2ZSAoYWthLiBkZWVwIGNvcHkpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0MSBBbiBmaXJzdCBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIGNvbmNhdC5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdDIgVGhlIHNlY29uZCBvYmplY3QgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIGNvbmNhdC5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY29uY2F0KGRlZXA6IGJvb2xlYW4sIG9iamVjdDE6IG9iamVjdCwgb2JqZWN0Mjogb2JqZWN0KTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoZGVlcCwge30sIG9iamVjdDEsIG9iamVjdDIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIFhNTEh0dHBSZXF1ZXN0KCkgYW5kIHJldHVybiBhIFByb21pc2VcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdXJsXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHhocih1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAocmVxLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoJ3hocjogSFRUUCBjb2RlIGlzIG5vdCAyMDAnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVxLm9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKCd4aHI6IFRpbWVvdXQgZXhjZWVkZWQnKSk7XG4gICAgfTtcblxuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwpO1xuICAgIHJlcS50aW1lb3V0ID0gdGhpcy54aHJUaW1lb3V0O1xuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCd4LWJhcmJhJywgJ3llcycpO1xuICAgIHJlcS5zZW5kKCk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBuZXcgXCJEZWZlcnJlZFwiIG9iamVjdFxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL01vemlsbGEvSmF2YVNjcmlwdF9jb2RlX21vZHVsZXMvUHJvbWlzZS5qc20vRGVmZXJyZWRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEByZXR1cm4ge0lEZWZlcnJlZH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVmZXJyZWQoKTogYW55IHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGNvbnN0IHByb20gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4ge1xuICAgICAgb2JqLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgb2JqLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcbiAgICBvYmoucHJvbWlzZSA9IHByb207XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgaG9zdG5hbWUgYW4gcGF0aCBvZiBhZGRyZXNzIGJhclxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzczNjk3MC8xNDY1OTE5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBsID0gZ2V0TG9jYXRpb24oXCJodHRwOi8vZXhhbXBsZS5jb20vcGF0aFwiKTtcbiAgICogY29uc29sZS5kZWJ1ZyhsLmhvc3RuYW1lKVxuICAgKiA+PiBcImV4YW1wbGUuY29tXCJcbiAgICogY29uc29sZS5kZWJ1ZyhsLnBhdGhuYW1lKVxuICAgKiA+PiBcIi9wYXRoXCJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TG9jYXRpb24odXJsPzogc3RyaW5nKTogTG9jYXRpb24ge1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICAvLyBsLmhyZWYgPSBocmVmO1xuICAgIGNvbnN0IGwgPSAoalF1ZXJ5KGA8YSBocmVmPVwiJHt1cmx9XCI+PC9hPmApWzBdIGFzIEhUTUxBbmNob3JFbGVtZW50IGFzIEhUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMgYXMgTG9jYXRpb24pO1xuICAgIHJldHVybiBsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY3VycmVudCB1cmxcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEByZXR1cm4ge3N0cmluZ30gY3VycmVudFVybFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRVcmwodXJsPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBsb2NhdGlvbiA9IFV0aWxzLmdldExvY2F0aW9uKHVybCk7XG4gICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArXG4gICAgICBsb2NhdGlvbi5ob3N0ICtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lICtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhbiB1cmwsIHJldHVybiBpdCB3aXRob3V0IHRoZSBoYXNoXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5VdGlsc1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHVybFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IG5ld0NsZWFuVXJsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNsZWFuTGluayh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKC8jLiovLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBwb3J0IG51bWJlciBub3JtYWxpemVkLCBldmVudHVhbGx5IHlvdSBjYW4gcGFzcyBhIHN0cmluZyB0byBiZSBub3JtYWxpemVkLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuVXRpbHNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBwXG4gICAqIEByZXR1cm4ge0ludH0gcG9ydFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRQb3J0KHA/OiBzdHJpbmcsIHVybD86IHN0cmluZykge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gVXRpbHMuZ2V0TG9jYXRpb24odXJsKTtcbiAgICBjb25zdCBwb3J0ID0gdHlwZW9mIHAgIT09ICd1bmRlZmluZWQnID8gcCA6IGxvY2F0aW9uLnBvcnQ7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBsb2NhdGlvbi5wcm90b2NvbDtcblxuICAgIGlmIChwb3J0ICE9PSAnJykge1xuICAgICAgcmV0dXJuIE51bWJlcihwb3J0KTtcbiAgICB9XG4gICAgaWYgKHByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgICByZXR1cm4gODA7XG4gICAgfVxuXG4gICAgaWYgKHByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgcmV0dXJuIDQ0MztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGVzdCBpZiB1cmwgaXMgYWJzb2x1dGUgb3IgcmVsYXRpdmVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNBYnNvbHV0ZVVybCh1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IHBhdCA9IC9eaHR0cHM/OlxcL1xcLy9pO1xuICAgIHJldHVybiBwYXQudGVzdCh1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBwYXJhbSBmcm9tIGhhc2hcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VXJsUGFyYW1ldGVyKG5hbWU6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoJ1s/Jl0nICsgbmFtZSArICcoPShbXiYjXSopfCZ8I3wkKScpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHRzWzJdKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGhhc2ggZnJvbSBhZGRyZXNzIGJhciBvciB1cmwgaWYgc2V0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEhhc2godXJsPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFV0aWxzLmdldExvY2F0aW9uKHVybCkuaGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgaGFzaCBmcm9tIGFkZHJlc3MgYmFyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHVwZGF0ZUhhc2goaGFzaDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgaGFzaCBmcm9tIGFkZHJlc3MgYmFyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbW92ZUhhc2goKSB7XG4gICAgcmV0dXJuIGhpc3RvcnkucHVzaFN0YXRlKCcnLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFZpZXdwb3J0RGltZW5zaW9ucygpICB7XG4gICAgY29uc3QgdyA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgY29uc3QgaCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICByZXR1cm4ge1xuICAgICAgaCxcbiAgICAgIHcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgYSBtb25ldGFyeSBhbW91bnQgdXNpbmcgU2hvcGlmeSdzIGZvcm1hdE1vbmV5IGlmIGF2YWlsYWJsZS5cbiAgICogSWYgaXQncyBub3QgYXZhaWxhYmxlLCBqdXN0IHJldHVybiB0aGUgdmFsdWUuXG4gICAqIEBzb3VyY2UgaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvbGFicy9jYXJ0anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzLmNvZmZlZVxuICAgKiBAc291cmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9KdW1wTGlua05ldHdvcmsvc2hvcGlmeS1wcm9kdWN0anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxpdGllcy5qc1xuICAgKi9cbiAgLy8gcHVibGljIHN0YXRpYyBmb3JtYXRNb25leSh2YWx1ZSwgZm9ybWF0LCBmb3JtYXROYW1lLCBjdXJyZW5jeSkge1xuICAvLyAgIHZhciBfcmVmLCBfcmVmMTtcbiAgLy8gICBpZiAoY3VycmVuY3kgPT0gbnVsbCkge1xuICAvLyAgICAgY3VycmVuY3kgPSAnJztcbiAgLy8gICB9XG4gIC8vICAgaWYgKCFjdXJyZW5jeSkge1xuICAvLyAgICAgY3VycmVuY3kgPSBQcm9kdWN0SlMuc2V0dGluZ3MuY3VycmVuY3k7XG4gIC8vICAgfVxuICAvLyAgIGlmICgod2luZG93LkN1cnJlbmN5ICE9IG51bGwpICYmIGN1cnJlbmN5ICE9PSBQcm9kdWN0SlMuc2V0dGluZ3MuY3VycmVuY3kpIHtcbiAgLy8gICAgIHZhbHVlID0gQ3VycmVuY3kuY29udmVydCh2YWx1ZSwgUHJvZHVjdEpTLnNldHRpbmdzLmN1cnJlbmN5LCBjdXJyZW5jeSk7XG4gIC8vICAgICBpZiAoKCgoX3JlZiA9IHdpbmRvdy5DdXJyZW5jeSkgIT0gbnVsbCA/IF9yZWYubW9uZXlGb3JtYXRzIDogdm9pZCAwKSAhPSBudWxsKSAmJiAoY3VycmVuY3kgaW4gd2luZG93LkN1cnJlbmN5Lm1vbmV5Rm9ybWF0cykpIHtcbiAgLy8gICAgICAgZm9ybWF0ID0gd2luZG93LkN1cnJlbmN5Lm1vbmV5Rm9ybWF0c1tjdXJyZW5jeV1bZm9ybWF0TmFtZV07XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIGlmICgoKF9yZWYxID0gd2luZG93LlNob3BpZnkpICE9IG51bGwgPyBfcmVmMS5mb3JtYXRNb25leSA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAvLyAgICAgcmV0dXJuIFNob3BpZnkuZm9ybWF0TW9uZXkodmFsdWUsIGZvcm1hdCk7XG4gIC8vICAgfSBlbHNlIHtcbiAgLy8gICAgIHJldHVybiB2YWx1ZTtcbiAgLy8gICB9XG4gIC8vIH1cblxufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4zLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MsIG5vZGUgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblx0XHRcdFx0aWYgKCBub2RlWyBpIF0gKSB7XG5cdFx0XHRcdFx0c2NyaXB0WyBpIF0gPSBub2RlWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjMuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jLCBub2RlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMzYgfHwgXCJhYnNvbHV0ZVwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblx0XHQpICk7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3g7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gdmFsdWVJc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSB7XG5cblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF07XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgcHJvdmlkZSBib3JkZXItYm94IHZhbHVlc1xuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgPT09IHN0eWxlcy5wb3NpdGlvbiApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiaW1wb3J0IHsgSVZpZXdPcHRpb25zLCBUaW55YmluZCB9IGZyb20gJy4vdGlueWJpbmQnO1xuaW1wb3J0IHsgQmluZGVyLCBJVHdvV2F5QmluZGVyIH0gZnJvbSAnLi9iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBCaW5kaW5nLCBJQmluZGFibGUgfSBmcm9tICcuL2JpbmRpbmcnO1xuaW1wb3J0IHsgQ29tcG9uZW50QmluZGluZywgSUJvdW5kRWxlbWVudCB9IGZyb20gJy4vY29tcG9uZW50LWJpbmRpbmcnO1xuaW1wb3J0IHsgcGFyc2VOb2RlLCBwYXJzZURlY2xhcmF0aW9uIH0gZnJvbSAnLi9wYXJzZXJzJztcblxuZXhwb3J0IHR5cGUgVEJsb2NrID0gYm9vbGVhbjtcblxuZXhwb3J0IGludGVyZmFjZSBJRGF0YUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGRhdGE/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGJpbmRpbmdzIGJ1aWx0IGZyb20gYSBzZXQgb2YgcGFyZW50IG5vZGVzLlxuICovXG5leHBvcnQgY2xhc3MgVmlldyB7XG4gIHB1YmxpYyBzdGF0aWMgREVDTEFSQVRJT05fU1BMSVQgPSAvKCg/OidbXiddKicpKig/Oig/OlteXFx8J10qKD86J1teJ10qJykrW15cXHwnXSopK3xbXlxcfF0rKSl8XiQvZztcblxuICBwdWJsaWMgc3RhdGljIHRleHRCaW5kZXI6IElUd29XYXlCaW5kZXI8c3RyaW5nPiA9IHtcbiAgICByb3V0aW5lOiAobm9kZTogSURhdGFFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICBub2RlLmRhdGEgPSAodmFsdWUgIT0gbnVsbCkgPyB2YWx1ZSA6ICcnO1xuICAgIH0sXG4gIH07XG5cbiAgcHVibGljIHN0YXRpYyBiaW5kaW5nQ29tcGFyYXRvciA9IChhOiBJQmluZGFibGUsIGI6IElCaW5kYWJsZSkgPT4ge1xuICAgIGNvbnN0IGFQcmlvcml0eSA9IGEuYmluZGVyID8gKChhLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pLnByaW9yaXR5IHx8IDApIDogMDtcbiAgICBjb25zdCBiUHJpb3JpdHkgPSBiLmJpbmRlciA/ICgoYi5iaW5kZXIgYXMgSVR3b1dheUJpbmRlcjxhbnk+KS5wcmlvcml0eSB8fCAwKSA6IDA7XG4gICAgcmV0dXJuIGJQcmlvcml0eSAtIGFQcmlvcml0eTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJpbmRpbmc6IEJpbmRpbmcsIG1vZGVsczogYW55LCBhbmNob3JFbDogSFRNTEVsZW1lbnQgfCBOb2RlIHwgbnVsbCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gYmluZGluZy5lbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgdmlldyA9IG5ldyBWaWV3KCh0ZW1wbGF0ZSBhcyBOb2RlKSwgbW9kZWxzLCBiaW5kaW5nLnZpZXcub3B0aW9ucyk7XG4gICAgdmlldy5iaW5kKCk7XG4gICAgaWYgKCFiaW5kaW5nIHx8ICFiaW5kaW5nLm1hcmtlciB8fCBiaW5kaW5nLm1hcmtlci5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWaWV3XSBObyBwYXJlbnQgbm9kZSBmb3IgYmluZGluZyEnKTtcbiAgICB9XG4gICAgYmluZGluZy5tYXJrZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGVtcGxhdGUsIGFuY2hvckVsKTtcbiAgICByZXR1cm4gdmlldztcbiAgfVxuXG4gIHB1YmxpYyBlbHM6IEhUTUxDb2xsZWN0aW9uIHwgSFRNTEVsZW1lbnRbXSB8IE5vZGVbXTtcbiAgcHVibGljIG1vZGVsczogYW55O1xuICBwdWJsaWMgb3B0aW9uczogSVZpZXdPcHRpb25zO1xuICBwdWJsaWMgYmluZGluZ3M6IElCaW5kYWJsZVtdID0gW107XG4gIC8vIHB1YmxpYyBjb21wb25lbnRWaWV3OiBWaWV3IHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBET00gZWxlbWVudHMgYW5kIHRoZSBtb2RlbCBvYmplY3RzIGZvciBiaW5kaW5nIGFyZSBwYXNzZWQgaW50byB0aGVcbiAgICogY29uc3RydWN0b3IgYWxvbmcgd2l0aCBhbnkgbG9jYWwgb3B0aW9ucyB0aGF0IHNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlXG4gICAqIGNvbnRleHQgb2YgdGhlIHZpZXcgYW5kIGl0J3MgYmluZGluZ3MuXG4gICAqIEBwYXJhbSBlbHNcbiAgICogQHBhcmFtIG1vZGVsc1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZWxzOiBIVE1MQ29sbGVjdGlvbiB8IEhUTUxFbGVtZW50IHwgTm9kZSwgbW9kZWxzOiBhbnksIG9wdGlvbnM6IElWaWV3T3B0aW9ucykge1xuICAgIGlmIChlbHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5lbHMgPSBlbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxzID0gKFtlbHNdIGFzIEhUTUxFbGVtZW50W10gfCBOb2RlW10gKTtcbiAgICB9XG4gICAgdGhpcy5tb2RlbHMgPSBtb2RlbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMuYnVpbGQoKTtcbiAgfVxuXG4gIHB1YmxpYyBidWlsZEJpbmRpbmcobm9kZTogSFRNTEVsZW1lbnQgfCBUZXh0LCB0eXBlOiBzdHJpbmcgfCBudWxsLCBkZWNsYXJhdGlvbjogc3RyaW5nLCBiaW5kZXI6IEJpbmRlcjxhbnk+LCBhcmdzOiBzdHJpbmdbXSB8IG51bGwpIHtcbiAgICBjb25zdCBwYXJzZWREZWNsYXJhdGlvbiA9IHBhcnNlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pO1xuICAgIGNvbnN0IGtleXBhdGggPSBwYXJzZWREZWNsYXJhdGlvbi5rZXlwYXRoO1xuICAgIGNvbnN0IHBpcGVzID0gcGFyc2VkRGVjbGFyYXRpb24ucGlwZXM7XG4gICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBCaW5kaW5nKCh0aGlzIGFzIFZpZXcpLCAobm9kZSBhcyBIVE1MRWxlbWVudCksIHR5cGUsIGtleXBhdGgsIGJpbmRlciwgYXJncywgcGlwZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIERPTSB0cmVlIGFuZCBidWlsZHMgYEJpbmRpbmdgIGluc3RhbmNlcyBmb3IgZXZlcnkgbWF0Y2hlZFxuICAgKiBiaW5kaW5nIGRlY2xhcmF0aW9uLlxuICAgKi9cbiAgcHVibGljIGJ1aWxkKCkge1xuICAgIHRoaXMuYmluZGluZ3MgPSBbXTtcblxuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5lbHM7XG4gICAgbGV0IGk6IG51bWJlcjtcbiAgICBsZXQgbGVuOiBudW1iZXI7XG4gICAgZm9yIChpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICghIHRoaXMub3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0ZW1wbGF0ZURlbGltaXRlcnMgcmVxdWlyZWQnKTtcbiAgICAgIH1cbiAgICAgIHBhcnNlTm9kZSh0aGlzLCAoZWxlbWVudHNbaV0gYXMgSURhdGFFbGVtZW50KSwgdGhpcy5vcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycyk7XG4gICAgfVxuXG4gICAgdGhpcy5iaW5kaW5ncy5zb3J0KFZpZXcuYmluZGluZ0NvbXBhcmF0b3IpO1xuICB9XG5cbiAgcHVibGljIHRyYXZlcnNlKG5vZGU6IElCb3VuZEVsZW1lbnQpOiBUQmxvY2sge1xuXG4gICAgLy8gVE9ET1xuICAgIGxldCBiaW5kaW5nUHJlZml4ID0gdGhpcy5vcHRpb25zLnByZWZpeDtcbiAgICBpZiAoIWJpbmRpbmdQcmVmaXgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJlZml4IGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuICAgIGJpbmRpbmdQcmVmaXggPSBiaW5kaW5nUHJlZml4ICsgJy0nO1xuXG4gICAgbGV0IGJsb2NrID0gbm9kZS5ub2RlTmFtZSA9PT0gJ1NDUklQVCcgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ1NUWUxFJztcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgIGNvbnN0IGJpbmRJbmZvcyA9IFtdO1xuICAgIGNvbnN0IHN0YXJCaW5kZXJzID0gdGhpcy5vcHRpb25zLnN0YXJCaW5kZXJzO1xuICAgIGxldCB0eXBlO1xuICAgIGxldCBiaW5kZXI7XG4gICAgbGV0IGlkZW50aWZpZXI7XG4gICAgbGV0IGFyZ3M7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgIC8vIGlmIGF0dHJpYnV0ZSBzdGFydHMgd2l0aCB0aGUgYmluZGluZyBwcmVmaXguIEUuZy4gcnZcbiAgICAgIGlmIChhdHRyaWJ1dGUubmFtZS5pbmRleE9mKGJpbmRpbmdQcmVmaXgpID09PSAwKSB7XG4gICAgICAgIHR5cGUgPSBhdHRyaWJ1dGUubmFtZS5zbGljZShiaW5kaW5nUHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIGJpbmRlciA9IHRoaXMub3B0aW9ucy5iaW5kZXJzW3R5cGVdO1xuICAgICAgICBhcmdzID0gW107XG5cbiAgICAgICAgaWYgKCFiaW5kZXIpIHtcbiAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHN0YXJCaW5kZXJzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBpZGVudGlmaWVyID0gc3RhckJpbmRlcnNba107XG4gICAgICAgICAgICBpZiAodHlwZS5zbGljZSgwLCBpZGVudGlmaWVyLmxlbmd0aCAtIDEpID09PSBpZGVudGlmaWVyLnNsaWNlKDAsIC0xKSkge1xuICAgICAgICAgICAgICBiaW5kZXIgPSB0aGlzLm9wdGlvbnMuYmluZGVyc1tpZGVudGlmaWVyXTtcbiAgICAgICAgICAgICAgYXJncy5wdXNoKHR5cGUuc2xpY2UoaWRlbnRpZmllci5sZW5ndGggLSAxKSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYmluZGVyKSB7XG4gICAgICAgICAgYmluZGVyID0gVGlueWJpbmQuZmFsbGJhY2tCaW5kZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pLmJsb2NrKSB7XG4gICAgICAgICAgdGhpcy5idWlsZEJpbmRpbmcobm9kZSwgdHlwZSwgYXR0cmlidXRlLnZhbHVlLCBiaW5kZXIsIGFyZ3MpO1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpbmRJbmZvcy5wdXNoKHthdHRyOiBhdHRyaWJ1dGUsIGJpbmRlciwgdHlwZSwgYXJnc30pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZEluZm9zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBiaW5kSW5mbyA9IGJpbmRJbmZvc1tpXTtcbiAgICAgIHRoaXMuYnVpbGRCaW5kaW5nKG5vZGUsIGJpbmRJbmZvLnR5cGUsIGJpbmRJbmZvLmF0dHIudmFsdWUsIGJpbmRJbmZvLmJpbmRlciwgYmluZEluZm8uYXJncyk7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShiaW5kSW5mby5hdHRyLm5hbWUpO1xuICAgIH1cblxuICAgIC8vIGJpbmQgY29tcG9uZW50c1xuICAgIGlmICghYmxvY2spIHtcbiAgICAgIHR5cGUgPSBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcG9uZW50c1t0eXBlXSAmJiAhbm9kZS5fYm91bmQpIHtcbiAgICAgICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBDb21wb25lbnRCaW5kaW5nKCh0aGlzIGFzIFZpZXcpLCBub2RlLCB0eXBlKSk7XG4gICAgICAgIGJsb2NrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2s7XG4gIH1cblxuICAvKipcbiAgICogQmluZHMgYWxsIG9mIHRoZSBjdXJyZW50IGJpbmRpbmdzIGZvciB0aGlzIHZpZXcuXG4gICAqL1xuICBwdWJsaWMgYmluZCgpIHtcbiAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcbiAgICAgIGJpbmRpbmcuYmluZCgpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuYmluZHMgYWxsIG9mIHRoZSBjdXJyZW50IGJpbmRpbmdzIGZvciB0aGlzIHZpZXcuXG4gICAqL1xuICBwdWJsaWMgdW5iaW5kKCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYmluZGluZ3MpKSB7XG4gICAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcbiAgICAgICAgYmluZGluZy51bmJpbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBpZih0aGlzLmNvbXBvbmVudFZpZXcpIHtcbiAgICAvLyAgIHRoaXMuY29tcG9uZW50Vmlldy51bmJpbmQoKTtcbiAgICAvLyB9XG4gIH1cblxuICAvKipcbiAgICogU3luY3MgdXAgdGhlIHZpZXcgd2l0aCB0aGUgbW9kZWwgYnkgcnVubmluZyB0aGUgcm91dGluZXMgb24gYWxsIGJpbmRpbmdzLlxuICAgKi9cbiAgcHVibGljIHN5bmMoKSB7XG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICBpZiAoYmluZGluZy5zeW5jKSB7XG4gICAgICAgIGJpbmRpbmcuc3luYygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyB0aGUgaW5wdXQgdmFsdWVzIGZyb20gdGhlIHZpZXcgYmFjayB0byB0aGUgbW9kZWwgKHJldmVyc2Ugc3luYykuXG4gICAqL1xuICBwdWJsaWMgcHVibGlzaCgpIHtcbiAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcbiAgICAgIGlmIChiaW5kaW5nLmJpbmRlciAmJiBiaW5kaW5nLnB1Ymxpc2ggJiYgKGJpbmRpbmcuYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55PikucHVibGlzaGVzKSB7XG4gICAgICAgIGJpbmRpbmcucHVibGlzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHZpZXcncyBtb2RlbHMgYWxvbmcgd2l0aCBhbnkgYWZmZWN0ZWQgYmluZGluZ3MuXG4gICAqIEBwYXJhbSBtb2RlbHNcbiAgICovXG4gIHB1YmxpYyB1cGRhdGUobW9kZWxzOiBhbnkgPSB7fSkge1xuICAgIE9iamVjdC5rZXlzKG1vZGVscykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICB0aGlzLm1vZGVsc1trZXldID0gbW9kZWxzW2tleV07XG4gICAgfSk7XG5cbiAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcbiAgICAgIGlmIChiaW5kaW5nLnVwZGF0ZSkge1xuICAgICAgICBiaW5kaW5nLnVwZGF0ZShtb2RlbHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBpc0pzb24gfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHsgSURhdGFFbGVtZW50LCBWaWV3LCBUQmxvY2sgfSBmcm9tICcuL3ZpZXcnO1xuXG4vKipcbiAqIFVzZWQgYWxzbyBpbiBwYXJzZXJzLnBhcnNlVHlwZVxuICogVE9ETyBvdXRzb3VyY2VcbiAqL1xuZXhwb3J0IGNvbnN0IFBSSU1JVElWRSA9IDA7XG5leHBvcnQgY29uc3QgS0VZUEFUSCA9IDE7XG5leHBvcnQgY29uc3QgVEVYVCA9IDA7XG5leHBvcnQgY29uc3QgQklORElORyA9IDE7XG5cbmNvbnN0IFFVT1RFRF9TVFIgPSAvXicuKickfF5cIi4qXCIkLzsgLy8gcmVnZXggdG8gdGVzdCBpZiBzdHJpbmcgaXMgd3JhcHBlZCBpbiBcIiBvciAnXG5jb25zdCBERUNMQVJBVElPTl9TUExJVCA9IC8oKD86J1teJ10qJykqKD86KD86W15cXHwnXSooPzonW14nXSonKStbXlxcfCddKikrfFteXFx8XSspKXxeJC9nO1xuXG4vKipcbiAqIFBhcnNlciBhbmQgdG9rZW5pemVyIGZvciBnZXR0aW5nIHRoZSB0eXBlIGFuZCB2YWx1ZSBmcm9tIGEgc3RyaW5nLlxuICogQHBhcmFtIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUeXBlKHN0cj86IHN0cmluZykge1xuICBsZXQgdHlwZSA9IFBSSU1JVElWRTtcbiAgbGV0IHZhbHVlOiBhbnkgPSBzdHI7XG4gIGlmIChzdHIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7dHlwZSwgdmFsdWU6IHVuZGVmaW5lZH07XG4gIH1cbiAgaWYgKFFVT1RFRF9TVFIudGVzdChzdHIpKSB7XG4gICAgdmFsdWUgPSBzdHIuc2xpY2UoMSwgLTEpO1xuICB9IGVsc2UgaWYgKHN0ciA9PT0gJ3RydWUnKSB7XG4gICAgdmFsdWUgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHN0ciA9PT0gJ2ZhbHNlJykge1xuICAgIHZhbHVlID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoc3RyID09PSAnbnVsbCcpIHtcbiAgICB2YWx1ZSA9IG51bGw7XG4gIH0gZWxzZSBpZiAoc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKHN0ciA9PT0gJycpIHtcbiAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmICghaXNOYU4oTnVtYmVyKHN0cikpKSB7XG4gICAgdmFsdWUgPSBOdW1iZXIoc3RyKTtcbiAgfSBlbHNlIGlmIChpc0pzb24oc3RyKSkge1xuICAgIHZhbHVlID0gSlNPTi5wYXJzZShzdHIpO1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSBLRVlQQVRIO1xuICB9XG4gIHJldHVybiB7dHlwZSwgdmFsdWV9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElUb2tlbnMge1xuICB0eXBlOiBudW1iZXI7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogVGVtcGxhdGUgcGFyc2VyIGFuZCB0b2tlbml6ZXIgZm9yIG11c3RhY2hlLXN0eWxlIHRleHQgY29udGVudCBiaW5kaW5ncy5cbiAqIFBhcnNlcyB0aGUgdGVtcGxhdGUgYW5kIHJldHVybnMgYSBzZXQgb2YgdG9rZW5zLCBzZXBhcmF0aW5nIHN0YXRpYyBwb3J0aW9uc1xuICogb2YgdGV4dCBmcm9tIGJpbmRpbmcgZGVjbGFyYXRpb25zLlxuICogQHBhcmFtIHRlbXBsYXRlXG4gKiBAcGFyYW0gZGVsaW1pdGVyc1xuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZTogc3RyaW5nLCBkZWxpbWl0ZXJzOiBzdHJpbmdbXSkge1xuICBsZXQgdG9rZW5zOiBJVG9rZW5zW10gfCBudWxsID0gbnVsbDtcbiAgY29uc3QgbGVuZ3RoID0gdGVtcGxhdGUubGVuZ3RoO1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgY29uc3Qgb3BlbiA9IGRlbGltaXRlcnNbMF07XG4gIGNvbnN0IGNsb3NlID0gZGVsaW1pdGVyc1sxXTtcblxuICB3aGlsZSAobGFzdEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgaW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKG9wZW4sIGxhc3RJbmRleCk7XG5cbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBURVhULFxuICAgICAgICAgIHZhbHVlOiB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXgpLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRva2VucyA9IHRva2VucyB8fCBbXTtcbiAgICAgIGlmIChpbmRleCA+IDAgJiYgbGFzdEluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFRFWFQsXG4gICAgICAgICAgdmFsdWU6IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyBvcGVuLmxlbmd0aDtcbiAgICAgIGluZGV4ID0gdGVtcGxhdGUuaW5kZXhPZihjbG9zZSwgbGFzdEluZGV4KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBjb25zdCBzdWJzdHJpbmcgPSB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXggLSBjbG9zZS5sZW5ndGgpO1xuICAgICAgICBjb25zdCBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChsYXN0VG9rZW4gJiYgbGFzdFRva2VuLnR5cGUgPT09IFRFWFQpIHtcbiAgICAgICAgICBsYXN0VG9rZW4udmFsdWUgKz0gc3Vic3RyaW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFRFWFQsXG4gICAgICAgICAgICB2YWx1ZTogc3Vic3RyaW5nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHZhbHVlID0gdGVtcGxhdGUuc2xpY2UobGFzdEluZGV4LCBpbmRleCkudHJpbSgpO1xuXG4gICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJJTkRJTkcsXG4gICAgICAgIHZhbHVlLFxuICAgICAgfSk7XG5cbiAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgY2xvc2UubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5vZGUodmlldzogVmlldywgbm9kZTogSURhdGFFbGVtZW50LCB0ZW1wbGF0ZURlbGltaXRlcnM6IEFycmF5PHN0cmluZz4pIHtcbiAgbGV0IGJsb2NrOiBUQmxvY2sgPSBmYWxzZTtcblxuICAvLyBpZiBub2RlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERVxuICBub2RlID0gKCBub2RlIGFzIElEYXRhRWxlbWVudCk7XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgbGV0IHRva2VucyA9IG51bGw7XG5cbiAgICAvLyBUT0RPIHdoeSBjaGVjayBkYXRhP1xuICAgIGlmIChub2RlLmRhdGEpIHtcbiAgICAgIHRva2VucyA9IHBhcnNlVGVtcGxhdGUobm9kZS5kYXRhLCB0ZW1wbGF0ZURlbGltaXRlcnMpO1xuICAgIH1cblxuICAgIGlmICh0b2tlbnMgJiYgdG9rZW5zLmxlbmd0aCkge1xuICAgICAgaWYgKCFub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVmlld10gTm9kZSAoVEVYVF9OT0RFKSBoYXMgbm8gcGFyZW50IG5vZGUnKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodG9rZW4udmFsdWUpO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRleHQsIG5vZGUpO1xuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMSkge1xuICAgICAgICAgIHZpZXcuYnVpbGRCaW5kaW5nKHRleHQsIG51bGwsIHRva2VuLnZhbHVlLCBWaWV3LnRleHRCaW5kZXIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICAgIGJsb2NrID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgYmxvY2sgPSB2aWV3LnRyYXZlcnNlKG5vZGUpO1xuICB9XG5cbiAgaWYgKCFibG9jaykge1xuICAgIGlmIChub2RlLmNoaWxkTm9kZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcnNlTm9kZSh2aWV3LCAobm9kZS5jaGlsZE5vZGVzW2ldIGFzIElEYXRhRWxlbWVudCksIHRlbXBsYXRlRGVsaW1pdGVycyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlZERlY2xhcmF0aW9ucyB7XG4gIGtleXBhdGg/OiBzdHJpbmc7XG4gIHBpcGVzOiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gYXR0cmlidXRlIGFyZ3VtZW50IHRvIGhpcyBrZXlwYXRoIGFuZCBzcGxpdHMgdGhlIGZvcm1hdHRlciBuYW1lcyBpbnRvIGEgcGlwZXMgYXJyYXkuXG4gKiBAcGFyYW0gZGVjbGFyYXRpb24gZS5nLiBgb2JqZWN0LmRhdGEgfCB2YWxpZGF0ZSB8IGpzb25gXG4gKlxuICogaWYgZGVjbGFyYXRpb24gaXNcbiAqIGBgYFxuICogb2JqZWN0LmRhdGEgfCB2YWxpZGF0ZSB8IGpzb25gXG4gKiBgYFxuICpcbiAqIHRoZSByZXN1bHQgaXNcbiAqIGBgYFxuICoge1xuICogICAga2V5cGF0aDogXCJvYmplY3QuZGF0YVwiLFxuICogICAgcGlwZXM6IFtcInZhbGlkYXRlXCIsIFwianNvblwiXVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uOiBzdHJpbmcpOiBJUGFyc2VkRGVjbGFyYXRpb25zIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGRlY2xhcmF0aW9uLm1hdGNoKERFQ0xBUkFUSU9OX1NQTElUKTtcbiAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWaWV3XSBObyBtYXRjaGVzJyk7XG4gIH1cbiAgY29uc3QgcGlwZXMgPSBtYXRjaGVzLm1hcCgoc3RyOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKTtcbiAgfSk7XG4gIGNvbnN0IGtleXBhdGggPSBwaXBlcy5zaGlmdCgpIHx8IHVuZGVmaW5lZDtcblxuICByZXR1cm4gPElQYXJzZWREZWNsYXJhdGlvbnM+IHtcbiAgICBrZXlwYXRoLFxuICAgIHBpcGVzLFxuICB9O1xufVxuIiwiaW1wb3J0IHsgVXRpbHMgYXMgdGlueWJpbmRVdGlscyB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuLyoqXG4gKiBKdXN0IGFuIENsYXNzIHdpdGggc29tZSBoZWxwZnVsIGZ1bmN0aW9uc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBVdGlsc1xuICovXG5leHBvcnQgY2xhc3MgVXRpbHMgZXh0ZW5kcyB0aW55YmluZFV0aWxzIHtcblxuICBcblxufVxuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogR2V0IHByb3BlcnR5IG9mIG9iamVjdCBvciBhcnJheVxuICogQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kZXItT24vY2RhZmU5MDg4NDdlMmI4ODI2OTFcbiAqL1xuZXhwb3J0IGNvbnN0IGdldCA9IChvYmo6IGFueSB8IGFueVtdLCBrZXk6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICBpZiAoVXRpbHMuaXNPYmplY3Qob2JqKSB8fCBVdGlscy5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElCaW5kZXJzIH0gZnJvbSAnLi9iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSUNvbXBvbmVudCwgSUNvbXBvbmVudHMgfSBmcm9tICcuL2NvbXBvbmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IElBZGFwdGVycyB9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgeyBJQmluZGFibGUgfSBmcm9tICcuL2JpbmRpbmcnO1xuXG5leHBvcnQgdHlwZSBTY29wZSA9IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcG9uZW50PFZhbHVlVHlwZT4ge1xuICAvKiogSWYgdGhlIHRlbXBsYXRlIGZ1bmN0aW9uIHJldHVybnMgbnVsbCBubyB0ZW1wbGF0ZSBpcyBpbmplY3RlZCAqL1xuICB0ZW1wbGF0ZTogKCgpID0+IHN0cmluZyB8IG51bGwpIHwgKCgpID0+IEhUTUxFbGVtZW50KTtcbiAgaW5pdGlhbGl6ZTogKGVsOiBIVE1MRWxlbWVudCwgZGF0YTogVmFsdWVUeXBlKSA9PiBTY29wZTtcblxuICAvKiogYXJyYXkgb2YgYXR0cmliaXV0ZSBuYW1lcyB0byBmb3JjZSBwYXJzZSBhdHRyaWJ1dGVzIGFzIHN0YXRpYyAocHJpbWl0aXZlKSB2YWx1ZXMgKi9cbiAgc3RhdGljPzogc3RyaW5nW107XG5cbiAgLyoqIGFycmF5IG9mIGF0dHJpYml1dGUgbmFtZXMgdG8gYXV0byBiaW5kIGF0dHJpYnV0ZXMgdG8gdGhlIHNjb3BlICovXG4gIGJpbmQ/OiBzdHJpbmdbXTtcblxuICAvLyBleHRlbnNpb24gb3B0aW9uc1xuICBiaW5kZXJzPzogSUJpbmRlcnM8YW55PjtcbiAgZm9ybWF0dGVycz86IElGb3JtYXR0ZXJzO1xuICBjb21wb25lbnRzPzogSUNvbXBvbmVudHM7XG4gIGFkYXB0ZXJzPzogSUFkYXB0ZXJzO1xuXG4gIC8vIG90aGVyIG9wdGlvbnNcbiAgcHJlZml4Pzogc3RyaW5nO1xuICBwcmVsb2FkRGF0YT86IGJvb2xlYW47XG4gIHJvb3RJbnRlcmZhY2U/OiBzdHJpbmc7XG4gIHRlbXBsYXRlRGVsaW1pdGVycz86IEFycmF5PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIElmIHlvdSB3YW50IHRvIHNhdmUgY3VzdG9tIGRhdGEgaW4geW91ciBiaW5kZXIgbG9naWNcbiAgICovXG4gIFtrZXk6IHN0cmluZ106IGFueTtcblxuICBoYW5kbGVyPzogKHRoaXM6IGFueSwgY29udGV4dDogYW55LCBldjogRXZlbnQsIGJpbmRpbmc6IElCaW5kYWJsZSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcG9uZW50cyB7XG4gIFtuYW1lOiBzdHJpbmddOiBJQ29tcG9uZW50PGFueT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXBvbmVudFdyYXBwZXJSZXN1bHQ8VmFsdWVUeXBlPiBleHRlbmRzIElDb21wb25lbnQ8VmFsdWVUeXBlPiB7XG4gIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50V3JhcHBlcjxWYWx1ZVR5cGU+ID0gKC4uLmRlcHM6IGFueVtdKSA9PiBJQ29tcG9uZW50V3JhcHBlclJlc3VsdDxWYWx1ZVR5cGU+O1xuXG5leHBvcnQgY2xhc3MgQ29tcG9uZW50U2VydmljZSB7XG4gIHByaXZhdGUgY29tcG9uZW50czogSUNvbXBvbmVudHM7XG4gIHByaXZhdGUgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50czpDb21wb25lbnRTZXJ2aWNlJyk7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnRzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb21wb25lbnRzOiBJQ29tcG9uZW50cykge1xuICAgIHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgY29tcG9uZW50IHdyYXBwZXJcbiAgICogQHBhcmFtIENvbXBvbmVudFdyYXBwZXJcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIHB1YmxpYyByZWdpc3RXcmFwcGVyKGNvbXBvbmVudFdyYXBwZXI6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4sIG5hbWU/OiBzdHJpbmcpOiBJQ29tcG9uZW50cyB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBuYW1lID0gY29tcG9uZW50V3JhcHBlci5uYW1lO1xuICAgIH1cbiAgICBjb25zdCBjb21wb25lbnQgPSAoY29tcG9uZW50V3JhcHBlciBhcyBJQ29tcG9uZW50V3JhcHBlclJlc3VsdDxhbnk+KTtcbiAgICB0aGlzLmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3QgYSBjb21wb25lbnQgd2l0aCBoaXMgbmFtZVxuICAgKiBAcGFyYW0gY29tcG9uZW50XG4gICAqIEBwYXJhbSBuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0KGNvbXBvbmVudDogSUNvbXBvbmVudDxhbnk+LCBuYW1lPzogc3RyaW5nKTogSUNvbXBvbmVudHMge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgaWYgKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSkge1xuICAgICAgICBuYW1lID0gY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xuICAgICAgICBuYW1lID0gKGNvbXBvbmVudCBhcyBhbnkpLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZygnbmFtZScsIG5hbWUsIGNvbXBvbmVudCk7XG5cbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0NvbXBvbmVudFNlcnZpY2VdIG5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3QgYSBzZXQgb2YgY29tcG9uZW50c1xuICAgKiBAcGFyYW0gY29tcG9uZW50c1xuICAgKi9cbiAgcHVibGljIHJlZ2lzdHMoY29tcG9uZW50czogSUNvbXBvbmVudHMpOiBJQ29tcG9uZW50cyB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIGNvbXBvbmVudHMpIHtcbiAgICAgIGlmIChjb21wb25lbnRzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHRoaXMucmVnaXN0KGNvbXBvbmVudHNbbmFtZV0sIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzO1xuICB9XG59XG4iLCJcbmltcG9ydCB7IElBZGFwdGVycyB9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgSVZpZXdPcHRpb25zIH0gZnJvbSAnLi90aW55YmluZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmVyU3luY0NhbGxiYWNrIHtcbiAgc3luYzogKCkgPT4gdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUtleSB7XG4gIHBhdGg6IGFueTtcbiAgaTogUm9vdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2ZXJzIHtcbiAgW2tleTogc3RyaW5nXTogT2JzZXJ2ZXI7XG59XG5cbmV4cG9ydCB0eXBlIE9iaiA9IGFueTtcblxuZXhwb3J0IHR5cGUgUm9vdCA9IGFueTtcblxuZXhwb3J0IGNsYXNzIE9ic2VydmVyIHtcblxuICBwdWJsaWMgc3RhdGljIGFkYXB0ZXJzOiBJQWRhcHRlcnM7XG4gIHB1YmxpYyBzdGF0aWMgaW50ZXJmYWNlczogc3RyaW5nW107XG4gIHB1YmxpYyBzdGF0aWMgcm9vdEludGVyZmFjZTogUm9vdDtcblxuICBwdWJsaWMgc3RhdGljIHVwZGF0ZU9wdGlvbnMob3B0aW9uczogSVZpZXdPcHRpb25zKSB7XG4gICAgT2JzZXJ2ZXIuYWRhcHRlcnMgPSBvcHRpb25zLmFkYXB0ZXJzO1xuICAgIE9ic2VydmVyLmludGVyZmFjZXMgPSBPYmplY3Qua2V5cyhPYnNlcnZlci5hZGFwdGVycyk7XG4gICAgT2JzZXJ2ZXIucm9vdEludGVyZmFjZSA9IG9wdGlvbnMucm9vdEludGVyZmFjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2tlbml6ZXMgdGhlIHByb3ZpZGVkIGtleXBhdGggc3RyaW5nIGludG8gaW50ZXJmYWNlICsgcGF0aCB0b2tlbnMgZm9yIHRoZVxuICAgKiBvYnNlcnZlciB0byB3b3JrIHdpdGguXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHRva2VuaXplKGtleXBhdGg6IHN0cmluZywgcm9vdDogUm9vdCkge1xuICAgIGNvbnN0IHRva2VuczogYW55W10gPSBbXTtcbiAgICBsZXQgY3VycmVudDogSUtleSA9IHtpOiByb290LCBwYXRoOiAnJ307XG4gICAgbGV0IGluZGV4OiBudW1iZXI7XG4gICAgbGV0IGNocjogc3RyaW5nO1xuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwga2V5cGF0aC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNociA9IGtleXBhdGguY2hhckF0KGluZGV4KTtcbiAgICAgIGlmICghIX5PYnNlcnZlci5pbnRlcmZhY2VzLmluZGV4T2YoY2hyKSkge1xuICAgICAgICB0b2tlbnMucHVzaChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IHtpOiBjaHIsIHBhdGg6ICcnfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQucGF0aCArPSBjaHI7XG4gICAgICB9XG4gICAgfVxuICAgIHRva2Vucy5wdXNoKGN1cnJlbnQpO1xuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cblxuICBwdWJsaWMga2V5cGF0aDogc3RyaW5nO1xuICBwdWJsaWMgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjaztcbiAgcHVibGljIG9iamVjdFBhdGg6IE9ialtdO1xuICBwdWJsaWMgb2JqOiBPYmo7XG4gIHB1YmxpYyB0YXJnZXQ6IE9iajtcbiAgcHVibGljIGtleTogSUtleTtcbiAgcHVibGljIHRva2VuczogSUtleVtdO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGtleXBhdGggb2JzZXJ2ZXIgYW5kIGtpY2tzIHRoaW5ncyBvZmYuXG4gICAqIEBwYXJhbSBvYmpcbiAgICogQHBhcmFtIGtleXBhdGhcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvYmo6IE9iaiwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKSB7XG4gICAgdGhpcy5rZXlwYXRoID0ga2V5cGF0aDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5vYmplY3RQYXRoID0gW107XG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSB0aGlzLnBhcnNlKCk7XG4gICAgdGhpcy5rZXkgPSBwYXJzZVJlc3VsdC5rZXk7XG4gICAgdGhpcy50b2tlbnMgPSBwYXJzZVJlc3VsdC50b2tlbnM7XG4gICAgdGhpcy5vYmogPSB0aGlzLmdldFJvb3RPYmplY3Qob2JqKTtcbiAgICB0aGlzLnRhcmdldCA9IHRoaXMucmVhbGl6ZSgpO1xuICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgIHRoaXMuc2V0KHRydWUsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUga2V5cGF0aCB1c2luZyB0aGUgaW50ZXJmYWNlcyBkZWZpbmVkIG9uIHRoZSB2aWV3LiBTZXRzIHZhcmlhYmxlc1xuICAgKiBmb3IgdGhlIHRva2VuaXplZCBrZXlwYXRoIGFzIHdlbGwgYXMgdGhlIGVuZCBrZXkuXG4gICAqL1xuICBwdWJsaWMgcGFyc2UoKSB7XG4gICAgbGV0IHBhdGg6IHN0cmluZztcbiAgICBsZXQgcm9vdDogUm9vdDtcblxuICAgIGlmICghT2JzZXJ2ZXIuaW50ZXJmYWNlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW09ic2VydmVyXSBNdXN0IGRlZmluZSBhdCBsZWFzdCBvbmUgYWRhcHRlciBpbnRlcmZhY2UuJyk7XG4gICAgfVxuXG4gICAgaWYgKCEhfk9ic2VydmVyLmludGVyZmFjZXMuaW5kZXhPZih0aGlzLmtleXBhdGhbMF0pKSB7XG4gICAgICByb290ID0gdGhpcy5rZXlwYXRoWzBdO1xuICAgICAgcGF0aCA9IHRoaXMua2V5cGF0aC5zdWJzdHIoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QgPSBPYnNlcnZlci5yb290SW50ZXJmYWNlO1xuICAgICAgcGF0aCA9IHRoaXMua2V5cGF0aDtcbiAgICB9XG5cbiAgICB0aGlzLnRva2VucyA9IE9ic2VydmVyLnRva2VuaXplKHBhdGgsIHJvb3QpO1xuXG4gICAgaWYgKCF0aGlzLnRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW09ic2VydmVyXSBObyB0b2tlbnMnKTtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9ICh0aGlzLnRva2Vucy5wb3AoKSBhcyBJS2V5KTtcblxuICAgIHJldHVybiB7XG4gICAgICBrZXk6IHRoaXMua2V5LFxuICAgICAgdG9rZW5zOiB0aGlzLnRva2VucyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWxpemVzIHRoZSBmdWxsIGtleXBhdGgsIGF0dGFjaGluZyBvYnNlcnZlcnMgZm9yIGV2ZXJ5IGtleSBhbmQgY29ycmVjdGluZ1xuICAgKiBvbGQgb2JzZXJ2ZXJzIHRvIGFueSBjaGFuZ2VkIG9iamVjdHMgaW4gdGhlIGtleXBhdGguXG4gICAqL1xuICBwdWJsaWMgcmVhbGl6ZSgpIHtcbiAgICBsZXQgY3VycmVudDogT2JqID0gdGhpcy5vYmo7XG4gICAgbGV0IHVucmVhY2hlZCA9IC0xO1xuICAgIGxldCBwcmV2O1xuICAgIGxldCB0b2tlbjtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbnNbaW5kZXhdO1xuICAgICAgaWYgKGlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3RQYXRoW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwcmV2ID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XTtcbiAgICAgICAgICBpZiAoY3VycmVudCAhPT0gcHJldikge1xuICAgICAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBwcmV2LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KHRydWUsIHRva2VuLCBjdXJyZW50LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0UGF0aFtpbmRleF0gPSBjdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldCh0cnVlLCB0b2tlbiwgY3VycmVudCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5vYmplY3RQYXRoW2luZGV4XSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0KHRva2VuLCBjdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh1bnJlYWNoZWQgPT09IC0xKSB7XG4gICAgICAgICAgdW5yZWFjaGVkID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IHRoaXMub2JqZWN0UGF0aFtpbmRleF07XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBwcmV2LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodW5yZWFjaGVkICE9PSAtMSkge1xuICAgICAgdGhpcy5vYmplY3RQYXRoLnNwbGljZSh1bnJlYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBrZXlwYXRoLiBUaGlzIGlzIGNhbGxlZCB3aGVuIGFueSBpbnRlcm1lZGlhcnkga2V5IGlzIGNoYW5nZWQuXG4gICAqL1xuICBwdWJsaWMgc3luYygpIHtcbiAgICBsZXQgbmV4dDtcbiAgICBsZXQgb2xkVmFsdWU7XG4gICAgbGV0IG5ld1ZhbHVlO1xuICAgIG5leHQgPSB0aGlzLnJlYWxpemUoKTtcbiAgICBpZiAobmV4dCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc09iamVjdChuZXh0KSkge1xuICAgICAgICB0aGlzLnNldCh0cnVlLCB0aGlzLmtleSwgbmV4dCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIG9sZFZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgdGhpcy50YXJnZXQgPSBuZXh0O1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlIHx8IG5ld1ZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjay5zeW5jKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRoaXMuY2FsbGJhY2suc3luYygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgY3VycmVudCBlbmQgdmFsdWUgb2YgdGhlIG9ic2VydmVkIGtleXBhdGguIFJldHVybnMgdW5kZWZpbmVkIGlmXG4gICAqIHRoZSBmdWxsIGtleXBhdGggaXMgdW5yZWFjaGFibGUuXG4gICAqL1xuICBwdWJsaWMgdmFsdWUoKSB7XG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMua2V5LCB0aGlzLnRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgZW5kIHZhbHVlIG9mIHRoZSBvYnNlcnZlZCBrZXlwYXRoLiBDYWxsaW5nIHNldFZhbHVlIHdoZW5cbiAgICogIHRoZSBmdWxsIGtleXBhdGggaXMgdW5yZWFjaGFibGUgaXMgYSBuby1vcC5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgIE9ic2VydmVyLmFkYXB0ZXJzW3RoaXMua2V5LmldLnNldCh0aGlzLnRhcmdldCwgdGhpcy5rZXkucGF0aCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcm92aWRlZCBrZXkgb24gYW4gb2JqZWN0LlxuICAgKiBAcGFyYW0ga2V5XG4gICAqIEBwYXJhbSBvYmpcbiAgICovXG4gIHB1YmxpYyBnZXQoa2V5OiBJS2V5LCBvYmo6IE9iaikge1xuICAgIHJldHVybiBPYnNlcnZlci5hZGFwdGVyc1trZXkuaV0uZ2V0KG9iaiwga2V5LnBhdGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIG9yIHVub2JzZXJ2ZXMgYSBjYWxsYmFjayBvbiB0aGUgb2JqZWN0IHVzaW5nIHRoZSBwcm92aWRlZCBrZXkuXG4gICAqIEBwYXJhbSBhY3RpdmVcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcGFyYW0gb2JqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgcHVibGljIHNldChhY3RpdmU6IGJvb2xlYW4sIGtleTogSUtleSwgb2JqOiBPYmosIGNhbGxiYWNrOiBJT2JzZXJ2ZXJTeW5jQ2FsbGJhY2spIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICBPYnNlcnZlci5hZGFwdGVyc1trZXkuaV0ub2JzZXJ2ZShvYmosIGtleS5wYXRoLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9ic2VydmVyLmFkYXB0ZXJzW2tleS5pXS51bm9ic2VydmUob2JqLCBrZXkucGF0aCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbm9ic2VydmVzIHRoZSBlbnRpcmUga2V5cGF0aC5cbiAgICovXG4gIHB1YmxpYyB1bm9ic2VydmUoKSB7XG4gICAgbGV0IG9iajogT2JqO1xuICAgIGxldCB0b2tlbjtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbnNbaW5kZXhdO1xuICAgICAgb2JqID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XTtcbiAgICAgIGlmIChvYmopIHtcbiAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBvYmosIHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgIHRoaXMuc2V0KGZhbHNlLCB0aGlzLmtleSwgdGhpcy50YXJnZXQsIHRoaXMuY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiB0cmF2ZXJzZSB0aGUgc2NvcGUgY2hhaW4gdG8gZmluZCB0aGUgc2NvcGUgd2hpY2ggaGFzIHRoZSByb290IHByb3BlcnR5XG4gICAqIGlmIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQgaW4gY2hhaW4sIHJldHVybnMgdGhlIHJvb3Qgc2NvcGVcbiAgICogQHBhcmFtIG9ialxuICAgKi9cbiAgcHVibGljIGdldFJvb3RPYmplY3Qob2JqOiBPYmopIHtcbiAgICBsZXQgcm9vdFByb3A7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgaWYgKCFvYmouJHBhcmVudCkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoKSB7XG4gICAgICByb290UHJvcCA9IHRoaXMudG9rZW5zWzBdLnBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RQcm9wID0gdGhpcy5rZXkucGF0aDtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gb2JqO1xuICAgIHdoaWxlIChjdXJyZW50LiRwYXJlbnQgJiYgKGN1cnJlbnRbcm9vdFByb3BdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxufVxuIiwidHlwZSBFdmVudENhbGxiYWNrID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cbmludGVyZmFjZSBJRXZlbnRzIHtcbiAgW2V2ZW50TmFtZTogc3RyaW5nXTogRXZlbnRDYWxsYmFja1tdO1xufVxuXG4vKipcbiAqIExpdHRsZSBEaXNwYXRjaGVyIGluc3BpcmVkIGJ5IE1pY3JvRXZlbnQuanNcbiAqXG4gKiBAdHlwZSB7b2JqZWN0fVxuICovXG5jbGFzcyBHbG9iYWxFdmVudCB7XG5cbiAgLyoqIHNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogR2xvYmFsRXZlbnQ7XG4gIC8qKlxuICAgKiBPYmplY3QgdGhhdCBrZWVwcyBhbGwgdGhlIGV2ZW50c1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuRGlzcGF0Y2hlclxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIHByaXZhdGUgZXZlbnRzOiBJRXZlbnRzID0ge307XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gc2luZ2xldG9uIGluc3RhbmNlIG9mIERpc3BhdGNoZXIuXG4gICAqIEBtZW1iZXJvZiBEaXNwYXRjaGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoR2xvYmFsRXZlbnQuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBHbG9iYWxFdmVudC5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBHbG9iYWxFdmVudC5pbnN0YW5jZSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQmluZCBhIGNhbGxiYWNrIHRvIGFuIGV2ZW50XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5EaXNwYXRjaGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtFdmVudENhbGxiYWNrfSBmdW5jdGlvblxuICAgKi9cbiAgcHVibGljIG9uKGU6IHN0cmluZywgZjogRXZlbnRDYWxsYmFjaykge1xuICAgIHRoaXMuZXZlbnRzW2VdID0gdGhpcy5ldmVudHNbZV0gfHwgW107XG4gICAgdGhpcy5ldmVudHNbZV0ucHVzaChmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmJpbmQgZXZlbnRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkRpc3BhdGNoZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge0V2ZW50Q2FsbGJhY2t9IGZ1bmN0aW9uXG4gICAqL1xuICBwdWJsaWMgb2ZmKGU6IHN0cmluZywgZjogRXZlbnRDYWxsYmFjaykge1xuICAgIGlmIChlIGluIHRoaXMuZXZlbnRzID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzW2VdLnNwbGljZSh0aGlzLmV2ZW50c1tlXS5pbmRleE9mKGYpLCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlIHRoZSBldmVudCBydW5uaW5nIGFsbCB0aGUgZXZlbnQgYXNzb2NpYXRlZCB0byBpdFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuRGlzcGF0Y2hlclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0gIHthbnlbXX0gYXJnc1xuICAgKi9cbiAgcHVibGljIHRyaWdnZXIoZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgeyAvLyBlLCAuLi5hcmdzXG4gICAgaWYgKGUgaW4gdGhpcy5ldmVudHMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmV2ZW50c1tlXS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5ldmVudHNbZV1baV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IEdsb2JhbEV2ZW50IH07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zaXRpb24ge1xuICAvLyAkb2xkQ29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICAvLyAkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICAvLyBuZXdDb250YWluZXJMb2FkaW5nOiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+O1xuICAvLyBleHRlbmQob2JqOiBvYmplY3QpOiBvYmplY3Q7XG4gIGluaXQoJG9sZENvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgbmV3Q29udGFpbmVyOiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+KTogUHJvbWlzZTx2b2lkPjtcbiAgZG9uZSgpOiB2b2lkO1xuICBzdGFydCgpOiBhbnk7XG59XG5cbi8qKlxuICogQmFzZVRyYW5zaXRpb24gdG8gZXh0ZW5kXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VUcmFuc2l0aW9uIGltcGxlbWVudHMgSVRyYW5zaXRpb24ge1xuICAvKipcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqIEB0eXBlIHtKUXVlcnk8SFRNTEVsZW1lbnQ+fVxuICAgKi9cbiAgcHJvdGVjdGVkICRvbGRDb250YWluZXI/OiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQHR5cGUge0pRdWVyeTxIVE1MRWxlbWVudD59XG4gICAqL1xuICBwcm90ZWN0ZWQgJG5ld0NvbnRhaW5lcj86IEpRdWVyeTxIVE1MRWxlbWVudD47XG5cbiAgLyoqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKiBAdHlwZSB7UHJvbWlzZX1cbiAgICovXG4gIHByb3RlY3RlZCBuZXdDb250YWluZXJMb2FkaW5nPzogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+PjtcblxuICBwcm90ZWN0ZWQgZGVmZXJyZWQ6IGFueTsgLy8gVE9ETyB0eXBlXG5cbiAgcHJvdGVjdGVkIGRlYnVnID0gRGVidWcoJ2JhcmJhOkJhc2VUcmFuc2l0aW9uJyk7XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBleHRlbmQgdGhlIG9iamVjdFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXdPYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fSBuZXdJbmhlcml0T2JqZWN0XG4gICAqL1xuICAvLyBwdWJsaWMgZXh0ZW5kKG9iajogb2JqZWN0KSB7XG4gIC8vICAgcmV0dXJuIFV0aWxzLmV4dGVuZCh0aGlzLCBvYmopO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGZyb20gUGpheCBtb2R1bGUgdG8gaW5pdGlhbGl6ZVxuICAgKiB0aGUgdHJhbnNpdGlvbi5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBvbGRDb250YWluZXJcbiAgICogQHBhcmFtICB7UHJvbWlzZX0gbmV3Q29udGFpbmVyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBwdWJsaWMgaW5pdCgkb2xkQ29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBuZXdDb250YWluZXI6IFByb21pc2U8SlF1ZXJ5PEhUTUxFbGVtZW50Pj4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuJG9sZENvbnRhaW5lciA9ICRvbGRDb250YWluZXI7XG5cbiAgICB0aGlzLmRlZmVycmVkID0gVXRpbHMuZGVmZXJyZWQoKTtcbiAgICBjb25zdCBuZXdDb250YWluZXJSZWFkeSA9IFV0aWxzLmRlZmVycmVkKCk7XG4gICAgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nID0gbmV3Q29udGFpbmVyUmVhZHkucHJvbWlzZTtcblxuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIG5ld0NvbnRhaW5lci50aGVuKCgkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICBzZWxmLiRuZXdDb250YWluZXIgPSAkbmV3Q29udGFpbmVyO1xuICAgICAgbmV3Q29udGFpbmVyUmVhZHkucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGNhbGxlZCBhcyBzb29uIHRoZSBUcmFuc2l0aW9uIGlzIGZpbmlzaGVkXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKi9cbiAgcHVibGljIGRvbmUoKSB7XG4gICAgdGhpcy5kZWJ1ZygnZG9uZScpO1xuICAgIC8vIHRoaXMuJG9sZENvbnRhaW5lclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJG9sZENvbnRhaW5lcltdKTtcbiAgICBpZiAoIXRoaXMuJG9sZENvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHJlbW92ZSBvbGQgY29udGFpbmVyJyk7XG4gICAgfVxuICAgIHRoaXMuJG9sZENvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAvLyB0aGlzLm5ld0NvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGlmICghdGhpcy4kbmV3Q29udGFpbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3Qgc2hvdyBuZXcgY29udGFpbmVyJyk7XG4gICAgfVxuICAgIHRoaXMuJG5ld0NvbnRhaW5lci5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZvciB5b3VyIFRyYW5zaXRpb25cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHN0YXJ0KCk6IGFueTtcbn1cbiIsIi8vIGV4cG9ydCAqIGZyb20gJy4uLy4uL25vZGVfbW9kdWxlcy90aW55YmluZC9zcmMvaW5kZXgnOyAvLyBlcnJvciBvbiB0c2Mgd2l0aCBsaW5rZWQgcGFja2FnZSAoZHVwbGljYXRlZCBqcXVlcnkgZGVmaW5pdGlvbnMpXG4vLyBleHBvcnQgKiBmcm9tICd0aW55YmluZCc7IC8vIGVycm9yIG9uIHdlYnBhY2sgLyBiYWJlbC1sb2FkZXIgd2l0aCBsaW5rZWQgcGFja2FnZXMgKGNhbid0IGltcG9ydCB0aGUgc291cmNlIGZpbGVzKVxuZXhwb3J0ICogZnJvbSAnLi4vbW9kdWxlcy90aW55YmluZC9pbmRleCc7IC8vIGp1c3QgYSBjb3B5IG9mIHRoZSBzb3VyY2UgZmlsZXMgc2VlbXMgdG8gd29yayBvbiBib3RoIHRzYyBhbmQgd2VicGFjayIsImltcG9ydCB7IGNvdW50IH0gZnJvbSAnLi9jb3VudC5mb3JtYXR0ZXInO1xuXG5leHBvcnQgY29uc3QgZW1wdHkgPSAoYTogYW55W10gfCBzdHJpbmcgKSA9PiB7XG4gIHJldHVybiAhY291bnQoYSk7XG59O1xuIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBzaXplIG9mIGEgc3RyaW5nICh0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMpIG9yIGFuIGFycmF5ICh0aGUgbnVtYmVyIG9mIGVsZW1lbnRzKS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9hcnJheS1maWx0ZXJzI3NpemVcbiAqL1xuZXhwb3J0IGNvbnN0IGNvdW50ID0gKHZhbHVlOiBhbnlbXSB8IHN0cmluZykgPT4ge1xuICByZXR1cm4gKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkgPyB2YWx1ZS5sZW5ndGggOiAwO1xufTtcbiIsImltcG9ydCB7IElWaWV3T3B0aW9ucyB9IGZyb20gJy4vdGlueWJpbmQnO1xuaW1wb3J0IHsgUFJJTUlUSVZFLCBLRVlQQVRILCBwYXJzZVR5cGUsIHBhcnNlRGVjbGFyYXRpb24gfSBmcm9tICcuL3BhcnNlcnMnO1xuaW1wb3J0IHsgSUZvcm1hdHRlck9ic2VydmVycywgSUJpbmRhYmxlIH0gZnJvbSAnLi9iaW5kaW5nJztcbmltcG9ydCB7IElCaW5kZXJzIH0gZnJvbSAnLi9iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgeyBJQ29tcG9uZW50LCBJQ29tcG9uZW50cyB9IGZyb20gJy4vY29tcG9uZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2ZXIsIElPYnNlcnZlcnMsIElPYnNlcnZlclN5bmNDYWxsYmFjayB9IGZyb20gJy4vb2JzZXJ2ZXInO1xuaW1wb3J0IHsgSUFkYXB0ZXJzIH0gZnJvbSAnLi9hZGFwdGVyJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJvdW5kRWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgX2JvdW5kPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0dGVyc09ic2VydmVycyB7XG4gIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IElGb3JtYXR0ZXJPYnNlcnZlcnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtleXBhdGhzIHtcbiAgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogc3RyaW5nO1xufVxuXG4vKipcbiAqIGNvbXBvbmVudCB2aWV3IGVuY2Fwc3VsYXRlZCBhcyBhIGJpbmRpbmcgd2l0aGluIGl0J3MgcGFyZW50IHZpZXcuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRCaW5kaW5nIGltcGxlbWVudHMgSUJpbmRhYmxlIHtcbiAgcHVibGljIHZpZXc6IFZpZXc7XG4gIHB1YmxpYyBjb21wb25lbnRWaWV3PzogVmlldztcbiAgcHVibGljIGVsOiBJQm91bmRFbGVtZW50O1xuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICBwdWJsaWMgY29tcG9uZW50OiBJQ29tcG9uZW50PGFueT47XG4gIC8qKlxuICAgKiBzdGF0aWMgdmFsdWVzIChQUklNSVRJVkUgQXR0cmlidXRlcylcbiAgICovXG4gIHB1YmxpYyBzdGF0aWM6IHtba2V5OiBzdHJpbmddOiBhbnl9ID0ge307XG4gIC8qKlxuICAgKiBrZXlwYXRoIHZhbHVlcyAoS0VZUEFUSCBBdHRyaWJ1dGVzKVxuICAgKi9cbiAgcHVibGljIGtleXBhdGhzOiBJS2V5cGF0aHMgPSB7fTtcbiAgcHVibGljIGZvcm1hdHRlcnNPYnNlcnZlcnM6IElGb3JtYXR0ZXJzT2JzZXJ2ZXJzID0ge307XG4gIHB1YmxpYyBvYnNlcnZlcnM6IElPYnNlcnZlcnM7XG4gIHB1YmxpYyBiaW5kaW5nUHJlZml4OiBzdHJpbmc7IC8vID0gdGlueWJpbmQuZnVsbFByZWZpeDtcbiAgcHVibGljIHBpcGVzOiBhbnkgPSB7fTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgYSBjb21wb25lbnQgYmluZGluZyBmb3IgdGhlIHNwZWNpZmllZCB2aWV3LiBUaGUgcmF3IGNvbXBvbmVudFxuICAgKiBlbGVtZW50IGlzIHBhc3NlZCBpbiBhbG9uZyB3aXRoIHRoZSBjb21wb25lbnQgdHlwZS4gQXR0cmlidXRlcyBhbmQgc2NvcGVcbiAgICogaW5mbGVjdGlvbnMgYXJlIGRldGVybWluZWQgYmFzZWQgb24gdGhlIGNvbXBvbmVudHMgZGVmaW5lZCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBAcGFyYW0gdmlld1xuICAgKiBAcGFyYW0gZWxcbiAgICogQHBhcmFtIHR5cGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHZpZXc6IFZpZXcsIGVsOiBIVE1MRWxlbWVudCwgdHlwZTogc3RyaW5nKSB7XG4gICAgdGhpcy52aWV3ID0gdmlldztcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmNvbXBvbmVudCA9IHZpZXcub3B0aW9ucy5jb21wb25lbnRzW3RoaXMudHlwZV07XG4gICAgdGhpcy5zdGF0aWMgPSB7fTtcbiAgICB0aGlzLm9ic2VydmVycyA9IHt9O1xuICAgIHRoaXMuYmluZGluZ1ByZWZpeCA9IHZpZXcub3B0aW9ucy5wcmVmaXggKyAnLSc7IC8vIFRPRE9cbiAgICB0aGlzLnBhcnNlVGFyZ2V0KCk7XG4gICAgdGhpcy5zeW5jKCk7XG4gIH1cblxuICAvKipcbiAgICogT2JzZXJ2ZXMgdGhlIG9iamVjdCBrZXlwYXRoXG4gICAqIEBwYXJhbSBvYmpcbiAgICogQHBhcmFtIGtleXBhdGhcbiAgICovXG4gIHB1YmxpYyBvYnNlcnZlKG9iajogYW55LCBrZXlwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBJT2JzZXJ2ZXJTeW5jQ2FsbGJhY2spOiBPYnNlcnZlciB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZlcihvYmosIGtleXBhdGgsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2YWx1ZXMgaW4gbW9kZWwgd2hlbiB0aGUgb2JzZXJ2ZXIgY2FsbHMgdGhpcyBmdW5jdGlvblxuICAgKiBPbmx5IHN5bmMgdmFsdWUgaWYgaXQgaXMgbWFya2VkIGFzIGJpbmRcbiAgICovXG4gIHB1YmxpYyBzeW5jKCkge1xuICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGljKS5mb3JFYWNoKChwcm9wZXJ0eU5hbWUpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudC5iaW5kICYmIHRoaXMuY29tcG9uZW50LmJpbmQuaW5kZXhPZihwcm9wZXJ0eU5hbWUpICE9PSAtMSkge1xuICAgICAgICAodGhpcyBhcyBhbnkpW3Byb3BlcnR5TmFtZV0gPSB0aGlzLnN0YXRpY1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICAvLyAodGhpcyBhcyBhbnkpW2tleV0gPSB0aGlzLmZvcm1hdHRlZFZhbHVlcyh0aGlzLnN0YXRpY1trZXldLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5vYnNlcnZlcnMpLmZvckVhY2goKHByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29tcG9uZW50LmJpbmQgJiYgdGhpcy5jb21wb25lbnQuYmluZC5pbmRleE9mKHByb3BlcnR5TmFtZSkgIT09IC0xKSB7XG4gICAgICAgICh0aGlzIGFzIGFueSlbcHJvcGVydHlOYW1lXSA9IHRoaXMub2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV0udmFsdWUoKTtcbiAgICAgICAgLy8gKHRoaXMgYXMgYW55KVtwcm9wZXJ0eU5hbWVdID0gdGhpcy5mb3JtYXR0ZWRWYWx1ZXModGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXS52YWx1ZSgpLCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyB0aGUgdmFsdWUgY3VycmVudGx5IHNldCBvbiB0aGUgbW9kZWwgYmFjayB0byB0aGUgcGFyZW50IG1vZGVsLlxuICAgKiBZb3UgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIG1hbnVhbGx5IGluIHlvdXIgY29tcG9uZW50XG4gICAqL1xuICBwdWJsaWMgcHVibGlzaChwcm9wZXJ0eU5hbWU/OiBzdHJpbmcsIHZhbHVlPzogYW55KSB7XG4gICAgaWYgKHByb3BlcnR5TmFtZSkge1xuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV0pIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXS5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IG1hcCB1c2luZyB0aGUgY29tcG9uZW50J3Mgc2NvcGUgaW5mbGVjdGlvbnMuXG4gICAqL1xuICBwdWJsaWMgbG9jYWxzKCkge1xuICAgIGNvbnN0IHJlc3VsdDogYW55ID0ge307XG4gICAgT2JqZWN0LmtleXModGhpcy5zdGF0aWMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLnN0YXRpY1trZXldO1xuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5vYnNlcnZlcnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcmVzdWx0W2tleV0gPSB0aGlzLm9ic2VydmVyc1trZXldLnZhbHVlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY2FtZWwtY2FzZWQgdmVyc2lvbiBvZiB0aGUgc3RyaW5nLiBVc2VkIHdoZW4gdHJhbnNsYXRpbmcgYW5cbiAgICogZWxlbWVudCdzIGF0dHJpYnV0ZSBuYW1lIGludG8gYSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgY29tcG9uZW50J3Mgc2NvcGUuXG4gICAqIFRPRE8gbW92ZSB0byB1dGlsc1xuICAgKiBAcGFyYW0gc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgY2FtZWxDYXNlKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8tKFthLXpdKS9nLCAoZ3JvdXBlZCkgPT4ge1xuICAgICAgcmV0dXJuIGdyb3VwZWRbMV0udG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNZXJnZWRPcHRpb25zKCkge1xuICAgIGNvbnN0IG9wdGlvbnM6IElWaWV3T3B0aW9ucyA9IHtcbiAgICAgIC8vIEVYVEVOU0lPTlNcbiAgICAgIGFkYXB0ZXJzOiA8SUFkYXB0ZXJzPiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgICAgYmluZGVyczogPElCaW5kZXJzPGFueT4+IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb21wb25lbnRzOiA8SUNvbXBvbmVudHM+IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBmb3JtYXR0ZXJzOiA8SUZvcm1hdHRlcnM+IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgICAgIC8vIG90aGVyXG4gICAgICBzdGFyQmluZGVyczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAgICAgLy8gc2lnaHRnbGFzc1xuICAgICAgcm9vdEludGVyZmFjZTogT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY29tcG9uZW50LmJpbmRlcnMpIHtcbiAgICAgIG9wdGlvbnMuYmluZGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgb3B0aW9ucy5iaW5kZXJzLCB0aGlzLmNvbXBvbmVudC5iaW5kZXJzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29tcG9uZW50LmZvcm1hdHRlcnMpIHtcbiAgICAgIG9wdGlvbnMuZm9ybWF0dGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgb3B0aW9ucy5mb3JtYXR0ZXJzLCB0aGlzLmNvbXBvbmVudC5mb3JtYXR0ZXJzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29tcG9uZW50LmNvbXBvbmVudHMpIHtcbiAgICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgb3B0aW9ucy5jb21wb25lbnRzLCB0aGlzLmNvbXBvbmVudC5jb21wb25lbnRzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29tcG9uZW50LmFkYXB0ZXJzKSB7XG4gICAgICBvcHRpb25zLmFkYXB0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmFkYXB0ZXJzLCB0aGlzLmNvbXBvbmVudC5hZGFwdGVycyk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5iaW5kZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmJpbmRlcnMsIHRoaXMudmlldy5vcHRpb25zLmJpbmRlcnMpO1xuICAgIG9wdGlvbnMuZm9ybWF0dGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgb3B0aW9ucy5mb3JtYXR0ZXJzLCB0aGlzLnZpZXcub3B0aW9ucy5mb3JtYXR0ZXJzKTtcbiAgICBvcHRpb25zLmNvbXBvbmVudHMgPSBVdGlscy5jb25jYXQoZmFsc2UsIG9wdGlvbnMuY29tcG9uZW50cywgdGhpcy52aWV3Lm9wdGlvbnMuY29tcG9uZW50cyk7XG4gICAgb3B0aW9ucy5hZGFwdGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgb3B0aW9ucy5hZGFwdGVycywgdGhpcy52aWV3Lm9wdGlvbnMuYWRhcHRlcnMpO1xuXG4gICAgb3B0aW9ucy5wcmVmaXggPSB0aGlzLmNvbXBvbmVudC5wcmVmaXggPyB0aGlzLmNvbXBvbmVudC5wcmVmaXggOiB0aGlzLnZpZXcub3B0aW9ucy5wcmVmaXg7XG4gICAgb3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlcnMgPSB0aGlzLmNvbXBvbmVudC50ZW1wbGF0ZURlbGltaXRlcnMgPyB0aGlzLmNvbXBvbmVudC50ZW1wbGF0ZURlbGltaXRlcnMgOiB0aGlzLnZpZXcub3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlcnM7XG4gICAgb3B0aW9ucy5yb290SW50ZXJmYWNlID0gdGhpcy5jb21wb25lbnQucm9vdEludGVyZmFjZSA/IHRoaXMuY29tcG9uZW50LnJvb3RJbnRlcmZhY2UgOiB0aGlzLnZpZXcub3B0aW9ucy5yb290SW50ZXJmYWNlO1xuICAgIG9wdGlvbnMucHJlbG9hZERhdGEgPSB0aGlzLmNvbXBvbmVudC5wcmVsb2FkRGF0YSA/IHRoaXMuY29tcG9uZW50LnByZWxvYWREYXRhIDogdGhpcy52aWV3Lm9wdGlvbnMucHJlbG9hZERhdGE7XG4gICAgb3B0aW9ucy5oYW5kbGVyID0gdGhpcy5jb21wb25lbnQuaGFuZGxlciA/IHRoaXMuY29tcG9uZW50LmhhbmRsZXIgOiB0aGlzLnZpZXcub3B0aW9ucy5oYW5kbGVyO1xuXG4gICAgLy8gZ2V0IGFsbCBzdGFyQmluZGVycyBmcm9tIGF2YWlsYWJsZSBiaW5kZXJzXG4gICAgb3B0aW9ucy5zdGFyQmluZGVycyA9IE9iamVjdC5rZXlzKG9wdGlvbnMuYmluZGVycykuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgIHJldHVybiBrZXkuaW5kZXhPZignKicpID4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcmNlcHRzIGB0aW55YmluZC5CaW5kaW5nOjpiaW5kYCB0byBidWlsZCBgdGhpcy5jb21wb25lbnRWaWV3YCB3aXRoIGEgbG9jYWxpemVkXG4gICAqIG1hcCBvZiBtb2RlbHMgZnJvbSB0aGUgcm9vdCB2aWV3LiBCaW5kIGB0aGlzLmNvbXBvbmVudFZpZXdgIG9uIHN1YnNlcXVlbnQgY2FsbHMuXG4gICAqL1xuICBwdWJsaWMgYmluZCgpIHtcbiAgICBpZiAoIXRoaXMuZWwuX2JvdW5kKSB7XG5cbiAgICAgIGNvbnN0IGlubmVySFRNTCA9IHRoaXMuY29tcG9uZW50LnRlbXBsYXRlLmNhbGwodGhpcyk7XG4gICAgICAvLyBpZiBpbm5lckhUTUwgaXMgbnVsbCB0aGlzIGNvbXBvbmVudCB1c2VzIHRoZSBpbm5lckhUTUwgd2hpY2ggaGUgYWxyZWFkeSBoYXMhXG4gICAgICBpZiAoaW5uZXJIVE1MICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuZWwuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIHRoZXJlJ3MgYSBjeWNsaWMgZGVwZW5kZW5jeSB0aGF0IG1ha2VzIGltcG9ydGVkIFZpZXcgYSBkdW1teSBvYmplY3QuIFVzZSB0aW55YmluZC5iaW5kXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHNjb3BlID0gdGhpcy5jb21wb25lbnQuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIHRoaXMuZWwsIHRoaXMubG9jYWxzKCkpO1xuICAgICAgY29uc3QgdmlldyA9IG5ldyBWaWV3KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZWwuY2hpbGROb2RlcyksIHNjb3BlLCB0aGlzLmdldE1lcmdlZE9wdGlvbnMoKSk7XG4gICAgICB2aWV3LmJpbmQoKTtcblxuICAgICAgdGhpcy5lbC5fYm91bmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuYmluZCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwYXJzZVRhcmdldCgpIHtcblxuICAgIC8vIHBhcnNlIGNvbXBvbmVudCBhdHRyaWJ1dGVzXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gdGhpcy5lbC5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICAvLyBpZiBhdHRyaWJ1dGUgc3RhcnRzIG5vdCB3aXRoIGJpbmRpbmcgcHJlZml4LiBFLmcuIHJ2LVxuICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lLmluZGV4T2YodGhpcy5iaW5kaW5nUHJlZml4KSAhPT0gMCkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSB0aGlzLmNhbWVsQ2FzZShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICBjb25zdCBwYXJzZWREZWNsYXJhdGlvbiA9IHBhcnNlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pO1xuXG4gICAgICAgIGlmIChwYXJzZWREZWNsYXJhdGlvbi5waXBlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdGb3JtYXR0ZXJzIG9uIGNvbXBvbmVudCBhcmd1bWVudHMgbm90IHN1cHBvcnRlZCBmb3IgdGhlIG1vbWVudCcsIHBhcnNlZERlY2xhcmF0aW9uLnBpcGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGlwZXNbcHJvcGVydHlOYW1lXSA9IHBhcnNlZERlY2xhcmF0aW9uLnBpcGVzO1xuXG4gICAgICAgIGNvbnN0IHRva2VuID0gcGFyc2VUeXBlKHBhcnNlZERlY2xhcmF0aW9uLmtleXBhdGgpO1xuXG4gICAgICAgIC8vIGlmIGNvbXBvbmVudCBmb3JjZSB0aGlzIHByb3BlcnR5TmFtZSBhcyBzdGF0aWNcbiAgICAgICAgaWYgKHR5cGVvZih0aGlzLmNvbXBvbmVudC5zdGF0aWMpICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmNvbXBvbmVudC5zdGF0aWMuaW5kZXhPZihwcm9wZXJ0eU5hbWUpICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMuc3RhdGljW3Byb3BlcnR5TmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gICAgICAgICAgdGhpcy5zdGF0aWNbcHJvcGVydHlOYW1lXSA9IHRva2VuLnZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IEtFWVBBVEgpIHtcbiAgICAgICAgICB0aGlzLmtleXBhdGhzW3Byb3BlcnR5TmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgICAgdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXSA9IHRoaXMub2JzZXJ2ZSh0aGlzLnZpZXcubW9kZWxzLCB0aGlzLmtleXBhdGhzW3Byb3BlcnR5TmFtZV0sIHRoaXMpO1xuICAgICAgICAgIC8vIG1vZGVsIGJpZGluZyBpcyBjYWxsZWQgaW4gdGhpcy5zeW5jISFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3QgcGFyc2UgY29tcG9uZW50IGF0dHJpYnV0ZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRk9STUFUVEVSUyBUT0RPXG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIHBhcnNlcyB0aGUgZm9ybWF0dGVycyBpbiBhcmd1bWVudHNcbiAgICogQHBhcmFtIGZvcm1hdHRlckluZGV4XG4gICAqL1xuICAvLyBwYXJzZUZvcm1hdHRlckFyZ3VtZW50c1Byb3BlcnR5KGFyZ3M6IHN0cmluZ1tdLCBmb3JtYXR0ZXJJbmRleDogbnVtYmVyLCBwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgLy8gICByZXR1cm4gYXJnc1xuICAvLyAgIC5tYXAocGFyc2VUeXBlKVxuICAvLyAgIC5tYXAoKHt0eXBlLCB2YWx1ZX0sIGFpKSA9PiB7XG4gIC8vICAgICBpZiAodHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gIC8vICAgICAgIGNvbnN0IHByaW1pdGl2ZVZhbHVlID0gdmFsdWU7XG4gIC8vICAgICAgIHJldHVybiBwcmltaXRpdmVWYWx1ZTtcbiAgLy8gICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gS0VZUEFUSCkge1xuICAvLyAgICAgICBjb25zb2xlLmxvZygnVE9ETycsIHByb3BlcnR5TmFtZSk7XG4gIC8vICAgICAgIC8vIGtleXBhdGggaXMgc3RyaW5nXG4gIC8vICAgICAgIGNvbnN0IGtleXBhdGggPSAodmFsdWUgYXMgc3RyaW5nICk7XG4gIC8vICAgICAgIGlmICghdGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV0pIHtcbiAgLy8gICAgICAgICB0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXSA9IHt9O1xuICAvLyAgICAgICB9XG4gIC8vICAgICAgIGlmICghdGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV1bZm9ybWF0dGVySW5kZXhdKSB7XG4gIC8vICAgICAgICAgdGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV1bZm9ybWF0dGVySW5kZXhdID0ge307XG4gIC8vICAgICAgIH1cblxuICAvLyAgICAgICBsZXQgb2JzZXJ2ZXIgPSB0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXVtmb3JtYXR0ZXJJbmRleF1bYWldO1xuXG4gIC8vICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgLy8gICAgICAgICBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZSh0aGlzLnZpZXcubW9kZWxzLCBrZXlwYXRoLCB0aGlzKTtcbiAgLy8gICAgICAgICB0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXVtmb3JtYXR0ZXJJbmRleF1bYWldID0gb2JzZXJ2ZXI7XG4gIC8vICAgICAgIH1cbiAgLy8gICAgICAgcmV0dXJuIG9ic2VydmVyLnZhbHVlKCk7XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gYXJndW1lbnQgdHlwZScpO1xuICAvLyAgICAgfVxuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYWxsIHRoZSBjdXJyZW50IGZvcm1hdHRlcnMgdG8gdGhlIHN1cHBsaWVkIHZhbHVlIGFuZCByZXR1cm5zIHRoZVxuICAgKiBmb3JtYXR0ZWQgdmFsdWUuXG4gICAqL1xuICAvLyBmb3JtYXR0ZWRWYWx1ZXModmFsdWU6IGFueSwgcHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcbiAgLy8gICBpZih0aGlzLnBpcGVzW3Byb3BlcnR5TmFtZV0gPT09IG51bGwpIHtcbiAgLy8gICAgIHRocm93IG5ldyBFcnJvcignZm9ybWF0dGVycyBpcyBudWxsJyk7XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB0aGlzLnBpcGVzW3Byb3BlcnR5TmFtZV0ucmVkdWNlKChyZXN1bHQ6IGFueS8qY2hlY2sgdHlwZSovLCBkZWNsYXJhdGlvbjogc3RyaW5nIC8qY2hlY2sgdHlwZSovLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gIC8vICAgICBsZXQgYXJncyA9IGRlY2xhcmF0aW9uLm1hdGNoKEJpbmRpbmcuRk9STUFUVEVSX0FSR1MpO1xuICAvLyAgICAgaWYoYXJncyA9PT0gbnVsbCkge1xuICAvLyAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFyZ3MgbWF0Y2hlZCBmcm9tIEZPUk1BVFRFUl9BUkdTJyk7XG4gIC8vICAgICB9XG4gIC8vICAgICBsZXQgaWQgPSBhcmdzLnNoaWZ0KCk7XG4gIC8vICAgICBpZighaWQpIHtcbiAgLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpZCBmb3VuZCBpbiBhcmdzJyk7XG4gIC8vICAgICB9XG4gIC8vICAgICBsZXQgZm9ybWF0dGVyID0gdGhpcy52aWV3Lm9wdGlvbnMuZm9ybWF0dGVyc1tpZF07XG5cbiAgLy8gICAgIGNvbnN0IHByb2Nlc3NlZEFyZ3MgPSB0aGlzLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzUHJvcGVydHkoYXJncywgaW5kZXgsIHByb3BlcnR5TmFtZSk7XG5cbiAgLy8gICAgIGlmIChmb3JtYXR0ZXIgJiYgKGZvcm1hdHRlci5yZWFkIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gIC8vICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5yZWFkKHJlc3VsdCwgLi4ucHJvY2Vzc2VkQXJncyk7XG4gIC8vICAgICB9IGVsc2UgaWYgKGZvcm1hdHRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gIC8vICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlcihyZXN1bHQsIC4uLnByb2Nlc3NlZEFyZ3MpO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcbiAgLy8gICB9LCB2YWx1ZSk7XG4gIC8vIH1cblxuICAvKipcbiAgICogSW50ZXJjZXB0IGB0aW55YmluZC5CaW5kaW5nOjp1bmJpbmRgIHRvIGJlIGNhbGxlZCBvbiBgdGhpcy5jb21wb25lbnRWaWV3YC5cbiAgICovXG4gIHB1YmxpYyB1bmJpbmQoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5vYnNlcnZlcnMpLmZvckVhY2goKHByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXS51bm9ic2VydmUoKTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybWF0dGVyc09ic2VydmVycykuZm9yRWFjaCgocHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXSkuZm9yRWFjaCgoZm9ybWF0dGVySW5kZXgpID0+IHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV1bZm9ybWF0dGVySW5kZXhdKS5mb3JFYWNoKChhaSkgPT4ge1xuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyc09ic2VydmVyc1twcm9wZXJ0eU5hbWVdW2Zvcm1hdHRlckluZGV4XVthaV0udW5vYnNlcnZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnRWaWV3KSB7XG4gICAgICB0aGlzLmNvbXBvbmVudFZpZXcudW5iaW5kLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQUklNSVRJVkUsIEtFWVBBVEgsIHBhcnNlVHlwZSB9IGZyb20gJy4vcGFyc2Vycyc7XG5pbXBvcnQgeyBPYnNlcnZlciwgSU9ic2VydmVyU3luY0NhbGxiYWNrIH0gZnJvbSAnLi9vYnNlcnZlcic7XG5pbXBvcnQgeyBCaW5kZXIsIElPbmVXYXlCaW5kZXIsIElUd29XYXlCaW5kZXIgfSBmcm9tICcuL2JpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgZ2V0SW5wdXRWYWx1ZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgSU9uZVR3b0Zvcm1hdHRlciB9IGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElCaW5kYWJsZSB7XG5cbiAgYmluZGVyPzogQmluZGVyPGFueT47XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGJpbmRlciB3aXRob3V0IHRoZSBwcmVmaXhcbiAgICovXG4gIHR5cGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBPYnNlcnZlcyB0aGUgb2JqZWN0IGtleXBhdGhcbiAgICogQHBhcmFtIG9ialxuICAgKiBAcGFyYW0ga2V5cGF0aFxuICAgKi9cbiAgb2JzZXJ2ZShvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKTogT2JzZXJ2ZXI7XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgdG8gdGhlIG1vZGVsIGZvciBjaGFuZ2VzIGF0IHRoZSBzcGVjaWZpZWQga2V5cGF0aC4gQmktZGlyZWN0aW9uYWxcbiAgICogcm91dGluZXMgd2lsbCBhbHNvIGxpc3RlbiBmb3IgY2hhbmdlcyBvbiB0aGUgZWxlbWVudCB0byBwcm9wYWdhdGUgdGhlbSBiYWNrXG4gICAqIHRvIHRoZSBtb2RlbC5cbiAgICovXG4gIGJpbmQoKTogdm9pZDtcblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gdGhlIG1vZGVsIGFuZCB0aGUgZWxlbWVudC5cbiAgICovXG4gIHVuYmluZCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBiaW5kaW5nJ3MgbW9kZWwgZnJvbSB3aGF0IGlzIGN1cnJlbnRseSBzZXQgb24gdGhlIHZpZXcuIFVuYmluZHNcbiAgICogdGhlIG9sZCBtb2RlbCBmaXJzdCBhbmQgdGhlbiByZS1iaW5kcyB3aXRoIHRoZSBuZXcgbW9kZWwuXG4gICAqIEBwYXJhbSB7YW55fSBtb2RlbHNcbiAgICovXG4gIHVwZGF0ZT8obW9kZWxzOiBhbnkpOiB2b2lkO1xuXG4gIHB1Ymxpc2g/KCk6IHZvaWQ7XG5cbiAgc3luYz8oKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0dGVyT2JzZXJ2ZXJzIHtcbiAgW2tleTogc3RyaW5nXToge1xuICAgIFtrZXk6IHN0cmluZ106IE9ic2VydmVyLFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBldmVudEhhbmRsZXJGdW5jdGlvbiA9IChldmVudDogRXZlbnQpID0+IHZvaWQ7XG5cbi8qKlxuICogIEEgc2luZ2xlIGJpbmRpbmcgYmV0d2VlbiBhIG1vZGVsIGF0dHJpYnV0ZSBhbmQgYSBET00gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJpbmRpbmcgaW1wbGVtZW50cyBJQmluZGFibGUge1xuXG4gIHB1YmxpYyBzdGF0aWMgRk9STUFUVEVSX0FSR1MgPSAgL1teXFxzJ10rfCcoW14nXXwnW15cXHNdKSonfFwiKFteXCJdfFwiW15cXHNdKSpcIi9nO1xuICBwdWJsaWMgc3RhdGljIEZPUk1BVFRFUl9TUExJVCA9IC9cXHMrLztcblxuICBwdWJsaWMgdmFsdWU/OiBhbnk7XG4gIHB1YmxpYyBvYnNlcnZlcj86IE9ic2VydmVyO1xuICBwdWJsaWMgdmlldzogVmlldztcbiAgcHVibGljIGVsOiBIVE1MRWxlbWVudDtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGJpbmRlciB3aXRob3V0IHRoZSBwcmVmaXhcbiAgICovXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmcgfCBudWxsO1xuICBwdWJsaWMgYmluZGVyOiBCaW5kZXI8YW55PjtcbiAgcHVibGljIGZvcm1hdHRlcnM6IHN0cmluZ1tdIHwgbnVsbDtcbiAgcHVibGljIGZvcm1hdHRlck9ic2VydmVyczogSUZvcm1hdHRlck9ic2VydmVycyA9IHt9O1xuICBwdWJsaWMga2V5cGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIEFyZ3VtZW50cyBwYXJzZWQgZnJvbSBzdGFyIGJpbmRlcnMsIGUuZy4gb24gZm9vLSotKiBhcmdzWzBdIGlzIHRoZSBmaXJzdCBzdGFyLCBhcmdzWzFdIHRoZSBzZWNvbmQtXG4gICAqL1xuICBwdWJsaWMgYXJnczogc3RyaW5nW10gfCBudWxsO1xuICAvKipcbiAgICpcbiAgICovXG4gIHB1YmxpYyBtb2RlbD86IGFueTtcbiAgLyoqXG4gICAqIEhUTUwgQ29tbWVudCB0byBtYXJrIGEgYmluZGluZyBpbiB0aGUgRE9NXG4gICAqL1xuICBwdWJsaWMgbWFya2VyPzogQ29tbWVudDtcbiAgLyoqXG4gICAqIFVzZWQgaW4gY29tcG9uZW50IGJpbmRpbmdzLiBUT0RPIGUuZy4gbW92ZSB0byBDb21wb25lbnRCaW5kaW5nIG9yIGJpbmRlcnM/XG4gICAqL1xuICBwdWJsaWMgX2JvdW5kPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIGp1c3QgdG8gaGF2ZSBhIHZhbHVlIHdoZXJlIHdlIGNvdWxkIHN0b3JlIGN1c3RvbSBkYXRhXG4gICAqL1xuICBwdWJsaWMgY3VzdG9tRGF0YT86IGFueTtcblxuICAvKipcbiAgICogQWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBiaW5kaW5nIGlzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvcjsgdGhlXG4gICAqIGNvbnRhaW5pbmcgdmlldywgdGhlIERPTSBub2RlLCB0aGUgdHlwZSBvZiBiaW5kaW5nLCB0aGUgbW9kZWwgb2JqZWN0IGFuZCB0aGVcbiAgICoga2V5cGF0aCBhdCB3aGljaCB0byBsaXN0ZW4gZm9yIGNoYW5nZXMuXG4gICAqIEBwYXJhbSB7Kn0gdmlld1xuICAgKiBAcGFyYW0geyp9IGVsXG4gICAqIEBwYXJhbSB7Kn0gdHlwZVxuICAgKiBAcGFyYW0geyp9IGtleXBhdGhcbiAgICogQHBhcmFtIHsqfSBiaW5kZXJcbiAgICogQHBhcmFtIHsqfSBhcmdzIFRoZSBzdGFydCBiaW5kZXJzLCBvbiBgY2xhc3MtKmAgYXJnc1swXSB3aWwgYmUgdGhlIGNsYXNzbmFtZS5cbiAgICogQHBhcmFtIHsqfSBmb3JtYXR0ZXJzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2aWV3OiBWaWV3LCBlbDogSFRNTEVsZW1lbnQsIHR5cGU6IHN0cmluZyB8IG51bGwsIGtleXBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCwgYmluZGVyOiBCaW5kZXI8YW55PiwgYXJnczogc3RyaW5nW10gfCBudWxsLCBmb3JtYXR0ZXJzOiBzdHJpbmdbXSB8IG51bGwpIHtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMua2V5cGF0aCA9IGtleXBhdGg7XG4gICAgdGhpcy5iaW5kZXIgPSBiaW5kZXI7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmZvcm1hdHRlcnMgPSBmb3JtYXR0ZXJzO1xuICAgIHRoaXMubW9kZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jdXN0b21EYXRhID0ge307XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlcyB0aGUgb2JqZWN0IGtleXBhdGhcbiAgICogQHBhcmFtIG9ialxuICAgKiBAcGFyYW0ga2V5cGF0aFxuICAgKi9cbiAgcHVibGljIG9ic2VydmUob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjayk6IE9ic2VydmVyIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmVyKG9iaiwga2V5cGF0aCwgY2FsbGJhY2spO1xuICB9XG5cbiAgcHVibGljIHBhcnNlVGFyZ2V0KCkge1xuICAgIGlmICh0aGlzLmtleXBhdGgpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gcGFyc2VUeXBlKHRoaXMua2V5cGF0aCk7XG4gICAgICBpZiAodG9rZW4udHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0b2tlbi52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gS0VZUEFUSCkge1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gdGhpcy5vYnNlcnZlKHRoaXMudmlldy5tb2RlbHMsIHRoaXMua2V5cGF0aCwgdGhpcyk7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm9ic2VydmVyLnRhcmdldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlIGluIHRva2VuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaXRlcmF0aW9uIGFsaWFzLCB1c2VkIGluIHRoZSBpbnRlcmF0aW9uIGJpbmRlcnMgbGlrZSBgZWFjaC0qYFxuICAgKiBAcGFyYW0geyp9IG1vZGVsTmFtZVxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWtlcmljL3JpdmV0cy9ibG9iL21hc3Rlci9kaXN0L3JpdmV0cy5qcyNMMjZcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWlrZXJpYy9yaXZldHMvYmxvYi9tYXN0ZXIvZGlzdC9yaXZldHMuanMjTDExNzVcbiAgICovXG4gIHB1YmxpYyBnZXRJdGVyYXRpb25BbGlhcyhtb2RlbE5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiAnJScgKyBtb2RlbE5hbWUgKyAnJSc7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJnczogc3RyaW5nW10sIGZvcm1hdHRlckluZGV4OiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIGFyZ3NcbiAgICAubWFwKHBhcnNlVHlwZSlcbiAgICAubWFwKCh7dHlwZSwgdmFsdWV9LCBhaSkgPT4ge1xuICAgICAgaWYgKHR5cGUgPT09IFBSSU1JVElWRSkge1xuICAgICAgICBjb25zdCBwcmltaXRpdmVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcHJpbWl0aXZlVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEtFWVBBVEgpIHtcbiAgICAgICAgLy8ga2V5cGF0aCBpcyBzdHJpbmdcbiAgICAgICAgY29uc3Qga2V5cGF0aCA9ICh2YWx1ZSBhcyBzdHJpbmcgKTtcbiAgICAgICAgaWYgKCF0aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmb3JtYXR0ZXJJbmRleF0pIHtcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmb3JtYXR0ZXJJbmRleF0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvYnNlcnZlciA9IHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2Zvcm1hdHRlckluZGV4XVthaV07XG5cbiAgICAgICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgICAgIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlKHRoaXMudmlldy5tb2RlbHMsIGtleXBhdGgsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2Zvcm1hdHRlckluZGV4XVthaV0gPSBvYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIudmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBhcmd1bWVudCB0eXBlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBhbGwgdGhlIGN1cnJlbnQgZm9ybWF0dGVycyB0byB0aGUgc3VwcGxpZWQgdmFsdWUgYW5kIHJldHVybnMgdGhlXG4gICAqIGZvcm1hdHRlZCB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBmb3JtYXR0ZWRWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0dGVycyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmb3JtYXR0ZXJzIGlzIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVycy5yZWR1Y2UoKHJlc3VsdDogYW55LypjaGVjayB0eXBlKi8sIGRlY2xhcmF0aW9uOiBzdHJpbmcgLypjaGVjayB0eXBlKi8sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSBkZWNsYXJhdGlvbi5tYXRjaChCaW5kaW5nLkZPUk1BVFRFUl9BUkdTKTtcbiAgICAgIGlmIChhcmdzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gYXJncyBtYXRjaGVkIGZyb20gRk9STUFUVEVSX0FSR1MnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlkID0gYXJncy5zaGlmdCgpO1xuICAgICAgaWYgKCFpZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGlkIGZvdW5kIGluIGFyZ3MnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnNbaWRdO1xuXG4gICAgICBjb25zdCBwcm9jZXNzZWRBcmdzID0gdGhpcy5wYXJzZUZvcm1hdHRlckFyZ3VtZW50cyhhcmdzLCBpbmRleCk7XG5cbiAgICAgIGxldCBmb3JtYXR0ZXJSZWFkRnVuY3Rpb247XG5cbiAgICAgIC8vIGdldCBmb3JtYXR0ZXIgcmVhZCBmdW5jaW9uXG4gICAgICBpZiAoZm9ybWF0dGVyICYmIChmb3JtYXR0ZXIucmVhZCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgICBmb3JtYXR0ZXJSZWFkRnVuY3Rpb24gPSBmb3JtYXR0ZXIucmVhZDtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVyIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgZm9ybWF0dGVyUmVhZEZ1bmN0aW9uID0gZm9ybWF0dGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9ybWF0dGVyUmVhZEZ1bmN0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gZm9ybWF0dGVyUmVhZEZ1bmN0aW9uKHJlc3VsdCwgLi4ucHJvY2Vzc2VkQXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXZlbnQgaGFuZGxlciBmb3IgdGhlIGJpbmRpbmcgYXJvdW5kIHRoZSBzdXBwbGllZCBmdW5jdGlvbi5cbiAgICogVGlocyBldmVudCBIYW5kbGVyIGlzIG1haW5seSB1c2VkIGJ5IHRoZSBvbi0qIGJpbmRlclxuICAgKiBAcGFyYW0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgYnkgdGhlIGhhbmRsZXJcbiAgICogQHBhcmFtIGVsIFRoZSBlbGVtZW50IHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb21cbiAgICovXG4gIHB1YmxpYyBldmVudEhhbmRsZXIoZm46IGV2ZW50SGFuZGxlckZ1bmN0aW9uLCBlbDogSFRNTEVsZW1lbnQpOiAoZXY6IEV2ZW50KSA9PiBhbnkge1xuICAgIGNvbnN0IGJpbmRpbmcgPSB0aGlzO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBiaW5kaW5nLnZpZXcub3B0aW9ucy5oYW5kbGVyO1xuXG4gICAgcmV0dXJuIChldikgPT4ge1xuICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaGFuZGxlciBkZWZpbmVkIGluIGJpbmRpbmcudmlldy5vcHRpb25zLmhhbmRsZXInKTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuY2FsbChmbiwgdGhpcywgZXYsIGJpbmRpbmcsIGVsKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHZhbHVlIGZvciB0aGUgYmluZGluZy4gVGhpcyBCYXNpY2FsbHkganVzdCBydW5zIHRoZSBiaW5kaW5nIHJvdXRpbmVcbiAgICogd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWUgZm9ybWF0dGVkLlxuICAgKi9cbiAgcHVibGljIHNldCh2YWx1ZTogYW55KSB7XG4gICAgaWYgKCh2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSAmJiAhKHRoaXMuYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55PiApLmZ1bmN0aW9uKSB7XG4gICAgICB2YWx1ZSA9ICh2YWx1ZSBhcyBJT25lV2F5QmluZGVyPGFueT4gKTtcbiAgICAgIHZhbHVlID0gdGhpcy5mb3JtYXR0ZWRWYWx1ZSh2YWx1ZS5jYWxsKHRoaXMubW9kZWwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSAodmFsdWUgYXMgSVR3b1dheUJpbmRlcjxhbnk+ICk7XG4gICAgICB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVkVmFsdWUodmFsdWUpO1xuICAgIH1cblxuICAgIGxldCByb3V0aW5lRm47XG4gICAgaWYgKHRoaXMuYmluZGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRlciBpcyBudWxsJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmJpbmRlci5oYXNPd25Qcm9wZXJ0eSgncm91dGluZScpKSB7XG4gICAgICB0aGlzLmJpbmRlciA9ICggdGhpcy5iaW5kZXIgYXMgSVR3b1dheUJpbmRlcjxhbnk+KTtcbiAgICAgIHJvdXRpbmVGbiA9IHRoaXMuYmluZGVyLnJvdXRpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYmluZGVyID0gKCB0aGlzLmJpbmRlciBhcyBJT25lV2F5QmluZGVyPGFueT4pO1xuICAgICAgcm91dGluZUZuID0gdGhpcy5iaW5kZXI7XG4gICAgfVxuXG4gICAgaWYgKHJvdXRpbmVGbiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICByb3V0aW5lRm4uY2FsbCh0aGlzLCB0aGlzLmVsLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN5bmNzIHVwIHRoZSB2aWV3IGJpbmRpbmcgd2l0aCB0aGUgbW9kZWwuXG4gICAqL1xuICBwdWJsaWMgc3luYygpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMub2JzZXJ2ZXIudGFyZ2V0O1xuICAgICAgdGhpcy5zZXQodGhpcy5vYnNlcnZlci52YWx1ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXQodGhpcy52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyB0aGUgdmFsdWUgY3VycmVudGx5IHNldCBvbiB0aGUgaW5wdXQgZWxlbWVudCBiYWNrIHRvIHRoZSBtb2RlbC5cbiAgICovXG4gIHB1YmxpYyBwdWJsaXNoKCkge1xuICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICBpZiAodGhpcy5mb3JtYXR0ZXJzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZm9ybWF0dGVycyBpcyBudWxsJyk7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVycy5yZWR1Y2VSaWdodCgocmVzdWx0OiBhbnkvKmNoZWNrIHR5cGUqLywgZGVjbGFyYXRpb246IHN0cmluZyAvKmNoZWNrIHR5cGUqLywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBjb25zdCBhcmdzID0gZGVjbGFyYXRpb24uc3BsaXQoQmluZGluZy5GT1JNQVRURVJfU1BMSVQpO1xuICAgICAgICBjb25zdCBpZCA9IGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaWQgbm90IGRlZmluZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXR0ZXIgPSB0aGlzLnZpZXcub3B0aW9ucy5mb3JtYXR0ZXJzW2lkXTtcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkQXJncyA9IHRoaXMucGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJncywgaW5kZXgpO1xuXG4gICAgICAgIGlmIChmb3JtYXR0ZXIgJiYgKGZvcm1hdHRlciBhcyBJT25lVHdvRm9ybWF0dGVyKS5wdWJsaXNoKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGZvcm1hdHRlciBhcyBJT25lVHdvRm9ybWF0dGVyKS5wdWJsaXNoKHJlc3VsdCwgLi4ucHJvY2Vzc2VkQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sIHRoaXMuZ2V0VmFsdWUoKHRoaXMuZWwgYXMgSFRNTElucHV0RWxlbWVudCkpKTtcblxuICAgICAgdGhpcy5vYnNlcnZlci5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgdG8gdGhlIG1vZGVsIGZvciBjaGFuZ2VzIGF0IHRoZSBzcGVjaWZpZWQga2V5cGF0aC4gQmktZGlyZWN0aW9uYWxcbiAgICogcm91dGluZXMgd2lsbCBhbHNvIGxpc3RlbiBmb3IgY2hhbmdlcyBvbiB0aGUgZWxlbWVudCB0byBwcm9wYWdhdGUgdGhlbSBiYWNrXG4gICAqIHRvIHRoZSBtb2RlbC5cbiAgICovXG4gIHB1YmxpYyBiaW5kKCkge1xuICAgIHRoaXMucGFyc2VUYXJnZXQoKTtcblxuICAgIGlmICh0aGlzLmJpbmRlciAmJiB0aGlzLmJpbmRlci5oYXNPd25Qcm9wZXJ0eSgnYmluZCcpKSB7XG4gICAgICB0aGlzLmJpbmRlciA9ICh0aGlzLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pO1xuICAgICAgaWYgKCF0aGlzLmJpbmRlci5iaW5kICYmIHR5cGVvZih0aGlzLmJpbmRlci5iaW5kKSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoZSBtZXRob2QgYmluZCBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgdGhpcy5iaW5kZXIuYmluZC5jYWxsKHRoaXMsIHRoaXMuZWwpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXcub3B0aW9ucy5wcmVsb2FkRGF0YSkge1xuICAgICAgdGhpcy5zeW5jKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlcyBmcm9tIHRoZSBtb2RlbCBhbmQgdGhlIGVsZW1lbnQuXG4gICAqL1xuICBwdWJsaWMgdW5iaW5kKCkge1xuICAgIGlmICh0aGlzLmJpbmRlciA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kZXIgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5iaW5kZXIuaGFzT3duUHJvcGVydHkoJ2JpbmQnKSkge1xuICAgICAgdGhpcy5iaW5kZXIgPSAoIHRoaXMuYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55Pik7XG4gICAgICBpZiAodGhpcy5iaW5kZXIudW5iaW5kKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLnVuYmluZC5jYWxsKHRoaXMsIHRoaXMuZWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICB0aGlzLm9ic2VydmVyLnVub2JzZXJ2ZSgpO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzKS5mb3JFYWNoKChmaSkgPT4ge1xuICAgICAgY29uc3QgYXJncyA9IHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2ZpXTtcblxuICAgICAgT2JqZWN0LmtleXMoYXJncykuZm9yRWFjaCgoYWkpID0+IHtcbiAgICAgICAgYXJnc1thaV0udW5vYnNlcnZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzID0ge307XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYmluZGluZydzIG1vZGVsIGZyb20gd2hhdCBpcyBjdXJyZW50bHkgc2V0IG9uIHRoZSB2aWV3LiBVbmJpbmRzXG4gICAqIHRoZSBvbGQgbW9kZWwgZmlyc3QgYW5kIHRoZW4gcmUtYmluZHMgd2l0aCB0aGUgbmV3IG1vZGVsLlxuICAgKiBAcGFyYW0ge2FueX0gbW9kZWxzXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKG1vZGVsczogYW55ID0ge30pIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5tb2RlbCA9IHRoaXMub2JzZXJ2ZXIudGFyZ2V0O1xuICAgIH1cbiAgICBpZiAodGhpcy5iaW5kZXIgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYmluZGVyIGlzIG51bGwnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYmluZGVyLmhhc093blByb3BlcnR5KCd1cGRhdGUnKSkge1xuICAgICAgdGhpcy5iaW5kZXIgPSAoIHRoaXMuYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55Pik7XG4gICAgICBpZiAodGhpcy5iaW5kZXIudXBkYXRlKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZS5jYWxsKHRoaXMsIG1vZGVscyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZWxlbWVudHMgdmFsdWVcbiAgICogQHBhcmFtIGVsXG4gICAqL1xuICBwdWJsaWMgZ2V0VmFsdWUoZWw6IEhUTUxTZWxlY3RFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudCkge1xuICAgIGlmICh0aGlzLmJpbmRlciA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kZXIgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5iaW5kZXIuaGFzT3duUHJvcGVydHkoJ2dldFZhbHVlJykpIHtcbiAgICAgIHRoaXMuYmluZGVyID0gKCB0aGlzLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pO1xuICAgICAgaWYgKHR5cGVvZih0aGlzLmJpbmRlci5nZXRWYWx1ZSkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnZXRWYWx1ZSBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYmluZGVyLmdldFZhbHVlLmNhbGwodGhpcywgZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0SW5wdXRWYWx1ZShlbCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgQmluZGluZywgSUJpbmRhYmxlIH0gZnJvbSAnLi9iaW5kaW5nJztcbi8qKlxuICogT25lIHdheSBiaW5kZXIgaW50ZXJmYWNlXG4gKi9cbmV4cG9ydCB0eXBlIElPbmVXYXlCaW5kZXI8VmFsdWVUeXBlPiA9ICh0aGlzOiBCaW5kaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgdmFsdWU6IFZhbHVlVHlwZSkgPT4gdm9pZDtcblxuLyoqXG4gKiBUbyB3YXkgYmluZGVyIGludGVyZmFjZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElUd29XYXlCaW5kZXI8VmFsdWVUeXBlPiB7XG4gIHJvdXRpbmU6ICh0aGlzOiBCaW5kaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCwgdmFsdWU6IFZhbHVlVHlwZSkgPT4gdm9pZDtcbiAgYmluZD86ICh0aGlzOiBCaW5kaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcbiAgdW5iaW5kPzogKHRoaXM6IEJpbmRpbmcsIGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xuICB1cGRhdGU/OiAodGhpczogQmluZGluZywgbW9kZWw6IGFueSkgPT4gdm9pZDtcbiAgZ2V0VmFsdWU/OiAodGhpczogQmluZGluZywgZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XG4gIGJsb2NrPzogYm9vbGVhbjtcbiAgZnVuY3Rpb24/OiBib29sZWFuO1xuICBwdWJsaXNoZXM/OiBib29sZWFuO1xuICBwcmlvcml0eT86IG51bWJlcjtcbiAgLyoqXG4gICAqIElmIHlvdSB3YW50IHRvIHNhdmUgY3VzdG9tIGRhdGEgaW4geW91ciBiaW5kZXIgbG9naWNcbiAgICovXG4gIGN1c3RvbURhdGE/OiBhbnk7XG59XG5cbi8qKlxuICogQSBiaW5kZXIgY2FuIGJlIGEgb25lIHdheSBiaW5kZXIgb3IgYSB0d28gd2F5IGJpbmRlclxuICovXG5leHBvcnQgdHlwZSBCaW5kZXI8VmFsdWVUeXBlPiA9IElPbmVXYXlCaW5kZXI8VmFsdWVUeXBlPiB8IElUd29XYXlCaW5kZXI8VmFsdWVUeXBlPiB8IElCaW5kYWJsZTtcblxuLyoqXG4gKiBBIGxpc3Qgb2YgYmluZGVycyB3aXRoIGFueSBrZXkgbmFtZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElCaW5kZXJzPFZhbHVlVHlwZT4ge1xuICBbbmFtZTogc3RyaW5nXTogQmluZGVyPFZhbHVlVHlwZT47XG59XG5cbi8qKlxuICogVGhpcyB3cmFwcGVyIGkgdXNlZCB0byBzdG9yZSB0aGUgYmluZGVyIG5hbWUgaW4gdGhlIG5hbWUgcHJvcGVydHlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmluZGVyV3JhcHBlclJlc3VsdCB7XG4gIG5hbWU6IHN0cmluZztcbiAgYmluZGVyOiBCaW5kZXI8YW55Pjtcbn1cblxuLyoqXG4gKiBUaGlzIHdyYXBwZXIgaXMgdXNlZCBpZiB5b3UgbmVlZCB0byBwYXNzIG92ZXIgc29tZSBkZXBlbmRlbmNpZXMgZm9yIHlvdXIgYmluZGVyXG4gKi9cbmV4cG9ydCB0eXBlIEJpbmRlcldyYXBwZXIgPSAoLi4uZGVwczogYW55W10pID0+IElCaW5kZXJXcmFwcGVyUmVzdWx0O1xuXG5leHBvcnQgY2xhc3MgQmluZGVyc1NlcnZpY2Uge1xuICBwcml2YXRlIGJpbmRlcnM6IElCaW5kZXJzPGFueT47XG4gIHByaXZhdGUgZGVidWcgPSBEZWJ1ZygnYmluZGVyczpCaW5kZXJzU2VydmljZScpO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYmluZGVycztcbiAgICovXG4gIGNvbnN0cnVjdG9yKGJpbmRlcnM6IElCaW5kZXJzPGFueT4pIHtcbiAgICB0aGlzLmJpbmRlcnMgPSBiaW5kZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIGJpbmRlciB3cmFwcGVyXG4gICAqIEBwYXJhbSBiaW5kZXJcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIHB1YmxpYyByZWdpc3RXcmFwcGVyKGJpbmRlcldyYXBwZXI6IElCaW5kZXJXcmFwcGVyUmVzdWx0LCBuYW1lPzogc3RyaW5nKTogSUJpbmRlcnM8YW55PiB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBuYW1lID0gYmluZGVyV3JhcHBlci5uYW1lO1xuICAgIH1cbiAgICBjb25zdCBiaW5kZXIgPSAoYmluZGVyV3JhcHBlciBhcyBJQmluZGVyV3JhcHBlclJlc3VsdCkuYmluZGVyO1xuICAgIHRoaXMuYmluZGVyc1tuYW1lXSA9IGJpbmRlcjtcbiAgICByZXR1cm4gdGhpcy5iaW5kZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIGJpbmRlciB3aXRoIGhpcyBuYW1lXG4gICAqIEBwYXJhbSBiaW5kZXJcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIHB1YmxpYyByZWdpc3QoYmluZGVyOiBCaW5kZXI8YW55PiB8IElCaW5kZXJXcmFwcGVyUmVzdWx0LCBuYW1lPzogc3RyaW5nKTogSUJpbmRlcnM8YW55PiB7XG5cbiAgICBpZiAoYmluZGVyLmhhc093blByb3BlcnR5KCdiaW5kZXInKSkge1xuICAgICAgYmluZGVyID0gKGJpbmRlciBhcyBJQmluZGVyV3JhcHBlclJlc3VsdCk7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgbmFtZSA9IChiaW5kZXIgYXMgYW55KS5uYW1lO1xuICAgICAgfVxuICAgICAgYmluZGVyID0gYmluZGVyLmJpbmRlcjtcbiAgICB9XG5cbiAgICB0aGlzLmRlYnVnKCduYW1lJywgbmFtZSwgYmluZGVyKTtcblxuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbQmluZGVyc1NlcnZpY2VdIG5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICAvLyBpZiBCaW5kZXI8YW55PlxuICAgIHRoaXMuYmluZGVyc1tuYW1lXSA9IChiaW5kZXIgYXMgQmluZGVyPGFueT4pO1xuICAgIHJldHVybiB0aGlzLmJpbmRlcnM7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgc2V0IG9mIGJpbmRlcnNcbiAgICogQHBhcmFtIGJpbmRlcnNcbiAgICovXG4gIHB1YmxpYyByZWdpc3RzKGJpbmRlcnM6IElCaW5kZXJzPGFueT4pOiBJQmluZGVyczxhbnk+IHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gYmluZGVycykge1xuICAgICAgaWYgKGJpbmRlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdGhpcy5yZWdpc3QoYmluZGVyc1tuYW1lXSwgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmJpbmRlcnM7XG4gIH1cbn1cbiIsIi8qKlxuICogVGhlIGRlZmF1bHQgYC5gIGFkYXB0ZXIgdGhhdCBjb21lcyB3aXRoIHRpbnliaW5kLmpzLiBBbGxvd3Mgc3Vic2NyaWJpbmcgdG9cbiAqIHByb3BlcnRpZXMgb24gcGxhaW4gb2JqZWN0cywgaW1wbGVtZW50ZWQgaW4gRVM1IG5hdGl2ZXMgdXNpbmdcbiAqIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgLlxuICovXG5cbmltcG9ydCB7IElPYnNlcnZlclN5bmNDYWxsYmFjayB9IGZyb20gJy4vb2JzZXJ2ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZWYge1xuICBjYWxsYmFja3M6IGFueVtdO1xuICBwb2ludGVyczogYW55W107XG59XG5cbi8qKlxuICogVE9ETyBGb3Igd2hhdCBpcyB0aGlzP1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElSVkFycmF5IGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gIF9fcnY6IGFueTtcbn1cblxuZXhwb3J0IHR5cGUgQWRhcHRlckZ1bmN0aW9uID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFkYXB0ZXIge1xuICBjb3VudGVyOiBudW1iZXI7XG4gIHdlYWttYXA6IGFueTtcbiAgd2Vha1JlZmVyZW5jZTogKG9iajogYW55KSA9PiBhbnk7IC8vID0+IF9fcnYgP1xuICBjbGVhbnVwV2Vha1JlZmVyZW5jZTogKHJlZjogSVJlZiwgaWQ6IG51bWJlcikgPT4gdm9pZDtcbiAgc3R1YkZ1bmN0aW9uOiAob2JqOiBhbnksIGZuOiBzdHJpbmcpID0+IGFueTsgLy8gPT4gcmVzcG9uc2UgP1xuICBvYnNlcnZlTXV0YXRpb25zOiAob2JqOiBhbnksIHJlZjogc3RyaW5nLCBrZXlwYXRoOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHVub2JzZXJ2ZU11dGF0aW9uczogKG9iajogSVJWQXJyYXksIHJlZjogc3RyaW5nLCBrZXlwYXRoOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9ic2VydmU6IChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKSA9PiB2b2lkO1xuICB1bm9ic2VydmU6IChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKSA9PiB2b2lkO1xuICBnZXQ6IChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nKSA9PiBhbnk7XG4gIHNldDogKG9iajogYW55LCBrZXlwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFkYXB0ZXJzIHtcbiAgW25hbWU6IHN0cmluZ106IElBZGFwdGVyO1xufVxuXG5leHBvcnQgY2xhc3MgQWRhcHRlciBpbXBsZW1lbnRzIElBZGFwdGVyIHtcblxuICBwdWJsaWMgc3RhdGljIEFSUkFZX01FVEhPRFMgPSBbXG4gICAgJ3B1c2gnLFxuICAgICdwb3AnLFxuICAgICdzaGlmdCcsXG4gICAgJ3Vuc2hpZnQnLFxuICAgICdzb3J0JyxcbiAgICAncmV2ZXJzZScsXG4gICAgJ3NwbGljZScsXG4gIF07XG5cbiAgcHVibGljIGNvdW50ZXI6IG51bWJlciA9IDA7XG4gIHB1YmxpYyB3ZWFrbWFwOiBhbnkgPSB7fTtcblxuICBwdWJsaWMgd2Vha1JlZmVyZW5jZShvYmo6IGFueSkge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KCdfX3J2JykpIHtcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5jb3VudGVyKys7XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX3J2Jywge1xuICAgICAgICB2YWx1ZTogaWQsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMud2Vha21hcFtvYmouX19ydl0pIHtcbiAgICAgIHRoaXMud2Vha21hcFtvYmouX19ydl0gPSB7XG4gICAgICAgIGNhbGxiYWNrczoge30sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuICB9XG5cbiAgcHVibGljIGNsZWFudXBXZWFrUmVmZXJlbmNlKHJlZjogSVJlZiwgaWQ6IG51bWJlcikge1xuICAgIGlmICghT2JqZWN0LmtleXMocmVmLmNhbGxiYWNrcykubGVuZ3RoKSB7XG4gICAgICBpZiAoIShyZWYucG9pbnRlcnMgJiYgT2JqZWN0LmtleXMocmVmLnBvaW50ZXJzKS5sZW5ndGgpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLndlYWttYXBbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdHViRnVuY3Rpb24ob2JqOiBhbnksIGZuOiBzdHJpbmcpIHtcbiAgICBjb25zdCBvcmlnaW5hbCA9IG9ialtmbl07XG4gICAgY29uc3QgbWFwID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaik7XG4gICAgY29uc3Qgd2Vha21hcCA9IHRoaXMud2Vha21hcDtcblxuICAgIG9ialtmbl0gPSAoLi4uYXJnczogYW55W10pOiBBZGFwdGVyRnVuY3Rpb24gPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBvcmlnaW5hbC5hcHBseShvYmosIGFyZ3MpO1xuXG4gICAgICBPYmplY3Qua2V5cyhtYXAucG9pbnRlcnMpLmZvckVhY2goKHIpID0+IHtcbiAgICAgICAgY29uc3QgayA9IG1hcC5wb2ludGVyc1tyXTtcblxuICAgICAgICBpZiAod2Vha21hcFtyXSkge1xuICAgICAgICAgIGlmICh3ZWFrbWFwW3JdLmNhbGxiYWNrc1trXSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICB3ZWFrbWFwW3JdLmNhbGxiYWNrc1trXS5mb3JFYWNoKChjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrLnN5bmMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG9ic2VydmVNdXRhdGlvbnMob2JqOiBhbnksIHJlZjogc3RyaW5nLCBrZXlwYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNvbnN0IG1hcCA9IHRoaXMud2Vha1JlZmVyZW5jZShvYmopO1xuXG4gICAgICBpZiAoIW1hcC5wb2ludGVycykge1xuICAgICAgICBtYXAucG9pbnRlcnMgPSB7fTtcblxuICAgICAgICBBZGFwdGVyLkFSUkFZX01FVEhPRFMuZm9yRWFjaCgoZm4pID0+IHtcbiAgICAgICAgICB0aGlzLnN0dWJGdW5jdGlvbihvYmosIGZuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghbWFwLnBvaW50ZXJzW3JlZl0pIHtcbiAgICAgICAgbWFwLnBvaW50ZXJzW3JlZl0gPSBbXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hcC5wb2ludGVyc1tyZWZdLmluZGV4T2Yoa2V5cGF0aCkgPT09IC0xKSB7XG4gICAgICAgIG1hcC5wb2ludGVyc1tyZWZdLnB1c2goa2V5cGF0aCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHVub2JzZXJ2ZU11dGF0aW9ucyhvYmo6IElSVkFycmF5LCByZWY6IHN0cmluZywga2V5cGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKChvYmogaW5zdGFuY2VvZiBBcnJheSkgJiYgKG9iai5fX3J2ICE9IG51bGwpKSB7XG4gICAgICBjb25zdCBtYXAgPSB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuXG4gICAgICBpZiAobWFwKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJzID0gbWFwLnBvaW50ZXJzW3JlZl07XG5cbiAgICAgICAgaWYgKHBvaW50ZXJzKSB7XG4gICAgICAgICAgY29uc3QgaWR4ID0gcG9pbnRlcnMuaW5kZXhPZihrZXlwYXRoKTtcblxuICAgICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgcG9pbnRlcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFwb2ludGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBtYXAucG9pbnRlcnNbcmVmXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmNsZWFudXBXZWFrUmVmZXJlbmNlKG1hcCwgb2JqLl9fcnYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG9ic2VydmUob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjaykge1xuICAgIGxldCB2YWx1ZTogYW55O1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMud2Vha1JlZmVyZW5jZShvYmopLmNhbGxiYWNrcztcblxuICAgIGlmICghY2FsbGJhY2tzW2tleXBhdGhdKSB7XG4gICAgICBjYWxsYmFja3Nba2V5cGF0aF0gPSBbXTtcbiAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5cGF0aCk7XG5cbiAgICAgIGlmICghZGVzYyB8fCAhKGRlc2MuZ2V0IHx8IGRlc2Muc2V0IHx8ICFkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgICAgdmFsdWUgPSBvYmpba2V5cGF0aF07XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5cGF0aCwge1xuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG5cbiAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgc2V0OiAobmV3VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgdGhpcy51bm9ic2VydmVNdXRhdGlvbnModmFsdWUsIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY29uc3QgbWFwID0gdGhpcy53ZWFrbWFwW29iai5fX3J2XTtcblxuICAgICAgICAgICAgICBpZiAobWFwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgX2NhbGxiYWNrcyA9IG1hcC5jYWxsYmFja3Nba2V5cGF0aF07XG5cbiAgICAgICAgICAgICAgICBpZiAoX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgICAgX2NhbGxiYWNrcy5mb3JFYWNoKChjYjogSU9ic2VydmVyU3luY0NhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNiLnN5bmMoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZU11dGF0aW9ucyhuZXdWYWx1ZSwgb2JqLl9fcnYsIGtleXBhdGgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrc1trZXlwYXRoXS5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTEpIHtcbiAgICAgIGNhbGxiYWNrc1trZXlwYXRoXS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB0aGlzLm9ic2VydmVNdXRhdGlvbnMob2JqW2tleXBhdGhdLCBvYmouX19ydiwga2V5cGF0aCk7XG4gIH1cblxuICBwdWJsaWMgdW5vYnNlcnZlKG9iajogYW55LCBrZXlwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBJT2JzZXJ2ZXJTeW5jQ2FsbGJhY2spIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuXG4gICAgaWYgKG1hcCkge1xuICAgICAgY29uc3QgY2FsbGJhY2tzID0gbWFwLmNhbGxiYWNrc1trZXlwYXRoXTtcblxuICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBjb25zdCBpZHggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG5cbiAgICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpZHgsIDEpO1xuXG4gICAgICAgICAgaWYgKCFjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWxldGUgbWFwLmNhbGxiYWNrc1trZXlwYXRoXTtcbiAgICAgICAgICAgIHRoaXMudW5vYnNlcnZlTXV0YXRpb25zKG9ialtrZXlwYXRoXSwgb2JqLl9fcnYsIGtleXBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xlYW51cFdlYWtSZWZlcmVuY2UobWFwLCBvYmouX19ydik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG9ialtrZXlwYXRoXTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIG9ialtrZXlwYXRoXSA9IHZhbHVlO1xuICB9XG59XG5cbmNvbnN0IGFkYXB0ZXIgPSBuZXcgQWRhcHRlcigpO1xuZXhwb3J0IHsgYWRhcHRlciB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcblxuZXhwb3J0IGludGVyZmFjZSBJT25lV2F5Rm9ybWF0dGVyIHtcbiAgKHZhbDogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueTtcbiAgcmVhZD86IChyZXN1bHQ6IHN0cmluZywgLi4ucHJvY2Vzc2VkQXJnczogc3RyaW5nW10pID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9uZVR3b0Zvcm1hdHRlciB7XG4gIHJlYWQ6IChyZXN1bHQ6IHN0cmluZywgLi4ucHJvY2Vzc2VkQXJnczogc3RyaW5nW10pID0+IHZvaWQ7XG4gIHB1Ymxpc2g6IChyZXN1bHQ6IHN0cmluZywgLi4ucHJvY2Vzc2VkQXJnczogc3RyaW5nW10pID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIElGb3JtYXR0ZXIgPSBJT25lV2F5Rm9ybWF0dGVyIHwgSU9uZVR3b0Zvcm1hdHRlcjtcblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0dGVycyB7XG4gIFtuYW1lOiBzdHJpbmddOiBJRm9ybWF0dGVyO1xufVxuXG5leHBvcnQgY2xhc3MgRm9ybWF0dGVyU2VydmljZSB7XG4gIHByaXZhdGUgZm9ybWF0dGVyczogSUZvcm1hdHRlcnM7XG4gIHByaXZhdGUgZGVidWcgPSBEZWJ1ZygnZm9ybWF0dGVyczpGb3JtYXR0ZXJTZXJ2aWNlJyk7XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihmb3JtYXR0ZXJzOiBJRm9ybWF0dGVycykge1xuICAgIHRoaXMuZm9ybWF0dGVycyA9IGZvcm1hdHRlcnM7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgZm9ybWF0dGVyIHdpdGggaGlzIG5hbWVcbiAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gbmFtZVxuICAgKi9cbiAgcHVibGljIHJlZ2lzdChjb21wb25lbnQ6IElGb3JtYXR0ZXIsIG5hbWU/OiBzdHJpbmcpOiBJRm9ybWF0dGVycyB7XG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICBpZiAoY29tcG9uZW50Lmhhc093blByb3BlcnR5KCdjb25zdHJ1Y3RvcicpKSB7XG4gICAgICAgIG5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpKSB7XG4gICAgICAgIG5hbWUgPSAoY29tcG9uZW50IGFzIGFueSkubmFtZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmRlYnVnKCduYW1lJywgbmFtZSwgY29tcG9uZW50KTtcblxuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRm9ybWF0dGVyU2VydmljZV0gbmFtZSBpcyByZXF1aXJlZCcpO1xuICAgIH1cblxuICAgIC8vIGlmIEJpbmRlcjxhbnk+XG4gICAgdGhpcy5mb3JtYXR0ZXJzW25hbWVdID0gY29tcG9uZW50O1xuICAgIHJldHVybiB0aGlzLmZvcm1hdHRlcnM7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgc2V0IG9mIGZvcm1hdHRlcnNcbiAgICogQHBhcmFtIGZvcm1hdHRlcnNcbiAgICovXG4gIHB1YmxpYyByZWdpc3RzKGZvcm1hdHRlcnM6IElGb3JtYXR0ZXJzKTogSUZvcm1hdHRlcnMge1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiBmb3JtYXR0ZXJzKSB7XG4gICAgICBpZiAoZm9ybWF0dGVycy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICB0aGlzLnJlZ2lzdChmb3JtYXR0ZXJzW25hbWVdLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVycztcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHBhcnNlVGVtcGxhdGUsIHBhcnNlVHlwZSB9IGZyb20gJy4vcGFyc2Vycyc7XG5pbXBvcnQgeyBJRm9ybWF0dGVycywgRm9ybWF0dGVyU2VydmljZSB9IGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmluZGluZywgSUJpbmRhYmxlIH0gZnJvbSAnLi9iaW5kaW5nJztcbmltcG9ydCB7IGFkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXInO1xuXG5pbXBvcnQgeyBJQmluZGVycywgQmluZGVyc1NlcnZpY2UgfSBmcm9tICcuL2JpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgSUFkYXB0ZXJzIH0gZnJvbSAnLi9hZGFwdGVyJztcbmltcG9ydCB7IE9ic2VydmVyLCBSb290IH0gZnJvbSAnLi9vYnNlcnZlcic7XG5pbXBvcnQgeyBJQ29tcG9uZW50cywgQ29tcG9uZW50U2VydmljZSB9IGZyb20gJy4vY29tcG9uZW50LnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElFeHRlbnNpb25zIHtcbiAgYmluZGVyczogSUJpbmRlcnM8YW55PjtcbiAgZm9ybWF0dGVyczogSUZvcm1hdHRlcnM7XG4gIGNvbXBvbmVudHM6IElDb21wb25lbnRzO1xuICBhZGFwdGVyczogSUFkYXB0ZXJzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElPcHRpb25zIHtcbiAgLyoqIEF0dHJpYnV0ZSBwcmVmaXggaW4gdGVtcGxhdGVzICovXG4gIHByZWZpeD86IHN0cmluZztcblxuICAvKiogUHJlbG9hZCB0ZW1wbGF0ZXMgd2l0aCBpbml0aWFsIGRhdGEgb24gYmluZCAqL1xuICBwcmVsb2FkRGF0YT86IGJvb2xlYW47XG5cbiAgLyoqIFJvb3Qgc2lnaHRnbGFzcyBpbnRlcmZhY2UgZm9yIGtleXBhdGhzICovXG4gIHJvb3RJbnRlcmZhY2U/OiBzdHJpbmc7XG5cbiAgLyoqIFRlbXBsYXRlIGRlbGltaXRlcnMgZm9yIHRleHQgYmluZGluZ3MgKi9cbiAgdGVtcGxhdGVEZWxpbWl0ZXJzPzogQXJyYXk8c3RyaW5nPjtcblxuICAvKiogQXVnbWVudCB0aGUgZXZlbnQgaGFuZGxlciBvZiB0aGUgb24tKiBiaW5kZXIgKi9cbiAgaGFuZGxlcj86ICh0aGlzOiBhbnksIGNvbnRleHQ6IGFueSwgZXY6IEV2ZW50LCBiaW5kaW5nOiBCaW5kaW5nLCBlbDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJT3B0aW9uc1BhcmFtIGV4dGVuZHMgSUV4dGVuc2lvbnMsIElPcHRpb25zIHt9XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJVmlld09wdGlvbnMgZXh0ZW5kcyBJT3B0aW9uc1BhcmFtIHtcbiAgc3RhckJpbmRlcnM6IGFueTtcbiAgLy8gc2lnaHRnbGFzc1xuICByb290SW50ZXJmYWNlOiBSb290O1xufVxuXG5leHBvcnQgY2xhc3MgVGlueWJpbmQge1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGV2ZW50IGhhbmRsZXIsIGNhbGxlcyB0aGUgZnVuY3Rpb24gZGVmaW5lZCBpbiBoaXMgYmluZGVyXG4gICAqIEBzZWUgQmluZGluZy5ldmVudEhhbmRsZXJcbiAgICogQHBhcmFtIGVsIFRoZSBlbGVtZW50IHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb21cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaGFuZGxlcih0aGlzOiBhbnksIGNvbnRleHQ6IGFueSwgZXY6IEV2ZW50LCBiaW5kaW5nOiBCaW5kaW5nLCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmNhbGwoY29udGV4dCwgZXYsIGJpbmRpbmcudmlldy5tb2RlbHMsIGVsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuIElmIG5vIGJpbmRlciBhYm92ZSBpcyBtYXRjaGVkIGl0IHdpbGwgZmFsbFxuICAgKiBiYWNrIHRvIHVzaW5nIHRoaXMgYmluZGVyLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBmYWxsYmFja0JpbmRlcih0aGlzOiBCaW5kaW5nLCBlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMudHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHNldCBhdHR0cmlidXRlIG9mICcgKyB0aGlzLnR5cGUpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKHRoaXMudHlwZSwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUodGhpcy50eXBlKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYmluZGVyU2VydmljZTogQmluZGVyc1NlcnZpY2U7XG5cbiAgcHVibGljIGNvbXBvbmVudFNlcnZpY2U6IENvbXBvbmVudFNlcnZpY2U7XG5cbiAgcHVibGljIGZvcm1hdHRlclNlcnZpY2U6IEZvcm1hdHRlclNlcnZpY2U7XG5cbiAgLyoqIEdsb2JhbCBiaW5kZXJzICovXG4gIHB1YmxpYyBiaW5kZXJzOiBJQmluZGVyczxhbnk+ID0ge307XG5cbiAgLyoqIEdsb2JhbCBjb21wb25lbnRzLiAqL1xuICBwdWJsaWMgY29tcG9uZW50czogSUNvbXBvbmVudHMgPSB7fTtcblxuICAvKiogR2xvYmFsIGZvcm1hdHRlcnMuICovXG4gIHB1YmxpYyBmb3JtYXR0ZXJzOiBJRm9ybWF0dGVycyA9IHt9O1xuXG4gIC8qKiBHbG9iYWwgKHNpZ2h0Z2xhc3MpIGFkYXB0ZXJzLiAqL1xuICBwdWJsaWMgIGFkYXB0ZXJzOiBJQWRhcHRlcnMgPSB7XG4gICAgJy4nOiBhZGFwdGVyLFxuICB9O1xuXG4gIHB1YmxpYyBwYXJzZVRlbXBsYXRlID0gcGFyc2VUZW1wbGF0ZTtcblxuICBwdWJsaWMgcGFyc2VUeXBlID0gcGFyc2VUeXBlO1xuXG4gIC8qKiBEZWZhdWx0IHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHB1YmxpYyB0ZW1wbGF0ZURlbGltaXRlcnMgPSBbJ3snLCAnfSddO1xuXG4gIC8qKiBEZWZhdWx0IHNpZ2h0Z2xhc3Mgcm9vdCBpbnRlcmZhY2UuICovXG4gIHB1YmxpYyByb290SW50ZXJmYWNlID0gJy4nO1xuXG4gIC8qKiBQcmVsb2FkIGRhdGEgYnkgZGVmYXVsdC4gKi9cbiAgcHVibGljIHByZWxvYWREYXRhID0gdHJ1ZTtcblxuICAvKiogRGVmYXVsdCBhdHRyaWJ1dGUgcHJlZml4LiAqL1xuICBwcml2YXRlIF9wcmVmaXggPSAncnYnO1xuXG4gIC8qKiBEZWZhdWx0IGF0dHJpYnV0ZSBmdWxsIHByZWZpeC4gKi9cbiAgcHJpdmF0ZSBfZnVsbFByZWZpeCA9ICdydi0nO1xuXG4gIHNldCBwcmVmaXgodmFsdWUpIHtcbiAgICB0aGlzLl9wcmVmaXggPSB2YWx1ZTtcbiAgICB0aGlzLl9mdWxsUHJlZml4ID0gdmFsdWUgKyAnLSc7XG4gIH1cblxuICBnZXQgcHJlZml4KCkge1xuICAgIHJldHVybiB0aGlzLl9wcmVmaXg7XG4gIH1cblxuICBnZXQgZnVsbFByZWZpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZnVsbFByZWZpeDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmluZGVyU2VydmljZSA9IG5ldyBCaW5kZXJzU2VydmljZSh0aGlzLmJpbmRlcnMpO1xuICAgIHRoaXMuY29tcG9uZW50U2VydmljZSA9IG5ldyBDb21wb25lbnRTZXJ2aWNlKHRoaXMuY29tcG9uZW50cyk7XG4gICAgdGhpcy5mb3JtYXR0ZXJTZXJ2aWNlID0gbmV3IEZvcm1hdHRlclNlcnZpY2UodGhpcy5mb3JtYXR0ZXJzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZXMgYW4gb2JqZWN0IGxpdGVyYWwgaW50byB0aGUgY29ycmVzcG9uZGluZyBnbG9iYWwgb3B0aW9ucy5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIHB1YmxpYyBjb25maWd1cmUob3B0aW9uczogYW55KSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaCggKG9wdGlvbikgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdGlvbl07XG4gICAgICBzd2l0Y2ggKG9wdGlvbikge1xuICAgICAgICBjYXNlICdiaW5kZXJzJzpcbiAgICAgICAgICB0aGlzLmJpbmRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHRoaXMuYmluZGVycywgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmb3JtYXR0ZXJzJzpcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHRoaXMuZm9ybWF0dGVycywgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjb21wb25lbnRzJzpcbiAgICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHRoaXMuY29tcG9uZW50cywgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhZGFwdGVycyc6XG4gICAgICAgICAgdGhpcy5hZGFwdGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdGhpcy5hZGFwdGVycywgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhZGFwdGVyJzpcbiAgICAgICAgICB0aGlzLmFkYXB0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB0aGlzLmFkYXB0ZXJzLCB2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ByZWZpeCc6XG4gICAgICAgICAgdGhpcy5wcmVmaXggPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncGFyc2VUZW1wbGF0ZSc6XG4gICAgICAgICAgdGhpcy5wYXJzZVRlbXBsYXRlID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BhcnNlVHlwZSc6XG4gICAgICAgICAgdGhpcy5wYXJzZVR5cGUgPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncHJlZml4JzpcbiAgICAgICAgICB0aGlzLnByZWZpeCA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0ZW1wbGF0ZURlbGltaXRlcnMnOlxuICAgICAgICAgIHRoaXMudGVtcGxhdGVEZWxpbWl0ZXJzID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Jvb3RJbnRlcmZhY2UnOlxuICAgICAgICAgIHRoaXMucm9vdEludGVyZmFjZSA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwcmVsb2FkRGF0YSc6XG4gICAgICAgICAgdGhpcy5wcmVsb2FkRGF0YSA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnNvbGUud2FybignT3B0aW9uIG5vdCBzdXBwb3J0ZWQnLCBvcHRpb24sIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBhIG5ldyBpbnN0YW5jZSBvZiBhIGNvbXBvbmVudCBvbiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQgYW5kXG4gICAqIHJldHVybnMgYSB0aW55YmluZC5WaWV3IGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIGluaXQoY29tcG9uZW50S2V5OiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCwgZGF0YSA9IHt9KSB7XG4gICAgaWYgKCFlbCkge1xuICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50S2V5XTtcbiAgICBlbC5pbm5lckhUTUwgPSBjb21wb25lbnQudGVtcGxhdGUuY2FsbCh0aGlzLCBlbCk7XG4gICAgY29uc3Qgc2NvcGUgPSBjb21wb25lbnQuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIGVsLCBkYXRhKTtcblxuICAgIGNvbnN0IHZpZXcgPSB0aGlzLmJpbmQoZWwsIHNjb3BlKTtcbiAgICB2aWV3LmJpbmQoKTtcbiAgICByZXR1cm4gdmlldztcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kcyBzb21lIGRhdGEgdG8gYSB0ZW1wbGF0ZSAvIGVsZW1lbnQuIFJldHVybnMgYSB0aW55YmluZC5WaWV3IGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIGJpbmQoZWw6IEhUTUxFbGVtZW50LCBtb2RlbHM6IGFueSwgb3B0aW9ucz86IElPcHRpb25zUGFyYW0pIHtcbiAgICBjb25zdCB2aWV3T3B0aW9uczogSVZpZXdPcHRpb25zID0ge1xuICAgICAgLy8gRVhURU5TSU9OU1xuICAgICAgYWRhcHRlcnM6IDxJQWRhcHRlcnM+IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBiaW5kZXJzOiA8SUJpbmRlcnM8YW55Pj4gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbXBvbmVudHM6IDxJQ29tcG9uZW50cz4gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGZvcm1hdHRlcnM6IDxJRm9ybWF0dGVycz4gT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAgICAgLy8gb3RoZXJcbiAgICAgIHN0YXJCaW5kZXJzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gICAgICAvLyBzaWdodGdsYXNzXG4gICAgICByb290SW50ZXJmYWNlOiA8Um9vdD4gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICB9O1xuICAgIG1vZGVscyA9IG1vZGVscyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIC8vIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHZpZXdPcHRpb25zLmJpbmRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHZpZXdPcHRpb25zLmJpbmRlcnMsIG9wdGlvbnMuYmluZGVycyk7XG4gICAgICB2aWV3T3B0aW9ucy5mb3JtYXR0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB2aWV3T3B0aW9ucy5mb3JtYXR0ZXJzLCBvcHRpb25zLmZvcm1hdHRlcnMpO1xuICAgICAgdmlld09wdGlvbnMuY29tcG9uZW50cyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzKTtcbiAgICAgIHZpZXdPcHRpb25zLmFkYXB0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB2aWV3T3B0aW9ucy5hZGFwdGVycywgb3B0aW9ucy5hZGFwdGVycyk7XG4gICAgfVxuXG4gICAgdmlld09wdGlvbnMucHJlZml4ID0gb3B0aW9ucyAmJiBvcHRpb25zLnByZWZpeCA/IG9wdGlvbnMucHJlZml4IDogdGhpcy5wcmVmaXg7XG4gICAgdmlld09wdGlvbnMudGVtcGxhdGVEZWxpbWl0ZXJzID0gb3B0aW9ucyAmJiBvcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycyA/IG9wdGlvbnMudGVtcGxhdGVEZWxpbWl0ZXJzIDogdGhpcy50ZW1wbGF0ZURlbGltaXRlcnM7XG4gICAgdmlld09wdGlvbnMucm9vdEludGVyZmFjZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5yb290SW50ZXJmYWNlID8gb3B0aW9ucy5yb290SW50ZXJmYWNlIDogdGhpcy5yb290SW50ZXJmYWNlO1xuICAgIHZpZXdPcHRpb25zLnByZWxvYWREYXRhID0gb3B0aW9ucyAmJiBvcHRpb25zLnByZWxvYWREYXRhID8gb3B0aW9ucy5wcmVsb2FkRGF0YSA6IHRoaXMucHJlbG9hZERhdGE7XG4gICAgdmlld09wdGlvbnMuaGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5oYW5kbGVyID8gb3B0aW9ucy5oYW5kbGVyIDogVGlueWJpbmQuaGFuZGxlcjtcblxuICAgIC8vIG1lcmdlIGV4dGVuc2lvbnNcbiAgICB2aWV3T3B0aW9ucy5iaW5kZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB2aWV3T3B0aW9ucy5iaW5kZXJzLCB0aGlzLmJpbmRlcnMpO1xuICAgIHZpZXdPcHRpb25zLmZvcm1hdHRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHZpZXdPcHRpb25zLmZvcm1hdHRlcnMsIHRoaXMuZm9ybWF0dGVycyk7XG4gICAgdmlld09wdGlvbnMuY29tcG9uZW50cyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuY29tcG9uZW50cywgdGhpcy5jb21wb25lbnRzKTtcbiAgICB2aWV3T3B0aW9ucy5hZGFwdGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuYWRhcHRlcnMsIHRoaXMuYWRhcHRlcnMpO1xuXG4gICAgLy8gZ2V0IGFsbCBzdGFyQmluZGVycyBmcm9tIGF2YWlsYWJsZSBiaW5kZXJzXG4gICAgdmlld09wdGlvbnMuc3RhckJpbmRlcnMgPSBPYmplY3Qua2V5cyh2aWV3T3B0aW9ucy5iaW5kZXJzKS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIGtleS5pbmRleE9mKCcqJykgPiAwO1xuICAgIH0pO1xuXG4gICAgT2JzZXJ2ZXIudXBkYXRlT3B0aW9ucyh2aWV3T3B0aW9ucyk7XG5cbiAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoZWwsIG1vZGVscywgdmlld09wdGlvbnMpO1xuICAgIHZpZXcuYmluZCgpO1xuICAgIHJldHVybiB2aWV3O1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL0hpc3RvcnlNYW5hZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vRG9tJztcbmV4cG9ydCAqIGZyb20gJy4vUHJlZmV0Y2gnO1xuXG5pbXBvcnQgeyBHbG9iYWxFdmVudCB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbC1ldmVudCc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IEJhc2VDYWNoZSB9IGZyb20gJy4uL0NhY2hlJztcbmltcG9ydCB7IEhpZGVTaG93VHJhbnNpdGlvbiwgSVRyYW5zaXRpb24gfSBmcm9tICcuLi9UcmFuc2l0aW9uL1RyYW5zaXRpb24nO1xuaW1wb3J0IHsgRG9tIH0gZnJvbSAnLi9Eb20nO1xuaW1wb3J0IHsgSGlzdG9yeU1hbmFnZXIgfSBmcm9tICcuL0hpc3RvcnlNYW5hZ2VyJztcblxuLyoqXG4gKiBQamF4IGlzIGEgc3RhdGljIG9iamVjdCB3aXRoIG1haW4gZnVuY3Rpb25cbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLlBqYXhcbiAqIEBib3Jyb3dzIERvbSBhcyBEb21cbiAqIEB0eXBlIHtvYmplY3R9XG4gKi9cbmNsYXNzIFBqYXgge1xuXG4gIC8qKlxuICAgKiBDbGFzcyBuYW1lIHVzZWQgdG8gaWdub3JlIGxpbmtzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlnbm9yZUNsYXNzTGluayA9ICduby1iYXJiYSc7XG5cbiAgcHVibGljIHN0YXRpYyBjYWNoZSA9IG5ldyBCYXNlQ2FjaGUoKTtcblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoZSBsaW5rIHNob3VsZCBiZSBmb2xsb3dlZFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAgKiBAcGFyYW0gIHtNb3VzZUV2ZW50fSBldnRcbiAgICogQHBhcmFtICB7SFRNTEFuY2hvckVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgcHJldmVudENoZWNrKGV2dDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50LCBudWxsPiwgZWxlbWVudDogSFRNTEFuY2hvckVsZW1lbnQpOiBib29sZWFuIHtcbiAgICBpZiAoIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGhyZWYgPSB0aGlzLmdldEhyZWYoZWxlbWVudCk7XG5cbiAgICAvLyBVc2VyXG4gICAgaWYgKCFlbGVtZW50IHx8ICFocmVmKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gTWlkZGxlIGNsaWNrLCBjbWQgY2xpY2ssIGFuZCBjdHJsIGNsaWNrXG4gICAgaWYgKGV2dC53aGljaCA+IDEgfHwgZXZ0Lm1ldGFLZXkgfHwgZXZ0LmN0cmxLZXkgfHwgZXZ0LnNoaWZ0S2V5IHx8IGV2dC5hbHRLZXkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgdGFyZ2V0IHdpdGggX2JsYW5rIHRhcmdldFxuICAgIGlmIChlbGVtZW50LnRhcmdldCAmJiBlbGVtZW50LnRhcmdldCA9PT0gJ19ibGFuaycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBpdCdzIHRoZSBzYW1lIGRvbWFpblxuICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgIT09IGVsZW1lbnQucHJvdG9jb2wgfHwgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICE9PSBlbGVtZW50Lmhvc3RuYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIHBvcnQgaXMgdGhlIHNhbWVcbiAgICBpZiAoVXRpbHMuZ2V0UG9ydCgpICE9PSBVdGlscy5nZXRQb3J0KGVsZW1lbnQucG9ydCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgY2FzZSB3aGVuIGEgaGFzaCBpcyBiZWluZyB0YWNrZWQgb24gdGhlIGN1cnJlbnQgVVJMXG4gICAgaWYgKGhyZWYuaW5kZXhPZignIycpID4gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgY2FzZSB3aGVyZSB0aGVyZSBpcyBkb3dubG9hZCBhdHRyaWJ1dGVcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUgJiYgdHlwZW9mIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkb3dubG9hZCcpID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEluIGNhc2UgeW91J3JlIHRyeWluZyB0byBsb2FkIHRoZSBzYW1lIHBhZ2VcbiAgICBpZiAoVXRpbHMuY2xlYW5MaW5rKGhyZWYpID09PSBVdGlscy5jbGVhbkxpbmsobG9jYXRpb24uaHJlZikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5pZ25vcmVDbGFzc0xpbmspKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSAuaHJlZiBwYXJhbWV0ZXIgb3V0IG9mIGFuIGVsZW1lbnRcbiAgICogYW5kIGhhbmRsZSBzcGVjaWFsIGNhc2VzIChsaWtlIHhsaW5rOmhyZWYpXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICAqIEBwYXJhbSAge0hUTUxBbmNob3JFbGVtZW50fSBlbFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhyZWZcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SHJlZihlbDogSFRNTEFuY2hvckVsZW1lbnQgfCBTVkdBRWxlbWVudCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZSAmJiB0eXBlb2YgZWwuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJykgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJykgfHwgdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YoZWwuaHJlZikgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZWwuaHJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqIHNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUGpheDtcblxuICBwdWJsaWMgZG9tPzogRG9tO1xuICBwdWJsaWMgaGlzdG9yeSA9IG5ldyBIaXN0b3J5TWFuYWdlcigpO1xuXG4gLyoqXG4gICogSW5kaWNhdGUgd2V0aGVyIG9yIG5vdCB1c2UgdGhlIGNhY2hlXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEB0eXBlIHtib29sZWFufVxuICAqIEBkZWZhdWx0XG4gICovXG4gIHB1YmxpYyBjYWNoZUVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gLyoqXG4gICogSW5kaWNhdGUgaWYgdGhlcmUgaXMgYW4gYW5pbWF0aW9uIGluIHByb2dyZXNzXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEByZWFkT25seVxuICAqIEB0eXBlIHtib29sZWFufVxuICAqL1xuICBwdWJsaWMgdHJhbnNpdGlvblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IEdsb2JhbEV2ZW50KCk7XG5cbiAgcHJpdmF0ZSB0cmFuc2l0aW9uOiBJVHJhbnNpdGlvbiA9IG5ldyBIaWRlU2hvd1RyYW5zaXRpb24oKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgRGlzcGF0Y2hlci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmIChQamF4Lmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gUGpheC5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBQamF4Lmluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gLyoqXG4gICogRnVuY3Rpb24gdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IFBqYXhcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICovXG4gIHB1YmxpYyBzdGFydCgkd3JhcHBlcjogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgdHJhbnNpdGlvbj86IElUcmFuc2l0aW9uKSB7XG5cbiAgICB0aGlzLmRvbSA9IG5ldyBEb20oJHdyYXBwZXIpO1xuXG4gICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XG4gICAgfVxuXG4gICAgdGhpcy5pbml0KCR3cmFwcGVyKTtcbiAgfVxuXG4gLyoqXG4gICogUmV0dXJuIHRoZSBjdXJyZW50VVJMIGNsZWFuZWRcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHJldHVybiB7c3RyaW5nfSBjdXJyZW50VXJsXG4gICovXG4gIHB1YmxpYyBnZXRDdXJyZW50VXJsKCkge1xuICAgIHJldHVybiBVdGlscy5jbGVhbkxpbmsoXG4gICAgICBVdGlscy5nZXRVcmwoKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgVVJMIHdpdGggcHVzaHN0YXRlIGFuZCB0cmlnZ2VyIHRoZSBzdGF0ZSBjaGFuZ2VcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5ld1VybFxuICAgKi9cbiAgcHVibGljIGdvVG8odXJsOiBzdHJpbmcsIG5ld1RhYj86IGJvb2xlYW4pIHtcbiAgICBpZiAobmV3VGFiKSB7XG4gICAgICBjb25zdCB3aW4gPSB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKTtcbiAgICAgIGlmICh3aW4pIHtcbiAgICAgICAgcmV0dXJuIHdpbi5mb2N1cygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh1cmwuaW5kZXhPZignaHR0cCcpICE9PSAwKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgdW5kZWZpbmVkLCB1cmwpO1xuICAgICAgcmV0dXJuIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIC8vIGZhbGxiYWNrXG4gICAgdGhpcy5mb3JjZUdvVG8odXJsKTtcbiAgfVxuXG4gLyoqXG4gICogUmV0dXJuIGEgdHJhbnNpdGlvbiBvYmplY3RcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHJldHVybiB7QmFyYmEuVHJhbnNpdGlvbn0gVHJhbnNpdGlvbiBvYmplY3RcbiAgKi9cbiAgcHVibGljIGdldFRyYW5zaXRpb24oKTogSVRyYW5zaXRpb24ge1xuICAgIC8vIFVzZXIgY3VzdG9taXphYmxlXG4gICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbjtcbiAgfVxuXG4gLyoqXG4gICogQXR0YWNoIHRoZSBldmVudGxpc3RlbmVyc1xuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICovXG4gcHJvdGVjdGVkIGJpbmRFdmVudHMoKSB7XG4gICAgLy8gd2UgdXNlIHRoZSBydi1yb3V0ZXIgZm9yIHRoaXNcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgLy8gICB0aGlzLm9uTGlua0NsaWNrLmJpbmQodGhpcyksXG4gICAgLy8gKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsXG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSxcbiAgICApO1xuICB9XG5cbiAvKipcbiAgKiBGb3JjZSB0aGUgYnJvd3NlciB0byBnbyB0byBhIGNlcnRhaW4gdXJsXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwYXJhbSB7TG9jYXRpb259IHVybFxuICAqIEBwcml2YXRlXG4gICovXG4gcHJvdGVjdGVkIGZvcmNlR29Ubyh1cmw6IExvY2F0aW9uIHwgc3RyaW5nKSB7XG4gICBpZiAodXJsIGluc3RhbmNlb2YgTG9jYXRpb24pIHtcbiAgICB3aW5kb3cubG9jYXRpb24gPSB1cmw7XG4gICB9XG4gICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgIH1cbiAgfVxuXG4gLyoqXG4gICogTG9hZCBhbiB1cmwsIHdpbGwgc3RhcnQgYW4geGhyIHJlcXVlc3Qgb3IgbG9hZCBmcm9tIHRoZSBjYWNoZVxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICogQHBhcmFtICB7c3RyaW5nfSB1cmxcbiAgKiBAcmV0dXJuIHtQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+fVxuICAqL1xuIHByb3RlY3RlZCBsb2FkKHVybDogc3RyaW5nKTogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+PiB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBVdGlscy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCB4aHI7XG5cbiAgICB4aHIgPSBQamF4LmNhY2hlLmdldCh1cmwpO1xuXG4gICAgaWYgKCF4aHIpIHtcbiAgICAgIHhociA9IFV0aWxzLnhocih1cmwpO1xuICAgICAgUGpheC5jYWNoZS5zZXQodXJsLCB4aHIpO1xuICAgIH1cblxuICAgIHhoci50aGVuKChkYXRhOiBzdHJpbmcpID0+IHtcblxuICAgICAgICBpZiAoIXNlbGYuZG9tKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUGpheF0geW91IG5lZWQgdG8gY2FsbCB0aGUgc3RhcnQgbWV0aG9kIGZpcnN0IScpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgJGNvbnRhaW5lciA9IHNlbGYuZG9tLnBhcnNlUmVzcG9uc2UoZGF0YSk7XG5cbiAgICAgICAgc2VsZi5kb20ucHV0Q29udGFpbmVyKCRjb250YWluZXIpO1xuXG4gICAgICAgIGlmICghc2VsZi5jYWNoZUVuYWJsZWQpIHtcbiAgICAgICAgICBQamF4LmNhY2hlLnJlc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCRjb250YWluZXIpO1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyAodGltZW91dCwgNDA0LCA1MDUuLi4pXG4gICAgICAgIHNlbGYuZm9yY2VHb1RvKHVybCk7XG5cbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gLyoqXG4gICogQ2FsbGJhY2sgY2FsbGVkIGZyb20gY2xpY2sgZXZlbnRcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHByb3RlY3RlZFxuICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZ0XG4gICovXG4gcHJvdGVjdGVkIG9uTGlua0NsaWNrKGV2dDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50LCBudWxsPikge1xuICAgIGxldCBlbDogSFRNTEFuY2hvckVsZW1lbnQgPSAoZXZ0LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCApO1xuXG4gICAgLy8gR28gdXAgaW4gdGhlIG5vZGVsaXN0IHVudGlsIHdlXG4gICAgLy8gZmluZCBzb21ldGhpbmcgd2l0aCBhbiBocmVmXG4gICAgd2hpbGUgKGVsICYmICFQamF4LmdldEhyZWYoZWwpKSB7XG4gICAgICBlbCA9IChlbC5wYXJlbnROb2RlIGFzIEhUTUxBbmNob3JFbGVtZW50KTtcbiAgICB9XG5cbiAgICBpZiAoUGpheC5wcmV2ZW50Q2hlY2soZXZ0LCBlbCkpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcignbGlua0NsaWNrZWQnLCBlbCwgZXZ0KTtcblxuICAgICAgY29uc3QgaHJlZiA9IFBqYXguZ2V0SHJlZihlbCk7XG4gICAgICBpZiAoIWhyZWYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdocmVmIGlzIG51bGwnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZ29UbyhocmVmKTtcbiAgICB9XG4gIH1cblxuIC8qKlxuICAqIE1ldGhvZCBjYWxsZWQgYWZ0ZXIgYSAncG9wc3RhdGUnIG9yIGZyb20gLmdvVG8oKVxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICovXG4gcHJvdGVjdGVkIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgY29uc3QgbmV3VXJsID0gdGhpcy5nZXRDdXJyZW50VXJsKCk7XG5cbiAgICBpZiAodGhpcy50cmFuc2l0aW9uUHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMuZm9yY2VHb1RvKG5ld1VybCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCkudXJsID09PSBuZXdVcmwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmhpc3RvcnkuYWRkKG5ld1VybCk7XG5cbiAgICBjb25zdCAkbmV3Q29udGFpbmVyID0gdGhpcy5sb2FkKG5ld1VybCk7XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uID0gdGhpcy5nZXRUcmFuc2l0aW9uKCk7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25Qcm9ncmVzcyA9IHRydWU7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcignaW5pdFN0YXRlQ2hhbmdlJyxcbiAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCksXG4gICAgICB0aGlzLmhpc3RvcnkucHJldlN0YXR1cygpLFxuICAgICk7XG5cbiAgICBpZiAoIXRoaXMuZG9tKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tQamF4XSB5b3UgbmVlZCB0byBjYWxsIHRoZSBzdGFydCBtZXRob2QgZmlyc3QhJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhbnNpdGlvbkluc3RhbmNlID0gdHJhbnNpdGlvbi5pbml0KFxuICAgICAgdGhpcy5kb20uZ2V0Q29udGFpbmVyKCksXG4gICAgICAkbmV3Q29udGFpbmVyLFxuICAgICk7XG5cbiAgICAkbmV3Q29udGFpbmVyLnRoZW4oXG4gICAgICB0aGlzLm9uTmV3Q29udGFpbmVyTG9hZGVkLmJpbmQodGhpcyksXG4gICAgKTtcblxuICAgIHRyYW5zaXRpb25JbnN0YW5jZS50aGVuKFxuICAgICAgdGhpcy5vblRyYW5zaXRpb25FbmQuYmluZCh0aGlzKSxcbiAgICApO1xuICB9XG5cbiAvKipcbiAgKiBGdW5jdGlvbiBjYWxsZWQgYXMgc29vbiB0aGUgbmV3IGNvbnRhaW5lciBpcyByZWFkeVxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICogQHBhcmFtIHtKUXVlcnk8SFRNTEVsZW1lbnQ+fSAkY29udGFpbmVyXG4gICovXG4gcHJvdGVjdGVkIG9uTmV3Q29udGFpbmVyTG9hZGVkKCRjb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcbiAgICBjb25zdCBjdXJyZW50U3RhdHVzID0gdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKTtcblxuICAgIGlmICghdGhpcy5kb20pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1BqYXhdIHlvdSBuZWVkIHRvIGNhbGwgdGhlIHN0YXJ0IG1ldGhvZCBmaXJzdCEnKTtcbiAgICB9XG5cbiAgICBjdXJyZW50U3RhdHVzLm5hbWVzcGFjZSA9IHRoaXMuZG9tLmdldE5hbWVzcGFjZSgkY29udGFpbmVyKTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCduZXdQYWdlUmVhZHknLFxuICAgICAgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSxcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmV2U3RhdHVzKCksXG4gICAgICAkY29udGFpbmVyLFxuICAgICAgdGhpcy5kb20uY3VycmVudEhUTUwsXG4gICAgICAkY29udGFpbmVyLmRhdGEoKSxcbiAgICAgIGZhbHNlLCAvLyB0cnVlIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgbmV3UGFnZVJlYWR5IGlzIHRpZ2dlcmVkIC8gdHJ1ZSBvbiBpbml0aWFsaXNhdGlvblxuICAgICk7XG4gIH1cblxuIC8qKlxuICAqIEZ1bmN0aW9uIGNhbGxlZCBhcyBzb29uIHRoZSB0cmFuc2l0aW9uIGlzIGZpbmlzaGVkXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbiAgcHJvdGVjdGVkIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICB0aGlzLnRyYW5zaXRpb25Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoJ3RyYW5zaXRpb25Db21wbGV0ZWQnLFxuICAgICAgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSxcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmV2U3RhdHVzKCksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0IHRoZSBldmVudHNcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgICogQHByb3RlY3RlZFxuICAgKi9cbiAgcHJvdGVjdGVkIGluaXQoJHdyYXBwZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcbiAgICBpZiAoIXRoaXMuZG9tKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tQamF4XSB5b3UgbmVlZCB0byBjYWxsIHRoZSBzdGFydCBtZXRob2QgZmlyc3QhJyk7XG4gICAgfVxuICAgIGNvbnN0ICRjb250YWluZXIgPSB0aGlzLmRvbS5nZXRDb250YWluZXIoKTtcbiAgICAvLyBjb25zdCAkd3JhcHBlciA9IHRoaXMuZG9tLmdldFdyYXBwZXIoKTtcblxuICAgICR3cmFwcGVyLmF0dHIoJ2FyaWEtbGl2ZScsICdwb2xpdGUnKTtcblxuICAgIHRoaXMuaGlzdG9yeS5hZGQoXG4gICAgICB0aGlzLmdldEN1cnJlbnRVcmwoKSxcbiAgICAgIHRoaXMuZG9tLmdldE5hbWVzcGFjZSgkY29udGFpbmVyKSxcbiAgICApO1xuXG4gICAgLy8gRmlyZSBmb3IgdGhlIGN1cnJlbnQgdmlldy5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcignaW5pdFN0YXRlQ2hhbmdlJywgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSk7XG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoJ25ld1BhZ2VSZWFkeScsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLFxuICAgICAge30sXG4gICAgICAkY29udGFpbmVyLFxuICAgICAgdGhpcy5kb20uY3VycmVudEhUTUwsXG4gICAgICAkY29udGFpbmVyLmRhdGEoKSxcbiAgICAgIHRydWUsIC8vIHRydWUgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBuZXdQYWdlUmVhZHkgaXMgdGlnZ2VyZWQgLyB0cnVlIG9uIGluaXRpYWxpc2F0aW9uXG4gICAgKTtcbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcigndHJhbnNpdGlvbkNvbXBsZXRlZCcsIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCkpO1xuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBqYXggfTtcbiIsImV4cG9ydCB7IEN1c3RvbVRyYW5zaXRpb24gfSBmcm9tICcuL0N1c3RvbVRyYW5zaXRpb24nO1xuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIElUcmFuc2l0aW9uIH0gZnJvbSAnLi9CYXNlVHJhbnNpdGlvbic7XG5leHBvcnQgeyBIaWRlU2hvd1RyYW5zaXRpb24gfSBmcm9tICcuL0hpZGVTaG93VHJhbnNpdGlvbic7XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBCYXNlQ2FjaGUgaXQncyBhIHNpbXBsZSBzdGF0aWMgY2FjaGVcbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLkJhc2VDYWNoZVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY2xhc3MgQmFzZUNhY2hlIHtcblxuICAvKipcbiAgICogVGhlIE9iamVjdCB0aGF0IGtlZXBzIGFsbCB0aGUga2V5IHZhbHVlIGluZm9ybWF0aW9uXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlQ2FjaGVcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHB1YmxpYyBkYXRhOiB7W2tleTogc3RyaW5nXTogYW55fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSBrZXkgYW5kIHZhbHVlIGRhdGEsIG1haW5seSBCYXJiYSBpcyBnb2luZyB0byBzYXZlIHByb21pc2VzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlQ2FjaGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqL1xuICBwdWJsaWMgc2V0KGtleTogc3RyaW5nLCB2YWw6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmRhdGFba2V5XSA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgZGF0YSB1c2luZyB0aGUga2V5XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlQ2FjaGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBrZXlcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2tleV07XG4gIH1cblxuICAvKipcbiAgICogRmx1c2ggdGhlIGNhY2hlXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlQ2FjaGVcbiAgICovXG4gIHB1YmxpYyByZXNldCgpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gZXh0ZW5kIHRoaXMgb2JqZWN0XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlQ2FjaGVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7b2JqZWN0fSBuZXdPYmplY3RcbiAgICogQHJldHVybiB7b2JqZWN0fSBuZXdJbmhlcml0T2JqZWN0XG4gICAqL1xuICBwcml2YXRlIGV4dGVuZChvYmo6IG9iamVjdCkge1xuICAgIHJldHVybiBVdGlscy5leHRlbmQoZmFsc2UsIHRoaXMsIG9iaik7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmFzZUNhY2hlIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJidW5kbGUuY3NzXCI7IiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElDb21wb25lbnRXcmFwcGVyUmVzdWx0LCBQamF4LCBQcmVmZXRjaCB9IGZyb20gJy4uLy4uL3RpbnliaW5kJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBzaG9waWZ5LXNlY3Rpb24tcHJvZHVjdC1zY3JvbGxiYXJcbiAqL1xuZXhwb3J0IGNvbnN0IHNob3BpZnlTZWN0aW9uUHJvZHVjdFNjcm9sbGJhckNvbXBvbmVudCA9ICgkOiBKUXVlcnlTdGF0aWMpID0+IHtcblxuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdjb21wb25lbnQ6c2hvcGlmeS1zZWN0aW9uLXByb2R1Y3Qtc2Nyb2xsYmFyJyk7XG5cbiAgY29uc3QgcGpheCA9IG5ldyBQamF4KCk7XG4gIGNvbnN0IHByZWZldGNoID0gbmV3IFByZWZldGNoKCk7XG5cbiAgY29uc3QgY29tcG9uZW50OiBJQ29tcG9uZW50V3JhcHBlclJlc3VsdDxhbnk+ID0ge1xuICAgIG5hbWU6ICdzaG9waWZ5LXNlY3Rpb24tcHJvZHVjdC1zY3JvbGxiYXInLFxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgdGhpcy5jdXN0b21EYXRhID0ge307XG4gICAgICB0aGlzLiRlbCA9ICQoZWwpO1xuICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgICAgZGVidWcoJ2luaXRpYWxpemUnLCBkYXRhKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBKdXN0IG9wZW4gdGhlIHByb2R1Y3QgdXJsXG4gICAgICAgKi9cbiAgICAgIHNjb3BlLm9uUHJvZHVjdFRhcCA9IChldmVudDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50LCBudWxsPiwgXzogYW55LCBldmVudEVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSAkKGV2ZW50RWwpLmRhdGEoJ3VybCcpO1xuICAgICAgICBwamF4LmdvVG8odXJsKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogUHJlbG9hZCBwcm9kdWN0XG4gICAgICAgKi9cbiAgICAgIHNjb3BlLm9uUHJvZHVjdE1vdXNlZW50ZXIgPSAoZXZlbnQ6IEpRdWVyeS5FdmVudDxIVE1MRWxlbWVudCwgbnVsbD4sIF86IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgdXJsID0gJChldmVudEVsKS5kYXRhKCd1cmwnKTtcbiAgICAgICAgcHJlZmV0Y2gub25MaW5rRW50ZXIoZXZlbnQsIHVybCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gc2NvcGU7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gY29tcG9uZW50O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPG5hdiBjbGFzcz1uYXYgcnYtYWRkLWNsYXNzPWxpbmtsaXN0LmhhbmRsZSBydi1jbGFzcy1uYXYtcGlsbHM9cGlsbHMgcnYtY2xhc3MtZmxleC1jb2x1bW49dmVydGljYWwgcnYtY2xhc3MtZmxleC1yb3c9XFxcInZlcnRpY2FsIHwgbm90XFxcIj4gPGRpdiBjbGFzcz1uYXYtaXRlbSBydi1lYWNoLWxpbms9bGlua2xpc3QubGlua3M+IDxhIGNsYXNzPW5hdi1saW5rIHJ2LWNsYXNzLWFjdGl2ZT1saW5rLmFjdGl2ZSBydi1yb3V0ZT1saW5rLmhyZWYgcnYtaHJlZj1saW5rLmhyZWY+e2xpbmsudGV4dH08L2E+IDwvZGl2PiA8L25hdj4gXCI7IiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElDb21wb25lbnRXcmFwcGVyUmVzdWx0IH0gZnJvbSAnLi4vLi4vdGlueWJpbmQnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vbmF2LWl0ZW1zLmNvbXBvbmVudC5odG1sJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBuYXYtaXRlbXNcbiAqL1xuZXhwb3J0IGNvbnN0IG5hdkl0ZW1zQ29tcG9uZW50ID0gKCkgPT4ge1xuXG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2NvbXBvbmVudDpuYXYtaXRlbXMnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4gPSB7XG4gICAgbmFtZTogJ25hdi1pdGVtcycsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgY29uc3Qgc2NvcGUgPSAodGhpcyBhcyBhbnkpO1xuICAgICAgZGVidWcoJ2luaXRpYWxpemUnLCBkYXRhLCB0ZW1wbGF0ZSk7XG5cbiAgICAgIHNjb3BlLmxpbmtsaXN0ID0gZGF0YS5saW5rbGlzdDtcbiAgICAgIHNjb3BlLnBpbGxzID0gZGF0YS5waWxscztcbiAgICAgIHNjb3BlLnZlcnRpY2FsID0gISFkYXRhLnZlcnRpY2FsO1xuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiIFwiOyIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSUNvbXBvbmVudFdyYXBwZXJSZXN1bHQgfSBmcm9tICcuLi8uLi90aW55YmluZCc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9pY29uc2V0LmNvbXBvbmVudC5odG1sJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBuYXYtaXRlbXNcbiAqL1xuZXhwb3J0IGNvbnN0IGljb25zZXRDb21wb25lbnQgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50Omljb25zZXQnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4gPSB7XG5cbiAgICBuYW1lOiAnaWNvbnNldCcsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBjb25zdCBzcmMgPSBkYXRhLnNyYyB8fCB3aW5kb3cubW9kZWwuc3lzdGVtLmFzc2V0c1BhdGggKyBkYXRhLm5hbWU7XG4gICAgICBjb25zdCBjb2xvciA9IGRhdGEuY29sb3IgfHwgbnVsbDtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGRhdGEuZGlyZWN0aW9uIHx8ICd0b3AnO1xuICAgICAgY29uc3Qgc2l6ZSA9IGRhdGEuc2l6ZSB8fCAzMjtcbiAgICAgIGxldCBjbGFzc1N0cmluZyA9IGBpY29uc2V0IGRpcmVjdGlvbi0ke2RpcmVjdGlvbn0gc2l6ZS0ke3NpemV9IGNvbG9yLSR7Y29sb3J9YDtcbiAgICAgIGRlYnVnKCdpbml0aWFsaXplJywgZGF0YSwgdGVtcGxhdGUpO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcgKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9ICcgcm90YXRlLTI3MCc7XG4gICAgICB9IGVsc2UgaWYgKCBkaXJlY3Rpb24gPT09ICdsZWZ0LXRvcCcgfHwgZGlyZWN0aW9uID09PSAnbGVmdC11cCcgfHwgZGlyZWN0aW9uID09PSAndG9wLWxlZnQnIHx8IGRpcmVjdGlvbiA9PT0gJ3VwLWxlZnQnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0zMTUnIDtcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ3RvcCcgfHwgZGlyZWN0aW9uID09PSAndXAnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0wJztcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ3RvcC1yaWdodCcgfHwgZGlyZWN0aW9uID09PSAndXAtcmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0LXRvcCcgfHwgZGlyZWN0aW9uID09PSAncmlnaHQtdXAnKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9ICcgcm90YXRlLTQ1JztcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyApIHtcbiAgICAgICAgY2xhc3NTdHJpbmcgKz0gJyByb3RhdGUtOTAnO1xuICAgICAgfSBlbHNlIGlmICggZGlyZWN0aW9uID09PSAncmlnaHQtYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodC1kb3duJyB8fCBkaXJlY3Rpb24gPT09ICdib3R0b20tcmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ2Rvd24tcmlnaHQnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0xMzUnO1xuICAgICAgfSBlbHNlIGlmICggZGlyZWN0aW9uID09PSAnYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyApIHtcbiAgICAgICAgY2xhc3NTdHJpbmcgKz0gJyByb3RhdGUtMTgwJztcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ2xlZnQtYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0LWRvd24nIHx8IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbS1sZWZ0JyB8fCBkaXJlY3Rpb24gPT09ICdkb3duLWxlZnQnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0yMjUnO1xuICAgICAgfVxuXG4gICAgICAkKGVsKVxuICAgICAgLmxvYWQoIHNyYyApXG4gICAgICAuY3NzKHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGhlaWdodDogc2l6ZSArICdweCcsXG4gICAgICAgIHdpZHRoOiBzaXplICsgJ3B4JyxcbiAgICAgIH0pXG4gICAgICAuYWRkQ2xhc3MoY2xhc3NTdHJpbmcpXG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAuYXR0cigncm9sZScsICdpbWcnKTtcblxuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGgxIGNsYXNzPWxlYWQ+c2NocmVpYiB1bnM8L2gxPiA8cD4gSGV5IEAgQXJ0K0NvZGUgU3R1ZGlvLDxici8+IGljaCBiaW4gPHNwYW4gY2xhc3M9dGV4dC1kYW5nZXIgY29udGVudGVkaXRhYmxlPXRydWUgcnYtdmFsdWU9XFxcIm5hbWUgfCBkZWZhdWx0ICdOYW1lJ1xcXCI+PC9zcGFuPiB1bmQgbcO2Y2h0ZSA8c3BhbiBjbGFzcz10ZXh0LWRhbmdlciBjb250ZW50ZWRpdGFibGU9dHJ1ZSBydi12YWx1ZT1cXFwibWVzc2FnZSB8IGRlZmF1bHQgJ05hY2hyaWNodCdcXFwiPjwvc3Bhbj4uPGJyLz4gPGJyPiBNZWxkZXQgZXVjaCwgPHNwYW4gY2xhc3M9dGV4dC1kYW5nZXIgY29udGVudGVkaXRhYmxlPXRydWUgcnYtdmFsdWU9XFxcInJlZ2FyZHMgfCBkZWZhdWx0ICdoYXN0YSBsYSB2aXN0YSdcXFwiPjwvc3Bhbj48YnIvPiA8c3BhbiBydi1odG1sPW5hbWU+PC9zcGFuPjxicj4gPGJyPiBQLlMuPGJyPiBTY2hyZWlidCBtaXIgYW4gPHNwYW4gY2xhc3M9dGV4dC1kYW5nZXIgY29udGVudGVkaXRhYmxlPXRydWUgcnYtdmFsdWU9XFxcIm1haWwgfCBkZWZhdWx0ICdFLU1haWwnXFxcIj48L3NwYW4+IG9kZXIgcnVmdCBtaWNoIHVudGVyIDxzcGFuIGNsYXNzPXRleHQtZGFuZ2VyIGNvbnRlbnRlZGl0YWJsZT10cnVlIHJ2LXZhbHVlPVxcXCJwaG9uZSB8IGRlZmF1bHQgJ1RlbGVmb24nXFxcIj48L3NwYW4+IGFuLiA8L3A+IDxhIGNsYXNzPXRleHQtbGlnaHQgaHJlZj0jIHJ2LW9uLWNsaWNrPXNlbmQ+QWJzZW5kZW48L2E+XCI7IiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50V3JhcHBlclJlc3VsdCB9IGZyb20gJy4uLy4uL3RpbnliaW5kJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NvbnRhY3QuY29tcG9uZW50Lmh0bWwnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIHRzbGludDpkaXNhYmxlOiBpbnRlcmZhY2UtbmFtZVxuICBpbnRlcmZhY2UgV2luZG93IHsgbW9kZWw6IGFueTsgfVxufVxuXG4vKipcbiAqIGNvbnRhY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRhY3RDb21wb25lbnQgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50OmNvbnRhY3QnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4gPSB7XG5cbiAgICBuYW1lOiAnY29udGFjdCcsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgY29uc3Qgc2NvcGUgPSAodGhpcyBhcyBhbnkpO1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBzY29wZS5uYW1lID0gJyc7XG4gICAgICBzY29wZS5tZXNzYWdlID0gJyc7XG4gICAgICBzY29wZS5yZWdhcmRzID0gJyc7XG4gICAgICBzY29wZS5tYWlsID0gJyc7XG4gICAgICBzY29wZS5waG9uZSA9ICcnO1xuXG4gICAgICBzY29wZS5zZW5kID0gKCkgPT4ge1xuICAgICAgICBkZWJ1Zygnc2VuZCcpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJleHBvcnQgeyBjb250YWN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb250YWN0L2NvbnRhY3QuY29tcG9uZW50JztcbmV4cG9ydCB7IGljb25zZXRDb21wb25lbnQgfSBmcm9tICcuL2ljb25zZXQvaWNvbnNldC5jb21wb25lbnQnO1xuZXhwb3J0IHsgbmF2SXRlbXNDb21wb25lbnQgfSBmcm9tICcuL25hdi1pdGVtcy9uYXYtaXRlbXMuY29tcG9uZW50JztcbmV4cG9ydCB7IHNob3BpZnlTZWN0aW9uUHJvZHVjdFNjcm9sbGJhckNvbXBvbmVudCB9IGZyb20gJy4vc2hvcGlmeS1zZWN0aW9uLXByb2R1Y3Qtc2Nyb2xsYmFyL3Nob3BpZnktc2VjdGlvbi1wcm9kdWN0LXNjcm9sbGJhci5jb21wb25lbnQnO1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi8uLi90aW55YmluZCc7XG5cbi8qKlxuICogU2Nyb2xsIGFuIHNjcm9sbGFibGUgZWxlbWVudCBieSBkcmFnaW5nIGFuZCBtb3ZpbmcgeW91ciBtb3VzZS5cbiAqIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9hc3ZkL2RyYWdzY3JvbGxcbiAqL1xuZXhwb3J0IGNsYXNzIERyYWdzY3JvbGwge1xuICBwdWJsaWMgZGVidWcgPSBEZWJ1ZygnYmluZGVyczpzY3JvbGxiYXItZHJhZ2FibGUnKTtcbiAgcHJpdmF0ZSBsYXN0Q2xpZW50WCA9IDA7XG4gIHByaXZhdGUgbGFzdENsaWVudFkgPSAwO1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBwdXNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihlbDogSFRNTEVsZW1lbnQsIGRldGVjdEdsb2JhbE1vdmUgPSB0cnVlKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuXG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tZC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tZC5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cbiAgICAvLyBVc2UgZ2xvYmFsIG1vdmUgaWYgeW91ciBlbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgZnVsbCB3aWR0aCAvIGhlaWdodFxuICAgIGlmIChkZXRlY3RHbG9iYWxNb3ZlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubXUuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW0uYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubXUuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW0uYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5tdS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1tLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubXUuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tbS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBtZCA8RXZlbnRMaXN0ZW5lcj4oZTogTW91c2VFdmVudCkge1xuICAgIHRoaXMucHVzaGVkID0gdHJ1ZTtcbiAgICB0aGlzLmxhc3RDbGllbnRYID0gZS5jbGllbnRYO1xuICAgIHRoaXMubGFzdENsaWVudFkgPSBlLmNsaWVudFk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBtdSA8RXZlbnRMaXN0ZW5lcj4oZTogTW91c2VFdmVudCkge1xuICAgIHRoaXMucHVzaGVkID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIG1tIDxFdmVudExpc3RlbmVyPihlOiBNb3VzZUV2ZW50KSB7XG4gICAgbGV0IG5ld1Njcm9sbFggPSAwO1xuICAgIGxldCBuZXdTY3JvbGxZID0gMDtcbiAgICBpZiAodGhpcy5wdXNoZWQpIHtcbiAgICAgIHRoaXMuZWwuc2Nyb2xsTGVmdCAtPSBuZXdTY3JvbGxYID0gKC0gdGhpcy5sYXN0Q2xpZW50WCArICh0aGlzLmxhc3RDbGllbnRYID0gZS5jbGllbnRYKSk7XG4gICAgICB0aGlzLmVsLnNjcm9sbFRvcCAtPSBuZXdTY3JvbGxZID0gKC0gdGhpcy5sYXN0Q2xpZW50WSArICh0aGlzLmxhc3RDbGllbnRZID0gZS5jbGllbnRZKSk7XG4gICAgICBpZiAodGhpcy5lbCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB0aGlzLmVsLnNjcm9sbExlZnQgLT0gbmV3U2Nyb2xsWDtcbiAgICAgICAgdGhpcy5lbC5zY3JvbGxUb3AgLT0gbmV3U2Nyb2xsWTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBkcmFnc2Nyb2xsXG4gKi9cbmV4cG9ydCBjb25zdCBzY3JvbGxiYXJEcmFnYWJsZUJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgY29uc3QgbmFtZSA9ICdzY3JvbGxiYXItZHJhZ2FibGUnO1xuICBjb25zdCBiaW5kZXI6IElPbmVXYXlCaW5kZXI8c3RyaW5nPiA9IChlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnkpID0+IHtcbiAgICBjb25zdCBkcmFnc2Nyb2xsID0gbmV3IERyYWdzY3JvbGwoZWwsIHRydWUpO1xuICAgIGRyYWdzY3JvbGwuZGVidWcoJ3JlYWR5Jyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgYmluZGVyLFxuICAgIG5hbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJVHdvV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vdGlueWJpbmQnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9VdGlscyc7XG5cbi8qKlxuICogdmFsdWUgZm9yIGlucG91dHMsIHRleHRhcmVhcyBhbmQgY29udGVudGVkaXRhYmxlc1xuICogVE9ETyBzdXBwb3J0IHNlbGVjdFxuICovXG5leHBvcnQgY29uc3QgdmFsdWVCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2JpbmRlcjp2YWx1ZScpO1xuICBjb25zdCBuYW1lID0gJ3ZhbHVlJztcbiAgY29uc3QgdmFsdWU6IElUd29XYXlCaW5kZXI8c3RyaW5nPiA9IHtcbiAgICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgZGVidWcoJ2JpbmQnLCB0aGlzKTtcbiAgICAgIHRoaXMuY3VzdG9tRGF0YSA9IHt9O1xuICAgICAgdGhpcy5jdXN0b21EYXRhLiRlbCA9ICQoZWwpO1xuICAgICAgdGhpcy5jdXN0b21EYXRhLnR5cGUgPSB0aGlzLmN1c3RvbURhdGEuJGVsLnByb3AoJ3R5cGUnKTtcbiAgICAgIHRoaXMuY3VzdG9tRGF0YS50YWdOYW1lID0gdGhpcy5jdXN0b21EYXRhLiRlbC5wcm9wKCd0YWdOYW1lJyk7XG4gICAgICB0aGlzLmN1c3RvbURhdGEuY29udGVudGVkaXRhYmxlID0gdGhpcy5jdXN0b21EYXRhLiRlbC5hdHRyKCdjb250ZW50ZWRpdGFibGUnKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIHRoaXMuY3VzdG9tRGF0YS4kZWwub24oJ2NoYW5nZSBpbnB1dCBrZXl1cCBwYXN0ZSBibHVyIGZvY3VzJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnB1Ymxpc2goKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB1bmJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICB0aGlzLmN1c3RvbURhdGEuJGVsLm9mZignY2hhbmdlIGlucHV0IGtleXVwIHBhc3RlIGJsdXIgZm9jdXMnKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmN1c3RvbURhdGE7XG4gICAgfSxcblxuICAgIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgICBlbCA9IChlbCBhcyBIVE1MSW5wdXRFbGVtZW50ICk7XG4gICAgICBkZWJ1Zygncm91dGluZSBuZXdWYWx1ZScsIG5ld1ZhbHVlKTtcbiAgICAgIGlmIChVdGlscy5pc1N0cmluZyhuZXdWYWx1ZSkpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmdldFZhbHVlKChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KSk7XG4gICAgICAgIGRlYnVnKCdyb3V0aW5lJywgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy5jdXN0b21EYXRhLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0lOUFVUJzpcbiAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLiRlbC52YWwobmV3VmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1RFWFRBUkVBJzpcbiAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLiRlbC52YWwobmV3VmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIC8vIGUuZy4gb24gY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS4kZWwuaHRtbChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRWYWx1ZShlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCB2YWw7XG4gICAgICBzd2l0Y2ggKHRoaXMuY3VzdG9tRGF0YS50YWdOYW1lKSB7XG4gICAgICAgIGNhc2UgJ0lOUFVUJzpcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuY3VzdG9tRGF0YS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh0aGlzLmN1c3RvbURhdGEuJGVsLnZhbCgpKSB8fCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YWwgPSB0aGlzLmN1c3RvbURhdGEuJGVsLnZhbCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxuICAgICAgICAgIHZhbCA9IHRoaXMuY3VzdG9tRGF0YS4kZWwudmFsKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBlLmcuIG9uIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAgIHZhbCA9IHRoaXMuY3VzdG9tRGF0YS4kZWwuaHRtbCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVidWcoJ2dldFZhbHVlJywgdmFsKTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBwcmlvcml0eTogMzAwMCxcbiAgICBwdWJsaXNoZXM6IHRydWUsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IHZhbHVlLFxuICAgIG5hbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5cbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kSW1hZ2U6IElPbmVXYXlCaW5kZXI8c3RyaW5nPiA9IChlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgJGVsID0gJChlbCk7XG4gICRlbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKCcgKyB2YWx1ZSArICcpJyk7XG59O1xuXG4vKipcbiAqIGJhY2tncm91bmQtaW1hZ2VcbiAqL1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRJbWFnZUJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGJhY2tncm91bmRJbWFnZSxcbiAgICBuYW1lOiAnYmFja2dyb3VuZC1pbWFnZScsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuZXhwb3J0IGNvbnN0IGltYWdlQm94OiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAkZWwuYWRkQ2xhc3MoJ2ltYWdlLWJveCcpO1xuICBpZiAodmFsdWUpIHtcbiAgICBjb25zdCByYXRpb1N0cmluZ3MgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IHJhdGlvcyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG4gICAgcmF0aW9zWzBdID0gTnVtYmVyKHJhdGlvU3RyaW5nc1swXSk7XG4gICAgcmF0aW9zWzFdID0gTnVtYmVyKHJhdGlvU3RyaW5nc1sxXSk7XG4gICAgY29uc3QgaGVpZ2h0SW5QZXJjZW50ID0gKHJhdGlvc1sxXSAvIHJhdGlvc1swXSAqIDEwMCk7XG4gICAgY29uc3QgcmF0aW9DbGFzcyA9ICdyYXRpby0nICsgcmF0aW9zWzBdICsgJy0nICsgcmF0aW9zWzFdO1xuICAgIGNvbnN0IHN0eWxlID0gJ3BhZGRpbmctdG9wOiAnICsgaGVpZ2h0SW5QZXJjZW50ICsgJyU7JztcbiAgICAkZWwuYWRkQ2xhc3MocmF0aW9DbGFzcyk7XG4gICAgJCgnaGVhZCcpLmFwcGVuZCgnPHN0eWxlPi5pbWFnZS1ib3guJyArIHJhdGlvQ2xhc3MgKyAnOmJlZm9yZXsnICsgc3R5bGUgKyAnfTwvc3R5bGU+Jyk7XG4gIH1cbn07XG5cbi8qKlxuICogbWFpbHRvXG4gKi9cbmV4cG9ydCBjb25zdCBpbWFnZUJveEJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGltYWdlQm94LFxuICAgIG5hbWU6ICdpbWFnZS1ib3gnLFxuICB9O1xufTtcbiIsImltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL3NlcnZpY2VzL1V0aWxzJztcblxuLyoqXG4gKiBtYWlsdG9cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGVuZEh0bWxCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSAnYXBwZW5kLWh0bWwnO1xuICBjb25zdCBhcHBlbmRIdG1sOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgaWYgKCFVdGlscy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gJGVsLmF0dHIoJ3J2LWFwcGVuZC1odG1sJykgfHwgJyc7XG4gICAgfVxuICAgIGNvbnN0IGh0bWxOb2RlcyA9ICQucGFyc2VIVE1MKHZhbHVlKTtcbiAgICAkKGVsKS5hcHBlbmQoaHRtbE5vZGVzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGFwcGVuZEh0bWwsXG4gICAgbmFtZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuZXhwb3J0IGNvbnN0IGNsYXNzQWRkUmVtb3ZlOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgY29uc3QgJGVsID0gJChlbCk7XG4gIGNvbnN0IGNsYXNzTmFtZSA9ICh0aGlzIGFzIGFueSkuYXJnc1swXTtcbiAgLy8gZGVidWcoJ2NsYXNzLSonLCBjbGFzc05hbWUsIHZhbHVlKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBjbGFzcy0qXG4gKiBjbGFzcy1bY2xhc3NuYW1lXVxuICpcbiAqIEN1c3RvbSB2ZXJzaW9uIG9mIGNsYXNzLVtjbGFzc25hbWVdXG4gKiBBZGRzIGEgY2xhc3MgKHdoYXRldmVyIHZhbHVlIGlzIGluIHBsYWNlIG9mIFtjbGFzc25hbWVdKSBvbiB0aGUgZWxlbWVudCB3aGVuIHRoZSB2YWx1ZSBldmFsdWF0ZXMgdG8gdHJ1ZSBhbmQgcmVtb3ZlcyB0aGF0IGNsYXNzIGlmIHRoZSB2YWx1ZSBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBAc2VlIGh0dHA6Ly9yaXZldHNqcy5jb20vZG9jcy9yZWZlcmVuY2UvI2NsYXNzLVtjbGFzc25hbWVdXG4gKi9cbmV4cG9ydCBjb25zdCBjbGFzc0FkZFJlbW92ZUJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGNsYXNzQWRkUmVtb3ZlLFxuICAgIG5hbWU6ICdjbGFzcy0qJyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuLyoqXG4gKiBhZGQtY2xhc3NcbiAqIEBwYXJhbSBlbFxuICogQHBhcmFtIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRDbGFzczogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLmFkZENsYXNzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkQ2xhc3NCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSAnbWFpbHRvJztcbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYW55KSA9PiB7XG4gICAgJChlbCkuYXR0cignaHJlZicsICdtYWlsdG86JyArIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGFkZENsYXNzLFxuICAgIG5hbWU6ICdhZGQtY2xhc3MnLFxuICB9O1xufTtcbiIsImltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzczogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIHJlbW92ZS1jbGFzc1xuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlQ2xhc3NCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmluZGVyOiByZW1vdmVDbGFzcyxcbiAgICBuYW1lOiAncmVtb3ZlLWNsYXNzJyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuLyoqXG4gKiBmb3ItKi0qXG4gKiBmb3ItZnJvbS10b1xuICovXG5leHBvcnQgY29uc3QgZm9yRnJvbVRvQmluZGVyOiBCaW5kZXJXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBuYW1lID0gJ2Zvci0qLSonO1xuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdiaW5kZXJzOicgKyBuYW1lKTtcbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCBzdGFydCA9IE51bWJlcigodGhpcyBhcyBhbnkpLmFyZ3NbMF0pO1xuICAgIGNvbnN0IGVuZCA9IE51bWJlcigodGhpcyBhcyBhbnkpLmFyZ3NbMV0pO1xuICAgIGRlYnVnKCdzdGFydCcsIHN0YXJ0LCAnZW5kJywgZW5kKTtcbiAgICBjb25zdCBodG1sU3RyaW5nID0gJGVsLmh0bWwoKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IHN0YXJ0OyBpbmRleCA8IGVuZDsgaW5kZXgrKykge1xuICAgICAgLy8gJGVsLmNoaWxkcmVuKCkuY2xvbmUoKS5hcHBlbmRUbygkZWwpO1xuICAgICAgZGVidWcoJ2luZGV4JywgaW5kZXgpO1xuICAgICAgLy8gaHRtbCArPSBodG1sO1xuICAgIH1cbiAgICBkZWJ1ZygnaHRtbCcsIGh0bWxTdHJpbmcpO1xuICAgIC8vICRlbC5odG1sKCd0ZXN0Jyk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcbiIsImltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5cbi8qKlxuICogdGVsXG4gKi9cbmV4cG9ydCBjb25zdCB0ZWxCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSAndGVsJztcbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYW55KSA9PiB7XG4gICAgJChlbCkuYXR0cignaHJlZicsICd0ZWw6JyArIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXIsXG4gICAgbmFtZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBJT25lV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vdGlueWJpbmQnO1xuXG4vKipcbiAqIG1haWx0b1xuICovXG5leHBvcnQgY29uc3QgbWFpbHRvQmluZGVyOiBCaW5kZXJXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBuYW1lID0gJ21haWx0byc7XG4gIGNvbnN0IGJpbmRlcjogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGFueSkgPT4ge1xuICAgICQoZWwpLmF0dHIoJ2hyZWYnLCAnbWFpbHRvOicgKyB2YWx1ZSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgYmluZGVyLFxuICAgIG5hbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJT25lV2F5QmluZGVyLCBJVHdvV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vdGlueWJpbmQnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9VdGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnMge1xuICBhbmdsZTogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcbiAgZGlyZWN0aW9uOiAxIHwgLTE7XG4gIGp1bXBzOiBudW1iZXI7XG4gIGRlbGF5OiBudW1iZXI7XG4gIHdpZHRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNsaWRlb3V0IGNsaWNrIGV2ZW50IHRvIHRvZ2dsZSB0aGUgc2xpZGVvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IGF1dG9zY3JvbGxCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnYmluZGVyOmF1dG9zY3JvbGwnKTtcblxuICBjb25zdCBuYW1lID0gJ2F1dG9zY3JvbGwnO1xuXG4gIGNvbnN0IGdldFdpZHRoID0gKCRlbDogSlF1ZXJ5PEhUTUxFbGVtZW50Piwgb3B0aW9uczogSU9wdGlvbnMpID0+IHtcbiAgICBsZXQgdztcbiAgICBpZiAob3B0aW9ucy53aWR0aCA9PT0gJzEwMHZ3Jykge1xuICAgICAgdyA9IFV0aWxzLmdldFZpZXdwb3J0RGltZW5zaW9ucygpLnc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRvZG8ganVzdCBkaWdpdHNcbiAgICAgIHcgPSAkZWwucHJvcCgnc2Nyb2xsV2lkdGgnKSAtICgkZWwub3V0ZXJXaWR0aCgpIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gdztcbiAgfTtcblxuICAvLyBUT0RPIHRyeSBhbHRlcm5hdGl2ZSB2ZXJzaW9uIGZyb20gaHR0cHM6Ly93d3cuc2l0ZXBvaW50LmNvbS9jb21tdW5pdHkvdC9hdXRvLXNjcm9sbGluZy1hLWRpdi13aXRoLW92ZXJmbG93LXNjcm9sbC1hdXRvLzIyOTEvM1xuICBjb25zdCBpbml0QXV0b3Njcm9sbCA9ICgkZWw6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG9wdGlvbnM6IElPcHRpb25zKSA9PiB7XG4gICAgbGV0IGRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIGNvbnN0IGp1bXBzID0gb3B0aW9ucy5qdW1wcztcbiAgICBjb25zdCBkZWxheSA9IG9wdGlvbnMuZGVsYXk7XG4gICAgbGV0IHN0b3AgPSBmYWxzZTtcbiAgICBsZXQgcG9zaXRpb24gPSBudWxsO1xuICAgIGxldCBtYXhTY3JvbGxXaWR0aCA9IGdldFdpZHRoKCRlbCwgb3B0aW9ucyk7XG5cbiAgICAkKCB3aW5kb3cgKS5yZXNpemUoKCkgPT4ge1xuICAgICAgbWF4U2Nyb2xsV2lkdGggPSBnZXRXaWR0aCgkZWwsIG9wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgIC8vIHN0YXJ0IHJpZ2h0XG4gICAgICAkZWwuc2Nyb2xsTGVmdChtYXhTY3JvbGxXaWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN0YXJ0IGxlZnRcbiAgICAgICRlbC5zY3JvbGxMZWZ0KDApO1xuICAgIH1cblxuICAgIGNvbnN0IHNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGlmIChzdG9wKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoc2Nyb2xsLCAyMDApO1xuICAgICAgfVxuXG4gICAgICBwb3NpdGlvbiA9ICRlbC5zY3JvbGxMZWZ0KCkgfHwgMDtcbiAgICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gKyBqdW1wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gLSBqdW1wcztcbiAgICAgIH1cblxuICAgICAgaWYgKCBwb3NpdGlvbiA8PSA1KSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID49IG1heFNjcm9sbFdpZHRoKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJGVsLmFuaW1hdGUoe1xuICAgICAgICBzY3JvbGxMZWZ0OiBwb3NpdGlvbixcbiAgICAgIH0sIGRlbGF5LCAnbGluZWFyJywgc2Nyb2xsKTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VJbiA9ICgpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICgkZWwuZmlsdGVyKCc6aG92ZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgZGlyZWN0aW9uICo9IC0xO1xuICAgICAgICAgIH1cbiAgICAgIH0sIDEwKTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VPdXQgPSAoKSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHN0b3AgJiYgISRlbC5maWx0ZXIoJzpob3ZlcicpLmxlbmd0aCkge1xuICAgICAgICAgIHN0b3AgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKTtcbiAgICB9O1xuXG4gICAgJGVsLmhvdmVyKG1vdXNlSW4sIG1vdXNlT3V0KTtcblxuICAgIHJldHVybiBzZXRUaW1lb3V0KHNjcm9sbCwgMCk7XG4gIH07XG5cbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPElPcHRpb25zPiA9IChlbDogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IElPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgLy8gZGVidWcoJ2luaXQnLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndpZHRoICYmIFV0aWxzLmlzU3RyaW5nKG9wdGlvbnMud2lkdGgpKSB7XG4gICAgICBpZiAob3B0aW9ucy53aWR0aCA9PT0gJzEwMHZ3Jykge1xuICAgICAgICAvLyBVdGlscy5nZXRWaWV3cG9ydERpbWVuc2lvbnMoKS53XG4gICAgICAgICRlbC5jc3MoJ3dpZHRoJywgb3B0aW9ucy53aWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWwuY3NzKCd3aWR0aCcsIG9wdGlvbnMud2lkdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhgcnYtYXV0b3Njcm9sbC0ke29wdGlvbnMuYW5nbGV9YCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGluaXRBdXRvc2Nyb2xsKCRlbCwgb3B0aW9ucyk7XG4gICAgfSwgMTAwMCk7XG5cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcbiIsIlxuLy8gYmluZGVyc1xuZXhwb3J0IHsgYXV0b3Njcm9sbEJpbmRlciB9IGZyb20gJy4vYXV0b3Njcm9sbC5iaW5kZXInO1xuZXhwb3J0IHsgbWFpbHRvQmluZGVyIH0gZnJvbSAnLi9tYWlsdG8uYmluZGVyJztcbmV4cG9ydCB7IHRlbEJpbmRlciB9IGZyb20gJy4vdGVsLmJpbmRlcic7XG5leHBvcnQgeyBmb3JGcm9tVG9CaW5kZXIgfSBmcm9tICcuL2Zvci1mcm9tLXRvLmJpbmRlcic7XG5leHBvcnQgeyByZW1vdmVDbGFzc0JpbmRlciB9IGZyb20gJy4vcmVtb3ZlLWNsYXNzLmJpbmRlcic7XG5leHBvcnQgeyBhZGRDbGFzc0JpbmRlciB9IGZyb20gJy4vYWRkLWNsYXNzLmJpbmRlcic7XG5leHBvcnQgeyBjbGFzc0FkZFJlbW92ZUJpbmRlciB9IGZyb20gJy4vY2xhc3MtYWRkLXJlbW92ZS5iaW5kZXInO1xuZXhwb3J0IHsgYXBwZW5kSHRtbEJpbmRlciB9IGZyb20gJy4vYXBwZW5kLWh0bWwuYmluZGVyJztcbmV4cG9ydCB7IGltYWdlQm94QmluZGVyIH0gZnJvbSAnLi9pbWFnZS1ib3guYmluZGVyJztcbmV4cG9ydCB7IGJhY2tncm91bmRJbWFnZUJpbmRlciB9IGZyb20gJy4vYmFja2dyb3VuZC1pbWFnZS5iaW5kZXInO1xuZXhwb3J0IHsgdmFsdWVCaW5kZXIgfSBmcm9tICcuL3ZhbHVlLmJpbmRlcic7XG5leHBvcnQgeyBzY3JvbGxiYXJEcmFnYWJsZUJpbmRlciB9IGZyb20gJy4vc2Nyb2xsYmFyL3Njcm9sbGJhci1kcmFnYWJsZS5iaW5kZXInO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIHVwcGVyY2FzZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyN1cGNhc2VcbiAqL1xuZXhwb3J0IGNvbnN0IHVwY2FzZSA9IChzdHI6IHN0cmluZykgPT4gIHtcbiAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpO1xufTtcbiIsIi8qKlxuICogU3RyaXBzIHRhYnMsIHNwYWNlcywgYW5kIG5ld2xpbmVzIChhbGwgd2hpdGVzcGFjZSkgZnJvbSB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZSBvZiBhIHN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzdHJpcFxuICovXG5leHBvcnQgY29uc3Qgc3RyaXAgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0ci50cmltKCk7XG59O1xuIiwiLyoqXG4gKiBUaGUgYHNsaWNlYCBmaWx0ZXIgcmV0dXJucyBhIHN1YnN0cmluZywgc3RhcnRpbmcgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAqIEFuIG9wdGlvbmFsIHNlY29uZCBwYXJhbWV0ZXIgY2FuIGJlIHBhc3NlZCB0byBzcGVjaWZ5IHRoZSBsZW5ndGggb2YgdGhlIHN1YnN0cmluZy5cbiAqIElmIG5vIHNlY29uZCBwYXJhbWV0ZXIgaXMgZ2l2ZW4sIGEgc3Vic3RyaW5nIG9mIG9uZSBjaGFyYWN0ZXIgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzbGljZVxuICovXG5leHBvcnQgY29uc3Qgc2xpY2UgPSAodmFsdWU6IGFueSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHZhbHVlLnNsaWNlKHN0YXJ0LCBlbmQpO1xufTtcbiIsIi8qKlxuICogUHJlcGVuZHMgY2hhcmFjdGVycyB0byBhIHN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNwcmVwZW5kXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwZW5kID0gKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBiICsgYTtcbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IHBsdXJhbGl6ZSA9IChpbnB1dDogYW55LCBzaW5ndWxhcjogc3RyaW5nLCBwbHVyYWw6IHN0cmluZykgPT4ge1xuICBpZiAocGx1cmFsID09PSBudWxsKSB7XG4gICAgcGx1cmFsID0gc2luZ3VsYXIgKyAncyc7XG4gIH1cbiAgaWYgKFV0aWxzLmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgaW5wdXQgPSBpbnB1dC5sZW5ndGg7XG4gIH1cbiAgaWYgKGlucHV0ID09PSAxKSB7XG4gICAgcmV0dXJuIHNpbmd1bGFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwbHVyYWw7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIFV0aWxzLmlzU3RyaW5nKHN0cik7XG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL3Byb3BlcnR5L2VtcHR5LmZvcm1hdHRlcic7XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmcgYW5kIG5vdCBlbXB0eVxuICovXG5leHBvcnQgY29uc3QgZmlsbGVkID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBVdGlscy5pc1N0cmluZyhzdHIpICYmICFlbXB0eShzdHIucmVwbGFjZSgvXFxzL2csICcnKSk7XG59O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIGxvd2VyY2FzZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNkb3duY2FzZVxuICovXG5leHBvcnQgY29uc3QgZG93bmNhc2UgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xufTtcbiIsIi8qKlxuICogQXBwZW5kcyBjaGFyYWN0ZXJzIHRvIGEgc3RyaW5nLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI2FwcGVuZFxuICovXG5leHBvcnQgY29uc3QgYXBwZW5kID0gKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBhICsgYjtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gc3RyaW5nIGZvcm1hdHRlcnNcbmltcG9ydCB7IGFwcGVuZCB9IGZyb20gJy4vYXBwZW5kLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBkb3duY2FzZSB9IGZyb20gJy4vZG93bmNhc2UuZm9ybWF0dGVyJztcbmltcG9ydCB7IGZpbGxlZCB9IGZyb20gJy4vZmlsbGVkLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4vaXNTdHJpbmcuZm9ybWF0dGVyJztcbmltcG9ydCB7IHBsdXJhbGl6ZSB9IGZyb20gJy4vcGx1cmFsaXplLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBwcmVwZW5kIH0gZnJvbSAnLi9wcmVwZW5kLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vc2xpY2UuZm9ybWF0dGVyJztcbmltcG9ydCB7IHN0cmlwIH0gZnJvbSAnLi9zdHJpcC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgdXBjYXNlIH0gZnJvbSAnLi91cGNhc2UuZm9ybWF0dGVyJztcblxuZXhwb3J0IHsgYXBwZW5kLCBkb3duY2FzZSwgZmlsbGVkLCBpc1N0cmluZywgcGx1cmFsaXplLCBwcmVwZW5kLCBzbGljZSwgc3RyaXAsIHVwY2FzZSB9O1xuXG5leHBvcnQgY29uc3Qgc3RyaW5nRm9ybWF0dGVyczogSUZvcm1hdHRlcnMgPSB7XG4gIGFwcGVuZCwgZG93bmNhc2UsIGZpbGxlZCwgaXNTdHJpbmcsIHBsdXJhbGl6ZSwgcHJlcGVuZCwgc2xpY2UsIHN0cmlwLCB1cGNhc2UsXG59O1xuIiwiLyoqXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgY3VycmVuY3kgKGllICQxLDIzNC41NikuIFdoZW4gbm8gY3VycmVuY3kgc3ltYm9sIGlzIHByb3ZpZGVkLCBkZWZhdWx0IHN5bWJvbCBmb3IgY3VycmVudCBsb2NhbGUgaXMgdXNlZC5cbiAqIEBwYXJhbSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuIChvcHRpb25hbClcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2ZpbHRlci9jdXJyZW5jeVxuICovXG5leHBvcnQgY29uc3QgY3VycmVuY3kgPSAoYW1vdW50OiBudW1iZXIsIHN5bWJvbDogc3RyaW5nKSA9PiB7XG4gIGxldCByZXN1bHQgPSBhbW91bnQudG9GaXhlZCgyKS50b1N0cmluZygpLnJlcGxhY2UoJy4nLCAnLCcpO1xuICBpZiAoc3ltYm9sKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgc3ltYm9sO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogU2V0IGRlZmF1bHQgdmFsdWVcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBkZWYgPSAodmFsdWU6IGFueSwgZGVmYXVsdFZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKFV0aWxzLmlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICBpZiAoVXRpbHMuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBjb25zb2xlRGVidWcgPSBEZWJ1ZygnZm9ybWF0dGVyJyk7XG5cbmV4cG9ydCBjb25zdCBkZWJ1ZyA9ICh0YXJnZXQ6IGFueSkgPT4ge1xuICBjb25zb2xlRGVidWcodGFyZ2V0KTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gc3BlY2lhbCBoZWxwZXIgZm9ybWF0dGVyc1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuL2RlYnVnLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBkZWYgfSBmcm9tICcuL2RlZi5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgY3VycmVuY3kgfSBmcm9tICcuL2N1cnJlbmN5LmZvcm1hdHRlcic7XG5cbi8vIEFkZCBTaG9waWZ5LXNwZWNpZmljIGZvcm1hdHRlcnMgZm9yIFJpdmV0cy5qcy5cbi8vIGV4cG9ydCBjb25zdCBtb25leSA9ICh2YWx1ZSwgY3VycmVuY3kpID0+IHtcbi8vICAgcmV0dXJuIFV0aWxzLmZvcm1hdE1vbmV5KHZhbHVlLCBQcm9kdWN0SlMuc2V0dGluZ3MubW9uZXlGb3JtYXQsICdtb25leV9mb3JtYXQnLCBjdXJyZW5jeSk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgbW9uZXlXaXRoQ3VycmVuY3kgPSAodmFsdWUsIGN1cnJlbmN5KSA9PiB7XG4vLyAgIHJldHVybiBVdGlscy5mb3JtYXRNb25leSh2YWx1ZSwgUHJvZHVjdEpTLnNldHRpbmdzLm1vbmV5V2l0aEN1cnJlbmN5Rm9ybWF0LCAnbW9uZXlfd2l0aF9jdXJyZW5jeV9mb3JtYXQnLCBjdXJyZW5jeSk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3Qgd2VpZ2h0ID0gKGdyYW1zKSA9PiB7XG4vLyAgIHN3aXRjaCAoQ2FydEpTLnNldHRpbmdzLndlaWdodFVuaXQpIHtcbi8vICAgICBjYXNlICdrZyc6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zIC8gMTAwMCkudG9GaXhlZChDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0UHJlY2lzaW9uKTtcbi8vICAgICBjYXNlICdveic6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zICogMC4wMzUyNzQpLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgICAgY2FzZSAnbGInOlxuLy8gICAgICAgcmV0dXJuIChncmFtcyAqIDAuMDAyMjA0NjIpLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgICAgZGVmYXVsdDpcbi8vICAgICAgIHJldHVybiBncmFtcy50b0ZpeGVkKENhcnRKUy5zZXR0aW5ncy53ZWlnaHRQcmVjaXNpb24pO1xuLy8gICB9XG4vLyB9O1xuXG4vKipcbiAqIEZvcm1hdHMgdGhlIHByb2R1Y3QgdmFyaWFudCdzIHdlaWdodC4gVGhlIHdlaWdodCB1bml0IGlzIHNldCBpbiBHZW5lcmFsIFNldHRpbmdzLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL2FkZGl0aW9uYWwtZmlsdGVycyN3ZWlnaHRXaXRoVW5pdFxuICovXG4vLyBleHBvcnQgY29uc3Qgd2VpZ2h0V2l0aFVuaXQgPSAoZ3JhbXMpID0+IHtcbi8vICAgcmV0dXJuIGV4cG9ydCBjb25zdCB3ZWlnaHQoZ3JhbXMpICsgQ2FydEpTLnNldHRpbmdzLndlaWdodFVuaXQ7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgcHJvZHVjdEltYWdlU2l6ZSA9IChzcmMsIHNpemUpID0+IHtcbi8vICAgcmV0dXJuIENhcnRKUy5VdGlscy5nZXRTaXplZEltYWdlVXJsKHNyYywgc2l6ZSk7XG4vLyB9O1xuXG5leHBvcnQgeyBkZWJ1ZywgZGVmLCBjdXJyZW5jeSB9O1xuXG5leHBvcnQgY29uc3Qgc3BlY2lhbEZvcm1hdHRlcnM6IElGb3JtYXR0ZXJzID0ge1xuICBkZWJ1ZywgZGVmLCBjdXJyZW5jeSxcbn07XG4iLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpbmRleCBpdCB0aGUgbGFzdCBpbmRleCBvZiB0aGUgYXJyYXkuIFJldHVybnMgZmFsc2UgaWYgaXQgaXMgbm90IHRoZSBsYXN0IGluZGV4LlxuICogYGBgXG4gKiAgPGRpdiBydi1lYWNoLWltYWdlPVwicHJvZHVjdC5pbWFnZXNcIiBydi1oaWRlPVwicHJvZHVjdC5pbWFnZXMgfCBsYXN0ICVpbWFnZSVcIj48L2Rpdj5cbiAqIGBgYFxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9vYmplY3RzL2Zvci1sb29wcyNmb3Jsb29wLWxhc3RcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTGFzdCA9IChhcnJheTogYW55W10sIGk6IG51bWJlcikgPT4ge1xuICByZXR1cm4gKGFycmF5Lmxlbmd0aCA9PT0gaSArIDEpO1xufTtcbiIsImV4cG9ydCBjb25zdCBtYXRjaCA9IChhOiBzdHJpbmcsIHJlZ2V4cDogc3RyaW5nLCBmbGFncz86IHN0cmluZykgPT4ge1xuICByZXR1cm4gYS5tYXRjaChuZXcgUmVnRXhwKHJlZ2V4cCwgZmxhZ3MpKTtcbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBTZXQgcHJvcGVydHkgb2Ygb2JqZWN0XG4gKiBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2Rlci1Pbi9jZGFmZTkwODg0N2UyYjg4MjY5MVxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gKG9iajogYW55IHwgYW55W10sIGtleTogc3RyaW5nIHwgbnVtYmVyLCB2YWx1ZTogYW55KSA9PiB7XG4gIGlmIChVdGlscy5pc09iamVjdChvYmopIHx8IFV0aWxzLmlzQXJyYXkob2JqKSkge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbiIsImltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIFRydWUgaWYgYXJyYXkgLyBzdHJpbmcgY29udGFpbnMgcHJvcGVydHkgLyBzdWJzdHJpbmcgb3IgY29udGFpbnRzIHByb3BlcnR5IHdpdGggdmFsdWVcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBjb250YWlucyA9ICh2YWx1ZTogc3RyaW5nIHwgYW55IHwgYW55W10sIGF0dHI6IHN0cmluZywgc2VhcmNoOiBzdHJpbmcpID0+IHtcblxuICAvLyBjb25zb2xlLmxvZyhcImNvbnRhaW5zXCIsIHZhbHVlLCBhdHRyLCBzZWFyY2gpO1xuXG4gIGlmICghVXRpbHMuaXNBcnJheSh2YWx1ZSkgfHwgIVV0aWxzLmlzT2JqZWN0KHZhbHVlKSB8fCAhVXRpbHMuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFV0aWxzLmlzVW5kZWZpbmVkKHNlYXJjaCkpIHtcbiAgICBzZWFyY2ggPSBhdHRyO1xuICB9XG5cbiAgaWYgKFV0aWxzLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiAodmFsdWUuaW5kZXhPZihzZWFyY2gpICE9PSAtMSk7XG4gIH1cblxuICBpZiAoVXRpbHMuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpLmhhc093blByb3BlcnR5KGF0dHIpKSB8fCAoVXRpbHMuaXNEZWZpbmVkKHZhbHVlW2tleV0pICYmIFV0aWxzLmlzRGVmaW5lZCh2YWx1ZVtrZXldW2F0dHJdKSkpIHtcbiAgICAgICAgaWYgKHZhbHVlW2tleV1bYXR0cl0gPT09IHNlYXJjaCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsImltcG9ydCB7IGdldCB9IGZyb20gJy4vZ2V0LmZvcm1hdHRlcic7XG5cbi8qKlxuICogQXJyYXkgZm9ybWF0dGVyIHRvIGdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBsYXN0ID0gKGFycmF5OiBhbnlbXSkgPT4ge1xuICByZXR1cm4gZ2V0KGFycmF5LCBhcnJheS5sZW5ndGggLSAxKTtcbn07XG4iLCJpbXBvcnQgeyBnZXQgfSBmcm9tICcuL2dldC5mb3JtYXR0ZXInO1xuXG4vKipcbiAqIEFycmF5IGZvcm1hdHRlciB0byBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0ID0gKGFycjogYW55W10pID0+IHtcbiAgcmV0dXJuIGdldChhcnIsIDApO1xufTtcbiIsIi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBKU09OIGZvcm1hdC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9hZGRpdGlvbmFsLWZpbHRlcnMjanNvblxuICovXG5leHBvcnQgY29uc3QganNvbiA9IChvYmplY3Q6IGFueSkgPT4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0KTtcbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBwYXJzZSBqc29uIHN0cmluZyB0byBvYmplY3RcbiAqIEBleGFtcGxlIDxkaXYgcnYtY2xhc3M9J1wiW1wiY29sLTJcIiwgXCJjb2wtM1wiLCBcImNvbC00XCIsIFwiY29sLTVcIiwgXCJjb2wtNlwiXVwiIHwgcGFyc2UgfCByYW5kb20nPlxuICovXG5leHBvcnQgY29uc3QgcGFyc2UgPSAoanNvblN0cmluZzogc3RyaW5nKSA9PiB7XG4gIGlmIChVdGlscy5pc1N0cmluZyhqc29uU3RyaW5nKSkge1xuICAgIGNvbnN0IG9iamVjdCA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gcHJvcGVydHkgLyBvYmplY3QgLyBhcnJheSBmb3JtYXR0ZXJzXG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4vcGFyc2UuZm9ybWF0dGVyJztcbmltcG9ydCB7IGpzb24gfSBmcm9tICcuL2pzb24uZm9ybWF0dGVyJztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAnLi9maXJzdC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgbGFzdCB9IGZyb20gJy4vbGFzdC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgY29udGFpbnMgfSBmcm9tICcuL2NvbnRhaW5zLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICcuL2dldC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi9zZXQuZm9ybWF0dGVyJztcbmltcG9ydCB7IG1hdGNoIH0gZnJvbSAnLi9tYXRjaC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgY291bnQgfSBmcm9tICcuL2NvdW50LmZvcm1hdHRlcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHkuZm9ybWF0dGVyJztcbmltcG9ydCB7IGlzTGFzdCB9IGZyb20gJy4vaXNMYXN0LmZvcm1hdHRlcic7XG5cbmV4cG9ydCB7IHBhcnNlLCBqc29uLCBmaXJzdCwgbGFzdCwgY29udGFpbnMsIGdldCwgc2V0LCBtYXRjaCwgY291bnQsIGVtcHR5LCBpc0xhc3QgfTtcblxuZXhwb3J0IGNvbnN0IHByb3BlcnR5Rm9ybWF0dGVyczogSUZvcm1hdHRlcnMgPSB7XG4gIHBhcnNlLCBqc29uLCBmaXJzdCwgbGFzdCwgY29udGFpbnMsIGdldCwgc2V0LCBtYXRjaCwgY291bnQsIGVtcHR5LCBpc0xhc3QsXG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogSnVzdCBnZXQgdGhlIGRpZ2l0cyBvZiBhIHN0cmluZywgdXNlZnVsIHRvIHJlbW92ZSBweCBmcm9tIGNzcyB2YWx1ZVxuICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTAwNjUzLzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpZ2l0cyA9IChzdHI6IHN0cmluZykgPT4ge1xuICBpZiAoVXRpbHMuaXNOdW1iZXIoc3RyKSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgY29uc3QgbnVtID0gc3RyLnJlcGxhY2UoL1teLVxcZFxcLl0vZywgJycpO1xuICBpZiAoaXNOYU4oTnVtYmVyKG51bSkpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE51bWJlcihudW0pO1xuICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IHVuZXZlbiA9IChudW06IG51bWJlcikgPT4ge1xuICByZXR1cm4gKG51bSAlIDIpICE9PSAwO1xufTtcbiIsIi8qKlxuICogUHLDvGZ0IG9iIGVpbmUgWmFobCBnZXJhZGUgaXN0IG9kZXIgbmljaHRcbiAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIGV2ZW4gb3Igbm90XG4gKi9cbmV4cG9ydCBjb25zdCBldmVuID0gKG51bTogbnVtYmVyKSA9PiB7XG4gIHJldHVybiAobnVtICUgMikgPT09IDA7XG59O1xuIiwiLyoqXG4gKiBncmVhdGVzdCBjb21tb24gZGl2aXNvciAoR0NEKSB1c2VmdWwgdG8gY2FsY3VsYXRlIHRoZSByYXRpb1xuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE4NjQ2NS8xNDY1OTE5XG4gKi9cbmV4cG9ydCBjb25zdCBnY2QgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gKGIgPT09IDApID8gYSA6IGdjZChiLCBhICUgYik7XG59O1xuIiwiLyoqXG4gKiBEaXZpZGVzIGFuIG91dHB1dCBieSBhIG51bWJlciBhbmQgcmV0dXJucyB0aGUgcmVtYWluZGVyLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNtb2R1bG9cbiAqL1xuZXhwb3J0IGNvbnN0IG1vZHVsbyA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpICUgTnVtYmVyKGIpO1xufTtcbiIsIi8qKlxuICogRGl2aWRlcyBhbiBvdXRwdXQgYnkgYSBudW1iZXIuIFRoZSBvdXRwdXQgaXMgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI2RpdmlkZWRfYnlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpdmlkZWRCeSA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpIC8gTnVtYmVyKGIpO1xufTtcbiIsIi8qKlxuICogTXVsdGlwbGllcyBhbiBvdXRwdXQgYnkgYSBudW1iZXIuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI3RpbWVzXG4gKi9cbmV4cG9ydCBjb25zdCB0aW1lcyA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpICogTnVtYmVyKGIpO1xufTtcbiIsIi8qKlxuICogU3VidHJhY3RzIGEgbnVtYmVyIGZyb20gYW4gb3V0cHV0LlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNtaW51c1xuICovXG5leHBvcnQgY29uc3QgbWludXMgPSAoYTogc3RyaW5nIHwgbnVtYmVyLCBiOiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgcmV0dXJuIE51bWJlcihhKSAtIE51bWJlcihiKTtcbn07XG4iLCIvKipcbiAqIEFkZHMgYSBudW1iZXIgdG8gYW4gb3V0cHV0LlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNwbHVzXG4gKi9cbmV4cG9ydCBjb25zdCBwbHVzID0gKGE6IHN0cmluZyB8IG51bWJlciwgYjogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gIHJldHVybiBOdW1iZXIoYSkgKyBOdW1iZXIoYik7XG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogR2V0IGEgYmFjayByYW5kb20gdmFsdWUgb2YgYXJyYXlcbiAqIEBleGFtcGxlIDxkaXYgcnYtY2xhc3M9J1wiW1wiY29sLTJcIiwgXCJjb2wtM1wiLCBcImNvbC00XCIsIFwiY29sLTVcIiwgXCJjb2wtNlwiXVwiIHwgcGFyc2UgfCByYW5kb20nPlxuICovXG5leHBvcnQgY29uc3QgcmFuZG9tID0gKGFycmF5OiBhbnlbXSkgPT4ge1xuICBpZiAoVXRpbHMuaXNBcnJheShhcnJheSkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGFycmF5W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFycmF5Lmxlbmd0aCldO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gbWF0aCBmb3JtYXR0ZXJzXG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuL3JhbmRvbS5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgcGx1cyB9IGZyb20gJy4vcGx1cy5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgbWludXMgfSBmcm9tICcuL21pbnVzLmZvcm1hdHRlcic7XG5pbXBvcnQgeyB0aW1lcyB9IGZyb20gJy4vdGltZXMuZm9ybWF0dGVyJztcbmltcG9ydCB7IGRpdmlkZWRCeSB9IGZyb20gJy4vZGl2aWRlZEJ5LmZvcm1hdHRlcic7XG5pbXBvcnQgeyBtb2R1bG8gfSBmcm9tICcuL21vZHVsby5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgZ2NkIH0gZnJvbSAnLi9nY2QuZm9ybWF0dGVyJztcbmltcG9ydCB7IGV2ZW4gfSBmcm9tICcuL2V2ZW4uZm9ybWF0dGVyJztcbmltcG9ydCB7IHVuZXZlbiB9IGZyb20gJy4vdW5ldmVuLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBkaWdpdHMgfSBmcm9tICcuL2RpZ2l0cy5mb3JtYXR0ZXInO1xuXG5leHBvcnQgeyByYW5kb20sIHBsdXMsIG1pbnVzLCB0aW1lcywgZGl2aWRlZEJ5LCBtb2R1bG8sIGdjZCwgZXZlbiwgdW5ldmVuLCBkaWdpdHMgfTtcblxuZXhwb3J0IGNvbnN0IG1hdGhGb3JtYXR0ZXJzOiBJRm9ybWF0dGVycyA9IHtcbiAgZGlnaXRzLCBkaXZpZGVkQnksIGV2ZW4sIGdjZCwgbWludXMsIG1vZHVsbywgcGx1cywgcmFuZG9tLCB0aW1lcywgdW5ldmVuLFxufTtcbiIsIi8qKlxuICogIWFcbiAqL1xuZXhwb3J0IGNvbnN0IG5vdCA9IChhOiBib29sZWFuKSA9PiB7XG4gIHJldHVybiAhYTtcbn07XG4iLCIvKipcbiAqIGEgfHwgYlxuICovXG5leHBvcnQgY29uc3Qgb3IgPSAoYTogYm9vbGVhbiwgYjogYm9vbGVhbikgPT4ge1xuICByZXR1cm4gYSB8fCBiO1xufTtcbiIsIi8qKlxuICogZXVxYWwgb3IgbG93ZXIgdGhhblxuICogYSA8PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBlbHQgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGEgPD0gYjtcbn07XG4iLCIvKipcbiAqIGxvd2VyIHRoYW5cbiAqIGEgPCBiXG4gKi9cbmV4cG9ydCBjb25zdCBsdCA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4ge1xuICByZXR1cm4gYSA8IGI7XG59O1xuIiwiLyoqXG4gKiBhICE9PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBuZSA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICByZXR1cm4gYSAhPT0gYjtcbn07XG4iLCIvKipcbiAqIGEgPT09IGJcbiAqL1xuZXhwb3J0IGNvbnN0IGVxID0gKGE6IGFueSwgYjogYW55KSA9PiB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbiIsIi8qKlxuICogYSAmJiBiXG4gKi9cbmV4cG9ydCBjb25zdCBhbmQgPSAoYTogYm9vbGVhbiwgYjogYm9vbGVhbikgPT4ge1xuICByZXR1cm4gYSAmJiBiO1xufTtcbiIsIi8qKlxuICogQWRkIHVzZWZ1bCBnZW5lcmFsLXB1cnBvc2UgZm9ybWF0dGVycyBmb3IgUml2ZXRzLmpzXG4gKiBTb21lIGZvcm1hdHRlcnMgZnJvbSBjYXJ0LmpzIGFuZCByaXZldHNqcy1zdGRsaWJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvbGFicy9jYXJ0anMvXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vSnVtcExpbmtOZXR3b3JrL3Nob3BpZnktcHJvZHVjdGpzXG4gKi9cblxuaW1wb3J0IHsgSUZvcm1hdHRlcnMgfSBmcm9tICcuLi8uLi9mb3JtYXR0ZXIuc2VydmljZSc7XG5cbi8vIGNvbXBhcmUgZnVuY3Rpb25zXG5pbXBvcnQgeyBhbmQgfSBmcm9tICcuL2FuZC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgZXEgfSBmcm9tICcuL2VxLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBuZSB9IGZyb20gJy4vbmUuZm9ybWF0dGVyJztcbmltcG9ydCB7IGx0IH0gZnJvbSAnLi9sdC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgZWx0IH0gZnJvbSAnLi9lbHQuZm9ybWF0dGVyJztcbmltcG9ydCB7IG9yIH0gZnJvbSAnLi9vci5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgbm90IH0gZnJvbSAnLi9ub3QuZm9ybWF0dGVyJztcblxuZXhwb3J0IHsgYW5kLCBlcSwgbmUsIGx0LCBlbHQsIG9yLCBub3QgfTtcblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVGb3JtYXR0ZXJzOiBJRm9ybWF0dGVycyA9IHtcbiAgYW5kLCBlbHQsIGVxLCBsdCwgbmUsIG5vdCwgb3IsXG59O1xuIiwiZXhwb3J0IHsgY29tcGFyZUZvcm1hdHRlcnMgfSBmcm9tICcuL2NvbXBhcmUvaW5kZXgnO1xuZXhwb3J0IHsgbWF0aEZvcm1hdHRlcnMgfSBmcm9tICcuL21hdGgvaW5kZXgnO1xuZXhwb3J0IHsgcHJvcGVydHlGb3JtYXR0ZXJzIH0gZnJvbSAnLi9wcm9wZXJ0eS9pbmRleCc7XG5leHBvcnQgeyBzcGVjaWFsRm9ybWF0dGVycyB9IGZyb20gJy4vc3BlY2lhbC9pbmRleCc7XG5leHBvcnQgeyBzdHJpbmdGb3JtYXR0ZXJzIH0gZnJvbSAnLi9zdHJpbmcvaW5kZXgnO1xuXG4vLyBleHBvcnQgeyBkYXRlIH0gZnJvbSAnLi9kYXRlJztcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBCaW5kZXJXcmFwcGVyLCBJVHdvV2F5QmluZGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgZXZlbnRIYW5kbGVyRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9iaW5kaW5nJztcblxuLyoqXG4gKiBCaW5kcyBhbiBldmVudCBoYW5kbGVyIG9uIHRoZSBlbGVtZW50LlxuICovXG5leHBvcnQgY29uc3Qgb25TdGFyQmluZGVyV3JhcHBlcjogQmluZGVyV3JhcHBlciA9IChqUXVlcnk6IEpRdWVyeVN0YXRpYykgPT4ge1xuXG4gIGNvbnN0IG5hbWUgPSAnb24tKic7XG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2JpbmRlcnM6JyArIG5hbWUpO1xuXG4gIGNvbnN0IGJpbmRlcjogSVR3b1dheUJpbmRlcjxldmVudEhhbmRsZXJGdW5jdGlvbj4gPSB7XG4gICAgZnVuY3Rpb246IHRydWUsXG4gICAgcHJpb3JpdHk6IDEwMDAsXG5cbiAgICBiaW5kKGVsKSB7XG4gICAgICBpZiAoIXRoaXMuY3VzdG9tRGF0YSkge1xuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7XG4gICAgICAgICAgaGFuZGxlcjogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5iaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuY3VzdG9tRGF0YS5oYW5kbGVyKSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3MgaXMgbnVsbCcpO1xuICAgICAgICB9XG4gICAgICAgIGpRdWVyeShlbCkub2ZmKHRoaXMuYXJnc1swXSwgdGhpcy5jdXN0b21EYXRhKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBldmVudEhhbmRsZXJGdW5jdGlvbikge1xuXG4gICAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXJncyBpcyBudWxsJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBldmVudE5hbWUgPSB0aGlzLmFyZ3NbMF07XG5cbiAgICAgIGlmICh0aGlzLmN1c3RvbURhdGEuaGFuZGxlcikge1xuICAgICAgICBqUXVlcnkoZWwpLm9mZihldmVudE5hbWUsIHRoaXMuY3VzdG9tRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3VzdG9tRGF0YS5oYW5kbGVyID0gdGhpcy5ldmVudEhhbmRsZXIodmFsdWUsIGVsKTtcbiAgICAgIGpRdWVyeShlbCkub24oZXZlbnROYW1lLCB0aGlzLmN1c3RvbURhdGEuaGFuZGxlcik7XG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIHsgYmluZGVyLCBuYW1lIH07XG59O1xuIiwiaW1wb3J0IHsgSU9uZVdheUJpbmRlciB9IGZyb20gJy4uLy4uL2JpbmRlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBEaXNhYmxlcyB0aGUgZWxlbWVudCB3aGVuIHZhbHVlIGlzIHRydWUgKG5lZ2F0ZWQgdmVyc2lvbiBvZiBgZW5hYmxlZGAgYmluZGVyKS5cbiAqL1xuZXhwb3J0IGNvbnN0IGRpc2FibGVkOiBJT25lV2F5QmluZGVyPGJvb2xlYW4+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgKGVsIGFzIEhUTUxCdXR0b25FbGVtZW50KS5kaXNhYmxlZCA9ICEhdmFsdWU7XG59O1xuIiwiaW1wb3J0IHsgSU9uZVdheUJpbmRlciB9IGZyb20gJy4uLy4uL2JpbmRlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBFbmFibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVuYWJsZWQ6IElPbmVXYXlCaW5kZXI8Ym9vbGVhbj4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAoZWwgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpLmRpc2FibGVkID0gIXZhbHVlO1xufTtcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tICcuLi8uLi92aWV3JztcbmltcG9ydCB7IElCaW5kYWJsZSB9IGZyb20gJy4uLy4uL2JpbmRpbmcnO1xuaW1wb3J0IHsgdGltZXMsIGdldFN0cmluZyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IElCaW5kZXJzLCBJVHdvV2F5QmluZGVyLCBJT25lV2F5QmluZGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBlbmFibGVkIH0gZnJvbSAnLi9lbmFibGVkLmJpbmRlcic7XG5pbXBvcnQgeyBkaXNhYmxlZCB9IGZyb20gJy4vZGlzYWJsZWQuYmluZGVyJztcbmltcG9ydCB7IG9uU3RhckJpbmRlcldyYXBwZXIgfSBmcm9tICcuL29uLXN0YXIuYmluZGVyJztcblxuLyoqXG4gKiBHZXRzIHRoZSBiYXNpaWMgYmluZGVyc1xuICogQHBhcmFtIGpRdWVyeSBQYXNzIEpRdWVyeSB0byBiYXNpYyBiaW5kZXJzIHRvIGdldCBKUXVlcnkgc3VwcG9ydFxuICovXG5leHBvcnQgY29uc3QgYmFzaWNCaW5kZXJzV3JhcHBlciA9IChqUXVlcnk6IEpRdWVyeVN0YXRpYykgPT4ge1xuXG4gIGNvbnN0IGJpbmRlcnM6IElCaW5kZXJzPGFueT4gPSB7XG4gICAgLyoqXG4gICAgICogQmluZHMgYW4gZXZlbnQgaGFuZGxlciBvbiB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICAnb24tKic6IG9uU3RhckJpbmRlcldyYXBwZXIoalF1ZXJ5KS5iaW5kZXIsXG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmRzIGJvdW5kIGluc3RhbmNlcyBvZiB0aGUgZWxlbWVudCBpbiBwbGFjZSBmb3IgZWFjaCBpdGVtIGluIHRoZSBhcnJheS5cbiAgICAgKi9cbiAgICAnZWFjaC0qJzogPElUd29XYXlCaW5kZXI8YW55Pj4ge1xuICAgICAgYmxvY2s6IHRydWUsXG5cbiAgICAgIHByaW9yaXR5OiA0MDAwLFxuXG4gICAgICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMubWFya2VyKSB7XG4gICAgICAgICAgdGhpcy5tYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KGAgdGlueWJpbmQ6ICR7dGhpcy50eXBlfSBgKTtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7XG4gICAgICAgICAgICBpdGVyYXRlZDogPFZpZXdbXT4gW10sXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoIWVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcGFyZW50IG5vZGUhJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubWFya2VyLCBlbCk7XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLmZvckVhY2goKHZpZXc6IFZpZXcpICA9PiB7XG4gICAgICAgICAgICB2aWV3LmJpbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdW5iaW5kKGVsKSB7XG4gICAgICAgIGlmICh0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQpIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQuZm9yRWFjaCgodmlldzogVmlldykgPT4ge1xuICAgICAgICAgICAgdmlldy51bmJpbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcm91dGluZShlbCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcmdzIGlzIG51bGwnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtb2RlbE5hbWUgPSB0aGlzLmFyZ3NbMF07XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uIHx8IFtdO1xuXG4gICAgICAgIC8vIFRPRE8gc3VwcG9ydCBvYmplY3Qga2V5cyB0byBpdGVyYXRlIG92ZXJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlYWNoLScgKyBtb2RlbE5hbWUgKyAnIG5lZWRzIGFuIGFycmF5IHRvIGl0ZXJhdGUgb3ZlciwgYnV0IGl0IGlzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBpbmRleCBuYW1lIGlzIHNldGVkIGJ5IGBpbmRleC1wcm9wZXJ0eWAgdXNlIHRoaXMgbmFtZSwgb3RoZXJ3aXNlIGAlW21vZGVsTmFtZV0lYFxuICAgICAgICBjb25zdCBpbmRleFByb3AgPSBlbC5nZXRBdHRyaWJ1dGUoJ2luZGV4LXByb3BlcnR5JykgfHwgdGhpcy5nZXRJdGVyYXRpb25BbGlhcyhtb2RlbE5hbWUpO1xuXG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaCgobW9kZWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2NvcGU6IGFueSA9IHskcGFyZW50OiB0aGlzLnZpZXcubW9kZWxzfTtcbiAgICAgICAgICBzY29wZVtpbmRleFByb3BdID0gaW5kZXg7XG4gICAgICAgICAgc2NvcGVbbW9kZWxOYW1lXSA9IG1vZGVsO1xuICAgICAgICAgIGxldCB2aWV3ID0gdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkW2luZGV4XTtcblxuICAgICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzOiBDb21tZW50IHwgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzID0gdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkW3RoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5sZW5ndGggLSAxXS5lbHNbMF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWFya2VyKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzID0gdGhpcy5tYXJrZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIG5vdCBkZWZpbmVkJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZpZXcgPSBWaWV3LmNyZWF0ZSh0aGlzLCBzY29wZSwgcHJldmlvdXMubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLnB1c2godmlldyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh2aWV3Lm1vZGVsc1ttb2RlbE5hbWVdICE9PSBtb2RlbCkge1xuICAgICAgICAgICAgICAvLyBzZWFyY2ggZm9yIGEgdmlldyB0aGF0IG1hdGNoZXMgdGhlIG1vZGVsXG4gICAgICAgICAgICAgIGxldCBtYXRjaEluZGV4O1xuICAgICAgICAgICAgICBsZXQgbmV4dFZpZXc7XG4gICAgICAgICAgICAgIGZvciAobGV0IG5leHRJbmRleCA9IGluZGV4ICsgMTsgbmV4dEluZGV4IDwgdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLmxlbmd0aDsgbmV4dEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBuZXh0VmlldyA9IHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZFtuZXh0SW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0Vmlldy5tb2RlbHNbbW9kZWxOYW1lXSA9PT0gbW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgIG1hdGNoSW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG1hdGNoSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIG1vZGVsIGlzIGluIG90aGVyIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gdG9kbzogY29uc2lkZXIgYXZvaWRpbmcgdGhlIHNwbGljZSBoZXJlIGJ5IHNldHRpbmcgYSBmbGFnXG4gICAgICAgICAgICAgICAgLy8gcHJvZmlsZSBwZXJmb3JtYW5jZSBiZWZvcmUgaW1wbGVtZW50aW5nIHN1Y2ggY2hhbmdlXG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLnNwbGljZShtYXRjaEluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubWFya2VyIHx8ICF0aGlzLm1hcmtlci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcmtlciBoYXMgbm8gcGFyZW50IG5vZGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV4dFZpZXcuZWxzWzBdLCB2aWV3LmVsc1swXSk7XG4gICAgICAgICAgICAgICAgbmV4dFZpZXcubW9kZWxzW2luZGV4UHJvcF0gPSBpbmRleDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBuZXcgbW9kZWxcbiAgICAgICAgICAgICAgICBuZXh0VmlldyA9IFZpZXcuY3JlYXRlKHRoaXMsIHNjb3BlLCB2aWV3LmVsc1swXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLnNwbGljZShpbmRleCwgMCwgbmV4dFZpZXcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmlldy5tb2RlbHNbaW5kZXhQcm9wXSA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5sZW5ndGggPiBjb2xsZWN0aW9uLmxlbmd0aCkge1xuICAgICAgICAgIHRpbWVzKHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5sZW5ndGggLSBjb2xsZWN0aW9uLmxlbmd0aCwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5wb3AoKTtcbiAgICAgICAgICAgIHZpZXcudW5iaW5kKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMubWFya2VyIHx8ICF0aGlzLm1hcmtlci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFya2VyIGhhcyBubyBwYXJlbnQgbm9kZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXJrZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh2aWV3LmVsc1swXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWwubm9kZU5hbWUgPT09ICdPUFRJT04nICYmIHRoaXMudmlldy5iaW5kaW5ncykge1xuICAgICAgICAgIHRoaXMudmlldy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nOiBJQmluZGFibGUpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcmtlciAmJiAoYmluZGluZy5lbCA9PT0gdGhpcy5tYXJrZXIucGFyZW50Tm9kZSkgJiYgKGJpbmRpbmcudHlwZSA9PT0gJ3ZhbHVlJykgJiYgYmluZGluZy5zeW5jKSB7XG4gICAgICAgICAgICAgIGJpbmRpbmcuc3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGUobW9kZWxzKSB7XG4gICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHt9O1xuICAgICAgICAvLyBUT0RPOiBhZGQgdGVzdCBhbmQgZml4IGlmIG5lY2Vzc2FyeVxuICAgICAgICBPYmplY3Qua2V5cyhtb2RlbHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYXJncyBpcyBudWxsJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkgIT09IHRoaXMuYXJnc1swXSkge1xuICAgICAgICAgICAgZGF0YVtrZXldID0gbW9kZWxzW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQuZm9yRWFjaCgodmlldzogVmlldykgPT4ge1xuICAgICAgICAgIHZpZXcudXBkYXRlKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgb3IgcmVtb3ZlcyB0aGUgY2xhc3MgZnJvbSB0aGUgZWxlbWVudCB3aGVuIHZhbHVlIGlzIHRydWUgb3IgZmFsc2UuXG4gICAgICovXG4gICAgJ2NsYXNzLSonOiA8SU9uZVdheUJpbmRlcjxib29sZWFuPj4gZnVuY3Rpb24oZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYm9vbGVhbikge1xuICAgICAgaWYgKHRoaXMuYXJncyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3MgaXMgbnVsbCcpO1xuICAgICAgfVxuICAgICAgY29uc3QgY2xhc3NMaXN0ID0gZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKChlbGUpID0+IGVsZSAhPT0gJycpO1xuICAgICAgY29uc3QgYXJnID0gdGhpcy5hcmdzWzBdLnRyaW0oKTtcbiAgICAgIGNvbnN0IGlkeCA9IGNsYXNzTGlzdC5pbmRleE9mKGFyZyk7XG4gICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gYCAke2FyZ31gO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF2YWx1ZSkge1xuICAgICAgICBlbC5jbGFzc05hbWUgPSBjbGFzc0xpc3QuZmlsdGVyKChfLCBpKSA9PiBpICE9PSBpZHgpLmpvaW4oJyAnKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZWxlbWVudCdzIHRleHQgdmFsdWUuXG4gICAgICovXG4gICAgJ3RleHQnKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykge1xuICAgICAgZWwudGV4dENvbnRlbnQgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAnJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZWxlbWVudCdzIEhUTUwgY29udGVudC5cbiAgICAgKi9cbiAgICAnaHRtbCcoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICBlbC5pbm5lckhUTUwgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAnJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlLlxuICAgICAqL1xuICAgICdzaG93JzogKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICcnIDogJ25vbmUnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgZWxlbWVudCB3aGVuIHZhbHVlIGlzIHRydWUgKG5lZ2F0ZWQgdmVyc2lvbiBvZiBgc2hvd2AgYmluZGVyKS5cbiAgICAgKi9cbiAgICAnaGlkZSc6IChlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyAnbm9uZScgOiAnJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgZWxlbWVudCB3aGVuIHZhbHVlIGlzIHRydWUuXG4gICAgICovXG4gICAgJ2VuYWJsZWQnOiBlbmFibGVkLFxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlIChuZWdhdGVkIHZlcnNpb24gb2YgYGVuYWJsZWRgIGJpbmRlcikuXG4gICAgICovXG4gICAgJ2Rpc2FibGVkJzogZGlzYWJsZWQsXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYSBjaGVja2JveCBvciByYWRpbyBpbnB1dCB3aGVuIHRoZSB2YWx1ZSBpcyB0cnVlLiBBbHNvIHNldHMgdGhlIG1vZGVsXG4gICAgICogcHJvcGVydHkgd2hlbiB0aGUgaW5wdXQgaXMgY2hlY2tlZCBvciB1bmNoZWNrZWQgKHR3by13YXkgYmluZGVyKS5cbiAgICAgKi9cbiAgICAnY2hlY2tlZCc6IDxJVHdvV2F5QmluZGVyPGFueT4+IHtcbiAgICAgIHB1Ymxpc2hlczogdHJ1ZSxcbiAgICAgIHByaW9yaXR5OiAyMDAwLFxuXG4gICAgICBiaW5kKGVsKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7fTtcbiAgICAgICAgaWYgKCF0aGlzLmN1c3RvbURhdGEuY2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLnB1Ymxpc2goKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuY3VzdG9tRGF0YS5jYWxsYmFjayk7XG4gICAgICB9LFxuXG4gICAgICB1bmJpbmQoZWwpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5jdXN0b21EYXRhLmNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIHJvdXRpbmUoZWw6IEhUTUxTZWxlY3RFbGVtZW50LCB2YWx1ZSkge1xuICAgICAgICBpZiAoZWwudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgIGVsLmNoZWNrZWQgPSBnZXRTdHJpbmcoZWwudmFsdWUpID09PSBnZXRTdHJpbmcodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLmNoZWNrZWQgPSAhIXZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbGVtZW50J3MgdmFsdWUuIEFsc28gc2V0cyB0aGUgbW9kZWwgcHJvcGVydHkgd2hlbiB0aGUgaW5wdXQgY2hhbmdlc1xuICAgICAqICh0d28td2F5IGJpbmRlcikuXG4gICAgICovXG4gICAgJ3ZhbHVlJzogPElUd29XYXlCaW5kZXI8YW55Pj4ge1xuICAgICAgcHVibGlzaGVzOiB0cnVlLFxuICAgICAgcHJpb3JpdHk6IDMwMDAsXG5cbiAgICAgIGJpbmQoZWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhID0ge307XG4gICAgICAgIHRoaXMuY3VzdG9tRGF0YS5pc1JhZGlvID0gZWwudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlbC50eXBlID09PSAncmFkaW8nO1xuICAgICAgICBpZiAoIXRoaXMuY3VzdG9tRGF0YS5pc1JhZGlvKSB7XG4gICAgICAgICAgdGhpcy5jdXN0b21EYXRhLmV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKCdldmVudC1uYW1lJykgfHwgKGVsLnRhZ05hbWUgPT09ICdTRUxFQ1QnID8gJ2NoYW5nZScgOiAnaW5wdXQnKTtcbiAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgICBpZiAoIXRoaXMuY3VzdG9tRGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLmNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICBzZWxmLnB1Ymxpc2goKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmN1c3RvbURhdGEuZXZlbnQsIHRoaXMuY3VzdG9tRGF0YS5jYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHVuYmluZChlbCkge1xuICAgICAgICBpZiAoIXRoaXMuY3VzdG9tRGF0YS5pc1JhZGlvKSB7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmN1c3RvbURhdGEuZXZlbnQsIHRoaXMuY3VzdG9tRGF0YS5jYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHJvdXRpbmUoZWw6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MU2VsZWN0RWxlbWVudCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tRGF0YSAmJiB0aGlzLmN1c3RvbURhdGEuaXNSYWRpbykge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGVsLnR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnICYmIGVsIGluc3RhbmNlb2YgSFRNTFNlbGVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBlbFtpXTtcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPiAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0U3RyaW5nKHZhbHVlKSAhPT0gZ2V0U3RyaW5nKGVsLnZhbHVlKSkge1xuICAgICAgICAgICAgZWwudmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluc2VydHMgYW5kIGJpbmRzIHRoZSBlbGVtZW50IGFuZCBpdCdzIGNoaWxkIG5vZGVzIGludG8gdGhlIERPTSB3aGVuIHRydWUuXG4gICAgICovXG4gICAgJ2lmJzogPElUd29XYXlCaW5kZXI8YW55Pj4ge1xuICAgICAgYmxvY2s6IHRydWUsXG4gICAgICBwcmlvcml0eTogNDAwMCxcblxuICAgICAgYmluZChlbDogSFRNTFVua25vd25FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY3VzdG9tRGF0YSA9IHt9O1xuICAgICAgICBpZiAoIXRoaXMubWFya2VyKSB7XG4gICAgICAgICAgdGhpcy5tYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgdGlueWJpbmQ6ICcgKyB0aGlzLnR5cGUgKyAnICcgKyB0aGlzLmtleXBhdGggKyAnICcpO1xuICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICghZWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbGVtZW50IGhhcyBubyBwYXJlbnQgbm9kZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLm1hcmtlciwgZWwpO1xuICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLmN1c3RvbURhdGEuYm91bmQgPT09IGZhbHNlICYmICB0aGlzLmN1c3RvbURhdGEubmVzdGVkKSB7XG4gICAgICAgICAgdGhpcy5jdXN0b21EYXRhLm5lc3RlZC5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXN0b21EYXRhLmJvdW5kID0gdHJ1ZTtcbiAgICAgIH0sXG5cbiAgICAgIHVuYmluZCgpIHtcbiAgICAgICAgaWYgKCB0aGlzLmN1c3RvbURhdGEubmVzdGVkKSB7XG4gICAgICAgICAgdGhpcy5jdXN0b21EYXRhLm5lc3RlZC51bmJpbmQoKTtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuYm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHZhbHVlID0gISF2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLmN1c3RvbURhdGEuYXR0YWNoZWQpIHtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcblxuICAgICAgICAgICAgaWYgKCEgdGhpcy5jdXN0b21EYXRhLm5lc3RlZCkge1xuICAgICAgICAgICAgICB0aGlzLmN1c3RvbURhdGEubmVzdGVkID0gbmV3IFZpZXcoZWwsIHRoaXMudmlldy5tb2RlbHMsIHRoaXMudmlldy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLm5lc3RlZC5iaW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMubWFya2VyIHx8ICF0aGlzLm1hcmtlci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFya2VyIGhhcyBubyBwYXJlbnQgbm9kZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYXJrZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIHRoaXMubWFya2VyLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnQgaGFzIG5vIHBhcmVudCBub2RlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdXBkYXRlKG1vZGVscykge1xuICAgICAgICBpZiAoIHRoaXMuY3VzdG9tRGF0YS5uZXN0ZWQpIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEubmVzdGVkLnVwZGF0ZShtb2RlbHMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG4gIHJldHVybiBiaW5kZXJzO1xufTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgSlF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJT25lV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGpheCwgUHJlZmV0Y2gsIEdsb2JhbEV2ZW50IH0gZnJvbSAnLi9iYXJiYS9iYXJiYSc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBPcGVuIGxpbmsgd2l0aCBwYWpheCBpZiB0aGUgcm91dGUgaXMgbm90IHRoZSBhY3RpdmUgcm91dGVcbiAqIFNldHMgYWxzbyB0aGUgZWxlbWVudCBhY3RpdmUgaWYgaGlzIHVybCBpcyB0aGUgY3VycmVudCB1cmxcbiAqL1xuY29uc3Qgcm91dGVCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoZGlzcGF0Y2hlcjogR2xvYmFsRXZlbnQsIHBqYXg6IFBqYXgsIHByZWZldGNoOiBQcmVmZXRjaCkgPT4ge1xuXG4gIGNvbnN0IG5hbWUgPSAncm91dGUnO1xuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdiaW5kZXJzOnJvdXRlJyk7XG5cbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHVybDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgJGVsID0gSlF1ZXJ5KGVsKTtcbiAgICBsZXQgbmV3VGFiID0gZmFsc2U7XG4gICAgY29uc3QgdXNlUGFqYXggPSB0cnVlO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZGVidWcoJ2dldEJpbmRlcicsIGVsLCB1cmwpO1xuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHVybCA9ICRlbC5hdHRyKCdocmVmJyk7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5hdHRyKCd0YXJnZXQnKSA9PT0gJ19ibGFuaycpIHtcbiAgICAgIG5ld1RhYiA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbG9jYXRpb24gPSBVdGlscy5nZXRMb2NhdGlvbigpO1xuICAgIGNvbnN0IGhvc3QgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZTtcblxuICAgIC8vIG5yb21hbGl6ZSB1cmxcbiAgICBpZiAodXJsICYmIFV0aWxzLmlzQWJzb2x1dGVVcmwodXJsKSkge1xuXG4gICAgICAvLyBpZiBpcyBub3QgYW4gZXh0ZXJuYWwgbGlua1xuICAgICAgaWYgKHVybC5pbmRleE9mKGhvc3QpID09PSAwKSB7XG4gICAgICAgIC8vIGdldCByZWxhdGl2ZSB1cmxcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoaG9zdCwgJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VGFiID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBhbHJlYWR5T25VUkwgPSAoY2hlY2tVcmw/OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChjaGVja1VybCkge1xuICAgICAgICBjb25zdCBwYXRobmFtZSA9IFV0aWxzLmdldExvY2F0aW9uKCkucGF0aG5hbWU7XG4gICAgICAgIGRlYnVnKCdjaGVja1VSTCcsIHBhdGhuYW1lLCBjaGVja1VybCk7XG4gICAgICAgIGlmIChjaGVja1VybCA9PT0gcGF0aG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBjb25zdCBjaGVja1VSTCA9ICh1cmxUb0NoZWNrPzogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAodXJsVG9DaGVjaykge1xuICAgICAgICBpZiAoYWxyZWFkeU9uVVJMKHVybFRvQ2hlY2spKSB7XG4gICAgICAgICAgJGVsLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBpZiAodXNlUGFqYXgpIHtcbiAgICAgIGRpc3BhdGNoZXIub24oJ25ld1BhZ2VSZWFkeScsICgpID0+IGNoZWNrVVJMKHVybCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBKUXVlcnkod2luZG93KS5vbignaGFzaGNoYW5nZScsICgpID0+IGNoZWNrVVJMKHVybCkpO1xuICAgIH1cblxuICAgICRlbC5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgKGV2ZW50OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQsIG51bGw+KSA9PiB7XG4gICAgICBkZWJ1ZygnZ28gdG8gJywgdXJsKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoYWxyZWFkeU9uVVJMKHVybCkpIHtcbiAgICAgICAgZGVidWcoJ2FscmVhZHkgb24gdGhpcyBzaXRlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgcGpheC5nb1RvKHVybCwgbmV3VGFiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHVzZVBhamF4ICYmICFuZXdUYWIgJiYgIWFscmVhZHlPblVSTCh1cmwpKSB7XG4gICAgICAkZWwub2ZmKCdtb3VzZWVudGVyIHRvdWNoc3RhcnQnKS5vbignbW91c2VlbnRlciB0b3VjaHN0YXJ0JywgKGV2ZW50OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQsIG51bGw+KSA9PiB7XG4gICAgICAgIHByZWZldGNoLm9uTGlua0VudGVyKGV2ZW50LCB1cmwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hlY2tVUkwodXJsKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcblxuZXhwb3J0IHsgcm91dGVCaW5kZXIgfTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgSlF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJT25lV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGpheCwgUHJlZmV0Y2gsIElTdGF0ZSB9IGZyb20gJy4vYmFyYmEvYmFyYmEnO1xuaW1wb3J0IHsgR2xvYmFsRXZlbnQgfSBmcm9tICcuLi8uLi9nbG9iYWwtZXZlbnQnO1xuaW1wb3J0IHsgVmlldyBhcyBSaXZldHNWaWV3IH0gZnJvbSAnLi4vLi4vdmlldyc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBPcGVuIGxpbmsgd2l0aCBwYWpheCBpZiB0aGUgcm91dGUgaXMgbm90IHRoZSBhY3RpdmUgcm91dGVcbiAqIFNldHMgYWxzbyB0aGUgZWxlbWVudCBhY3RpdmUgaWYgaGlzIHVybCBpcyB0aGUgY3VycmVudCB1cmxcbiAqL1xuY29uc3Qgdmlld0JpbmRlcjogQmluZGVyV3JhcHBlciA9IChkaXNwYXRjaGVyOiBHbG9iYWxFdmVudCwgcGpheDogUGpheCwgcHJlZmV0Y2g6IFByZWZldGNoKSA9PiB7XG5cbiAgY29uc3QgbmFtZSA9ICd2aWV3JztcbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnYmluZGVyczp2aWV3Jyk7XG5cbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IGFueSkge1xuICAgIGNvbnN0ICR3cmFwcGVyID0gSlF1ZXJ5KGVsKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIC8qXG4gICAgICogTWFrZSB0aGUgZGlzcGF0Y2hlciBhdmFpbGFibGUgaW4gdGhlIG1vZGVsIHRvIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzLlxuICAgICAqXG4gICAgICogSS5lLiwgaWYgd2UgaGF2ZSBpbml0aWFsaXplZCByaXZldHMvdGlueWJpbmQgd2l0aDpcbiAgICAgKlxuICAgICAqICBgcml2ZXRzLmJpbmQoZG9jdW1lbnQuYm9keSwgbW9kZWwpYCxcbiAgICAgKlxuICAgICAqIHRoZW4gd2UgY2FuIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgQmFyYmEgcm91dGVyIGRpc3BhdGNoZXIgbGlrZSB0aGlzOlxuICAgICAqXG4gICAgICogIGBtb2RlbC5yb3V0ZXJEaXNwYXRjaGVyLm9uKCduZXdQYWdlUmVhZHknLCAuLi4pO2BcbiAgICAgKiAgYG1vZGVsLnJvdXRlckRpc3BhdGNoZXIub24oJ3RyYW5zaXRpb25Db21wbGV0ZWQnLCAuLi4pO2BcbiAgICAgKiAuLi5ldGMuXG4gICAgICpcbiAgICAgKi9cbiAgICBzZWxmLnZpZXcubW9kZWxzLnJvdXRlckRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuXG4gICAgdGhpcy5jdXN0b21EYXRhID0ge1xuICAgICAgbmVzdGVkOiBudWxsLFxuICAgIH07XG5cbiAgICBkaXNwYXRjaGVyLm9uKCduZXdQYWdlUmVhZHknLCAoY3VycmVudFN0YXR1czogSVN0YXRlLCBwcmV2U3RhdHVzOiBJU3RhdGUsICRjb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG5ld1BhZ2VSYXdIVE1MOiBzdHJpbmcsIGRhdGFzZXQ6IGFueSwgaXNJbml0OiBib29sZWFuKSA9PiB7XG4gICAgICAvLyB1bmJpbmQgdGhlIG9sZCByaXZldHMgdmlld1xuICAgICAgaWYgKHNlbGYuY3VzdG9tRGF0YS5uZXN0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgc2VsZi5jdXN0b21EYXRhLm5lc3RlZC51bmJpbmQoKTtcbiAgICAgIH1cblxuICAgICAgLy8gYWRkIHRoZSBkYXRlc2V0IHRvIHRoZSBtb2RlbFxuICAgICAgaWYgKCFVdGlscy5pc09iamVjdChzZWxmLnZpZXcubW9kZWxzKSkge1xuICAgICAgICBzZWxmLnZpZXcubW9kZWxzID0ge307XG4gICAgICB9XG4gICAgICBzZWxmLnZpZXcubW9kZWxzLmRhdGFzZXQgPSAkY29udGFpbmVyLmRhdGEoKTtcblxuICAgICAgZGVidWcoJ25ld1BhZ2VSZWFkeSBkYXRhc2V0OicsIGRhdGFzZXQpO1xuXG4gICAgICAvLyBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSBwYWdlIHdpbGwgYmUgbG9hZGVkIHdlIGRvIG5vdCBuZWVkIHRvIHJlYmluZCB0aGUgY29udGFpbmVyXG4gICAgICAvLyBiZWNhdXNlIHRoZXkgYXJlIGFscmVhZHkgYmluZCB3aXRoIHRoZSBwYXJlbnQgdmlldyAoIGJlY2F1c2UgdGhleSBhcmUgbm90IGxvYWRlZCBieSBwYWpheClcbiAgICAgIGlmICghaXNJbml0KSB7XG4gICAgICAgIC8vIGJpbmQgdGhlIG5ldyBjb250YWluZXJcbiAgICAgICAgc2VsZi5jdXN0b21EYXRhLm5lc3RlZCA9IG5ldyBSaXZldHNWaWV3KCRjb250YWluZXJbMF0sIHNlbGYudmlldy5tb2RlbHMsIHNlbGYudmlldy5vcHRpb25zKTtcbiAgICAgICAgc2VsZi5jdXN0b21EYXRhLm5lc3RlZC5iaW5kKCk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcHJlZmV0Y2guaW5pdCgpO1xuICAgICAgcGpheC5zdGFydCgkd3JhcHBlcik7XG4gICAgfSwgMCk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiaW5kZXIsXG4gICAgbmFtZSxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHZpZXdCaW5kZXIgfTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IFBqYXggfSBmcm9tICcuL1BqYXgnO1xuXG4vKipcbiAqIFByZWZldGNoXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5QcmVmZXRjaFxuICogQHR5cGUge29iamVjdH1cbiAqL1xuY2xhc3MgUHJlZmV0Y2gge1xuXG4gIC8qKiBzaW5nbGV0b24gaW5zdGFuY2UgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFByZWZldGNoO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBuYW1lIHVzZWQgdG8gaWdub3JlIHByZWZldGNoIG9uIGxpbmtzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QcmVmZXRjaFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIGlnbm9yZUNsYXNzTGluayA9ICduby1iYXJiYS1wcmVmZXRjaCc7XG5cbiAgcHJpdmF0ZSBkZWJ1ZyA9IERlYnVnKCdQcmVmZXRjaCcpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBQcmVmZXRjaC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmIChQcmVmZXRjaC5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIFByZWZldGNoLmluc3RhbmNlO1xuICAgIH1cblxuICAgIFByZWZldGNoLmluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0IHRoZSBldmVudCBsaXN0ZW5lciBvbiBtb3VzZW92ZXIgYW5kIHRvdWNoc3RhcnRcbiAgICogZm9yIHRoZSBwcmVmZXRjaFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUHJlZmV0Y2hcbiAgICovXG4gIHB1YmxpYyBpbml0KGF1dG9iaW5kTGlua3MgPSBmYWxzZSkge1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2UgZG8gdGhpcyB3aXRoIHJ2LXJvdXRlXG4gICAgaWYgKGF1dG9iaW5kTGlua3MpIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgdGhpcy5vbkxpbmtFbnRlci5iaW5kKHRoaXMpKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25MaW5rRW50ZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciB0aGUgbW91c2Vob3Zlci90b3VjaHN0YXJ0LCBwbGVhc2UgdXNlIHRoZSBydi1yb3V0ZSBiaW5kZXIgaW5zdGVhZFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUHJlZmV0Y2hcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldnRcbiAgICovXG4gIHB1YmxpYyBvbkxpbmtFbnRlcihldnQ6IEpRdWVyeS5FdmVudDxIVE1MRWxlbWVudCwgbnVsbD4sIHVybD86IHN0cmluZykge1xuXG4gICAgbGV0IGVsID0gKGV2dC50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQpO1xuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHdoaWxlIChlbCAmJiAhUGpheC5nZXRIcmVmKGVsKSkge1xuICAgICAgICBlbCA9IChlbC5wYXJlbnROb2RlIGFzIEhUTUxBbmNob3JFbGVtZW50KTsgLy8gVE9ETyB0ZXN0bWVcbiAgICAgIH1cblxuICAgICAgaWYgKCFlbCB8fCBlbC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5pZ25vcmVDbGFzc0xpbmspKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXJsID0gUGpheC5nZXRIcmVmKGVsKTtcbiAgICB9XG5cbiAgICB0aGlzLmRlYnVnKCdvbkxpbmtFbnRlcicsIHVybCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgY29uc29sZS53YXJuKGBVcmwgaXMgbm90IGRlZmluZWQsIHlvdSBjYW4ndCBjYWNoZSB0aGUgbGluayB3aXRob3V0IHRoZSB1cmwuIFBsZWFzZSBtYWtlIHNodXJlIHlvdXIgZWxlbWVudCBoYXMgdGhlIGhyZWYgYXR0cmlidXRlIG9yIHBhc3MgdGhlIHVybCBkaXJlY3RseSB0byB0aGlzIGZ1bmN0aW9uLmApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSBsaW5rIGlzIGVsZWdpYmxlIGZvciBQamF4XG4gICAgaWYgKHVybCAmJiBQamF4LnByZXZlbnRDaGVjayhldnQsIGVsKSAmJiAhUGpheC5jYWNoZS5nZXQodXJsKSkge1xuICAgICAgY29uc3QgeGhyID0gVXRpbHMueGhyKHVybCk7XG4gICAgICBQamF4LmNhY2hlLnNldCh1cmwsIHhocik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFByZWZldGNoIH07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG4vKipcbiAqIE9iamVjdCB0aGF0IGlzIGdvaW5nIHRvIGRlYWwgd2l0aCBET00gcGFyc2luZy9tYW5pcHVsYXRpb25cbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLlBqYXguRG9tXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jbGFzcyBEb20ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGRhdGEgYXR0cmlidXRlIG9uIHRoZSBjb250YWluZXJcbiAgICpcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHB1YmxpYyBkYXRhTmFtZXNwYWNlID0gJ25hbWVzcGFjZSc7XG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgdXNlZCB0byBpZGVudGlmeSB0aGUgY29udGFpbmVyc1xuICAgKlxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIGNvbnRhaW5lclNlbGVjdG9yID0gJy5ydi12aWV3LWNvbnRhaW5lcic7XG5cbiAgLyoqXG4gICAqIEZ1bGwgSFRNTCBTdHJpbmcgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogQnkgZGVmYXVsdCBpcyB0aGUgaW5uZXJIVE1MIG9mIHRoZSBpbml0aWFsIGxvYWRlZCBwYWdlLlxuICAgKlxuICAgKiBFYWNoIHRpbWUgYSBuZXcgcGFnZSBpcyBsb2FkZWQsIHRoZSB2YWx1ZSBpcyB0aGUgcmVzcG9uc2Ugb2YgdGhlIHhociBjYWxsLlxuICAgKlxuICAgKi9cbiAgcHVibGljIGN1cnJlbnRIVE1MPzogc3RyaW5nO1xuXG4gIHByaXZhdGUgXyR3cmFwcGVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKCR3cmFwcGVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSB7XG4gICAgdGhpcy5fJHdyYXBwZXIgPSAkd3JhcHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSB0aGUgcmVzcG9uc2VUZXh0IG9idGFpbmVkIGZyb20gdGhlIHhociBjYWxsXG4gICAqL1xuICBwdWJsaWMgcGFyc2VSZXNwb25zZShyZXNwb25zZVRleHQ6IHN0cmluZyk6IEpRdWVyeTxIVE1MRWxlbWVudD4ge1xuICAgIHRoaXMuY3VycmVudEhUTUwgPSByZXNwb25zZVRleHQ7XG4gICAgY29uc3QgJG5ld1BhZ2UgPSAkKCAkLnBhcnNlSFRNTChyZXNwb25zZVRleHQpICk7XG4gICAgY29uc3QgJHRpdGxlID0gJG5ld1BhZ2UuZmlsdGVyKCd0aXRsZScpO1xuICAgIGlmICgkdGl0bGUubGVuZ3RoKSB7XG4gICAgICBkb2N1bWVudC50aXRsZSA9ICR0aXRsZS50ZXh0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldENvbnRhaW5lcigoJG5ld1BhZ2UgYXMgYW55KSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtYWluIGJhcmJhIHdyYXBwZXIgYnkgdGhlIElEIGB3cmFwcGVySWRgXG4gICAqL1xuICBwdWJsaWMgZ2V0V3JhcHBlcigpOiBKUXVlcnk8SFRNTEVsZW1lbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5fJHdyYXBwZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb250YWluZXIgb24gdGhlIGN1cnJlbnQgRE9NLFxuICAgKiBvciBmcm9tIGFuIEhUTUxFbGVtZW50IHBhc3NlZCB2aWEgYXJndW1lbnRcbiAgICovXG4gIHB1YmxpYyBnZXRDb250YWluZXIoJG5ld1BhZ2U/OiBKUXVlcnk8SFRNTEVsZW1lbnQ+KTogSlF1ZXJ5PEhUTUxFbGVtZW50PiB7XG4gICAgaWYgKCEkbmV3UGFnZSkge1xuICAgICAgJG5ld1BhZ2UgPSAkKGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgICBpZiAoISRuZXdQYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tET01dIERPTSBub3QgcmVhZHkhJyk7XG4gICAgfVxuICAgIGNvbnN0ICRjb250YWluZXIgPSB0aGlzLnBhcnNlQ29udGFpbmVyKCRuZXdQYWdlKTtcbiAgICBpZiAoISRjb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0RPTV0gTm8gY29udGFpbmVyIGZvdW5kJyk7XG4gICAgfVxuICAgIHJldHVybiAkY29udGFpbmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIHRoZSBjb250YWluZXJcbiAgICovXG4gIHB1YmxpYyBnZXROYW1lc3BhY2UoJGVsZW1lbnQ6IEpRdWVyeTxIVE1MRWxlbWVudD4pOiBzdHJpbmcge1xuICAgIGlmICgkZWxlbWVudCAmJiAkZWxlbWVudC5kYXRhKCkpIHtcbiAgICAgIHJldHVybiAkZWxlbWVudC5kYXRhKCduYW1lc3BhY2UnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRE9NXSBNaXNzaW5nIGRhdGEtbmFtZXNwYWNlIGF0dHJpYnV0ZScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQdXQgdGhlIGNvbnRhaW5lciBvbiB0aGUgcGFnZVxuICAgKi9cbiAgcHVibGljIHB1dENvbnRhaW5lcigkZWxlbWVudDogSlF1ZXJ5PEhUTUxFbGVtZW50Pikge1xuICAgICRlbGVtZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcbiAgICBjb25zdCAkd3JhcHBlciA9IHRoaXMuZ2V0V3JhcHBlcigpO1xuICAgICR3cmFwcGVyLmFwcGVuZCgkZWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbnRhaW5lciBzZWxlY3RvclxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheC5Eb21cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIGVsZW1lbnRcbiAgICovXG4gIHB1YmxpYyBwYXJzZUNvbnRhaW5lcigkbmV3UGFnZTogSlF1ZXJ5PEhUTUxFbGVtZW50Pik6IEpRdWVyeTxIVE1MRWxlbWVudD4ge1xuICAgIGNvbnN0ICRjb250YWluZXIgPSAkbmV3UGFnZS5maW5kKHRoaXMuY29udGFpbmVyU2VsZWN0b3IpO1xuICAgIGlmICghJGNvbnRhaW5lci5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gY29udGFpbmVyIHdpdGggc2VsZWN0b3IgXCIke3RoaXMuY29udGFpbmVyU2VsZWN0b3J9XCIgZm91bmQhYCk7XG4gICAgfVxuICAgIHJldHVybiAkY29udGFpbmVyO1xuICB9XG59XG5cbmV4cG9ydCB7IERvbSB9O1xuIiwiZXhwb3J0IGludGVyZmFjZSBJU3RhdGUge1xuICB1cmw6IHN0cmluZztcbiAgbmFtZXNwYWNlPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEhpc3RvcnlNYW5hZ2VyIGhlbHBzIHRvIGtlZXAgdHJhY2sgb2YgdGhlIG5hdmlnYXRpb25cbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLkhpc3RvcnlNYW5hZ2VyXG4gKiBAdHlwZSB7b2JqZWN0fVxuICovXG5leHBvcnQgY2xhc3MgSGlzdG9yeU1hbmFnZXIge1xuXG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBIaXN0b3J5TWFuYWdlcjtcblxuICAvKipcbiAgICogS2VlcCB0cmFjayBvZiB0aGUgc3RhdHVzIGluIGhpc3RvcmljIG9yZGVyXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5IaXN0b3J5TWFuYWdlclxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge0FycmF5fVxuICAgKi9cbiAgcHJpdmF0ZSBoaXN0b3J5OiBJU3RhdGVbXSA9IG5ldyBBcnJheSgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmIChIaXN0b3J5TWFuYWdlci5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIEhpc3RvcnlNYW5hZ2VyLmluc3RhbmNlO1xuICAgIH1cblxuICAgIEhpc3RvcnlNYW5hZ2VyLmluc3RhbmNlID0gdGhpcztcbiAgICByZXR1cm4gSGlzdG9yeU1hbmFnZXIuaW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IHN0YXR1c1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuSGlzdG9yeU1hbmFnZXJcbiAgICogQHJldHVybiB7SVN0YXRlfVxuICAgKi9cbiAgcHVibGljIGN1cnJlbnRTdGF0dXMoKTogSVN0YXRlIHtcbiAgICByZXR1cm4gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHByZXZpb3VzIHN0YXR1c1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuSGlzdG9yeU1hbmFnZXJcbiAgICogQHJldHVybiB7SVN0YXRlfVxuICAgKi9cbiAgcHVibGljIHByZXZTdGF0dXMoKTogSVN0YXRlIHwgbnVsbCB7XG4gICAgY29uc3QgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICAgIGlmIChoaXN0b3J5Lmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMl07XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IHNldCBvZiB1cmwgYW5kIG5hbWVzcGFjZVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuSGlzdG9yeU1hbmFnZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gICAqL1xuICBwdWJsaWMgYWRkKHVybDogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpIHtcblxuICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICBuYW1lc3BhY2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5oaXN0b3J5LnB1c2goe1xuICAgICAgbmFtZXNwYWNlLFxuICAgICAgdXJsLFxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHbG9iYWxFdmVudCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbC1ldmVudCc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IElTdGF0ZSB9IGZyb20gJy4vUGpheC9QamF4JztcblxuLyoqXG4gKiBCYXNlVmlldyB0byBiZSBleHRlbmRlZFxuICpcbiAqIEBuYW1lc3BhY2UgQmFyYmEuQmFzZVZpZXdcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmFic3RyYWN0IGNsYXNzIEJhc2VWaWV3IHtcbiAgLyoqXG4gICAqIE5hbWVzcGFjZSBvZiB0aGUgdmlldy5cbiAgICogKG5lZWQgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhLW5hbWVzcGFjZSBvZiB0aGUgY29udGFpbmVyKVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVZpZXdcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHByb3RlY3RlZCBuYW1lc3BhY2U/OiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkICRjb250YWluZXI/OiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBHbG9iYWxFdmVudCgpO1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gZXh0ZW5kIHRoZSBvYmplY3RcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV3T2JqZWN0XG4gICAqIEByZXR1cm4ge09iamVjdH0gbmV3SW5oZXJpdE9iamVjdFxuICAgKi9cbiAgcHVibGljIGV4dGVuZChvYmo6IG9iamVjdCkge1xuICAgIHJldHVybiBVdGlscy5leHRlbmQoZmFsc2UsIHRoaXMsIG9iaik7XG4gIH1cblxuICAvKipcbiAgICogSW5pdCB0aGUgdmlldy5cbiAgICogUC5TLiBJcyBzdWdnZXN0ZWQgdG8gaW5pdCB0aGUgdmlldyBiZWZvcmUgc3RhcnRpbmcgQmFyYmEuUGpheC5zdGFydCgpLFxuICAgKiBpbiB0aGlzIHdheSAub25FbnRlcigpIGFuZCAub25FbnRlckNvbXBsZXRlZCgpIHdpbGwgYmUgZmlyZWQgZm9yIHRoZSBjdXJyZW50XG4gICAqIGNvbnRhaW5lciB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqL1xuICBwdWJsaWMgaW5pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbignaW5pdFN0YXRlQ2hhbmdlJywgKG5ld1N0YXR1czogSVN0YXRlLCBvbGRTdGF0dXM6IElTdGF0ZSkgPT4ge1xuICAgICAgaWYgKG9sZFN0YXR1cyAmJiBvbGRTdGF0dXMubmFtZXNwYWNlID09PSBzZWxmLm5hbWVzcGFjZSkge1xuICAgICAgICBzZWxmLm9uTGVhdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbignbmV3UGFnZVJlYWR5JywgKG5ld1N0YXR1czogSVN0YXRlLCBvbGRTdGF0dXM6IElTdGF0ZSwgJGNvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgaHRtbDogc3RyaW5nLCBpc0luaXQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIHNlbGYuJGNvbnRhaW5lciA9ICRjb250YWluZXI7XG4gICAgICBpZiAobmV3U3RhdHVzLm5hbWVzcGFjZSA9PT0gc2VsZi5uYW1lc3BhY2UpIHtcbiAgICAgICAgc2VsZi5vbkVudGVyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIub24oJ3RyYW5zaXRpb25Db21wbGV0ZWQnLCAobmV3U3RhdHVzOiBJU3RhdGUsIG9sZFN0YXR1czogSVN0YXRlKSA9PiB7XG4gICAgICBpZiAobmV3U3RhdHVzLm5hbWVzcGFjZSA9PT0gc2VsZi5uYW1lc3BhY2UpIHtcbiAgICAgICAgc2VsZi5vbkVudGVyQ29tcGxldGVkKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGRTdGF0dXMgJiYgb2xkU3RhdHVzLm5hbWVzcGFjZSA9PT0gc2VsZi5uYW1lc3BhY2UpIHtcbiAgICAgICAgc2VsZi5vbkxlYXZlQ29tcGxldGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBjb250YWluZXJcbiAgKiBpcyByZWFkeSBhbmQgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAqIEBhYnN0cmFjdFxuICAqL1xuIHByb3RlY3RlZCBhYnN0cmFjdCBvbkVudGVyKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb25cbiAgICogdG8gdGhpcyBjb250YWluZXIgaGFzIGp1c3QgZmluaXNoZWQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkVudGVyQ29tcGxldGVkKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb25cbiAgICogdG8gYSBuZXcgY29udGFpbmVyIGhhcyBqdXN0IHN0YXJ0ZWQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkxlYXZlKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIGNvbnRhaW5lclxuICAgKiBoYXMganVzdCBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVZpZXdcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25MZWF2ZUNvbXBsZXRlZCgpOiBhbnk7XG59XG5cbmV4cG9ydCB7IEJhc2VWaWV3IH07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgQmFzZVRyYW5zaXRpb24sIElUcmFuc2l0aW9uIH0gZnJvbSAnLi9CYXNlVHJhbnNpdGlvbic7XG5cbi8qKlxuICogQmFzaWMgVHJhbnNpdGlvbiBvYmplY3QsIHdhaXQgZm9yIHRoZSBuZXcgQ29udGFpbmVyIHRvIGJlIHJlYWR5LFxuICogc2Nyb2xsIHRvcCwgYW5kIGZpbmlzaCB0aGUgdHJhbnNpdGlvbiAocmVtb3ZpbmcgdGhlIG9sZCBjb250YWluZXIgYW5kIGRpc3BsYXlpbmcgdGhlIG5ldyBvbmUpXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lc3BhY2UgQmFyYmEuSGlkZVNob3dUcmFuc2l0aW9uXG4gKiBAYXVnbWVudHMgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAqL1xuY2xhc3MgSGlkZVNob3dUcmFuc2l0aW9uIGV4dGVuZHMgQmFzZVRyYW5zaXRpb24gaW1wbGVtZW50cyBJVHJhbnNpdGlvbiB7XG5cbiAgcHJvdGVjdGVkIGRlYnVnID0gRGVidWcoJ2JhcmJhOkhpZGVTaG93VHJhbnNpdGlvbicpO1xuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICBpZiAoIXRoaXMubmV3Q29udGFpbmVyTG9hZGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgaXMgbm90IHNldCcpO1xuICAgIH1cbiAgICB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcudGhlbih0aGlzLmZpbmlzaC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBmaW5pc2goKSB7XG4gICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICAgIHRoaXMuZG9uZSgpO1xuICB9XG59XG5cbmV4cG9ydCB7IEhpZGVTaG93VHJhbnNpdGlvbiB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgQmFzZVRyYW5zaXRpb24sIElUcmFuc2l0aW9uIH0gZnJvbSAnLi9CYXNlVHJhbnNpdGlvbic7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gdHNsaW50OmRpc2FibGU6IGludGVyZmFjZS1uYW1lXG4gIGludGVyZmFjZSBXaW5kb3cgeyBtb2RlbDogYW55OyB9XG59XG5cbi8qKlxuICogQmFzaWMgVHJhbnNpdGlvbiBvYmplY3QsIHdhaXQgZm9yIHRoZSBuZXcgQ29udGFpbmVyIHRvIGJlIHJlYWR5LFxuICogc2Nyb2xsIHRvcCwgYW5kIGZpbmlzaCB0aGUgdHJhbnNpdGlvbiAocmVtb3ZpbmcgdGhlIG9sZCBjb250YWluZXIgYW5kIGRpc3BsYXlpbmcgdGhlIG5ldyBvbmUpXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ3VzdG9tVHJhbnNpdGlvbiBleHRlbmRzIEJhc2VUcmFuc2l0aW9uIGltcGxlbWVudHMgSVRyYW5zaXRpb24ge1xuXG4gIHByb3RlY3RlZCBkZWJ1ZyA9IERlYnVnKCdyaXZldHM6Q3VzdG9tVHJhbnNpdGlvbicpO1xuXG4gIHB1YmxpYyBpbml0KCRvbGRDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG5ld0NvbnRhaW5lcjogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy4kb2xkQ29udGFpbmVyID0gJG9sZENvbnRhaW5lcjtcbiAgICB0aGlzLmRlYnVnKCdpbml0Jyk7XG5cbiAgICB0aGlzLmRlZmVycmVkID0gVXRpbHMuZGVmZXJyZWQoKTtcbiAgICBjb25zdCBuZXdDb250YWluZXJSZWFkeSA9IFV0aWxzLmRlZmVycmVkKCk7XG4gICAgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nID0gbmV3Q29udGFpbmVyUmVhZHkucHJvbWlzZTtcblxuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIG5ld0NvbnRhaW5lci50aGVuKCgkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICBzZWxmLiRuZXdDb250YWluZXIgPSAkbmV3Q29udGFpbmVyO1xuICAgICAgbmV3Q29udGFpbmVyUmVhZHkucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLmRlYnVnKCdDdXN0b21UcmFuc2l0aW9uIHN0YXJ0Jyk7XG4gICAgaWYgKCF0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGhpcy5uZXdDb250YWluZXJMb2FkaW5nIGlzIG5vdCBzZXQnKTtcbiAgICB9XG4gICAgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nLnRoZW4odGhpcy5maW5pc2guYmluZCh0aGlzKSk7XG4gIH1cblxuICBwdWJsaWMgZmluaXNoKCRjb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcbiAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgLy8gdGhpcy52aWV3ID0gUml2ZXRzLmJpbmQodGhpcy4kbmV3Q29udGFpbmVyLCB3aW5kb3cubW9kZWwpO1xuICAgIHRoaXMuZGVidWcoJ0N1c3RvbVRyYW5zaXRpb24gZmluaXNoJyk7XG4gICAgdGhpcy5kb25lKCk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBDdXN0b21UcmFuc2l0aW9uIH07XG4iLCJleHBvcnQgKiBmcm9tICcuL0NhY2hlJztcbmV4cG9ydCAqIGZyb20gJy4vVHJhbnNpdGlvbi9UcmFuc2l0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vVmlldyc7XG5leHBvcnQgKiBmcm9tICcuL1BqYXgvUGpheCc7XG5leHBvcnQgKiBmcm9tICcuLi8uLi8uLi9nbG9iYWwtZXZlbnQnO1xuIiwiaW1wb3J0IHsgUGpheCwgUHJlZmV0Y2gsIEdsb2JhbEV2ZW50IH0gZnJvbSAnLi9iYXJiYS9iYXJiYSc7XG5pbXBvcnQgeyBJQmluZGVycyB9IGZyb20gJy4uLy4uL2JpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IHZpZXdCaW5kZXIgfSBmcm9tICcuL3ZpZXcuYmluZGVyJztcbmltcG9ydCB7IHJvdXRlQmluZGVyIH0gZnJvbSAnLi9yb3V0ZS5iaW5kZXInO1xuXG4vLyBUT0RPIG1ha2UgdG8gc2luZ2xldG9uXG5jb25zdCBkaXNwYXRjaGVyID0gbmV3IEdsb2JhbEV2ZW50KCk7XG5jb25zdCBwamF4ID0gbmV3IFBqYXgoKTtcbmNvbnN0IHByZWZldGNoID0gbmV3IFByZWZldGNoKCk7XG5cbmNvbnN0IHJvdXRlckJpbmRlcnM6IElCaW5kZXJzPGFueT4gPSB7fTtcblxuY29uc3Qgdmlld0JpbmRlcldyYXBwZXIgPSB2aWV3QmluZGVyKGRpc3BhdGNoZXIsIHBqYXgsIHByZWZldGNoKTtcbmNvbnN0IHJvdXRlQmluZGVyV3JhcHBlciA9IHJvdXRlQmluZGVyKGRpc3BhdGNoZXIsIHBqYXgsIHByZWZldGNoKTtcblxucm91dGVyQmluZGVyc1t2aWV3QmluZGVyV3JhcHBlci5uYW1lXSA9IHZpZXdCaW5kZXJXcmFwcGVyLmJpbmRlcjtcbnJvdXRlckJpbmRlcnNbcm91dGVCaW5kZXJXcmFwcGVyLm5hbWVdID0gcm91dGVCaW5kZXJXcmFwcGVyLmJpbmRlcjtcblxuZXhwb3J0IHsgUGpheCwgUHJlZmV0Y2gsIEdsb2JhbEV2ZW50LCByb3V0ZXJCaW5kZXJzIH07XG4iLCJleHBvcnQgKiBmcm9tICcuL2JpbmRlcnMvcm91dGVyL3JvdXRlci5iaW5kZXJzJztcbmV4cG9ydCAqIGZyb20gJy4vYmluZGVycy9iYXNpYy9iYXNpYy5iaW5kZXJzJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybWF0dGVycy9pbmRleCc7XG5leHBvcnQgKiBmcm9tICcuL2FkYXB0ZXInO1xuZXhwb3J0ICogZnJvbSAnLi9iaW5kZXIuc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL2JpbmRpbmcnO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wb25lbnQtYmluZGluZyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudC5zZXJ2aWNlJztcbmV4cG9ydCAqIGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9wYXJzZXJzJztcbmV4cG9ydCAqIGZyb20gJy4vdGlueWJpbmQnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscyc7XG5leHBvcnQgKiBmcm9tICcuL3ZpZXcnO1xuIiwiLyohXG4gKiBqUXVlcnkgTW9iaWxlIEV2ZW50c1xuICogYnkgQmVuIE1ham9yXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmVubWFqb3IvalF1ZXJ5LVRvdWNoLUV2ZW50c1xuICpcbiAqIENvcHlyaWdodCAyMDExLTIwMTcsIEJlbiBNYWpvclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlOlxuICogXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICogXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgJC5hdHRyRm4gPSAkLmF0dHJGbiB8fCB7fTtcblxuICAgIHZhciB0b3VjaENhcGFibGUgID0gKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyksXG5cdFxuICAgICAgICBzZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIHRhcF9waXhlbF9yYW5nZTogNSxcbiAgICAgICAgICAgIHN3aXBlX2hfdGhyZXNob2xkOiA1MCxcbiAgICAgICAgICAgIHN3aXBlX3ZfdGhyZXNob2xkOiA1MCxcbiAgICAgICAgICAgIHRhcGhvbGRfdGhyZXNob2xkOiA3NTAsXG4gICAgICAgICAgICBkb3VibGV0YXBfaW50OiA1MDAsXG5cdFx0XHRzaGFrZV90aHJlc2hvbGQ6IDE1LFxuXG4gICAgICAgICAgICB0b3VjaF9jYXBhYmxlOiB0b3VjaENhcGFibGUsXG4gICAgICAgICAgICBvcmllbnRhdGlvbl9zdXBwb3J0OiAoJ29yaWVudGF0aW9uJyBpbiB3aW5kb3cgJiYgJ29ub3JpZW50YXRpb25jaGFuZ2UnIGluIHdpbmRvdyksXG5cbiAgICAgICAgICAgIHN0YXJ0ZXZlbnQ6ICAodG91Y2hDYXBhYmxlKSA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nLFxuICAgICAgICAgICAgZW5kZXZlbnQ6ICAgICh0b3VjaENhcGFibGUpID8gJ3RvdWNoZW5kJyA6ICdtb3VzZXVwJyxcbiAgICAgICAgICAgIG1vdmVldmVudDogICAodG91Y2hDYXBhYmxlKSA/ICd0b3VjaG1vdmUnIDogJ21vdXNlbW92ZScsXG4gICAgICAgICAgICB0YXBldmVudDogICAgKHRvdWNoQ2FwYWJsZSkgPyAndGFwJyA6ICdjbGljaycsXG4gICAgICAgICAgICBzY3JvbGxldmVudDogKHRvdWNoQ2FwYWJsZSkgPyAndG91Y2htb3ZlJyA6ICdzY3JvbGwnLFxuXG4gICAgICAgICAgICBob2xkX3RpbWVyOiBudWxsLFxuICAgICAgICAgICAgdGFwX3RpbWVyOiBudWxsXG4gICAgICAgIH07XG4gICAgXG5cdC8vIERlY2xhcmUgdG91Y2ggbmFtZXNwYWNlOlxuXHQkLnRvdWNoID0geyB9O1xuXHRcbiAgICAvLyBDb252ZW5pZW5jZSBmdW5jdGlvbnM6XG4gICAgJC5pc1RvdWNoQ2FwYWJsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dGluZ3MudG91Y2hfY2FwYWJsZTsgfTtcbiAgICAkLmdldFN0YXJ0RXZlbnQgID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZXR0aW5ncy5zdGFydGV2ZW50OyAgICB9O1xuICAgICQuZ2V0RW5kRXZlbnQgICAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNldHRpbmdzLmVuZGV2ZW50OyAgICAgIH07XG4gICAgJC5nZXRNb3ZlRXZlbnQgICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dGluZ3MubW92ZWV2ZW50OyAgICAgfTtcbiAgICAkLmdldFRhcEV2ZW50ICAgID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZXR0aW5ncy50YXBldmVudDsgICAgICB9O1xuICAgICQuZ2V0U2Nyb2xsRXZlbnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNldHRpbmdzLnNjcm9sbGV2ZW50OyAgIH07XG4gICAgXG5cdC8vIFNFVFRFUlM6XG5cdC8vIFNldCB0aGUgWCB0aHJlc2hvbGQgb2Ygc3dpcGUgZXZlbnRzOlxuXHQkLnRvdWNoLnNldFN3aXBlVGhyZXNob2xkWCA9IGZ1bmN0aW9uKCB0aHJlc2hvbGQgKSB7XG5cdFx0aWYoIHR5cGVvZiB0aHJlc2hvbGQgIT09ICdudW1iZXInICkgeyB0aHJvdyBuZXcgRXJyb3IoJ1RocmVzaG9sZCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHR5cGUgb2YgbnVtYmVyJyk7IH1cblx0XHRzZXR0aW5ncy5zd2lwZV9oX3RocmVzaG9sZCA9IHRocmVzaG9sZDtcblx0fTtcblx0XG5cdC8vIFNldCB0aGUgWSB0aHJlc2hvbGQgb2Ygc3dpcGUgZXZlbnRzOlxuXHQkLnRvdWNoLnNldFN3aXBlVGhyZXNob2xkWSA9IGZ1bmN0aW9uKCB0aHJlc2hvbGQgKSB7XG5cdFx0aWYoIHR5cGVvZiB0aHJlc2hvbGQgIT09ICdudW1iZXInICkgeyB0aHJvdyBuZXcgRXJyb3IoJ1RocmVzaG9sZCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHR5cGUgb2YgbnVtYmVyJyk7IH1cblx0XHRzZXR0aW5ncy5zd2lwZV92X3RocmVzaG9sZCA9IHRocmVzaG9sZDtcblx0fTtcblx0XG5cdC8vIFNldCB0aGUgZG91YmxlIHRhcCBpbnRlcnZhbDpcblx0JC50b3VjaC5zZXREb3VibGVUYXBJbnQgICAgPSBmdW5jdGlvbiggaW50ZXJ2YWwgKSB7XG5cdFx0aWYoIHR5cGVvZiBpbnRlcnZhbCAhPT0gJ251bWJlcicgKSB7IHRocm93IG5ldyBFcnJvcignSW50ZXJ2YWwgcGFyYW1ldGVyIG11c3QgYmUgYSB0eXBlIG9mIG51bWJlcicpOyB9XG5cdFx0c2V0dGluZ3MuZG91YmxldGFwX2ludCA9IGludGVydmFsO1xuXHR9O1xuXHRcblx0Ly8gU2V0IHRoZSB0YXBob2xkIHRocmVzaG9sZDpcblx0JC50b3VjaC5zZXRUYXBIb2xkVGhyZXNob2xkID0gZnVuY3Rpb24oIHRocmVzaG9sZCApIHtcblx0XHRpZiggdHlwZW9mIHRocmVzaG9sZCAhPT0gJ251bWJlcicgKSB7IHRocm93IG5ldyBFcnJvcignVGhyZXNob2xkIHBhcmFtZXRlciBtdXN0IGJlIGEgdHlwZSBvZiBudW1iZXInKTsgfVxuXHRcdHNldHRpbmdzLnRhcGhvbGRfdGhyZXNob2xkID0gdGhyZXNob2xkO1xuXHR9O1xuXHRcblx0Ly8gU2V0IHRoZSBwaXhlbCByYW5nZSBmb3IgdGFwYXM6XG5cdCQudG91Y2guc2V0VGFwUmFuZ2UgPSBmdW5jdGlvbiggcmFuZ2UgKSB7XG5cdFx0aWYoIHR5cGVvZiByYW5nZSAhPT0gJ251bWJlcicgKSB7IHRocm93IG5ldyBFcnJvcignUmFuZ2VyIHBhcmFtZXRlciBtdXN0IGJlIGEgdHlwZSBvZiBudW1iZXInKTsgfVxuXHRcdHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSA9IHRocmVzaG9sZDtcblx0fTtcblx0XG4gICAgLy8gQWRkIEV2ZW50IHNob3J0Y3V0czpcbiAgICAkLmVhY2goWyd0YXBzdGFydCcsICd0YXBlbmQnLCAndGFwbW92ZScsICd0YXAnLCAnc2luZ2xldGFwJywgJ2RvdWJsZXRhcCcsICd0YXBob2xkJywgJ3N3aXBlJywgJ3N3aXBldXAnLCAnc3dpcGVyaWdodCcsICdzd2lwZWRvd24nLCAnc3dpcGVsZWZ0JywgJ3N3aXBlZW5kJywgJ3Njcm9sbHN0YXJ0JywgJ3Njcm9sbGVuZCcsICdvcmllbnRhdGlvbmNoYW5nZScsICd0YXAyJywgJ3RhcGhvbGQyJ10sIGZ1bmN0aW9uIChpLCBuYW1lKSB7XG4gICAgICAgICQuZm5bbmFtZV0gPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIHJldHVybiBmbiA/IHRoaXMub24obmFtZSwgZm4pIDogdGhpcy50cmlnZ2VyKG5hbWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgICQuYXR0ckZuW25hbWVdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIC8vIHRhcHN0YXJ0IEV2ZW50OlxuICAgICQuZXZlbnQuc3BlY2lhbC50YXBzdGFydCA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpO1xuICAgICAgICBcbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHRhcFN0YXJ0RnVuYyhlKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZScsIHRhcFN0YXJ0RnVuYyk7XG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggJiYgZS53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwc3RhcnQnLCBlLCB0b3VjaERhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZihzZXR0aW5ncy5zdGFydGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB0YXBtb3ZlIEV2ZW50OlxuICAgICQuZXZlbnQuc3BlY2lhbC50YXBtb3ZlID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXG4gICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLm1vdmVldmVudCwgZnVuY3Rpb24gdGFwTW92ZUZ1bmMoZSkge1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZScsIHRhcE1vdmVGdW5jKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6ICgoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXG4gICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsICd0YXBtb3ZlJywgZSwgdG91Y2hEYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3MubW92ZWV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB0YXBlbmQgRXZlbnQ6XG4gICAgJC5ldmVudC5zcGVjaWFsLnRhcGVuZCA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCk7XG5cbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiB0YXBFbmRGdW5jKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBUb3VjaCBldmVudCBkYXRhOlxuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZScsIHRhcEVuZEZ1bmMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwZW5kJywgZSwgdG91Y2hEYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLmVuZGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB0YXBob2xkIEV2ZW50OlxuICAgICQuZXZlbnQuc3BlY2lhbC50YXBob2xkID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcbiAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0LFxuICAgICAgICAgICAgICAgIHN0YXJ0X3BvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5kX3ggPSAwLFxuICAgICAgICAgICAgICAgIGVuZF95ID0gMDtcblxuICAgICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc3RhcnRldmVudCwgZnVuY3Rpb24gdGFwSG9sZEZ1bmMxKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS53aGljaCAmJiBlLndoaWNoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCd0YXBoZWxkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0ID0gZS50YXJnZXQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0X3RpbWUgPSBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVggLSBvcmlnRXZlbnQudG91Y2hlc1swXS50YXJnZXQub2Zmc2V0TGVmdCA6IGUub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VZIC0gb3JpZ0V2ZW50LnRvdWNoZXNbMF0udGFyZ2V0Lm9mZnNldFRvcCA6IGUub2Zmc2V0WVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBzdGFydF9wb3MueCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X3Bvcy55ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgICAgICAgICAgICAgICAgICBlbmRfeCA9IHN0YXJ0X3Bvcy54O1xuICAgICAgICAgICAgICAgICAgICBlbmRfeSA9IHN0YXJ0X3Bvcy55O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBlbGVtZW50J3MgdGhyZXNob2xkOlxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlX3RocmVzaG9sZCA9ICgkdGhpcy5wYXJlbnQoKS5kYXRhKCd0aHJlc2hvbGQnKSkgPyAkdGhpcy5wYXJlbnQoKS5kYXRhKCd0aHJlc2hvbGQnKSA6ICR0aGlzLmRhdGEoJ3RocmVzaG9sZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkID0gKHR5cGVvZiBlbGVfdGhyZXNob2xkICE9PSAndW5kZWZpbmVkJyAmJiBlbGVfdGhyZXNob2xkICE9PSBmYWxzZSAmJiBwYXJzZUludChlbGVfdGhyZXNob2xkKSkgPyBwYXJzZUludChlbGVfdGhyZXNob2xkKSA6IHNldHRpbmdzLnRhcGhvbGRfdGhyZXNob2xkOyBcblxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5ob2xkX3RpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZl94ID0gKHN0YXJ0X3Bvcy54IC0gZW5kX3gpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmZfeSA9IChzdGFydF9wb3MueSAtIGVuZF95KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ID09IG9yaWdUYXJnZXQgJiYgKChzdGFydF9wb3MueCA9PSBlbmRfeCAmJiBzdGFydF9wb3MueSA9PSBlbmRfeSkgfHwgKGRpZmZfeCA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl94IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSAmJiBkaWZmX3kgPj0gLShzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpICYmIGRpZmZfeSA8PSBzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ3RhcGhlbGQnLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmRfdGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uICA9IGVuZF90aW1lIC0gc3RhcnRfdGltZSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzICAgPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMgOiBbIGUgXSxcbiAgICAgICAgICAgICAgICB0b3VjaERhdGEgPSBbIF07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0b3VjaGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2ggPSB7XG4gICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiBkdXJhdGlvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdG91Y2hEYXRhLnB1c2goIHRvdWNoICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBldnRfbmFtZSA9ICggdG91Y2hlcy5sZW5ndGggPT0gMiApID8gJ3RhcGhvbGQyJyA6ICd0YXBob2xkJztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUxJywgdGFwSG9sZEZ1bmMxKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQodGhpc09iamVjdCwgZXZ0X25hbWUsIGUsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHRocmVzaG9sZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkub24oc2V0dGluZ3MuZW5kZXZlbnQsIGZ1bmN0aW9uIHRhcEhvbGRGdW5jMigpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUyJywgdGFwSG9sZEZ1bmMyKTtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCd0YXBoZWxkJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoc2V0dGluZ3MuaG9sZF90aW1lcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKHNldHRpbmdzLm1vdmVldmVudCwgZnVuY3Rpb24gdGFwSG9sZEZ1bmMzKGUpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUzJywgdGFwSG9sZEZ1bmMzKTtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZW5kX3ggPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgIGVuZF95ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpLm9mZihzZXR0aW5ncy5tb3ZlZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBkb3VibGV0YXAgRXZlbnQ6XG4gICAgJC5ldmVudC5zcGVjaWFsLmRvdWJsZXRhcCA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCksXG4gICAgICAgICAgICAgICAgb3JpZ1RhcmdldCxcbiAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgZmlyc3RUYXAgPSBudWxsLFxuICAgICAgICAgICAgICAgIG9yaWdFdmVudCxcbiAgICAgICAgY29vbG9mZixcbiAgICAgICAgY29vbGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5zdGFydGV2ZW50LCBmdW5jdGlvbiBkb3VibGVUYXBGdW5jMShlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggJiYgZS53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2RvdWJsZXRhcHBlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMScsIGRvdWJsZVRhcEZ1bmMxKTtcblxuICAgICAgICAgICAgICAgIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICBpZiAoIWZpcnN0VGFwKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0VGFwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbGVtZW50JzogZS5vcmlnaW5hbEV2ZW50LnNyY0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgnOiAgICQoZS50YXJnZXQpLmluZGV4KClcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiBkb3VibGVUYXBGdW5jMihlKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIHZhciBsYXN0VG91Y2ggPSAkdGhpcy5kYXRhKCdsYXN0VG91Y2gnKSB8fCBub3cgKyAxO1xuICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IG5vdyAtIGxhc3RUb3VjaDtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGFjdGlvbik7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIGRvdWJsZVRhcEZ1bmMyKTtcblxuICAgICAgICAgICAgICAgIGlmIChkZWx0YSA8IHNldHRpbmdzLmRvdWJsZXRhcF9pbnQgJiYgKCQoZS50YXJnZXQpLmluZGV4KCkgPT0gZmlyc3RUYXAuaW5kZXgpICYmIGRlbHRhID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2RvdWJsZXRhcHBlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNldHRpbmdzLnRhcF90aW1lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTm93IGdldCB0aGUgY3VycmVudCBldmVudDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RUYXAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZWxlbWVudCc6IGUub3JpZ2luYWxFdmVudC5zcmNFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2luZGV4JzogJChlLnRhcmdldCkuaW5kZXgoKVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnZmlyc3RUYXAnOiBmaXJzdFRhcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWNvbmRUYXAnOiBsYXN0VGFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ludGVydmFsJzogbGFzdFRhcC50aW1lIC0gZmlyc3RUYXAudGltZVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29vbGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsICdkb3VibGV0YXAnLCBlLCB0b3VjaERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb29saW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNvb2xvZmYgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb29saW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0sIHNldHRpbmdzLmRvdWJsZXRhcF9pbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnbGFzdFRvdWNoJywgbm93KTtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYXAgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChhY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5kb3VibGV0YXBfaW50LCBbZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdsYXN0VG91Y2gnLCBub3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHNpbmdsZXRhcCBFdmVudDpcbiAgICAvLyBUaGlzIGlzIHVzZWQgaW4gY29uanVjdGlvbiB3aXRoIGRvdWJsZXRhcCB3aGVuIGJvdGggZXZlbnRzIGFyZSBuZWVkZWQgb24gdGhlIHNhbWUgZWxlbWVudFxuICAgICQuZXZlbnQuc3BlY2lhbC5zaW5nbGV0YXAgPSB7XG4gICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpLFxuICAgICAgICAgICAgICAgIG9yaWdUYXJnZXQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IG51bGwsXG4gICAgICAgICAgICAgICAgc3RhcnRfcG9zID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc3RhcnRldmVudCwgZnVuY3Rpb24gc2luZ2xlVGFwRnVuYzEoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLndoaWNoICYmIGUud2hpY2ggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdUYXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMScsIHNpbmdsZVRhcEZ1bmMxKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHN0YXJ0IHggYW5kIHkgcG9zaXRpb246XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X3Bvcy54ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRfcG9zLnkgPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkub24oc2V0dGluZ3MuZW5kZXZlbnQsIGZ1bmN0aW9uIHNpbmdsZVRhcEZ1bmMyKGUpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUyJywgc2luZ2xlVGFwRnVuYzIpO1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PSBvcmlnVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIGVuZCBwb2ludDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZF9wb3NfeCA9IChlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZF9wb3NfeSA9IChlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgaXQgd2FzIGEgdGFwaG9sZDpcblxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy50YXBfdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaWZmX3ggPSAoc3RhcnRfcG9zLnggLSBlbmRfcG9zX3gpLCBkaWZmX3kgPSAoc3RhcnRfcG9zLnkgLSBlbmRfcG9zX3kpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighJHRoaXMuZGF0YSgnZG91YmxldGFwcGVkJykgJiYgISR0aGlzLmRhdGEoJ3RhcGhlbGQnKSAmJiAoKChzdGFydF9wb3MueCA9PSBlbmRfcG9zX3gpICYmIChzdGFydF9wb3MueSA9PSBlbmRfcG9zX3kpKSB8fCAoZGlmZl94ID49IC0oc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSAmJiBkaWZmX3ggPD0gc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlICYmIGRpZmZfeSA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl95IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXYXMgaXQgYSB0YXBob2xkP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCh0b3VjaERhdGEudGltZSAtIHN0YXJ0VGltZSkgPCBzZXR0aW5ncy50YXBob2xkX3RocmVzaG9sZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAnc2luZ2xldGFwJywgZSwgdG91Y2hEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sIHNldHRpbmdzLmRvdWJsZXRhcF9pbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHRhcCBFdmVudDpcbiAgICAkLmV2ZW50LnNwZWNpYWwudGFwID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcbiAgICAgICAgICAgICAgICBzdGFydGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IG51bGwsXG4gICAgICAgICAgICAgICAgc3RhcnRfdGltZSxcbiAgICAgICAgICAgICAgICBzdGFydF9wb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHRhcEZ1bmMxKGUpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUxJywgdGFwRnVuYzEpO1xuXG4gICAgICAgICAgICAgICAgaWYoIGUud2hpY2ggJiYgZS53aGljaCAhPT0gMSApXG4gICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdGFydF9wb3MueCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X3Bvcy55ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRfdGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdUYXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0b3VjaGVzID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzIDogWyBlIF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiB0YXBGdW5jMihlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIHRhcEZ1bmMyKTtcblxuICAgICAgICAgICAgICAgIC8vIE9ubHkgdHJpZ2dlciBpZiB0aGV5J3ZlIHN0YXJ0ZWQsIGFuZCB0aGUgdGFyZ2V0IG1hdGNoZXM6XG4gICAgICAgICAgICAgICAgdmFyIGVuZF94ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgIGVuZF95ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVksXG4gICAgICAgICAgICAgICAgICAgIGRpZmZfeCA9IChzdGFydF9wb3MueCAtIGVuZF94KSxcbiAgICAgICAgICAgICAgICAgICAgZGlmZl95ID0gKHN0YXJ0X3Bvcy55IC0gZW5kX3kpLFxuICAgICAgICAgICAgICAgICAgICBldmVudE5hbWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAob3JpZ1RhcmdldCA9PSBlLnRhcmdldCAmJiBzdGFydGVkICYmICgoRGF0ZS5ub3coKSAtIHN0YXJ0X3RpbWUpIDwgc2V0dGluZ3MudGFwaG9sZF90aHJlc2hvbGQpICYmICgoc3RhcnRfcG9zLnggPT0gZW5kX3ggJiYgc3RhcnRfcG9zLnkgPT0gZW5kX3kpIHx8IChkaWZmX3ggPj0gLShzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpICYmIGRpZmZfeCA8PSBzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UgJiYgZGlmZl95ID49IC0oc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSAmJiBkaWZmX3kgPD0gc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdWNoRGF0YSA9IFsgXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IoIHZhciBpID0gMDsgaSA8IHRvdWNoZXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoRGF0YS5wdXNoKCB0b3VjaCApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGV2dF9uYW1lID0gKCB0b3VjaGVzLmxlbmd0aCA9PSAyICkgPyAndGFwMicgOiAndGFwJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQodGhpc09iamVjdCwgZXZ0X25hbWUsIGUsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZihzZXR0aW5ncy5zdGFydGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlMSkub2ZmKHNldHRpbmdzLmVuZGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlMik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gc3dpcGUgRXZlbnQgKGFsc28gaGFuZGxlcyBzd2lwZXVwLCBzd2lwZXJpZ2h0LCBzd2lwZWRvd24gYW5kIHN3aXBlbGVmdCk6XG4gICAgJC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcbiAgICAgICAgICAgICAgICBzdGFydGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgaGFzU3dpcGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDb29yZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZmluYWxDb29yZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnRFdm50O1xuXG4gICAgICAgICAgICAvLyBTY3JlZW4gdG91Y2hlZCwgc3RvcmUgdGhlIG9yaWdpbmFsIGNvb3JkaW5hdGVcblxuICAgICAgICAgICAgZnVuY3Rpb24gdG91Y2hTdGFydChlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMScsIHRvdWNoU3RhcnQpO1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsQ29vcmQueCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDb29yZC55ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgICAgICBmaW5hbENvb3JkLnggPSBvcmlnaW5hbENvb3JkLng7XG4gICAgICAgICAgICAgICAgZmluYWxDb29yZC55ID0gb3JpZ2luYWxDb29yZC55O1xuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgLy8gUmVhZCBldmVudCBkYXRhIGludG8gb3VyIHN0YXJ0RXZ0OlxuICAgICAgICAgICAgICAgIHN0YXJ0RXZudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIGNvb3JkaW5hdGVzIGFzIGZpbmdlciBpcyBzd2lwaW5nXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvdWNoTW92ZShlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIHRvdWNoTW92ZSk7XG4gICAgICAgICAgICAgICAgZmluYWxDb29yZC54ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgICAgICAgICBmaW5hbENvb3JkLnkgPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuXG4gICAgICAgICAgICAgICAgdmFyIHN3aXBlZGlyO1xuXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGUgZWxlbWVudCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGJvdW5kIGNvbnRhaW5zIGEgZGF0YS14dGhyZXNob2xkIHwgZGF0YS12dGhyZXNob2xkOlxuICAgICAgICAgICAgICAgIHZhciBlbGVfeF90aHJlc2hvbGQgPSAoJHRoaXMucGFyZW50KCkuZGF0YSgneHRocmVzaG9sZCcpKSA/ICR0aGlzLnBhcmVudCgpLmRhdGEoJ3h0aHJlc2hvbGQnKSA6ICR0aGlzLmRhdGEoJ3h0aHJlc2hvbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgZWxlX3lfdGhyZXNob2xkID0gKCR0aGlzLnBhcmVudCgpLmRhdGEoJ3l0aHJlc2hvbGQnKSkgPyAkdGhpcy5wYXJlbnQoKS5kYXRhKCd5dGhyZXNob2xkJykgOiAkdGhpcy5kYXRhKCd5dGhyZXNob2xkJyksXG4gICAgICAgICAgICAgICAgICAgIGhfdGhyZXNob2xkID0gKHR5cGVvZiBlbGVfeF90aHJlc2hvbGQgIT09ICd1bmRlZmluZWQnICYmIGVsZV94X3RocmVzaG9sZCAhPT0gZmFsc2UgJiYgcGFyc2VJbnQoZWxlX3hfdGhyZXNob2xkKSkgPyBwYXJzZUludChlbGVfeF90aHJlc2hvbGQpIDogc2V0dGluZ3Muc3dpcGVfaF90aHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgICAgIHZfdGhyZXNob2xkID0gKHR5cGVvZiBlbGVfeV90aHJlc2hvbGQgIT09ICd1bmRlZmluZWQnICYmIGVsZV95X3RocmVzaG9sZCAhPT0gZmFsc2UgJiYgcGFyc2VJbnQoZWxlX3lfdGhyZXNob2xkKSkgPyBwYXJzZUludChlbGVfeV90aHJlc2hvbGQpIDogc2V0dGluZ3Muc3dpcGVfdl90aHJlc2hvbGQ7IFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbENvb3JkLnkgPiBmaW5hbENvb3JkLnkgJiYgKG9yaWdpbmFsQ29vcmQueSAtIGZpbmFsQ29vcmQueSA+IHZfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRpciA9ICdzd2lwZXVwJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ29vcmQueCA8IGZpbmFsQ29vcmQueCAmJiAoZmluYWxDb29yZC54IC0gb3JpZ2luYWxDb29yZC54ID4gaF90aHJlc2hvbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBlcmlnaHQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxDb29yZC55IDwgZmluYWxDb29yZC55ICYmIChmaW5hbENvb3JkLnkgLSBvcmlnaW5hbENvb3JkLnkgPiB2X3RocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVkb3duJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ29vcmQueCA+IGZpbmFsQ29vcmQueCAmJiAob3JpZ2luYWxDb29yZC54IC0gZmluYWxDb29yZC54ID4gaF90aHJlc2hvbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBlbGVmdCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzd2lwZWRpciAhPSB1bmRlZmluZWQgJiYgc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbENvb3JkLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbENvb3JkLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICBmaW5hbENvb3JkLnggPSAwO1xuICAgICAgICAgICAgICAgICAgICBmaW5hbENvb3JkLnkgPSAwO1xuICAgICAgICAgICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCBldmVudCBkYXRhIGludG8gb3VyIGVuZEV2bnQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRFdm50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgc3dpcGUgYW1vdW50IChub3JtYWxpemVkKTpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHhBbW91bnQgPSBNYXRoLmFicyhzdGFydEV2bnQucG9zaXRpb24ueCAtIGVuZEV2bnQucG9zaXRpb24ueCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5QW1vdW50ID0gTWF0aC5hYnMoc3RhcnRFdm50LnBvc2l0aW9uLnkgLSBlbmRFdm50LnBvc2l0aW9uLnkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhcnRFdm50Jzogc3RhcnRFdm50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZEV2bnQnOiBlbmRFdm50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpcmVjdGlvbic6IHN3aXBlZGlyLnJlcGxhY2UoJ3N3aXBlJywgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3hBbW91bnQnOiB4QW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3lBbW91bnQnOiB5QW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogZW5kRXZudC50aW1lIC0gc3RhcnRFdm50LnRpbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaGFzU3dpcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcignc3dpcGUnLCB0b3VjaERhdGEpLnRyaWdnZXIoc3dpcGVkaXIsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB0b3VjaEVuZChlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKGUuY3VycmVudFRhcmdldCk7XG4gICAgICAgICAgICAgICAgdmFyIHN3aXBlZGlyID0gXCJcIjtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUzJywgdG91Y2hFbmQpO1xuICAgICAgICAgICAgICAgIGlmIChoYXNTd2lwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBpZiB0aGUgZWxlbWVudCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGJvdW5kIGNvbnRhaW5zIGEgZGF0YS14dGhyZXNob2xkIHwgZGF0YS12dGhyZXNob2xkOlxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlX3hfdGhyZXNob2xkID0gJHRoaXMuZGF0YSgneHRocmVzaG9sZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlX3lfdGhyZXNob2xkID0gJHRoaXMuZGF0YSgneXRocmVzaG9sZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaF90aHJlc2hvbGQgPSAodHlwZW9mIGVsZV94X3RocmVzaG9sZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlX3hfdGhyZXNob2xkICE9PSBmYWxzZSAmJiBwYXJzZUludChlbGVfeF90aHJlc2hvbGQpKSA/IHBhcnNlSW50KGVsZV94X3RocmVzaG9sZCkgOiBzZXR0aW5ncy5zd2lwZV9oX3RocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZfdGhyZXNob2xkID0gKHR5cGVvZiBlbGVfeV90aHJlc2hvbGQgIT09ICd1bmRlZmluZWQnICYmIGVsZV95X3RocmVzaG9sZCAhPT0gZmFsc2UgJiYgcGFyc2VJbnQoZWxlX3lfdGhyZXNob2xkKSkgPyBwYXJzZUludChlbGVfeV90aHJlc2hvbGQpIDogc2V0dGluZ3Muc3dpcGVfdl90aHJlc2hvbGQ7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZEV2bnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZWFkIGV2ZW50IGRhdGEgaW50byBvdXIgZW5kRXZudDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi55ID4gZW5kRXZudC5wb3NpdGlvbi55ICYmIChzdGFydEV2bnQucG9zaXRpb24ueSAtIGVuZEV2bnQucG9zaXRpb24ueSA+IHZfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGV1cCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi54IDwgZW5kRXZudC5wb3NpdGlvbi54ICYmIChlbmRFdm50LnBvc2l0aW9uLnggLSBzdGFydEV2bnQucG9zaXRpb24ueCA+IGhfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi55IDwgZW5kRXZudC5wb3NpdGlvbi55ICYmIChlbmRFdm50LnBvc2l0aW9uLnkgLSBzdGFydEV2bnQucG9zaXRpb24ueSA+IHZfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVkb3duJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRFdm50LnBvc2l0aW9uLnggPiBlbmRFdm50LnBvc2l0aW9uLnggJiYgKHN0YXJ0RXZudC5wb3NpdGlvbi54IC0gZW5kRXZudC5wb3NpdGlvbi54ID4gaF90aHJlc2hvbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZWRpciA9ICdzd2lwZWxlZnQnO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBzd2lwZSBhbW91bnQgKG5vcm1hbGl6ZWQpOlxuICAgICAgICAgICAgICAgICAgICB2YXIgeEFtb3VudCA9IE1hdGguYWJzKHN0YXJ0RXZudC5wb3NpdGlvbi54IC0gZW5kRXZudC5wb3NpdGlvbi54KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHlBbW91bnQgPSBNYXRoLmFicyhzdGFydEV2bnQucG9zaXRpb24ueSAtIGVuZEV2bnQucG9zaXRpb24ueSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdWNoRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdzdGFydEV2bnQnOiBzdGFydEV2bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZW5kRXZudCc6IGVuZEV2bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGlyZWN0aW9uJzogc3dpcGVkaXIucmVwbGFjZSgnc3dpcGUnLCAnJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAneEFtb3VudCc6IHhBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAneUFtb3VudCc6IHlBbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZHVyYXRpb24nOiBlbmRFdm50LnRpbWUgLSBzdGFydEV2bnQudGltZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAkdGhpcy50cmlnZ2VyKCdzd2lwZWVuZCcsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc1N3aXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5zdGFydGV2ZW50LCB0b3VjaFN0YXJ0KTtcbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLm1vdmVldmVudCwgdG91Y2hNb3ZlKTtcbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLmVuZGV2ZW50LCB0b3VjaEVuZCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZihzZXR0aW5ncy5zdGFydGV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlMSkub2ZmKHNldHRpbmdzLm1vdmVldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHNjcm9sbHN0YXJ0IEV2ZW50IChhbHNvIGhhbmRsZXMgc2Nyb2xsZW5kKTpcbiAgICAkLmV2ZW50LnNwZWNpYWwuc2Nyb2xsc3RhcnQgPSB7XG4gICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpLFxuICAgICAgICAgICAgICAgIHNjcm9sbGluZyxcbiAgICAgICAgICAgICAgICB0aW1lcjtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHJpZ2dlcihldmVudCwgc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmcgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQodGhpc09iamVjdCwgc2Nyb2xsaW5nID8gJ3Njcm9sbHN0YXJ0JyA6ICdzY3JvbGxlbmQnLCBldmVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlQaG9uZSB0cmlnZ2VycyBzY3JvbGwgYWZ0ZXIgYSBzbWFsbCBkZWxheTsgdXNlIHRvdWNobW92ZSBpbnN0ZWFkXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5zY3JvbGxldmVudCwgZnVuY3Rpb24gc2Nyb2xsRnVuYyhldmVudCkge1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZScsIHNjcm9sbEZ1bmMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFzY3JvbGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihldmVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyKGV2ZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSwgNTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZihzZXR0aW5ncy5zY3JvbGxldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBpcyB0aGUgb3JpZW50YXRpb24gY2hhbmdlIChsYXJnZWx5IGJvcnJvd2VkIGZyb20galF1ZXJ5IE1vYmlsZSk6XG4gICAgdmFyIHdpbiA9ICQod2luZG93KSxcbiAgICAgICAgc3BlY2lhbF9ldmVudCxcbiAgICAgICAgZ2V0X29yaWVudGF0aW9uLFxuICAgICAgICBsYXN0X29yaWVudGF0aW9uLFxuICAgICAgICBpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSxcbiAgICAgICAgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0LFxuICAgICAgICBwb3J0cmFpdF9tYXAgPSB7XG4gICAgICAgICAgICAnMCc6IHRydWUsXG4gICAgICAgICAgICAnMTgwJzogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgaWYgKHNldHRpbmdzLm9yaWVudGF0aW9uX3N1cHBvcnQpIHtcbiAgICAgICAgdmFyIHd3ID0gd2luZG93LmlubmVyV2lkdGggfHwgd2luLndpZHRoKCksXG4gICAgICAgICAgICB3aCA9IHdpbmRvdy5pbm5lckhlaWdodCB8fCB3aW4uaGVpZ2h0KCksXG4gICAgICAgICAgICBsYW5kc2NhcGVfdGhyZXNob2xkID0gNTA7XG5cbiAgICAgICAgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgPSB3dyA+IHdoICYmICh3dyAtIHdoKSA+IGxhbmRzY2FwZV90aHJlc2hvbGQ7XG4gICAgICAgIGluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCA9IHBvcnRyYWl0X21hcFt3aW5kb3cub3JpZW50YXRpb25dO1xuXG4gICAgICAgIGlmICgoaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUgJiYgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0KSB8fCAoIWluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlICYmICFpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQpKSB7XG4gICAgICAgICAgICBwb3J0cmFpdF9tYXAgPSB7XG4gICAgICAgICAgICAgICAgJy05MCc6IHRydWUsXG4gICAgICAgICAgICAgICAgJzkwJzogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZSA9IHNwZWNpYWxfZXZlbnQgPSB7XG4gICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkIG5hdGl2ZWx5LCByZXR1cm4gZmFsc2Ugc28gdGhhdCBqUXVlcnlcbiAgICAgICAgICAgIC8vIHdpbGwgb24gdG8gdGhlIGV2ZW50IHVzaW5nIERPTSBtZXRob2RzLlxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLm9yaWVudGF0aW9uX3N1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBvcmllbnRhdGlvbiB0byBhdm9pZCBpbml0aWFsIGRvdWJsZS10cmlnZ2VyaW5nLlxuICAgICAgICAgICAgbGFzdF9vcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbigpO1xuXG4gICAgICAgICAgICB3aW4ub24oJ3Rocm90dGxlZHJlc2l6ZScsIGhhbmRsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3Mub3JpZW50YXRpb25fc3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2luLm9mZigndGhyb3R0bGVkcmVzaXplJywgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAoaGFuZGxlT2JqKSB7XG4gICAgICAgICAgICAvLyBTYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBib3VuZCBldmVudCBoYW5kbGVyLlxuICAgICAgICAgICAgdmFyIG9sZF9oYW5kbGVyID0gaGFuZGxlT2JqLmhhbmRsZXI7XG5cbiAgICAgICAgICAgIGhhbmRsZU9iai5oYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQub3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2xkX2hhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gSWYgdGhlIGV2ZW50IGlzIG5vdCBzdXBwb3J0ZWQgbmF0aXZlbHksIHRoaXMgaGFuZGxlciB3aWxsIGJlIGJvdW5kIHRvXG4gICAgLy8gdGhlIHdpbmRvdyByZXNpemUgZXZlbnQgdG8gc2ltdWxhdGUgdGhlIG9yaWVudGF0aW9uY2hhbmdlIGV2ZW50LlxuXG4gICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IG9yaWVudGF0aW9uLlxuICAgICAgICB2YXIgb3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTtcblxuICAgICAgICBpZiAob3JpZW50YXRpb24gIT09IGxhc3Rfb3JpZW50YXRpb24pIHtcbiAgICAgICAgICAgIC8vIFRoZSBvcmllbnRhdGlvbiBoYXMgY2hhbmdlZCwgc28gdHJpZ2dlciB0aGUgb3JpZW50YXRpb25jaGFuZ2UgZXZlbnQuXG4gICAgICAgICAgICBsYXN0X29yaWVudGF0aW9uID0gb3JpZW50YXRpb247XG4gICAgICAgICAgICB3aW4udHJpZ2dlcihcIm9yaWVudGF0aW9uY2hhbmdlXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgJC5ldmVudC5zcGVjaWFsLm9yaWVudGF0aW9uY2hhbmdlLm9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaXNQb3J0cmFpdCA9IHRydWUsXG4gICAgICAgICAgICBlbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgICAgIGlmIChzZXR0aW5ncy5vcmllbnRhdGlvbl9zdXBwb3J0KSB7XG4gICAgICAgICAgICBpc1BvcnRyYWl0ID0gcG9ydHJhaXRfbWFwW3dpbmRvdy5vcmllbnRhdGlvbl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpc1BvcnRyYWl0ID0gZWxlbSAmJiBlbGVtLmNsaWVudFdpZHRoIC8gZWxlbS5jbGllbnRIZWlnaHQgPCAxLjE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNQb3J0cmFpdCA/ICdwb3J0cmFpdCcgOiAnbGFuZHNjYXBlJztcbiAgICB9O1xuXG4gICAgLy8gdGhyb3R0bGUgSGFuZGxlcjpcbiAgICAkLmV2ZW50LnNwZWNpYWwudGhyb3R0bGVkcmVzaXplID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vbigncmVzaXplJywgdGhyb3R0bGVfaGFuZGxlcik7XG4gICAgICAgIH0sXG4gICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZigncmVzaXplJywgdGhyb3R0bGVfaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHRocm90dGxlID0gMjUwLFxuICAgICAgICB0aHJvdHRsZV9oYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3VyciA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBkaWZmID0gY3VyciAtIGxhc3RDYWxsO1xuXG4gICAgICAgICAgICBpZiAoZGlmZiA+PSB0aHJvdHRsZSkge1xuICAgICAgICAgICAgICAgIGxhc3RDYWxsID0gY3VycjtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ3Rocm90dGxlZHJlc2l6ZScpO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChoZWxkQ2FsbCkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhlbGRDYWxsKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQcm9taXNlIGEgaGVsZCBjYWxsIHdpbGwgc3RpbGwgZXhlY3V0ZVxuICAgICAgICAgICAgICAgIGhlbGRDYWxsID0gd2luZG93LnNldFRpbWVvdXQoaGFuZGxlciwgdGhyb3R0bGUgLSBkaWZmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbGFzdENhbGwgPSAwLFxuICAgICAgICBoZWxkQ2FsbCxcbiAgICAgICAgY3VycixcbiAgICAgICAgZGlmZjtcblxuICAgIC8vIFRyaWdnZXIgYSBjdXN0b20gZXZlbnQ6XG5cbiAgICBmdW5jdGlvbiB0cmlnZ2VyQ3VzdG9tRXZlbnQob2JqLCBldmVudFR5cGUsIGV2ZW50LCB0b3VjaERhdGEpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsVHlwZSA9IGV2ZW50LnR5cGU7XG4gICAgICAgIGV2ZW50LnR5cGUgPSBldmVudFR5cGU7XG5cbiAgICAgICAgJC5ldmVudC5kaXNwYXRjaC5jYWxsKG9iaiwgZXZlbnQsIHRvdWNoRGF0YSk7XG4gICAgICAgIGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG4gICAgfVxuXG4gICAgLy8gQ29ycmVjdGx5IG9uIGFueXRoaW5nIHdlJ3ZlIG92ZXJsb2FkZWQ6XG4gICAgJC5lYWNoKHtcbiAgICAgICAgc2Nyb2xsZW5kOiAnc2Nyb2xsc3RhcnQnLFxuICAgICAgICBzd2lwZXVwOiAnc3dpcGUnLFxuICAgICAgICBzd2lwZXJpZ2h0OiAnc3dpcGUnLFxuICAgICAgICBzd2lwZWRvd246ICdzd2lwZScsXG4gICAgICAgIHN3aXBlbGVmdDogJ3N3aXBlJyxcbiAgICAgICAgc3dpcGVlbmQ6ICdzd2lwZScsXG4gICAgdGFwMjogICAgICd0YXAnLFxuICAgIHRhcGhvbGQyOiAndGFwaG9sZCdcbiAgICB9LCBmdW5jdGlvbiAoZSwgc3JjRSkge1xuICAgICAgICAkLmV2ZW50LnNwZWNpYWxbZV0gPSB7XG4gICAgICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQodGhpcykub24oc3JjRSwgJC5ub29wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkO1xufSIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG4vKipcbiAqIEpRdWVyeSBFeHRlbnNpb24gZm9yIG1vYmlsZSBldmVudHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5tYWpvci9qUXVlcnktVG91Y2gtRXZlbnRzXG4gKi9cbmltcG9ydCB0b3VjaEV2ZW50cyBmcm9tICdqcXVlcnktdG91Y2gtZXZlbnRzJztcbmNvbnN0IGpRdWVyeTogSlF1ZXJ5U3RhdGljID0gdG91Y2hFdmVudHMoJCk7XG5leHBvcnQgZGVmYXVsdCBqUXVlcnk7XG4iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBKUXVlcnkgZnJvbSAnLi9qcXVlcnknO1xuXG4vLyAod2luZG93IGFzIGFueSkuJCA9IEpRdWVyeTtcblxuLy8gaW1wb3J0IHsgVGV0cmlzIH0gZnJvbSAnLi9zZXJ2aWNlcy90ZXRyaXMnO1xuaW1wb3J0IHtcbiAgVGlueWJpbmQsXG4gIFZpZXcsXG4gIEdsb2JhbEV2ZW50LFxuXG4gIC8vIGJpbmRlcnNcbiAgcm91dGVyQmluZGVycyxcbiAgYmFzaWNCaW5kZXJzV3JhcHBlcixcblxuICAvLyBmb3JtYXR0ZXJzXG4gIGNvbXBhcmVGb3JtYXR0ZXJzLFxuICBtYXRoRm9ybWF0dGVycyxcbiAgcHJvcGVydHlGb3JtYXR0ZXJzLFxuICBzcGVjaWFsRm9ybWF0dGVycyxcbiAgc3RyaW5nRm9ybWF0dGVycyxcbn0gZnJvbSAnLi90aW55YmluZCc7XG5cbmltcG9ydCB7XG4gIGFkZENsYXNzQmluZGVyLFxuICBhdXRvc2Nyb2xsQmluZGVyLFxuICByZW1vdmVDbGFzc0JpbmRlcixcbiAgdmFsdWVCaW5kZXIsXG4gIHNjcm9sbGJhckRyYWdhYmxlQmluZGVyLFxufSBmcm9tICcuL2JpbmRlcnMvaW5kZXgnO1xuaW1wb3J0IHtcbiAgY29udGFjdENvbXBvbmVudCxcbiAgaWNvbnNldENvbXBvbmVudCxcbiAgbmF2SXRlbXNDb21wb25lbnQsXG4gIHNob3BpZnlTZWN0aW9uUHJvZHVjdFNjcm9sbGJhckNvbXBvbmVudCxcbn0gZnJvbSAnLi9jb21wb25lbnRzL2luZGV4JztcblxuZXhwb3J0IGNsYXNzIE1haW4ge1xuXG4gIC8vIHByaXZhdGUgcHJlZmV0Y2ggPSBuZXcgUHJlZmV0Y2goKTtcbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IEdsb2JhbEV2ZW50KCk7XG4gIC8vICBwcml2YXRlIHBqYXggPSBuZXcgUGpheChuZXcgQ3VzdG9tVHJhbnNpdGlvbigpKTtcbiAgcHJpdmF0ZSB2aWV3OiBWaWV3O1xuICBwcml2YXRlIGRlYnVnID0gRGVidWcoJ21haW4nKTtcbiAgcHJpdmF0ZSB0aW55YmluZCA9IG5ldyBUaW55YmluZCgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgdGhpcy5kZWJ1ZygnaW5pdCB0aGUgbWFpbiBhcHBsaWNhdGlvbicpO1xuXG4gICAgLy8gUmVnaXN0IGNvbXBvbmVudHNcbiAgICB0aGlzLnRpbnliaW5kLmNvbXBvbmVudFNlcnZpY2UucmVnaXN0KGNvbnRhY3RDb21wb25lbnQoKSk7XG4gICAgdGhpcy50aW55YmluZC5jb21wb25lbnRTZXJ2aWNlLnJlZ2lzdChuYXZJdGVtc0NvbXBvbmVudCgpKTtcbiAgICB0aGlzLnRpbnliaW5kLmNvbXBvbmVudFNlcnZpY2UucmVnaXN0KGljb25zZXRDb21wb25lbnQoKSk7XG4gICAgdGhpcy50aW55YmluZC5jb21wb25lbnRTZXJ2aWNlLnJlZ2lzdChzaG9waWZ5U2VjdGlvblByb2R1Y3RTY3JvbGxiYXJDb21wb25lbnQoSlF1ZXJ5KSk7XG5cbiAgICAvLyBSZWdpc3QgYmluZGVyc1xuICAgIGNvbnN0IGJhc2ljQmluZGVycyA9IGJhc2ljQmluZGVyc1dyYXBwZXIoSlF1ZXJ5KTtcbiAgICAvLyBjb25zb2xlLmVycm9yKCdiYXNpY0JpbmRlcnMnLCBiYXNpY0JpbmRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RzKHJvdXRlckJpbmRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RzKGJhc2ljQmluZGVycyk7XG4gICAgdGhpcy50aW55YmluZC5iaW5kZXJTZXJ2aWNlLnJlZ2lzdChzY3JvbGxiYXJEcmFnYWJsZUJpbmRlcigpKTtcbiAgICB0aGlzLnRpbnliaW5kLmJpbmRlclNlcnZpY2UucmVnaXN0V3JhcHBlcihhdXRvc2Nyb2xsQmluZGVyKCkpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RXcmFwcGVyKHJlbW92ZUNsYXNzQmluZGVyKCkpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RXcmFwcGVyKGFkZENsYXNzQmluZGVyKCkpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RXcmFwcGVyKHZhbHVlQmluZGVyKCkpO1xuXG4gICAgLy8gUmVnaXN0IGZvcm1hdHRlcnNcbiAgICB0aGlzLnRpbnliaW5kLmZvcm1hdHRlclNlcnZpY2UucmVnaXN0cyhjb21wYXJlRm9ybWF0dGVycyk7XG4gICAgdGhpcy50aW55YmluZC5mb3JtYXR0ZXJTZXJ2aWNlLnJlZ2lzdHMobWF0aEZvcm1hdHRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuZm9ybWF0dGVyU2VydmljZS5yZWdpc3RzKHByb3BlcnR5Rm9ybWF0dGVycyk7XG4gICAgdGhpcy50aW55YmluZC5mb3JtYXR0ZXJTZXJ2aWNlLnJlZ2lzdHMoc3BlY2lhbEZvcm1hdHRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuZm9ybWF0dGVyU2VydmljZS5yZWdpc3RzKHN0cmluZ0Zvcm1hdHRlcnMpO1xuXG4gICAgdGhpcy52aWV3ID0gdGhpcy50aW55YmluZC5iaW5kKEpRdWVyeSgnYm9keScpWzBdLCB3aW5kb3cubW9kZWwpO1xuXG4gIH1cbn1cblxuSlF1ZXJ5KCgkOiBKUXVlcnlTdGF0aWMpID0+IHtcbiAgY29uc3QgbWFpbiA9IG5ldyBNYWluKCk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=