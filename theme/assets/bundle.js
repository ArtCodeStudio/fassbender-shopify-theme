!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=110)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=t.getInputValue=t.times=t.getString=t.isObject=t.isJson=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}t.isJson=function(e){try{var t=JSON.parse(e);return t instanceof Array||t instanceof Object}catch(e){return!1}};t.isObject=function(e){return"object"===a(e)&&null!==e};t.getString=function(e){return null!=e?e.toString():void 0};t.times=function(e,t){for(var n=0;n<e;n++)t()};t.getInputValue=function(e){var t=[];if("checkbox"===e.type)return e.checked;if("select-multiple"===e.type){var n=e.options;for(var r in n)if(n.hasOwnProperty(r)){var i=n[r];i.selected&&t.push(i.value)}return t}return e.value};var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"isUndefined",value:function(e){return void 0===e}},{key:"isDefined",value:function(e){return!this.isUndefined(e)}},{key:"isFunction",value:function(e){return"function"==typeof e}},{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isNumber",value:function(e){return!isNaN(parseFloat(e))&&!isNaN(e-0)}},{key:"isObject",value:function(e){return this.isDefined(e)&&"object"===a(e)}},{key:"isBoolean",value:function(e){return a(e)===a(!0)}},{key:"isString",value:function(e){return this.isDefined(e)&&"string"==typeof e}},{key:"stringHasNumber",value:function(e){return this.isString(e)&&/\d/.test(e)}},{key:"stringHasOnlyNumber",value:function(e){return/^\d+$/.test(e)}},{key:"stringIsPhoneNumber",value:function(e){return/^[0-9 ()+-]+$/.test(e)}},{key:"justDigits",value:function(t){var n=t.replace(/[^-\d\.]/g,"");return e.isNumber(n)?Number(n):0}},{key:"extend",value:function(e,t,n,r){return e?i.default.extend(!0,t,n,r):i.default.extend(t,n,r)}},{key:"concat",value:function(e,t,n){return this.extend(e,{},t||{},n||{})}},{key:"xhr",value:function(e){var t=this.deferred(),n=new XMLHttpRequest;return n.onreadystatechange=function(){if(4===n.readyState)return 200===n.status?t.resolve(n.responseText):t.reject(new Error("xhr: HTTP code is not 200"))},n.ontimeout=function(){return t.reject(new Error("xhr: Timeout exceeded"))},n.open("GET",e),n.timeout=this.xhrTimeout,n.setRequestHeader("x-barba","yes"),n.send(),t.promise}},{key:"deferred",value:function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.promise=t,e}},{key:"getLocation",value:function(e){return e?(0,i.default)('<a href="'.concat(e,'"></a>'))[0]:window.location}},{key:"getUrl",value:function(t){var n=e.getLocation(t);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(e){return e.replace(/#.*/,"")}},{key:"getPort",value:function(t,n){var r=e.getLocation(n),i=void 0!==t?t:r.port,o=r.protocol;return""!==i?Number(i):"http:"===o?80:"https:"===o?443:void 0}},{key:"isAbsoluteUrl",value:function(e){return/^https?:\/\//i.test(e)}},{key:"getUrlParameter",value:function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(t){return e.getLocation(t).hash}},{key:"updateHash",value:function(e){return window.location.hash=e}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){var e=Math.max(document.documentElement.clientWidth,window.innerWidth||0);return{h:Math.max(document.documentElement.clientHeight,window.innerHeight||0),w:e}}}],(n=null)&&o(t.prototype,n),r&&o(t,r),e}();t.Utils=s,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(s,"xhrTimeout",void 0)},function(e,t,n){(function(r){function i(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}(t=e.exports=n(107)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var i=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(o=++i)}),e.splice(o,0,r)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=i,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(i())}).call(this,n(108))},function(e,t,n){var r;!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,i){"use strict";var o=[],a=n.document,s=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,d={},p=d.toString,h=d.hasOwnProperty,v=h.toString,m=v.call(Object),g={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function x(e,t,n){var r,i=(t=t||a).createElement("script");if(i.text=e,n)for(r in w)n[r]&&(i[r]=n[r]);t.head.appendChild(i).parentNode.removeChild(i)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?d[p.call(e)]||"object":typeof e}var O=function(e,t){return new O.fn.init(e,t)},_=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function T(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!b(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}O.fn=O.prototype={jquery:"3.3.1",constructor:O,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=O.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return O.each(this,e)},map:function(e){return this.pushStack(O.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},O.extend=O.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||b(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(c&&r&&(O.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&O.isPlainObject(n)?n:{},a[t]=O.extend(c,o,r)):void 0!==r&&(a[t]=r));return a},O.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==p.call(e))&&(!(t=s(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&v.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){x(e)},each:function(e,t){var n,r=0;if(T(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(_,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(T(Object(e))?O.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(T(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return c.apply([],a)},guid:1,support:g}),"function"==typeof Symbol&&(O.fn[Symbol.iterator]=o[Symbol.iterator]),O.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){d["[object "+t+"]"]=t.toLowerCase()});var j=function(e){var t,n,r,i,o,a,s,u,c,l,f,d,p,h,v,m,g,b,y,w="sizzle"+1*new Date,x=e.document,k=0,O=0,_=ae(),T=ae(),j=ae(),C=function(e,t){return e===t&&(f=!0),0},E={}.hasOwnProperty,P=[],S=P.pop,M=P.push,D=P.push,N=P.slice,A=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",B="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",H="\\["+F+"*("+B+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+F+"*\\]",R=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",I=new RegExp(F+"+","g"),q=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),$=new RegExp("^"+F+"*,"+F+"*"),U=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),X=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),Y=new RegExp(R),W=new RegExp("^"+B+"$"),z={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},re=function(){d()},ie=be(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{D.apply(P=N.call(x.childNodes),x.childNodes),P[x.childNodes.length].nodeType}catch(e){D={apply:P.length?function(e,t){M.apply(e,N.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function oe(e,t,r,i){var o,s,c,l,f,h,g,b=t&&t.ownerDocument,k=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return r;if(!i&&((t?t.ownerDocument||t:x)!==p&&d(t),t=t||p,v)){if(11!==k&&(f=K.exec(e)))if(o=f[1]){if(9===k){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(b&&(c=b.getElementById(o))&&y(t,c)&&c.id===o)return r.push(c),r}else{if(f[2])return D.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return D.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!j[e+" "]&&(!m||!m.test(e))){if(1!==k)b=t,g=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=w),s=(h=a(e)).length;s--;)h[s]="#"+l+" "+ge(h[s]);g=h.join(","),b=Q.test(e)&&ve(t.parentNode)||t}if(g)try{return D.apply(r,b.querySelectorAll(g)),r}catch(e){}finally{l===w&&t.removeAttribute("id")}}}return u(e.replace(q,"$1"),t,r,i)}function ae(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function se(e){return e[w]=!0,e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function le(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function de(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function pe(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},d=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:x;return a!==p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,v=!o(p),x!==p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=w,!p.getElementsByName||!p.getElementsByName(w).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},g=[],m=[],(n.qsa=J.test(p.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+F+"*(?:value|"+L+")"),e.querySelectorAll("[id~="+w+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||m.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(n.matchesSelector=J.test(b=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),g.push("!=",R)}),m=m.length&&new RegExp(m.join("|")),g=g.length&&new RegExp(g.join("|")),t=J.test(h.compareDocumentPosition),y=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},C=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===p||e.ownerDocument===x&&y(x,e)?-1:t===p||t.ownerDocument===x&&y(x,t)?1:l?A(l,e)-A(l,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===p?-1:t===p?1:i?-1:o?1:l?A(l,e)-A(l,t):0;if(i===o)return le(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?le(a[r],s[r]):a[r]===x?-1:s[r]===x?1:0},p):p},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&d(e),t=t.replace(X,"='$1']"),n.matchesSelector&&v&&!j[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t)))try{var r=b.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,p,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==p&&d(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==p&&d(e);var i=r.attrHandle[t.toLowerCase()],o=i&&E.call(r.attrHandle,t.toLowerCase())?i(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(C),f){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return l=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(I," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,d,p,h,v=o!==a?"nextSibling":"previousSibling",m=t.parentNode,g=s&&t.nodeName.toLowerCase(),b=!u&&!s,y=!1;if(m){if(o){for(;v;){for(d=t;d=d[v];)if(s?d.nodeName.toLowerCase()===g:1===d.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&b){for(y=(p=(c=(l=(f=(d=m)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],d=p&&m.childNodes[p];d=++p&&d&&d[v]||(y=p=0)||h.pop();)if(1===d.nodeType&&++y&&d===t){l[e]=[k,p,y];break}}else if(b&&(y=p=(c=(l=(f=(d=t)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===y)for(;(d=++p&&d&&d[v]||(y=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==g:1!==d.nodeType)||!++y||(b&&((l=(f=d[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[k,y]),d!==t)););return(y-=i)===r||y%r==0&&y/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[w]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=A(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(q,"$1"));return r[w]?se(function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return W.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=de(t);function me(){}function ge(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=O++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var c,l,f,d=[k,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=l[o])&&c[0]===k&&c[1]===s)return d[2]=c[2];if(l[o]=d,d[2]=e(t,n,u))return!0}return!1}}function ye(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),c&&t.push(s)));return a}function xe(e,t,n,r,i,o){return r&&!r[w]&&(r=xe(r)),i&&!i[w]&&(i=xe(i,o)),se(function(o,a,s,u){var c,l,f,d=[],p=[],h=a.length,v=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),m=!e||!o&&t?v:we(v,d,e,s,u),g=n?i||(o?e:h||r)?[]:a:m;if(n&&n(m,g,s,u),r)for(c=we(g,p),r(c,[],s,u),l=c.length;l--;)(f=c[l])&&(g[p[l]]=!(m[p[l]]=f));if(o){if(i||e){if(i){for(c=[],l=g.length;l--;)(f=g[l])&&c.push(m[l]=f);i(null,g=[],c,u)}for(l=g.length;l--;)(f=g[l])&&(c=i?A(o,f):d[l])>-1&&(o[c]=!(a[c]=f))}}else g=we(g===a?g.splice(h,g.length):g),i?i(null,a,g,u):D.apply(a,g)})}function ke(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,l=be(function(e){return e===t},s,!0),f=be(function(e){return A(t,e)>-1},s,!0),d=[function(e,n,r){var i=!a&&(r||n!==c)||((t=n).nodeType?l(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])d=[be(ye(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[w]){for(i=++u;i<o&&!r.relative[e[i].type];i++);return xe(u>1&&ye(d),u>1&&ge(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(q,"$1"),n,u<i&&ke(e.slice(u,i)),i<o&&ke(e=e.slice(i)),i<o&&ge(e))}d.push(n)}return ye(d)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,c,l=T[e+" "];if(l)return t?0:l.slice(0);for(s=e,u=[],c=r.preFilter;s;){for(a in n&&!(i=$.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=U.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(q," ")}),s=s.slice(n.length)),r.filter)!(i=z[a].exec(s))||c[a]&&!(i=c[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):T(e,u).slice(0)},s=oe.compile=function(e,t){var n,i=[],o=[],s=j[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=ke(t[n]))[w]?i.push(s):o.push(s);(s=j(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,l){var f,h,m,g=0,b="0",y=o&&[],w=[],x=c,O=o||i&&r.find.TAG("*",l),_=k+=null==x?1:Math.random()||.1,T=O.length;for(l&&(c=a===p||a||l);b!==T&&null!=(f=O[b]);b++){if(i&&f){for(h=0,a||f.ownerDocument===p||(d(f),s=!v);m=e[h++];)if(m(f,a||p,s)){u.push(f);break}l&&(k=_)}n&&((f=!m&&f)&&g--,o&&y.push(f))}if(g+=b,n&&b!==g){for(h=0;m=t[h++];)m(y,w,a,s);if(o){if(g>0)for(;b--;)y[b]||w[b]||(w[b]=S.call(u));w=we(w)}D.apply(u,w),l&&!o&&w.length>0&&g+t.length>1&&oe.uniqueSort(u)}return l&&(k=_,c=x),y};return n?se(o):o}(o,i))).selector=e}return s},u=oe.select=function(e,t,n,i){var o,u,c,l,f,d="function"==typeof e&&e,p=!i&&a(e=d.selector||e);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&v&&r.relative[u[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=z.needsContext.test(e)?0:u.length;o--&&(c=u[o],!r.relative[l=c.type]);)if((f=r.find[l])&&(i=f(c.matches[0].replace(Z,ee),Q.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ge(u)))return D.apply(n,i),n;break}}return(d||s(e,p))(i,t,!v,n,!t||Q.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(C).join("")===w,n.detectDuplicates=!!f,d(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(L,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(n);O.find=j,O.expr=j.selectors,O.expr[":"]=O.expr.pseudos,O.uniqueSort=O.unique=j.uniqueSort,O.text=j.getText,O.isXMLDoc=j.isXML,O.contains=j.contains,O.escapeSelector=j.escape;var C=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&O(e).is(n))break;r.push(e)}return r},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=O.expr.match.needsContext;function S(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function D(e,t,n){return b(t)?O.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?O.grep(e,function(e){return e===t!==n}):"string"!=typeof t?O.grep(e,function(e){return f.call(t,e)>-1!==n}):O.filter(t,e,n)}O.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?O.find.matchesSelector(r,e)?[r]:[]:O.find.matches(e,O.grep(t,function(e){return 1===e.nodeType}))},O.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(O(e).filter(function(){for(t=0;t<r;t++)if(O.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)O.find(e,i[t],n);return r>1?O.uniqueSort(n):n},filter:function(e){return this.pushStack(D(this,e||[],!1))},not:function(e){return this.pushStack(D(this,e||[],!0))},is:function(e){return!!D(this,"string"==typeof e&&P.test(e)?O(e):e||[],!1).length}});var N,A=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(O.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:A.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof O?t[0]:t,O.merge(this,O.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:a,!0)),M.test(r[1])&&O.isPlainObject(t))for(r in t)b(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=a.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(O):O.makeArray(e,this)}).prototype=O.fn,N=O(a);var L=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function B(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}O.fn.extend({has:function(e){var t=O(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(O.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&O(e);if(!P.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&O.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?O.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(O(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(O.uniqueSort(O.merge(this.get(),O(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),O.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return B(e,"nextSibling")},prev:function(e){return B(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return S(e,"iframe")?e.contentDocument:(S(e,"template")&&(e=e.content||e),O.merge([],e.childNodes))}},function(e,t){O.fn[e]=function(n,r){var i=O.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=O.filter(r,i)),this.length>1&&(F[e]||O.uniqueSort(i),L.test(e)&&i.reverse()),this.pushStack(i)}});var H=/[^\x20\t\r\n\f]+/g;function R(e){return e}function I(e){throw e}function q(e,t,n,r){var i;try{e&&b(i=e.promise)?i.call(e).done(t).fail(n):e&&b(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}O.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return O.each(e.match(H)||[],function(e,n){t[n]=!0}),t}(e):O.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){O.each(n,function(n,r){b(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==k(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return O.each(arguments,function(e,t){for(var n;(n=O.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?O.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},O.extend({Deferred:function(e){var t=[["notify","progress",O.Callbacks("memory"),O.Callbacks("memory"),2],["resolve","done",O.Callbacks("once memory"),O.Callbacks("once memory"),0,"resolved"],["reject","fail",O.Callbacks("once memory"),O.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return O.Deferred(function(n){O.each(t,function(t,r){var i=b(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&b(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,b(c)?i?c.call(n,a(o,t,R,i),a(o,t,I,i)):(o++,c.call(n,a(o,t,R,i),a(o,t,I,i),a(o,t,R,t.notifyWith))):(r!==R&&(s=void 0,u=[n]),(i||t.resolveWith)(s,u))}},l=i?c:function(){try{c()}catch(n){O.Deferred.exceptionHook&&O.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(r!==I&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?l():(O.Deferred.getStackHook&&(l.stackTrace=O.Deferred.getStackHook()),n.setTimeout(l))}}return O.Deferred(function(n){t[0][3].add(a(0,n,b(i)?i:R,n.notifyWith)),t[1][3].add(a(0,n,b(e)?e:R)),t[2][3].add(a(0,n,b(r)?r:I))}).promise()},promise:function(e){return null!=e?O.extend(e,i):i}},o={};return O.each(t,function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add(function(){r=s},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith}),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=u.call(arguments),o=O.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(q(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||b(i[n]&&i[n].then)))return o.then();for(;n--;)q(i[n],a(n),o.reject);return o.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;O.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&$.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},O.readyException=function(e){n.setTimeout(function(){throw e})};var U=O.Deferred();function X(){a.removeEventListener("DOMContentLoaded",X),n.removeEventListener("load",X),O.ready()}O.fn.ready=function(e){return U.then(e).catch(function(e){O.readyException(e)}),this},O.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--O.readyWait:O.isReady)||(O.isReady=!0,!0!==e&&--O.readyWait>0||U.resolveWith(a,[O]))}}),O.ready.then=U.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?n.setTimeout(O.ready):(a.addEventListener("DOMContentLoaded",X),n.addEventListener("load",X));var Y=function(e,t,n,r,i,o,a){var s=0,u=e.length,c=null==n;if("object"===k(n))for(s in i=!0,n)Y(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,b(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(O(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:c?t.call(e):u?t(e[0],n):o},W=/^-ms-/,z=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(W,"ms-").replace(z,V)}var J=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=O.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},J(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(H)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||O.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!O.isEmptyObject(t)}};var Q=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}O.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),O.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){Z.set(this,e)}):Y(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),O.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,O.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=O.queue(e,t),r=n.length,i=n.shift(),o=O._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,function(){O.dequeue(e,t)},o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:O.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),O.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?O.queue(this[0],e):void 0===t?this:this.each(function(){var n=O.queue(this,e,t);O._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&O.dequeue(this,e)})},dequeue:function(e){return this.each(function(){O.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=O.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Q.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&O.contains(e.ownerDocument,e)&&"none"===O.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return O.css(e,t,"")},u=s(),c=n&&n[3]||(O.cssNumber[t]?"":"px"),l=(O.cssNumber[t]||"px"!==c&&+u)&&ie.exec(O.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)O.style(e,t,l+c),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),l/=o;l*=2,O.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,i=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=i)),i}var ce={};function le(e){var t,n=e.ownerDocument,r=e.nodeName,i=ce[r];return i||(t=n.body.appendChild(n.createElement(r)),i=O.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),ce[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=le(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}O.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?O(this).show():O(this).hide()})}});var de=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,he=/^$|^module$|\/(?:java|ecma)script/i,ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&S(e,t)?O.merge([e],n):n}function ge(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ve.optgroup=ve.option,ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td;var be,ye,we=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,u,c,l,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===k(o))O.merge(d,o.nodeType?[o]:o);else if(we.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(pe.exec(o)||["",""])[1].toLowerCase(),u=ve[s]||ve._default,a.innerHTML=u[1]+O.htmlPrefilter(o)+u[2],l=u[0];l--;)a=a.lastChild;O.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(r&&O.inArray(o,r)>-1)i&&i.push(o);else if(c=O.contains(o.ownerDocument,o),a=me(f.appendChild(o),"script"),c&&ge(a),n)for(l=0;o=a[l++];)he.test(o.type||"")&&n.push(o);return f}be=a.createDocumentFragment().appendChild(a.createElement("div")),(ye=a.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),be.appendChild(ye),g.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var ke=a.documentElement,Oe=/^key/,_e=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function je(){return!0}function Ce(){return!1}function Ee(){try{return a.activeElement}catch(e){}}function Pe(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Pe(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ce;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return O().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=O.guid++)),e.each(function(){O.event.add(this,t,i,r,n)})}O.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,c,l,f,d,p,h,v,m=Q.get(e);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&O.find.matchesSelector(ke,i),n.guid||(n.guid=O.guid++),(u=m.events)||(u=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==O&&O.event.triggered!==t.type?O.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(H)||[""]).length;c--;)p=v=(s=Te.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=O.event.special[p]||{},p=(i?f.delegateType:f.bindType)||p,f=O.event.special[p]||{},l=O.extend({type:p,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&O.expr.match.needsContext.test(i),namespace:h.join(".")},o),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,l):d.push(l),O.event.global[p]=!0)},remove:function(e,t,n,r,i){var o,a,s,u,c,l,f,d,p,h,v,m=Q.hasData(e)&&Q.get(e);if(m&&(u=m.events)){for(c=(t=(t||"").match(H)||[""]).length;c--;)if(p=v=(s=Te.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=O.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)l=d[o],!i&&v!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&("**"!==r||!l.selector)||(d.splice(o,1),l.selector&&d.delegateCount--,f.remove&&f.remove.call(e,l));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,m.handle)||O.removeEvent(e,p,m.handle),delete u[p])}else for(p in u)O.event.remove(e,p+t[c],n,r,!0);O.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=O.event.fix(e),u=new Array(arguments.length),c=(Q.get(this,"events")||{})[s.type]||[],l=O.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,s)){for(a=O.event.handlers.call(this,s,c),t=0;(i=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(r=((O.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?O(i,this).index(c)>-1:O.find(i,this,null,[c]).length),a[i]&&o.push(r);o.length&&s.push({elem:c,handlers:o})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(O.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[O.expando]?e:new O.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Ee()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Ee()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&S(this,"input"))return this.click(),!1},_default:function(e){return S(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},O.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},O.Event=function(e,t){if(!(this instanceof O.Event))return new O.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?je:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&O.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[O.expando]=!0},O.Event.prototype={constructor:O.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=je,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=je,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=je,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},O.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Oe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&_e.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},O.event.addProp),O.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){O.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,i=e.handleObj;return r&&(r===this||O.contains(this,r))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}}),O.fn.extend({on:function(e,t,n,r){return Pe(this,e,t,n,r)},one:function(e,t,n,r){return Pe(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,O(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){O.event.remove(this,e,n,t)})}});var Se=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Me=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return S(e,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&O(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,r,i,o,a,s,u,c;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),a=Q.set(t,o),c=o.events))for(i in delete a.handle,a.events={},c)for(n=0,r=c[i].length;n<r;n++)O.event.add(t,i,c[i][n]);Z.hasData(e)&&(s=Z.access(e),u=O.extend({},s),Z.set(t,u))}}function He(e,t,n,r){t=c.apply([],t);var i,o,a,s,u,l,f=0,d=e.length,p=d-1,h=t[0],v=b(h);if(v||d>1&&"string"==typeof h&&!g.checkClone&&De.test(h))return e.each(function(i){var o=e.eq(i);v&&(t[0]=h.call(this,i,o.html())),He(o,t,n,r)});if(d&&(o=(i=xe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=O.map(me(i,"script"),Le)).length;f<d;f++)u=i,f!==p&&(u=O.clone(u,!0,!0),s&&O.merge(a,me(u,"script"))),n.call(e[f],u,f);if(s)for(l=a[a.length-1].ownerDocument,O.map(a,Fe),f=0;f<s;f++)u=a[f],he.test(u.type||"")&&!Q.access(u,"globalEval")&&O.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?O._evalUrl&&O._evalUrl(u.src):x(u.textContent.replace(Ne,""),l,u))}return e}function Re(e,t,n){for(var r,i=t?O.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||O.cleanData(me(r)),r.parentNode&&(n&&O.contains(r.ownerDocument,r)&&ge(me(r,"script")),r.parentNode.removeChild(r));return e}O.extend({htmlPrefilter:function(e){return e.replace(Se,"<$1></$2>")},clone:function(e,t,n){var r,i,o,a,s,u,c,l=e.cloneNode(!0),f=O.contains(e.ownerDocument,e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||O.isXMLDoc(e)))for(a=me(l),r=0,i=(o=me(e)).length;r<i;r++)s=o[r],u=a[r],void 0,"input"===(c=u.nodeName.toLowerCase())&&de.test(s.type)?u.checked=s.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=s.defaultValue);if(t)if(n)for(o=o||me(e),a=a||me(l),r=0,i=o.length;r<i;r++)Be(o[r],a[r]);else Be(e,l);return(a=me(l,"script")).length>0&&ge(a,!f&&me(e,"script")),l},cleanData:function(e){for(var t,n,r,i=O.event.special,o=0;void 0!==(n=e[o]);o++)if(J(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?O.event.remove(n,r):O.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),O.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return Y(this,function(e){return void 0===e?O.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return He(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)})},prepend:function(){return He(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return He(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(O.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return O.clone(this,e,t)})},html:function(e){return Y(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ve[(pe.exec(e)||["",""])[1].toLowerCase()]){e=O.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(O.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return He(this,arguments,function(t){var n=this.parentNode;O.inArray(this,e)<0&&(O.cleanData(me(this)),n&&n.replaceChild(t,this))},e)}}),O.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){O.fn[e]=function(e){for(var n,r=[],i=O(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),O(i[a])[t](n),l.apply(r,n.get());return this.pushStack(r)}});var Ie=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},$e=new RegExp(oe.join("|"),"i");function Ue(e,t,n){var r,i,o,a,s=e.style;return(n=n||qe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||O.contains(e.ownerDocument,e)||(a=O.style(e,t)),!g.pixelBoxStyles()&&Ie.test(a)&&$e.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Xe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ke.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);r="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",s=36===t(e.right),i=36===t(e.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",ke.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,s,u,c=a.createElement("div"),l=a.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===l.style.backgroundClip,O.extend(g,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var Ye=/^(none|table(?!-c[ea]).+)/,We=/^--/,ze={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Je=a.createElement("div").style;function Ke(e){var t=O.cssProps[e];return t||(t=O.cssProps[e]=function(e){if(e in Je)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in Je)return e}(e)||e),t}function Qe(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=O.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=O.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=O.css(e,"border"+oe[a]+"Width",!0,i))):(u+=O.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=O.css(e,"border"+oe[a]+"Width",!0,i):s+=O.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=qe(e),i=Ue(e,t,r),o="border-box"===O.css(e,"boxSizing",!1,r),a=o;if(Ie.test(i)){if(!n)return i;i="auto"}return a=a&&(g.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===O.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}O.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=We.test(t),c=e.style;if(u||(t=Ke(s)),a=O.cssHooks[t]||O.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:c[t];"string"===(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n==n&&("number"===o&&(n+=i&&i[3]||(O.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return We.test(t)||(t=Ke(s)),(a=O.cssHooks[t]||O.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ue(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),O.each(["height","width"],function(e,t){O.cssHooks[t]={get:function(e,n,r){if(n)return!Ye.test(O.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,ze,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=qe(e),a="border-box"===O.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&g.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=O.css(e,t)),Qe(0,n,s)}}}),O.cssHooks.marginLeft=Xe(g.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),O.each({margin:"",padding:"",border:"Width"},function(e,t){O.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(O.cssHooks[e+t].set=Qe)}),O.fn.extend({css:function(e,t){return Y(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=qe(e),i=t.length;a<i;a++)o[t[a]]=O.css(e,t[a],!1,r);return o}return void 0!==n?O.style(e,t,n):O.css(e,t)},e,t,arguments.length>1)}}),O.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||O.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(O.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=O.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=O.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){O.fx.step[e.prop]?O.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[O.cssProps[e.prop]]&&!O.cssHooks[e.prop]?e.elem[e.prop]=e.now:O.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},O.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},O.fx=tt.prototype.init,O.fx.step={};var nt,rt,it=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function at(){rt&&(!1===a.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(at):n.setTimeout(at,O.fx.interval),O.fx.tick())}function st(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ct(e,t,n){for(var r,i=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function lt(e,t,n){var r,i,o=0,a=lt.prefilters.length,s=O.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:O.extend({},t),opts:O.extend(!0,{specialEasing:{},easing:O.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=O.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=G(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=O.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(l,c.opts.specialEasing);o<a;o++)if(r=lt.prefilters[o].call(c,e,l,c.opts))return b(r.stop)&&(O._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return O.map(l,ct,c),b(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),O.fx.timer(O.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}O.Animation=O.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){b(e)?(t=e,e=["*"]):e=e.match(H);for(var n,r=0,i=e.length;r<i;r++)n=e[r],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,u,c,l,f="width"in t||"height"in t,d=this,p={},h=e.style,v=e.nodeType&&ae(e),m=Q.get(e,"fxshow");for(r in n.queue||(null==(a=O._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,O.queue(e,"fx").length||a.empty.fire()})})),t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;v=!0}p[r]=m&&m[r]||O.style(e,r)}if((u=!O.isEmptyObject(t))||!O.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=Q.get(e,"display")),"none"===(l=O.css(e,"display"))&&(c?l=c:(fe([e],!0),c=e.style.display||c,l=O.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===O.css(e,"float")&&(u||(d.done(function(){h.display=c}),null==c&&(l=h.display,c="none"===l?"":l)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,p)u||(m?"hidden"in m&&(v=m.hidden):m=Q.access(e,"fxshow",{display:c}),o&&(m.hidden=!v),v&&fe([e],!0),d.done(function(){for(r in v||fe([e]),Q.remove(e,"fxshow"),p)O.style(e,r,p[r])})),u=ct(v?m[r]:0,r,d),r in m||(m[r]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),O.speed=function(e,t,n){var r=e&&"object"==typeof e?O.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return O.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in O.fx.speeds?r.duration=O.fx.speeds[r.duration]:r.duration=O.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){b(r.old)&&r.old.call(this),r.queue&&O.dequeue(this,r.queue)},r},O.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=O.isEmptyObject(e),o=O.speed(t,n,r),a=function(){var t=lt(this,O.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=O.timers,a=Q.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||O.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=O.timers,a=r?r.length:0;for(n.finish=!0,O.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),O.each(["toggle","show","hide"],function(e,t){var n=O.fn[t];O.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),O.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){O.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),O.timers=[],O.fx.tick=function(){var e,t=0,n=O.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||O.fx.stop(),nt=void 0},O.fx.timer=function(e){O.timers.push(e),O.fx.start()},O.fx.interval=13,O.fx.start=function(){rt||(rt=!0,at())},O.fx.stop=function(){rt=null},O.fx.speeds={slow:600,fast:200,_default:400},O.fn.delay=function(e,t){return e=O.fx&&O.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}})},function(){var e=a.createElement("input"),t=a.createElement("select").appendChild(a.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=a.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var ft,dt=O.expr.attrHandle;O.fn.extend({attr:function(e,t){return Y(this,O.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){O.removeAttr(this,e)})}}),O.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?O.prop(e,t,n):(1===o&&O.isXMLDoc(e)||(i=O.attrHooks[t.toLowerCase()]||(O.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void O.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=O.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&S(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(H);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?O.removeAttr(e,n):e.setAttribute(n,n),n}},O.each(O.expr.match.bool.source.match(/\w+/g),function(e,t){var n=dt[t]||O.find.attr;dt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=dt[a],dt[a]=i,i=null!=n(e,t,r)?a:null,dt[a]=o),i}});var pt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function vt(e){return(e.match(H)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function gt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(H)||[]}O.fn.extend({prop:function(e,t){return Y(this,O.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[O.propFix[e]||e]})}}),O.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&O.isXMLDoc(e)||(t=O.propFix[t]||t,i=O.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=O.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(O.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),O.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){O.propFix[this.toLowerCase()]=this}),O.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(b(e))return this.each(function(t){O(this).addClass(e.call(this,t,mt(this)))});if((t=gt(e)).length)for(;n=this[u++];)if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(b(e))return this.each(function(t){O(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=gt(e)).length)for(;n=this[u++];)if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):b(e)?this.each(function(n){O(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r)for(i=0,o=O(this),a=gt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;O.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=b(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,O(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=O.map(i,function(e){return null==e?"":e+""})),(t=O.valHooks[this.type]||O.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))})):i?(t=O.valHooks[i.type]||O.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n:void 0}}),O.extend({valHooks:{option:{get:function(e){var t=O.find.attr(e,"value");return null!=t?t:vt(O.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!S(n.parentNode,"optgroup"))){if(t=O(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=O.makeArray(t),a=i.length;a--;)((r=i[a]).selected=O.inArray(O.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),O.each(["radio","checkbox"],function(){O.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=O.inArray(O(e).val(),t)>-1}},g.checkOn||(O.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),g.focusin="onfocusin"in n;var yt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};O.extend(O.event,{trigger:function(e,t,r,i){var o,s,u,c,l,f,d,p,v=[r||a],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(s=p=u=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!yt.test(m+O.event.triggered)&&(m.indexOf(".")>-1&&(m=(g=m.split(".")).shift(),g.sort()),l=m.indexOf(":")<0&&"on"+m,(e=e[O.expando]?e:new O.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:O.makeArray(t,[e]),d=O.event.special[m]||{},i||!d.trigger||!1!==d.trigger.apply(r,t))){if(!i&&!d.noBubble&&!y(r)){for(c=d.delegateType||m,yt.test(c+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(r.ownerDocument||a)&&v.push(u.defaultView||u.parentWindow||n)}for(o=0;(s=v[o++])&&!e.isPropagationStopped();)p=s,e.type=o>1?c:d.bindType||m,(f=(Q.get(s,"events")||{})[e.type]&&Q.get(s,"handle"))&&f.apply(s,t),(f=l&&s[l])&&f.apply&&J(s)&&(e.result=f.apply(s,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),t)||!J(r)||l&&b(r[m])&&!y(r)&&((u=r[l])&&(r[l]=null),O.event.triggered=m,e.isPropagationStopped()&&p.addEventListener(m,wt),r[m](),e.isPropagationStopped()&&p.removeEventListener(m,wt),O.event.triggered=void 0,u&&(r[l]=u)),e.result}},simulate:function(e,t,n){var r=O.extend(new O.Event,n,{type:e,isSimulated:!0});O.event.trigger(r,null,t)}}),O.fn.extend({trigger:function(e,t){return this.each(function(){O.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return O.event.trigger(e,t,n,!0)}}),g.focusin||O.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){O.event.simulate(t,e.target,O.event.fix(e))};O.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}});var xt=n.location,kt=Date.now(),Ot=/\?/;O.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||O.error("Invalid XML: "+e),t};var _t=/\[\]$/,Tt=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,Ct=/^(?:input|select|textarea|keygen)/i;function Et(e,t,n,r){var i;if(Array.isArray(t))O.each(t,function(t,i){n||_t.test(e)?r(e,i):Et(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==k(t))r(e,t);else for(i in t)Et(e+"["+i+"]",t[i],n,r)}O.param=function(e,t){var n,r=[],i=function(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!O.isPlainObject(e))O.each(e,function(){i(this.name,this.value)});else for(n in e)Et(n,e[n],t,i);return r.join("&")},O.fn.extend({serialize:function(){return O.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=O.prop(this,"elements");return e?O.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!O(this).is(":disabled")&&Ct.test(this.nodeName)&&!jt.test(e)&&(this.checked||!de.test(e))}).map(function(e,t){var n=O(this).val();return null==n?null:Array.isArray(n)?O.map(n,function(e){return{name:t.name,value:e.replace(Tt,"\r\n")}}):{name:t.name,value:n.replace(Tt,"\r\n")}}).get()}});var Pt=/%20/g,St=/#.*$/,Mt=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,At=/^\/\//,Lt={},Ft={},Bt="*/".concat("*"),Ht=a.createElement("a");function Rt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(H)||[];if(b(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function It(e,t,n,r){var i={},o=e===Ft;function a(s){var u;return i[s]=!0,O.each(e[s]||[],function(e,s){var c=s(t,n,r);return"string"!=typeof c||o||i[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function qt(e,t){var n,r,i=O.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&O.extend(!0,e,r),e}Ht.href=xt.href,O.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":O.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?qt(qt(e,O.ajaxSettings),t):qt(O.ajaxSettings,e)},ajaxPrefilter:Rt(Lt),ajaxTransport:Rt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,s,u,c,l,f,d,p,h=O.ajaxSetup({},t),v=h.context||h,m=h.context&&(v.nodeType||v.jquery)?O(v):O.event,g=O.Deferred(),b=O.Callbacks("once memory"),y=h.statusCode||{},w={},x={},k="canceled",_={readyState:0,getResponseHeader:function(e){var t;if(l){if(!s)for(s={};t=Dt.exec(o);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==l&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)_.always(e[_.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||k;return r&&r.abort(t),T(0,t),this}};if(g.promise(_),h.url=((e||h.url||xt.href)+"").replace(At,xt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(H)||[""],null==h.crossDomain){c=a.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=Ht.protocol+"//"+Ht.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=O.param(h.data,h.traditional)),It(Lt,h,t,_),l)return _;for(d in(f=O.event&&h.global)&&0==O.active++&&O.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Nt.test(h.type),i=h.url.replace(St,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Pt,"+")):(p=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(Ot.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Mt,"$1"),p=(Ot.test(i)?"&":"?")+"_="+kt+++p),h.url=i+p),h.ifModified&&(O.lastModified[i]&&_.setRequestHeader("If-Modified-Since",O.lastModified[i]),O.etag[i]&&_.setRequestHeader("If-None-Match",O.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&_.setRequestHeader("Content-Type",h.contentType),_.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Bt+"; q=0.01":""):h.accepts["*"]),h.headers)_.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(v,_,h)||l))return _.abort();if(k="abort",b.add(h.complete),_.done(h.success),_.fail(h.error),r=It(Ft,h,t,_)){if(_.readyState=1,f&&m.trigger("ajaxSend",[_,h]),l)return _;h.async&&h.timeout>0&&(u=n.setTimeout(function(){_.abort("timeout")},h.timeout));try{l=!1,r.send(w,T)}catch(e){if(l)throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,a,s){var c,d,p,w,x,k=t;l||(l=!0,u&&n.clearTimeout(u),r=void 0,o=s||"",_.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var r,i,o,a,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(h,_,a)),w=function(e,t,n,r){var i,o,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=c[u+" "+o]||c["* "+o]))for(i in c)if((s=i.split(" "))[1]===o&&(a=c[u+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[i]:!0!==c[i]&&(o=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(h,w,_,c),c?(h.ifModified&&((x=_.getResponseHeader("Last-Modified"))&&(O.lastModified[i]=x),(x=_.getResponseHeader("etag"))&&(O.etag[i]=x)),204===e||"HEAD"===h.type?k="nocontent":304===e?k="notmodified":(k=w.state,d=w.data,c=!(p=w.error))):(p=k,!e&&k||(k="error",e<0&&(e=0))),_.status=e,_.statusText=(t||k)+"",c?g.resolveWith(v,[d,k,_]):g.rejectWith(v,[_,k,p]),_.statusCode(y),y=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[_,h,c?d:p]),b.fireWith(v,[_,k]),f&&(m.trigger("ajaxComplete",[_,h]),--O.active||O.event.trigger("ajaxStop")))}return _},getJSON:function(e,t,n){return O.get(e,t,n,"json")},getScript:function(e,t){return O.get(e,void 0,t,"script")}}),O.each(["get","post"],function(e,t){O[t]=function(e,n,r,i){return b(n)&&(i=i||r,r=n,n=void 0),O.ajax(O.extend({url:e,type:t,dataType:i,data:n,success:r},O.isPlainObject(e)&&e))}}),O._evalUrl=function(e){return O.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},O.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=O(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return b(e)?this.each(function(t){O(this).wrapInner(e.call(this,t))}):this.each(function(){var t=O(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=b(e);return this.each(function(n){O(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){O(this).replaceWith(this.childNodes)}),this}}),O.expr.pseudos.hidden=function(e){return!O.expr.pseudos.visible(e)},O.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},O.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},Ut=O.ajaxSettings.xhr();g.cors=!!Ut&&"withCredentials"in Ut,g.ajax=Ut=!!Ut,O.ajaxTransport(function(e){var t,r;if(g.cors||Ut&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o($t[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),O.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),O.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return O.globalEval(e),e}}}),O.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),O.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(r,i){t=O("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),a.head.appendChild(t[0])},abort:function(){n&&n()}}});var Xt,Yt=[],Wt=/(=)\?(?=&|$)|\?\?/;O.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||O.expando+"_"+kt++;return this[e]=!0,e}}),O.ajaxPrefilter("json jsonp",function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(Wt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Wt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Wt,"$1"+i):!1!==e.jsonp&&(e.url+=(Ot.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||O.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always(function(){void 0===o?O(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Yt.push(i)),a&&b(o)&&o(a[0]),a=o=void 0}),"script"}),g.createHTMLDocument=((Xt=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Xt.childNodes.length),O.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,t.head.appendChild(r)):t=a),i=M.exec(e),o=!n&&[],i?[t.createElement(i[1])]:(i=xe([e],t,o),o&&o.length&&O(o).remove(),O.merge([],i.childNodes)));var r,i,o},O.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&O.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?O("<div>").append(O.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},O.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){O.fn[t]=function(e){return this.on(t,e)}}),O.expr.pseudos.animated=function(e){return O.grep(O.timers,function(t){return e===t.elem}).length},O.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,c=O.css(e,"position"),l=O(e),f={};"static"===c&&(e.style.position="relative"),s=l.offset(),o=O.css(e,"top"),u=O.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(a=(r=l.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),b(t)&&(t=t.call(e,n,O.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+i),"using"in t?t.using.call(e,f):l.css(f)}},O.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){O.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===O.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===O.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=O(e).offset()).top+=O.css(e,"borderTopWidth",!0),i.left+=O.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-O.css(r,"marginTop",!0),left:t.left-i.left-O.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===O.css(e,"position");)e=e.offsetParent;return e||ke})}}),O.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;O.fn[e]=function(r){return Y(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),O.each(["top","left"],function(e,t){O.cssHooks[t]=Xe(g.pixelPosition,function(e,n){if(n)return n=Ue(e,t),Ie.test(n)?O(e).position()[t]+"px":n})}),O.each({Height:"height",Width:"width"},function(e,t){O.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){O.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return Y(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?O.css(t,n,s):O.style(t,n,i,s)},t,a?i:void 0,a)}})}),O.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){O.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),O.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),O.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),O.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return r=u.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||O.guid++,i},O.holdReady=function(e){e?O.readyWait++:O.ready(!0)},O.isArray=Array.isArray,O.parseJSON=JSON.parse,O.nodeName=S,O.isFunction=b,O.isWindow=y,O.camelCase=G,O.type=k,O.now=Date.now,O.isNumeric=function(e){var t=O.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return O}.apply(t,[]))||(e.exports=r);var zt=n.jQuery,Vt=n.$;return O.noConflict=function(e){return n.$===O&&(n.$=Vt),e&&n.jQuery===O&&(n.jQuery=zt),O},i||(n.jQuery=n.$=O),O})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;var r,i=n(9),o=n(16),a=n(7),s=n(15),u=n(4),c=(r=n(1))&&r.__esModule?r:{default:r};function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"els",void 0),d(this,"models",void 0),d(this,"options",void 0),d(this,"bindings",[]),t instanceof Array?this.els=t:this.els=[t],this.models=n,this.options=r,this.build()}return f(e,null,[{key:"create",value:function(t,n,r){var i=t.el.cloneNode(!0),o=new e(i,n,t.view.options);if(o.bind(),!t||!t.marker||null===t.marker.parentNode)throw new Error("[View] No parent node for binding!");return t.marker.parentNode.insertBefore(i,r),o}}]),f(e,[{key:"buildBinding",value:function(e,t,n,r,i){var a=(0,u.parseDeclaration)(n),s=a.keypath,c=a.pipes;this.bindings.push(new o.Binding(this,e,t,s,r,i,c))}},{key:"build",value:function(){this.bindings=[];var t,n,r=this.els;for(t=0,n=r.length;t<n;t++){if(!this.options.templateDelimiters)throw new Error("templateDelimiters required");(0,u.parseNode)(this,r[t],this.options.templateDelimiters)}this.bindings.sort(e.bindingComparator)}},{key:"traverse",value:function(t){var n;if(!(n=this.options.fullPrefix?this.options.fullPrefix:this.options.prefix+"-"))throw new Error("prefix is required");var r,o,u,c,l="SCRIPT"===t.nodeName||"STYLE"===t.nodeName,f=t.attributes,d=[],p=this.options.starBinders;if(this.options.binders){for(var h=0,v=f.length;h<v;h++){var m=f[h];if(0===m.name.indexOf(n)){if(r=m.name.slice(n.length),c=[],!(o=this.options.binders[r]))for(var g=0;g<p.length;g++)if(u=p[g],r.slice(0,u.length-1)===u.slice(0,-1)){o=this.options.binders[u],c.push(r.slice(u.length-1));break}if(o||(o=i.Tinybind.fallbackBinder),o.block)return this.buildBinding(t,r,m.value,o,c),t.removeAttribute(m.name),!0;d.push({attr:m,binder:o,nodeName:r,args:c})}}for(var b=0;b<d.length;b++){var y=d[b];this.buildBinding(t,y.nodeName,y.attr.value,y.binder,y.args),t.removeAttribute(y.attr.name)}}if(!l&&(r=t.nodeName.toLowerCase(),this.options.components&&this.options.components[r]&&!t._bound)){var w=a.ComponentService.type(this.options.components[r]);if("classic"===w&&(this.bindings.push(new s.ComponentBinding(this,t,r)),e.debug("Stop parsing on (deprecated) component ".concat(r))),"webcomponent"===w){var x=this.options.components[r];if(window.customElements)e.debug("Define Webcomponent ".concat(r," with customElements.define")),customElements.get(r)?e.debug("Web component already defined"):customElements.define(r,x);else{e.debug("Fallback for Webcomponent ".concat(r));new x(t)}}l=!0}return l}},{key:"bind",value:function(){this.bindings.forEach(function(e){e.bind()})}},{key:"unbind",value:function(){Array.isArray(this.bindings)&&this.bindings.forEach(function(e){e.unbind()})}},{key:"sync",value:function(){this.bindings.forEach(function(e){e.sync&&e.sync()})}},{key:"publish",value:function(){this.bindings.forEach(function(e){e.binder&&e.publish&&e.binder.publishes&&e.publish()})}},{key:"update",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(t).forEach(function(n){e.models[n]=t[n]}),this.bindings.forEach(function(e){e.update&&e.update(t)})}}]),e}();t.View=p,d(p,"debug",(0,c.default)("riba:view")),d(p,"DECLARATION_SPLIT",/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g),d(p,"textBinder",{routine:function(e,t){e.data=null!=t?t:""}}),d(p,"bindingComparator",function(e,t){var n=e.binder&&e.binder.priority||0;return(t.binder&&t.binder.priority||0)-n})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseType=function(e){var t=o,n=e;if(void 0===e)return{type:t,value:void 0};c.test(e)?n=e.slice(1,-1):"true"===e?n=!0:"false"===e?n=!1:"null"===e?n=null:"undefined"===e?n=void 0:""===e?n=void 0:isNaN(Number(e))?(0,r.isJson)(e)?n=JSON.parse(e):t=a:n=Number(e);return{type:t,value:n}},t.parseTemplate=f,t.parseNode=function e(t,n,r){var o=!1;n=n;if(3===n.nodeType){var a=null;if(n.data&&(a=f(n.data,r)),a&&a.length){if(!n.parentNode)throw new Error("[View] Node (TEXT_NODE) has no parent node");for(var s=0;s<a.length;s++){var u=a[s],c=document.createTextNode(u.value);n.parentNode.insertBefore(c,n),1===u.type&&t.buildBinding(c,null,u.value,i.View.textBinder,null)}n.parentNode.removeChild(n)}o=!0}else 1===n.nodeType&&(o=t.traverse(n));if(!o&&n.childNodes)for(var l=0;l<n.childNodes.length;l++)e(t,n.childNodes[l],r)},t.parseDeclaration=function(e){var t=e.match(l);if(null===t)throw new Error("[View] No matches");var n=t.map(function(e){return e.trim()});return{keypath:n.shift()||void 0,pipes:n}},t.BINDING=t.TEXT=t.KEYPATH=t.PRIMITIVE=void 0;var r=n(0),i=n(3),o=0;t.PRIMITIVE=o;var a=1;t.KEYPATH=a;var s=0;t.TEXT=s;var u=1;t.BINDING=u;var c=/^'.*'$|^".*"$/,l=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g;function f(e,t){for(var n=null,r=e.length,i=0,o=0,a=t[0],c=t[1];o<r;){if((i=e.indexOf(a,o))<0){n&&n.push({type:s,value:e.slice(o)});break}if(n=n||[],i>0&&o<i&&n.push({type:s,value:e.slice(o,i)}),o=i+a.length,(i=e.indexOf(c,o))<0){var l=e.slice(o-c.length),f=n[n.length-1];f&&f.type===s?f.value+=l:n.push({type:s,value:l});break}var d=e.slice(o,i).trim();n.push({type:u,value:d}),o=i+c.length}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;var r=n(12);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,s(t).apply(this,arguments))}var n,i,c;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,r.Utils),n=t,(i=[{key:"eventTarget",value:function(e){var t;return(e=e||window.event).target?t=e.target:e.srcElement&&(t=e.srcElement),3===t.nodeType&&(t=t.parentNode),$(t)}},{key:"eventPositionDocument",value:function(e){var t=0,n=0;return e||(e=window.event),e&&e.originalEvent&&(e=e.originalEvent),e&&e.changedTouches&&((e=e).changedTouches&&e.changedTouches[0]&&(e.changedTouches[0].pageX||e.changedTouches[0].pageY)?(t=e.changedTouches[0].pageX,n=e.changedTouches[0].pageY):e.pageX||e.pageY?(t=e.pageX,n=e.pageY):e.touches&&e.changedTouches[0]&&(e.changedTouches[0].clientX||e.changedTouches[0].clientY)?(t=e.changedTouches[0].clientX+document.body.scrollLeft+document.documentElement.scrollLeft,n=e.changedTouches[0].clientY+document.body.scrollTop+document.documentElement.scrollTop):(e.clientX||e.clientY)&&(t=e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft,n=e.clientY+document.body.scrollTop+document.documentElement.scrollTop)),{x:t,y:n}}},{key:"getElementPosition",value:function(e){var t=$(e),n=window.pageYOffset||document.documentElement.scrollTop,r=window.pageXOffset||document.documentElement.scrollLeft,i=t[0].getBoundingClientRect();return{x:i.left+r,"fixed-x":i.left,y:i.top+n,"fixed-y":i.top,w:i.width,h:i.height,$element:t}}},{key:"getElementPositionInElement",value:function(e,t){var n=this.getElementPosition(e),r=this.getElementPosition(t);return{x:n.x-r.x,y:n.y-r.y,"fixed-x":n["fixed-x"]-r["fixed-x"],"fixed-y":n["fixed-y"]-r["fixed-y"],w:n.w,h:n.h,$element:n.$element,$parent:r.$element,elementPos:n,parentPos:r}}},{key:"mousePositionElement",value:function(e,t){var n=this.eventPositionDocument(e);t||(t=this.eventTarget(e));var r=this.getElementPosition(t);return{x:n.x-r.x,y:n.y-r.y,element:t}}},{key:"mousePositionElementInPercent",value:function(e,t){var n=this.eventPositionDocument(e);t||(t=this.eventTarget(e));var r=t[0].offsetWidth,i=t[0].offsetHeight,o=this.getElementPosition(t),a=n.x-o.x,s=n.y-o.y;return{x:a,y:s,left:a/r,top:s/i,w:r,h:i,element:t}}},{key:"getViewportDimensions",value:function(){return{w:Math.max(document.documentElement.clientWidth,window.innerWidth||0),h:Math.max(document.documentElement.clientHeight,window.innerHeight||0)}}}])&&o(n.prototype,i),c&&o(n,c),t}();t.Utils=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.get=void 0;var r=n(0);t.get=function(e,t){return r.Utils.isObject(e)||r.Utils.isArray(e)?e[t]:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentService=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"components",void 0),s(this,"debug",(0,i.default)("components:ComponentService")),this.components=t}return a(e,null,[{key:"type",value:function(e){return e.hasOwnProperty("initialize")&&e.hasOwnProperty("template")?"classic":e.tagName?"webcomponent":void 0}}]),a(e,[{key:"registWrapper",value:function(e,t){t||(t=e.name);var n=e;return this.components[t]=n,this.components}},{key:"regist",value:function(e,t){if(t||e.hasOwnProperty("name")&&(t=e.tagName||e.name),this.debug("name",t,e),!t)throw new Error("[ComponentService] name is required");return this.components[t]=e,this.components}},{key:"regists",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.regist(e[t],t);return this.components}}]),e}();t.ComponentService=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Observer=void 0;var r=n(0);function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"keypath",void 0),a(this,"callback",void 0),a(this,"objectPath",void 0),a(this,"obj",void 0),a(this,"target",void 0),a(this,"key",void 0),a(this,"tokens",void 0),this.keypath=n,this.callback=i,this.objectPath=[];var o=this.parse();this.key=o.key,this.tokens=o.tokens,this.obj=this.getRootObject(t),this.target=this.realize(),(0,r.isObject)(this.target)&&this.set(!0,this.key,this.target,this.callback)}return o(e,null,[{key:"updateOptions",value:function(t){if(!t.adapters)throw new Error("adapters are required!");if(!t.rootInterface)throw new Error("rootInterface is required!");e.adapters=t.adapters,e.interfaces=Object.keys(e.adapters),e.rootInterface=t.rootInterface}},{key:"tokenize",value:function(t,n){var r,i,o=[],a={i:n,path:""};for(r=0;r<t.length;r++)i=t.charAt(r),~e.interfaces.indexOf(i)?(o.push(a),a={i:i,path:""}):a.path+=i;return o.push(a),o}}]),o(e,[{key:"parse",value:function(){var t,n;if(!e.interfaces.length)throw new Error("[Observer] Must define at least one adapter interface.");if(~e.interfaces.indexOf(this.keypath[0])?(n=this.keypath[0],t=this.keypath.substr(1)):(n=e.rootInterface,t=this.keypath),this.tokens=e.tokenize(t,n),!this.tokens.length)throw new Error("[Observer] No tokens");return this.key=this.tokens.pop(),{key:this.key,tokens:this.tokens}}},{key:"realize",value:function(){for(var e,t,n=this.obj,i=-1,o=0;o<this.tokens.length;o++)t=this.tokens[o],(0,r.isObject)(n)?(void 0!==this.objectPath[o]?n!==(e=this.objectPath[o])&&(this.set(!1,t,e,this),this.set(!0,t,n,this),this.objectPath[o]=n):(this.set(!0,t,n,this),this.objectPath[o]=n),n=this.get(t,n)):(-1===i&&(i=o),(e=this.objectPath[o])&&this.set(!1,t,e,this));return-1!==i&&this.objectPath.splice(i),n}},{key:"sync",value:function(){var e,t,n;(e=this.realize())!==this.target?((0,r.isObject)(this.target)&&this.set(!1,this.key,this.target,this.callback),(0,r.isObject)(e)&&this.set(!0,this.key,e,this.callback),t=this.value(),this.target=e,((n=this.value())!==t||n instanceof Function)&&this.callback.sync()):e instanceof Array&&this.callback.sync()}},{key:"value",value:function(){if((0,r.isObject)(this.target))return this.get(this.key,this.target)}},{key:"setValue",value:function(t){(0,r.isObject)(this.target)&&e.adapters[this.key.i].set(this.target,this.key.path,t)}},{key:"get",value:function(t,n){return e.adapters[t.i].get(n,t.path)}},{key:"set",value:function(t,n,r,i){t?e.adapters[n.i].observe(r,n.path,i):e.adapters[n.i].unobserve(r,n.path,i)}},{key:"unobserve",value:function(){for(var e,t,n=0;n<this.tokens.length;n++)t=this.tokens[n],(e=this.objectPath[n])&&this.set(!1,t,e,this);(0,r.isObject)(this.target)&&this.set(!1,this.key,this.target,this.callback)}},{key:"getRootObject",value:function(e){var t,n;if(!e.$parent)return e;for(t=this.tokens.length?this.tokens[0].path:this.key.path,n=e;n.$parent&&void 0===n[t];)n=n.$parent;return n}}]),e}();t.Observer=s,a(s,"adapters",void 0),a(s,"interfaces",void 0),a(s,"rootInterface",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tinybind=void 0;var r=n(0),i=n(4),o=n(19),a=n(18),s=n(17),u=n(3),c=n(8),l=n(7);function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"binderService",void 0),p(this,"componentService",void 0),p(this,"formatterService",void 0),p(this,"binders",{}),p(this,"components",{}),p(this,"formatters",{}),p(this,"adapters",{".":a.adapter}),p(this,"parseTemplate",i.parseTemplate),p(this,"parseType",i.parseType),p(this,"templateDelimiters",["{","}"]),p(this,"rootInterface","."),p(this,"preloadData",!0),p(this,"_prefix","rv"),p(this,"_fullPrefix","rv-"),this.binderService=new s.BindersService(this.binders),this.componentService=new l.ComponentService(this.components),this.formatterService=new o.FormatterService(this.formatters),e.instance)return e.instance;e.instance=this}return d(e,[{key:"prefix",set:function(e){this._prefix=e,this._fullPrefix=e+"-"},get:function(){return this._prefix}},{key:"fullPrefix",get:function(){return this._fullPrefix}}],[{key:"handler",value:function(e,t,n,r){console.warn("handler",this),this.call(e,t,n.view.models,r)}},{key:"fallbackBinder",value:function(e,t){if(!this.type)throw new Error("Can't set atttribute of "+this.type);null!=t?e.setAttribute(this.type,t):e.removeAttribute(this.type)}}]),d(e,[{key:"configure",value:function(e){var t=this;e&&Object.keys(e).forEach(function(n){var i=e[n];switch(n){case"binders":t.binders=r.Utils.concat(!1,t.binders,i);break;case"formatters":t.formatters=r.Utils.concat(!1,t.formatters,i);break;case"components":t.components=r.Utils.concat(!1,t.components,i);break;case"adapters":case"adapter":t.adapters=r.Utils.concat(!1,t.adapters,i);break;case"prefix":t.prefix=i;break;case"parseTemplate":t.parseTemplate=i;break;case"parseType":t.parseType=i;break;case"templateDelimiters":t.templateDelimiters=i;break;case"rootInterface":t.rootInterface=i;break;case"preloadData":t.preloadData=i;break;default:console.warn("Option not supported",n,i)}})}},{key:"init",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(t||(t=document.createElement("div")),this.components[e].hasOwnProperty("initialize")&&this.components[e].hasOwnProperty("template")){var r=this.components[e],i=r.template.call(this,t);null!==i&&(t.innerHTML=i);var o=r.initialize.call(this,t,n),a=this.bind(t,o);return a.bind(),a}}},{key:"getViewOptions",value:function(t){var n={adapters:new Object,binders:new Object(null),components:new Object(null),formatters:new Object(null),starBinders:new Object(null),rootInterface:new Object(null)};return t&&(n.binders=r.Utils.concat(!1,n.binders,t.binders),n.formatters=r.Utils.concat(!1,n.formatters,t.formatters),n.components=r.Utils.concat(!1,n.components,t.components),n.adapters=r.Utils.concat(!1,n.adapters,t.adapters)),n.prefix=t&&t.prefix?t.prefix:this.prefix,n.fullPrefix=n.prefix?n.prefix+"-":this.fullPrefix,n.templateDelimiters=t&&t.templateDelimiters?t.templateDelimiters:this.templateDelimiters,n.rootInterface=t&&t.rootInterface?t.rootInterface:this.rootInterface,n.preloadData=t&&t.preloadData?t.preloadData:this.preloadData,n.handler=t&&t.handler?t.handler:e.handler,n.binders=r.Utils.concat(!1,n.binders,this.binders),n.formatters=r.Utils.concat(!1,n.formatters,this.formatters),n.components=r.Utils.concat(!1,n.components,this.components),n.adapters=r.Utils.concat(!1,n.adapters,this.adapters),n.binders&&(n.starBinders=Object.keys(n.binders).filter(function(e){return e.indexOf("*")>0})),n}},{key:"bind",value:function(e,t,n){var r=this.getViewOptions(n);t=t||new Object(null),c.Observer.updateOptions(r);var i=new u.View(e,t,r);return i.bind(),i}}]),e}();t.Tinybind=h,p(h,"instance",void 0)},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.GlobalEvent=void 0;var o=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"events",{}),e.instance)return e.instance;e.instance=this}var t,n,o;return t=e,(n=[{key:"on",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"off",value:function(e,t){e in this.events!=!1&&this.events[e].splice(this.events[e].indexOf(t),1)}},{key:"trigger",value:function(e){if(e in this.events!=!1){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var i=0;i<this.events[e].length;i++)this.events[e][i].apply(this,n)}}}])&&r(t.prototype,n),o&&r(t,o),e}();t.GlobalEvent=o,i(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransition=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(0);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"$oldContainer",void 0),s(this,"$newContainer",void 0),s(this,"newContainerLoading",void 0),s(this,"deferred",void 0),s(this,"debug",(0,i.default)("barba:BaseTransition"))}var t,n,r;return t=e,(n=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.deferred=o.Utils.deferred();var r=o.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),t.then(function(e){n.$newContainer=e,r.resolve()}),this.deferred.promise}},{key:"done",value:function(){if(this.debug("done"),!this.$oldContainer)throw new Error("Can't remove old container");if(this.$oldContainer.remove(),!this.$newContainer)throw new Error("Can't show new container");this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}])&&a(t.prototype,n),r&&a(t,r),e}();t.BaseTransition=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(104);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.empty=void 0;var r=n(14);t.empty=function(e){return!(0,r.count)(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;t.count=function(e){return e&&e.length?e.length:0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentBinding=void 0;var r=n(4),i=n(3),o=n(8),a=n(0);function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(t,n,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"view",void 0),u(this,"el",void 0),u(this,"type",void 0),u(this,"component",void 0),u(this,"static",{}),u(this,"keypaths",{}),u(this,"formattersObservers",{}),u(this,"observers",void 0),u(this,"bindingPrefix",void 0),u(this,"pipes",{}),!t.options.components)throw new Error("No components found!");this.view=t,this.el=n,this.type=r,this.component=t.options.components[this.type],this.static={},this.observers={},this.bindingPrefix=t.options.prefix+"-",this.parseTarget(),this.sync()}var t,n,c;return t=e,(n=[{key:"observe",value:function(e,t,n){return new o.Observer(e,t,n)}},{key:"sync",value:function(){var e=this;Object.keys(this.static).forEach(function(t){e.component.bind&&-1!==e.component.bind.indexOf(t)&&(e[t]=e.static[t])}),Object.keys(this.observers).forEach(function(t){e.component.bind&&-1!==e.component.bind.indexOf(t)&&(e[t]=e.observers[t].value())})}},{key:"publish",value:function(e,t){e&&this.observers[e]&&this.observers[e].setValue(t)}},{key:"locals",value:function(){var e=this,t={};return Object.keys(this.static).forEach(function(n){t[n]=e.static[n]}),Object.keys(this.observers).forEach(function(n){t[n]=e.observers[n].value()}),t}},{key:"camelCase",value:function(e){return e.replace(/-([a-z])/g,function(e){return e[1].toUpperCase()})}},{key:"getMergedOptions",value:function(){var e={adapters:Object.create(null),binders:Object.create(null),components:Object.create(null),formatters:Object.create(null),starBinders:Object.create(null),rootInterface:Object.create(null)};return this.component.binders&&(e.binders=a.Utils.concat(!1,e.binders,this.component.binders)),this.component.formatters&&(e.formatters=a.Utils.concat(!1,e.formatters,this.component.formatters)),this.component.components&&(e.components=a.Utils.concat(!1,e.components,this.component.components)),this.component.adapters&&(e.adapters=a.Utils.concat(!1,e.adapters,this.component.adapters)),e.binders=a.Utils.concat(!1,e.binders,this.view.options.binders),e.formatters=a.Utils.concat(!1,e.formatters,this.view.options.formatters),e.components=a.Utils.concat(!1,e.components,this.view.options.components),e.adapters=a.Utils.concat(!1,e.adapters,this.view.options.adapters),e.prefix=this.component.prefix?this.component.prefix:this.view.options.prefix,e.templateDelimiters=this.component.templateDelimiters?this.component.templateDelimiters:this.view.options.templateDelimiters,e.rootInterface=this.component.rootInterface?this.component.rootInterface:this.view.options.rootInterface,e.preloadData=this.component.preloadData?this.component.preloadData:this.view.options.preloadData,e.handler=this.component.handler?this.component.handler:this.view.options.handler,e.binders&&(e.starBinders=Object.keys(e.binders).filter(function(e){return e.indexOf("*")>0})),e}},{key:"bind",value:function(){if(this.el._bound)this.view.bind();else{var e=this.component.template.call(this);null!==e&&(this.el.innerHTML=e);var t=this.component.initialize.call(this,this.el,this.locals());this.view=new i.View(Array.prototype.slice.call(this.el.childNodes),t,this.getMergedOptions()),this.view.bind(),this.el._bound=!0}}},{key:"parseTarget",value:function(){for(var e=0,t=this.el.attributes.length;e<t;e++){var n=this.el.attributes[e];if(0!==n.name.indexOf(this.bindingPrefix)){var i=this.camelCase(n.name),o=n.value,a=(0,r.parseDeclaration)(o);a.pipes.length>0&&console.warn("Formatters on component arguments not supported for the moment",a.pipes),this.pipes[i]=a.pipes;var s=(0,r.parseType)(a.keypath);if(void 0!==this.component.static&&-1!==this.component.static.indexOf(i))this.static[i]=n.value;else if(s.type===r.PRIMITIVE)this.static[i]=s.value;else{if(s.type!==r.KEYPATH)throw new Error("can't parse component attribute");this.keypaths[i]=n.value,this.observers[i]=this.observe(this.view.models,this.keypaths[i],this)}}}}},{key:"unbind",value:function(){var e=this;Object.keys(this.observers).forEach(function(t){e.observers[t].unobserve()}),Object.keys(this.formattersObservers).forEach(function(t){Object.keys(e.formattersObservers[t]).forEach(function(n){Object.keys(e.formattersObservers[t][n]).forEach(function(r){e.formattersObservers[t][n][r].unobserve()})})}),this.view&&this.view.unbind.call(this)}}])&&s(t.prototype,n),c&&s(t,c),e}();t.ComponentBinding=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Binding=void 0;var r=n(4),i=n(8),o=n(0);function a(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(t,n,r,i,o,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"value",void 0),u(this,"observer",void 0),u(this,"view",void 0),u(this,"el",void 0),u(this,"type",void 0),u(this,"binder",void 0),u(this,"formatters",void 0),u(this,"formatterObservers",{}),u(this,"keypath",void 0),u(this,"args",void 0),u(this,"model",void 0),u(this,"marker",void 0),u(this,"_bound",void 0),u(this,"customData",void 0),this.view=t,this.el=n,this.type=r,this.keypath=i,this.binder=o,this.args=a,this.formatters=s,this.model=void 0,this.customData={}}var t,n,c;return t=e,(n=[{key:"observe",value:function(e,t,n){return new i.Observer(e,t,n)}},{key:"parseTarget",value:function(){if(this.keypath){var e=(0,r.parseType)(this.keypath);if(e.type===r.PRIMITIVE)this.value=e.value;else{if(e.type!==r.KEYPATH)throw new Error("Unknown type in token");this.observer=this.observe(this.view.models,this.keypath,this),this.model=this.observer.target}}else this.value=void 0}},{key:"getIterationAlias",value:function(e){return"%"+e+"%"}},{key:"parseFormatterArguments",value:function(e,t){var n=this;return e.map(r.parseType).map(function(e,i){var o=e.type,a=e.value;if(o===r.PRIMITIVE)return a;if(o===r.KEYPATH){var s=a;n.formatterObservers[t]||(n.formatterObservers[t]={});var u=n.formatterObservers[t][i];return u||(u=n.observe(n.view.models,s,n),n.formatterObservers[t][i]=u),u.value()}throw new Error("Unknown argument type")})}},{key:"formattedValue",value:function(t){var n=this;if(null===this.formatters)throw new Error("formatters is null");return this.formatters.reduce(function(t,r,i){var o=r.match(e.FORMATTER_ARGS);if(null===o)throw new Error("No args matched from FORMATTER_ARGS");var s=o.shift();if(!s)throw new Error("No id found in args");if(!n.view.options.formatters)throw new Error("No formatters are defined");var u,c=n.view.options.formatters[s],l=n.parseFormatterArguments(o,i);return c&&c.read instanceof Function?u=c.read:c instanceof Function&&(u=c),u instanceof Function&&(t=u.apply(void 0,[t].concat(a(l)))),t},t)}},{key:"eventHandler",value:function(e,t){var n=this,r=this,i=r.view.options.handler;return function(o){if(!i)throw new Error("No handler defined in binding.view.options.handler");i.call(e,n,o,r,t)}}},{key:"set",value:function(e){var t;if(e instanceof Function&&!this.binder.function?(e=e,e=this.formattedValue(e.call(this.model))):(e=e,e=this.formattedValue(e)),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("routine")?(this.binder=this.binder,t=this.binder.routine):(this.binder=this.binder,t=this.binder),t instanceof Function&&t.call(this,this.el,e)}},{key:"sync",value:function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)}},{key:"publish",value:function(){var t=this;if(this.observer){if(null===this.formatters)throw new Error("formatters is null");var n=this.formatters.reduceRight(function(n,r,i){var o=r.split(e.FORMATTER_SPLIT),s=o.shift();if(!s)throw new Error("id not defined");if(t.view.options.formatters){var u,c=t.view.options.formatters[s],l=t.parseFormatterArguments(o,i);if(c&&c.publish)n=(u=c).publish.apply(u,[n].concat(a(l)));return n}},this.getValue(this.el));this.observer.setValue(n)}}},{key:"bind",value:function(){if(this.parseTarget(),this.binder&&this.binder.hasOwnProperty("bind")){if(this.binder=this.binder,!this.binder.bind&&"function"!=typeof this.binder.bind)throw new Error("the method bind is not a function");this.binder.bind.call(this,this.el)}this.view.options.preloadData&&this.sync()}},{key:"unbind",value:function(){var e=this;if(null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("bind")&&(this.binder=this.binder,this.binder.unbind&&this.binder.unbind.call(this,this.el)),this.observer&&this.observer.unobserve(),Object.keys(this.formatterObservers).forEach(function(t){var n=e.formatterObservers[t];Object.keys(n).forEach(function(e){n[e].unobserve()})}),this.formatterObservers={}}},{key:"update",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(this.observer&&(this.model=this.observer.target),null===this.binder)throw new Error("binder is null");this.binder.hasOwnProperty("update")&&(this.binder=this.binder,this.binder.update&&this.binder.update.call(this,e))}},{key:"getValue",value:function(e){if(null===this.binder)throw new Error("binder is null");if(this.binder.hasOwnProperty("getValue")){if(this.binder=this.binder,"function"!=typeof this.binder.getValue)throw new Error("getValue is not a function");return this.binder.getValue.call(this,e)}return(0,o.getInputValue)(e)}}])&&s(t.prototype,n),c&&s(t,c),e}();t.Binding=c,u(c,"FORMATTER_ARGS",/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g),u(c,"FORMATTER_SPLIT",/\s+/)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BindersService=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"binders",void 0),a(this,"debug",(0,i.default)("binders:BindersService")),this.binders=t}var t,n,r;return t=e,(n=[{key:"registWrapper",value:function(e,t){t||(t=e.name);var n=e.binder;return this.binders[t]=n,this.binders}},{key:"regist",value:function(e,t){if(e.hasOwnProperty("binder")&&(e=e,t||(t=e.name),e=e.binder),this.debug("name",t,e),!t)throw new Error("[BindersService] name is required");return this.binders[t]=e,this.binders}},{key:"regists",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.regist(e[t],t);return this.binders}}])&&o(t.prototype,n),r&&o(t,r),e}();t.BindersService=s},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.adapter=t.Adapter=void 0;var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"counter",0),i(this,"weakmap",{})}var t,n,o;return t=e,(n=[{key:"weakReference",value:function(e){if(!e.hasOwnProperty("__rv")){var t=this.counter++;Object.defineProperty(e,"__rv",{value:t})}return this.weakmap[e.__rv]||(this.weakmap[e.__rv]={callbacks:{}}),this.weakmap[e.__rv]}},{key:"cleanupWeakReference",value:function(e,t){Object.keys(e.callbacks).length||e.pointers&&Object.keys(e.pointers).length||delete this.weakmap[t]}},{key:"stubFunction",value:function(e,t){var n=e[t],r=this.weakReference(e),i=this.weakmap;e[t]=function(){for(var t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];var s=n.apply(e,o);return Object.keys(r.pointers).forEach(function(e){var t=r.pointers[e];i[e]&&i[e].callbacks[t]instanceof Array&&i[e].callbacks[t].forEach(function(e){e.sync()})}),s}}},{key:"observeMutations",value:function(t,n,r){var i=this;if(t instanceof Array){var o=this.weakReference(t);o.pointers||(o.pointers={},e.ARRAY_METHODS.forEach(function(e){i.stubFunction(t,e)})),o.pointers[n]||(o.pointers[n]=[]),-1===o.pointers[n].indexOf(r)&&o.pointers[n].push(r)}}},{key:"unobserveMutations",value:function(e,t,n){if(e instanceof Array&&null!=e.__rv){var r=this.weakmap[e.__rv];if(r){var i=r.pointers[t];if(i){var o=i.indexOf(n);o>-1&&i.splice(o,1),i.length||delete r.pointers[t],this.cleanupWeakReference(r,e.__rv)}}}}},{key:"observe",value:function(e,t,n){var r,i=this,o=this.weakReference(e).callbacks;if(!o[t]){o[t]=[];var a=Object.getOwnPropertyDescriptor(e,t);a&&(a.get||a.set||!a.configurable)||(r=e[t],Object.defineProperty(e,t,{enumerable:!0,get:function(){return r},set:function(n){if(n!==r){i.unobserveMutations(r,e.__rv,t),r=n;var o=i.weakmap[e.__rv];if(o){var a=o.callbacks[t];a&&a.forEach(function(e){e.sync()}),i.observeMutations(n,e.__rv,t)}}}}))}-1===o[t].indexOf(n)&&o[t].push(n),this.observeMutations(e[t],e.__rv,t)}},{key:"unobserve",value:function(e,t,n){var r=this.weakmap[e.__rv];if(r){var i=r.callbacks[t];if(i){var o=i.indexOf(n);o>-1&&(i.splice(o,1),i.length||(delete r.callbacks[t],this.unobserveMutations(e[t],e.__rv,t))),this.cleanupWeakReference(r,e.__rv)}}}},{key:"get",value:function(e,t){return e[t]}},{key:"set",value:function(e,t,n){e[t]=n}}])&&r(t.prototype,n),o&&r(t,o),e}();t.Adapter=o,i(o,"ARRAY_METHODS",["push","pop","shift","unshift","sort","reverse","splice"]);var a=new o;t.adapter=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FormatterService=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"formatters",void 0),a(this,"debug",(0,i.default)("formatters:FormatterService")),this.formatters=t}var t,n,r;return t=e,(n=[{key:"regist",value:function(e,t){if(t||(e.hasOwnProperty("constructor")&&(t=e.constructor.name),e.hasOwnProperty("name")&&(t=e.name)),this.debug("name",t,e),!t)throw new Error("[FormatterService] name is required");return this.formatters[t]=e,this.formatters}},{key:"regists",value:function(e){for(var t in e)e.hasOwnProperty(t)&&this.regist(e[t],t);return this.formatters}}])&&o(t.prototype,n),r&&o(t,r),e}();t.FormatterService=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={Pjax:!0};t.Pjax=void 0;var i=n(98);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}}))});var o=n(97);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}}))});var a=n(96);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(r,e)||Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}}))});var s=n(10),u=n(0),c=n(22),l=n(21);function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"dom",void 0),p(this,"history",new i.HistoryManager),p(this,"cacheEnabled",!0),p(this,"transitionProgress",!1),p(this,"dispatcher",new s.GlobalEvent),p(this,"transition",new l.HideShowTransition),e.instance)return e.instance;e.instance=this}return d(e,null,[{key:"preventCheck",value:function(e,t){if(!window.history.pushState)return!1;var n=this.getHref(t);return!(!t||!n)&&(!(e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey)&&((!t.target||"_blank"!==t.target)&&(window.location.protocol===t.protocol&&window.location.hostname===t.hostname&&(u.Utils.getPort()===u.Utils.getPort(t.port)&&(!(n.indexOf("#")>-1)&&((!t.getAttribute||"string"!=typeof t.getAttribute("download"))&&(u.Utils.cleanLink(n)!==u.Utils.cleanLink(location.href)&&!t.classList.contains(this.ignoreClassLink))))))))}},{key:"getHref",value:function(e){return e.getAttribute&&"string"==typeof e.getAttribute("xlink:href")?e.getAttribute("xlink:href")||void 0:"string"==typeof e.href?e.href:void 0}}]),d(e,[{key:"start",value:function(e,t){this.dom=new o.Dom(e),t&&(this.transition=t),this.init(e)}},{key:"getCurrentUrl",value:function(){return u.Utils.cleanLink(u.Utils.getUrl())}},{key:"goTo",value:function(e,t){if(t){var n=window.open(e,"_blank");return!!n&&n.focus()}if(0!==e.indexOf("http"))return window.history.pushState(null,void 0,e),this.onStateChange();this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition}},{key:"bindEvents",value:function(){window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(e){e instanceof Location&&(window.location=e),"string"==typeof e&&(window.location.href=e)}},{key:"load",value:function(t){var n,r=u.Utils.deferred(),i=this;return(n=e.cache.get(t))||(n=u.Utils.xhr(t),e.cache.set(t,n)),n.then(function(t){if(!i.dom)throw new Error("[Pjax] you need to call the start method first!");var n=i.dom.parseResponse(t);i.dom.putContainer(n),i.cacheEnabled||e.cache.reset(),r.resolve(n)},function(){i.forceGoTo(t),r.reject()}),r.promise}},{key:"onLinkClick",value:function(t){for(var n=t.target;n&&!e.getHref(n);)n=n.parentNode;if(e.preventCheck(t,n)){t.stopPropagation(),t.preventDefault(),this.dispatcher.trigger("linkClicked",n,t);var r=e.getHref(n);if(!r)throw new Error("href is null");this.goTo(r)}}},{key:"onStateChange",value:function(){var e=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(e),this.history.currentStatus().url===e)return!1;this.history.add(e);var t=this.load(e),n=this.getTransition();if(this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.history.currentStatus(),this.history.prevStatus()),!this.dom)throw new Error("[Pjax] you need to call the start method first!");var r=n.init(this.dom.getContainer(),t);t.then(this.onNewContainerLoaded.bind(this)),r.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(e){var t=this.history.currentStatus();if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");t.namespace=this.dom.getNamespace(e),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),this.history.prevStatus(),e,this.dom.currentHTML,e.data(),!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(e){if(!this.dom)throw new Error("[Pjax] you need to call the start method first!");var t=this.dom.getContainer();e.attr("aria-live","polite"),this.history.add(this.getCurrentUrl(),this.dom.getNamespace(t)),this.dispatcher.trigger("initStateChange",this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),{},t,this.dom.currentHTML,t.data(),!0),this.dispatcher.trigger("transitionCompleted",this.history.currentStatus()),this.bindEvents()}}]),e}();t.Pjax=h,p(h,"ignoreClassLink","no-barba"),p(h,"cache",new c.BaseCache),p(h,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return r.CustomTransition}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return i.BaseTransition}}),Object.defineProperty(t,"ITransition",{enumerable:!0,get:function(){return i.ITransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return o.HideShowTransition}});var r=n(101),i=n(11),o=n(100)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCache=void 0;var r=n(0);function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(){var t,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=void 0,(n="data")in(t=this)?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,this.data={}}var t,n,o;return t=e,(n=[{key:"set",value:function(e,t){return this.data[e]=t}},{key:"get",value:function(e){return this.data[e]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(e){return r.Utils.extend(!1,this,e)}}])&&i(t.prototype,n),o&&i(t,o),e}();t.BaseCache=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=i(n(2));function i(e){return e&&e.__esModule?e:{default:e}}var o=(0,i(n(105)).default)(r.default);t.default=o},function(e,t,n){e.exports=n.p+"bundle.css"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ProductScrollbarRibaComponent=t.productScrollbarComponent=void 0;var r=a(n(1)),i=n(12),o=a(n(23));function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.productScrollbarComponent=function(){var e=(0,r.default)("component:product-scrollbar"),t=new i.Pjax,n=new i.Prefetch;return{name:"product-scrollbar",template:function(){return null},initialize:function(r,i){this.customData={};var a=(0,o.default)(r).find(".content-box"),s=this;return e("initialize",i),s.title="Please choose a product",s.onProductTap=function(e,n,r){var i=(0,o.default)(r).data("url");t.goTo(i)},s.onProductMouseenter=function(e,t,r){var i=(0,o.default)(r).data("url");n.onLinkEnter(e,i)},s.onScroll=function(e,t,n){a.each(function(e){var t=a.get(e),r=t.dataset,i=n.getBoundingClientRect(),o=t.getBoundingClientRect(),u=o.width/2,c=o.left-(i.width/2-u);c>-1*u&&c<u&&(s.title=r.title)})},s}}};var p=function(e){function t(e){var n,a,u;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),a=this,d(f(f(n=!(u=c(t).call(this,e))||"object"!==s(u)&&"function"!=typeof u?f(a):u)),"debug",(0,r.default)("component:rv-product-scrollbar")),d(f(f(n)),"scope",{}),d(f(f(n)),"pjax",new i.Pjax),d(f(f(n)),"prefetch",new i.Prefetch),d(f(f(n)),"$products",void 0);var l=(0,o.default)(n.el);return n.$products=l.find(".content-box"),n.scope.onScroll=n.onScroll,n.scope.onProductTap=n.onProductTap,n.scope.onProductMouseenter=n.onProductMouseenter,n.scope.title="Please choose a product",n.bind(),n.debug("constructor",f(f(n))),n}var n,a,p;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,i.RibaComponent),n=t,(a=[{key:"onProductTap",value:function(e,t,n,r){var i=(0,o.default)(n).data("url");this.pjax.goTo(i)}},{key:"onProductMouseenter",value:function(e,t,n,r){this.debug("onProductMouseenter");var i=(0,o.default)(n).data("url");this.prefetch.onLinkEnter(e,i)}},{key:"onScroll",value:function(e,t,n,r){var i=this,o=this;this.debug("onScroll",this.scope),this.$products&&this.$products.each(function(e){if(o.$products){var t=o.$products.get(e),r=t.dataset,a=n.getBoundingClientRect(),s=t.getBoundingClientRect(),u=s.width/2,c=s.left-(a.width/2-u);c>-1*u&&c<u&&(i.scope.title=r.title)}})}},{key:"connectedCallback",value:function(){this.$products=(0,o.default)(this).find(".content-box")}},{key:"template",value:function(){return null}}])&&u(n.prototype,a),p&&u(n,p),t}();t.ProductScrollbarRibaComponent=p,d(p,"tagName","rv-product-scrollbar")},function(e,t){e.exports=' <nav class=nav rv-add-class=linklist.handle rv-class-nav-pills=pills rv-class-flex-column=vertical rv-class-flex-row="vertical | not"> <div class=nav-item rv-each-link=linklist.links> <a class=nav-link rv-class-active=link.active rv-route=link.href rv-href=link.href>{link.text}</a> </div> </nav> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navItemsComponent=void 0;var r=o(n(1)),i=o(n(26));function o(e){return e&&e.__esModule?e:{default:e}}t.navItemsComponent=function(){var e=(0,r.default)("component:nav-items");return{name:"nav-items",template:function(){return i.default},initialize:function(t,n){return e("initialize",n,i.default),this.linklist=n.linklist,this.pills=n.pills,this.vertical=!!n.vertical,this}}}},function(e,t){e.exports=" "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iconsetComponent=void 0;var r=a(n(1)),i=a(n(2)),o=a(n(28));function a(e){return e&&e.__esModule?e:{default:e}}t.iconsetComponent=function(){var e=(0,r.default)("component:iconset");return{name:"iconset",template:function(){return o.default},initialize:function(t,n){(0,i.default)(t);var r=n.src||window.model.system.assetsPath+n.name,a=n.color||null,s=n.direction||"top",u=n.size||32,c="iconset direction-".concat(s," size-").concat(u," color-").concat(a);return e("initialize",n,o.default),"left"===s?c+=" rotate-270":"left-top"===s||"left-up"===s||"top-left"===s||"up-left"===s?c+=" rotate-315":"top"===s||"up"===s?c+=" rotate-0":"top-right"===s||"up-right"===s||"right-top"===s||"right-up"===s?c+=" rotate-45":"right"===s?c+=" rotate-90":"right-bottom"===s||"right-down"===s||"bottom-right"===s||"down-right"===s?c+=" rotate-135":"bottom"===s||"down"===s?c+=" rotate-180":"left-bottom"!==s&&"left-down"!==s&&"bottom-left"!==s&&"down-left"!==s||(c+=" rotate-225"),(0,i.default)(t).load(r).css({color:a,height:u+"px",width:u+"px"}).addClass(c).attr("aria-hidden","true").attr("role","img"),this}}}},function(e,t){e.exports="<h1 class=lead>schreib uns</h1> <p> Hey @ Art+Code Studio,<br/> ich bin <span class=text-danger contenteditable=true rv-value=\"name | default 'Name'\"></span> und möchte <span class=text-danger contenteditable=true rv-value=\"message | default 'Nachricht'\"></span>.<br/> <br> Meldet euch, <span class=text-danger contenteditable=true rv-value=\"regards | default 'hasta la vista'\"></span><br/> <span rv-html=name></span><br> <br> P.S.<br> Schreibt mir an <span class=text-danger contenteditable=true rv-value=\"mail | default 'E-Mail'\"></span> oder ruft mich unter <span class=text-danger contenteditable=true rv-value=\"phone | default 'Telefon'\"></span> an. </p> <a class=text-light href=# rv-on-click=send>Absenden</a>"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contactComponent=void 0;var r=a(n(1)),i=a(n(2)),o=a(n(30));function a(e){return e&&e.__esModule?e:{default:e}}t.contactComponent=function(){var e=(0,r.default)("component:contact");return{name:"contact",template:function(){return o.default},initialize:function(t,n){return(0,i.default)(t),this.name="",this.message="",this.regards="",this.mail="",this.phone="",this.send=function(){e("send")},this}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"contactComponent",{enumerable:!0,get:function(){return r.contactComponent}}),Object.defineProperty(t,"iconsetComponent",{enumerable:!0,get:function(){return i.iconsetComponent}}),Object.defineProperty(t,"navItemsComponent",{enumerable:!0,get:function(){return o.navItemsComponent}}),Object.defineProperty(t,"productScrollbarComponent",{enumerable:!0,get:function(){return a.productScrollbarComponent}}),Object.defineProperty(t,"ProductScrollbarRibaComponent",{enumerable:!0,get:function(){return a.ProductScrollbarRibaComponent}});var r=n(31),i=n(29),o=n(27),a=n(25)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scrollbarDragableBinder=t.Dragscroll=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){var n=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"debug",(0,i.default)("binders:scrollbar-dragable")),a(this,"lastClientX",0),a(this,"lastClientY",0),a(this,"el",void 0),a(this,"pushed",!1),this.el=t,t.removeEventListener("mousedown",this.md.bind(this),!1),t.addEventListener("mousedown",this.md.bind(this),!1),n?(window.removeEventListener("mouseup",this.mu.bind(this),!1),window.removeEventListener("mousemove",this.mm.bind(this),!1),window.addEventListener("mouseup",this.mu.bind(this),!1),window.addEventListener("mousemove",this.mm.bind(this),!1)):(t.removeEventListener("mouseup",this.mu.bind(this),!1),t.removeEventListener("mousemove",this.mm.bind(this),!1),t.addEventListener("mouseup",this.mu.bind(this),!1),t.addEventListener("mousemove",this.mm.bind(this),!1))}var t,n,r;return t=e,(n=[{key:"md",value:function(e){this.pushed=!0,this.lastClientX=e.clientX,this.lastClientY=e.clientY,e.preventDefault()}},{key:"mu",value:function(e){this.pushed=!1}},{key:"mm",value:function(e){var t=0,n=0;this.pushed&&(this.el.scrollLeft-=t=-this.lastClientX+(this.lastClientX=e.clientX),this.el.scrollTop-=n=-this.lastClientY+(this.lastClientY=e.clientY),this.el===document.body&&(this.el=document.documentElement,this.el.scrollLeft-=t,this.el.scrollTop-=n))}}])&&o(t.prototype,n),r&&o(t,r),e}();t.Dragscroll=s;t.scrollbarDragableBinder=function(){return{binder:function(e,t){new s(e,!0).debug("ready")},name:"scrollbar-dragable"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.valueBinder=void 0;var r=a(n(1)),i=a(n(2)),o=n(5);function a(e){return e&&e.__esModule?e:{default:e}}t.valueBinder=function(){var e=(0,r.default)("binder:value");return{binder:{bind:function(t){var n=this;e("bind",this),this.customData={},this.customData.$el=(0,i.default)(t),this.customData.type=this.customData.$el.prop("type"),this.customData.tagName=this.customData.$el.prop("tagName"),this.customData.contenteditable=!!this.customData.$el.attr("contenteditable"),this.customData.$el.on("change input keyup paste blur focus",function(){n.publish()})},unbind:function(e){this.customData.$el.off("change input keyup paste blur focus"),delete this.customData},routine:function(t,n){if(t=t,e("routine newValue",n),o.Utils.isString(n)){var r=this.getValue(t);if(e("routine",r,n),r!==n)switch(this.customData.tagName){case"INPUT":case"TEXTAREA":this.customData.$el.val(n);break;default:this.customData.$el.html(n)}}},getValue:function(t){var n;switch(this.customData.tagName){case"INPUT":switch(this.customData.type){case"number":n=parseFloat(this.customData.$el.val())||0;break;default:n=this.customData.$el.val().toString()}break;case"TEXTAREA":n=this.customData.$el.val().toString();break;default:n=this.customData.$el.html()}return e("getValue",n),n},priority:3e3,publishes:!0},name:"value"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backgroundImageBinder=t.backgroundImage=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};var o=function(e,t){(0,i.default)(e).css("background-image","url("+t+")")};t.backgroundImage=o;t.backgroundImageBinder=function(){return{binder:o,name:"background-image"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.imageBoxBinder=t.imageBox=void 0;var r=function(e,t){var n=$(e);if(n.addClass("image-box"),t){var r=t.split(":"),i=new Array;i[0]=Number(r[0]),i[1]=Number(r[1]);var o=i[1]/i[0]*100,a="ratio-"+i[0]+"-"+i[1],s="padding-top: "+o+"%;";n.addClass(a),$("head").append("<style>.image-box."+a+":before{"+s+"}</style>")}};t.imageBox=r;t.imageBoxBinder=function(){return{binder:r,name:"image-box"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.appendHtmlBinder=void 0;var r=n(5);t.appendHtmlBinder=function(){return{binder:function(e,t){var n=$(e);r.Utils.isString(t)||(t=n.attr("rv-append-html")||"");var i=$.parseHTML(t);$(e).append(i)},name:"append-html"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.classAddRemoveBinder=t.classAddRemove=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};var o=function(e,t){var n=(0,i.default)(e),r=this.args[0];return t?n.addClass(r):n.removeClass(r),t};t.classAddRemove=o;t.classAddRemoveBinder=function(){return{binder:o,name:"class-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addClassBinder=t.addClass=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};var o=function(e,t){var n=(0,i.default)(e);return t&&n.addClass(t),t};t.addClass=o;t.addClassBinder=function(){return{binder:o,name:"add-class"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeClassBinder=t.removeClass=void 0;var r=function(e,t){var n=$(e);return t&&n.removeClass(t),t};t.removeClass=r;t.removeClassBinder=function(){return{binder:r,name:"remove-class"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.forFromToBinder=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};t.forFromToBinder=function(){var e=(0,i.default)("binders:for-*-*");return{binder:function(t,n){var r=$(t),i=Number(this.args[0]),o=Number(this.args[1]);e("start",i,"end",o);for(var a=r.html(),s=i;s<o;s++)e("index",s);return e("html",a),n},name:"for-*-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.telBinder=void 0;t.telBinder=function(){return{binder:function(e,t){$(e).attr("href","tel:"+t)},name:"tel"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mailtoBinder=void 0;t.mailtoBinder=function(){return{binder:function(e,t){$(e).attr("href","mailto:"+t)},name:"mailto"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoscrollBinder=void 0;var r=a(n(1)),i=a(n(2)),o=n(5);function a(e){return e&&e.__esModule?e:{default:e}}t.autoscrollBinder=function(){(0,r.default)("binder:autoscroll");var e=function(e,t){return"100vw"===t.width?o.Utils.getViewportDimensions().w:e.prop("scrollWidth")-(e.outerWidth()||0)};return{binder:function(t,n){var r=(0,i.default)(t);n&&n.width&&o.Utils.isString(n.width)&&(n.width,r.css("width",n.width)),r.addClass("rv-autoscroll-".concat(n.angle)),setTimeout(function(){!function(t,n){var r=n.direction,o=n.jumps,a=n.delay,s=!1,u=null,c=e(t,n);(0,i.default)(window).resize(function(){c=e(t,n)}),r<0?t.scrollLeft(c):t.scrollLeft(0),t.hover(function(){setTimeout(function(){t.filter(":hover").length&&(s=!0,r*=-1)},10)},function(){setTimeout(function(){s&&!t.filter(":hover").length&&(s=!1)},500)}),setTimeout(function e(){return s?setTimeout(e,200):(u=t.scrollLeft()||0,r>0?u+=o:u-=o,u<=5?r=1:u>=c&&(r=-1),t.animate({scrollLeft:u},a,"linear",e))},0)}(r,n)},1e3)},name:"autoscroll"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"autoscrollBinder",{enumerable:!0,get:function(){return r.autoscrollBinder}}),Object.defineProperty(t,"mailtoBinder",{enumerable:!0,get:function(){return i.mailtoBinder}}),Object.defineProperty(t,"telBinder",{enumerable:!0,get:function(){return o.telBinder}}),Object.defineProperty(t,"forFromToBinder",{enumerable:!0,get:function(){return a.forFromToBinder}}),Object.defineProperty(t,"removeClassBinder",{enumerable:!0,get:function(){return s.removeClassBinder}}),Object.defineProperty(t,"addClassBinder",{enumerable:!0,get:function(){return u.addClassBinder}}),Object.defineProperty(t,"classAddRemoveBinder",{enumerable:!0,get:function(){return c.classAddRemoveBinder}}),Object.defineProperty(t,"appendHtmlBinder",{enumerable:!0,get:function(){return l.appendHtmlBinder}}),Object.defineProperty(t,"imageBoxBinder",{enumerable:!0,get:function(){return f.imageBoxBinder}}),Object.defineProperty(t,"backgroundImageBinder",{enumerable:!0,get:function(){return d.backgroundImageBinder}}),Object.defineProperty(t,"valueBinder",{enumerable:!0,get:function(){return p.valueBinder}}),Object.defineProperty(t,"scrollbarDragableBinder",{enumerable:!0,get:function(){return h.scrollbarDragableBinder}});var r=n(44),i=n(43),o=n(42),a=n(41),s=n(40),u=n(39),c=n(38),l=n(37),f=n(36),d=n(35),p=n(34),h=n(33)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RibaComponentClass=t.RibaComponent=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(3),a=n(9);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?p(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&d(e,t)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var m=function e(t){if(v(this,e),window.customElements)return Reflect.construct(HTMLElement,[],this.constructor)};window.customElements&&(m.prototype=Object.create(HTMLElement.prototype,{constructor:{value:HTMLElement,configurable:!0,writable:!0}}),Object.setPrototypeOf(m,HTMLElement));var g=function(e){function t(e){var n;if(v(this,t),h(p(p(n=c(this,l(t).call(this,e)))),"debug",void 0),h(p(p(n)),"view",void 0),h(p(p(n)),"el",void 0),h(p(p(n)),"scope",void 0),n.debug=(0,i.default)("component:unknown"),n.debug("constructor called",e,p(p(n))),e)n.el=e;else{if(!window.customElements)throw new Error("element is required on browsers without custom elements support");n.el=p(p(n))}var r=n.template();return null!==r&&(n.el.innerHTML=r),n}var n,r,s;return f(t,m),n=t,(r=[{key:"eventHandler",value:function(e){return function(t,n,r,i){this.call(e,n,r.view.models,i,t)}}},{key:"connectedCallback",value:function(){this.debug("connectedCallback called")}},{key:"disconnectedCallback",value:function(){this.debug("disconnectedCallback called"),this.view&&this.view.unbind()}},{key:"attributeChangedCallback",value:function(e,t,n,r){this.debug("attributeChangedCallback called",e,t,n,r)}},{key:"adoptedCallback",value:function(e,t){this.debug("adoptedCallback called",e,t)}},{key:"template",value:function(){return null}},{key:"bind",value:function(){var e=(new a.Tinybind).getViewOptions({handler:this.eventHandler(this)});if(!this.el)throw new Error("this.el is not defined");return this.view=new o.View(Array.prototype.slice.call(this.el.childNodes),this.scope,e),this.scope=this.view.models,this.view.bind(),this.view}}])&&u(n.prototype,r),s&&u(n,s),t}();t.RibaComponent=g,h(g,"tagName",void 0);var b=function(e){function t(){var e,n;v(this,t);for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];return h(p(p(n=c(this,(e=l(t)).call.apply(e,[this].concat(i))))),"debug",void 0),h(p(p(n)),"view",void 0),h(p(p(n)),"el",void 0),h(p(p(n)),"scope",void 0),n}return f(t,g),t}();t.RibaComponentClass=b,h(b,"tagName",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.upcase=void 0;t.upcase=function(e){return e.toUpperCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.strip=void 0;t.strip=function(e){return e.trim()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slice=void 0;t.slice=function(e,t,n){return e.slice(t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prepend=void 0;t.prepend=function(e,t){return t+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pluralize=void 0;var r=n(0);t.pluralize=function(e,t,n){return null===n&&(n=t+"s"),r.Utils.isArray(e)&&(e=e.length),1===e?t:n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isString=void 0;var r=n(0);t.isString=function(e){return r.Utils.isString(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filled=void 0;var r=n(0),i=n(13);t.filled=function(e){return r.Utils.isString(e)&&!(0,i.empty)(e.replace(/\s/g,""))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.downcase=void 0;t.downcase=function(e){return e.toLowerCase()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.append=void 0;t.append=function(e,t){return e+t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"append",{enumerable:!0,get:function(){return r.append}}),Object.defineProperty(t,"downcase",{enumerable:!0,get:function(){return i.downcase}}),Object.defineProperty(t,"filled",{enumerable:!0,get:function(){return o.filled}}),Object.defineProperty(t,"isString",{enumerable:!0,get:function(){return a.isString}}),Object.defineProperty(t,"pluralize",{enumerable:!0,get:function(){return s.pluralize}}),Object.defineProperty(t,"prepend",{enumerable:!0,get:function(){return u.prepend}}),Object.defineProperty(t,"slice",{enumerable:!0,get:function(){return c.slice}}),Object.defineProperty(t,"strip",{enumerable:!0,get:function(){return l.strip}}),Object.defineProperty(t,"upcase",{enumerable:!0,get:function(){return f.upcase}}),t.stringFormatters=void 0;var r=n(55),i=n(54),o=n(53),a=n(52),s=n(51),u=n(50),c=n(49),l=n(48),f=n(47),d={append:r.append,downcase:i.downcase,filled:o.filled,isString:a.isString,pluralize:s.pluralize,prepend:u.prepend,slice:c.slice,strip:l.strip,upcase:f.upcase};t.stringFormatters=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.currency=void 0;t.currency=function(e,t){var n=e.toFixed(2).toString().replace(".",",");return t&&(n+=t),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.def=void 0;var r=n(0);t.def=function(e,t){return r.Utils.isDefined(e)?r.Utils.isString(e)?e.length>0?e:t:e:t}},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.debug=void 0;var i=(0,((r=n(1))&&r.__esModule?r:{default:r}).default)("formatter");t.debug=function(e){return i(e),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"debug",{enumerable:!0,get:function(){return r.debug}}),Object.defineProperty(t,"def",{enumerable:!0,get:function(){return i.def}}),Object.defineProperty(t,"currency",{enumerable:!0,get:function(){return o.currency}}),t.specialFormatters=void 0;var r=n(59),i=n(58),o=n(57),a={debug:r.debug,def:i.def,currency:o.currency};t.specialFormatters=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isLast=void 0;t.isLast=function(e,t){return e.length===t+1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.match=void 0;t.match=function(e,t,n){return e.match(new RegExp(t,n))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.set=void 0;var r=n(0);t.set=function(e,t,n){return(r.Utils.isObject(e)||r.Utils.isArray(e))&&(e[t]=n),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contains=void 0;var r=n(0);t.contains=function(e,t,n){if(!r.Utils.isArray(e)||!r.Utils.isObject(e)||!r.Utils.isString(e))return!1;if(r.Utils.isUndefined(n)&&(n=t),r.Utils.isString(e))return-1!==e.indexOf(n);if(r.Utils.isArray(e))for(var i in e)if((e.hasOwnProperty(i).hasOwnProperty(t)||r.Utils.isDefined(e[i])&&r.Utils.isDefined(e[i][t]))&&e[i][t]===n)return!0;return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var r=n(6);t.last=function(e){return(0,r.get)(e,e.length-1)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var r=n(6);t.first=function(e){return(0,r.get)(e,0)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.json=void 0;t.json=function(e){return JSON.stringify(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;var r=n(0);t.parse=function(e){return r.Utils.isString(e)?JSON.parse(e):null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.parse}}),Object.defineProperty(t,"json",{enumerable:!0,get:function(){return i.json}}),Object.defineProperty(t,"first",{enumerable:!0,get:function(){return o.first}}),Object.defineProperty(t,"last",{enumerable:!0,get:function(){return a.last}}),Object.defineProperty(t,"contains",{enumerable:!0,get:function(){return s.contains}}),Object.defineProperty(t,"get",{enumerable:!0,get:function(){return u.get}}),Object.defineProperty(t,"set",{enumerable:!0,get:function(){return c.set}}),Object.defineProperty(t,"match",{enumerable:!0,get:function(){return l.match}}),Object.defineProperty(t,"count",{enumerable:!0,get:function(){return f.count}}),Object.defineProperty(t,"empty",{enumerable:!0,get:function(){return d.empty}}),Object.defineProperty(t,"isLast",{enumerable:!0,get:function(){return p.isLast}}),t.propertyFormatters=void 0;var r=n(68),i=n(67),o=n(66),a=n(65),s=n(64),u=n(6),c=n(63),l=n(62),f=n(14),d=n(13),p=n(61),h={parse:r.parse,json:i.json,first:o.first,last:a.last,contains:s.contains,get:u.get,set:c.set,match:l.match,count:f.count,empty:d.empty,isLast:p.isLast};t.propertyFormatters=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.digits=void 0;var r=n(0);t.digits=function(e){if(r.Utils.isNumber(e))return e;var t=e.replace(/[^-\d\.]/g,"");return isNaN(Number(t))?0:Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uneven=void 0;t.uneven=function(e){return e%2!=0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.even=void 0;t.even=function(e){return e%2==0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gcd=void 0;t.gcd=function e(t,n){return 0===n?t:e(n,t%n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.modulo=void 0;t.modulo=function(e,t){return Number(e)%Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dividedBy=void 0;t.dividedBy=function(e,t){return Number(e)/Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.times=void 0;t.times=function(e,t){return Number(e)*Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.minus=void 0;t.minus=function(e,t){return Number(e)-Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.plus=void 0;t.plus=function(e,t){return Number(e)+Number(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.random=void 0;var r=n(0);t.random=function(e){return r.Utils.isArray(e)?e[Math.floor(Math.random()*e.length)]:null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"random",{enumerable:!0,get:function(){return r.random}}),Object.defineProperty(t,"plus",{enumerable:!0,get:function(){return i.plus}}),Object.defineProperty(t,"minus",{enumerable:!0,get:function(){return o.minus}}),Object.defineProperty(t,"times",{enumerable:!0,get:function(){return a.times}}),Object.defineProperty(t,"dividedBy",{enumerable:!0,get:function(){return s.dividedBy}}),Object.defineProperty(t,"modulo",{enumerable:!0,get:function(){return u.modulo}}),Object.defineProperty(t,"gcd",{enumerable:!0,get:function(){return c.gcd}}),Object.defineProperty(t,"even",{enumerable:!0,get:function(){return l.even}}),Object.defineProperty(t,"uneven",{enumerable:!0,get:function(){return f.uneven}}),Object.defineProperty(t,"digits",{enumerable:!0,get:function(){return d.digits}}),t.mathFormatters=void 0;var r=n(79),i=n(78),o=n(77),a=n(76),s=n(75),u=n(74),c=n(73),l=n(72),f=n(71),d=n(70),p={digits:d.digits,dividedBy:s.dividedBy,even:l.even,gcd:c.gcd,minus:o.minus,modulo:u.modulo,plus:i.plus,random:r.random,times:a.times,uneven:f.uneven};t.mathFormatters=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0;t.not=function(e){return!e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.or=void 0;t.or=function(e,t){return e||t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.elt=void 0;t.elt=function(e,t){return e<=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lt=void 0;t.lt=function(e,t){return e<t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ne=void 0;t.ne=function(e,t){return e!==t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.eq=void 0;t.eq=function(e,t){return e===t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.and=void 0;t.and=function(e,t){return e&&t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"and",{enumerable:!0,get:function(){return r.and}}),Object.defineProperty(t,"eq",{enumerable:!0,get:function(){return i.eq}}),Object.defineProperty(t,"ne",{enumerable:!0,get:function(){return o.ne}}),Object.defineProperty(t,"lt",{enumerable:!0,get:function(){return a.lt}}),Object.defineProperty(t,"elt",{enumerable:!0,get:function(){return s.elt}}),Object.defineProperty(t,"or",{enumerable:!0,get:function(){return u.or}}),Object.defineProperty(t,"not",{enumerable:!0,get:function(){return c.not}}),t.compareFormatters=void 0;var r=n(87),i=n(86),o=n(85),a=n(84),s=n(83),u=n(82),c=n(81),l={and:r.and,elt:s.elt,eq:i.eq,lt:a.lt,ne:o.ne,not:c.not,or:u.or};t.compareFormatters=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"compareFormatters",{enumerable:!0,get:function(){return r.compareFormatters}}),Object.defineProperty(t,"mathFormatters",{enumerable:!0,get:function(){return i.mathFormatters}}),Object.defineProperty(t,"propertyFormatters",{enumerable:!0,get:function(){return o.propertyFormatters}}),Object.defineProperty(t,"specialFormatters",{enumerable:!0,get:function(){return a.specialFormatters}}),Object.defineProperty(t,"stringFormatters",{enumerable:!0,get:function(){return s.stringFormatters}});var r=n(88),i=n(80),o=n(69),a=n(60),s=n(56)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onStarBinderWrapper=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r};t.onStarBinderWrapper=function(e){(0,i.default)("binders:on-*");return{binder:{function:!0,priority:1e3,bind:function(e){this.customData||(this.customData={handler:null})},unbind:function(t){if(this.customData.handler){if(null===this.args)throw new Error("args is null");e(t).off(this.args[0],this.customData)}},routine:function(t,n){var r=this;if(null===this.args)throw new Error("args is null");var i=this.args[0];this.customData.handler&&e(t).off(i,this.customData),this.customData.handler=this.eventHandler(n,t);try{e(t).on(i,this.customData.handler)}catch(n){console.warn(n),e(t).on(i,function(e){r.customData.handler(e)})}}},name:"on-*"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.disabled=void 0;t.disabled=function(e,t){e.disabled=!!t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.enabled=void 0;t.enabled=function(e,t){e.disabled=!t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.basicBindersWrapper=void 0;var r=n(3),i=n(0),o=n(92),a=n(91),s=n(90);t.basicBindersWrapper=function(e){return{"on-*":(0,s.onStarBinderWrapper)(e).binder,"each-*":{block:!0,priority:4e3,bind:function(e){if(this.marker)this.customData.iterated.forEach(function(e){e.bind()});else{if(this.marker=document.createComment(" tinybind: ".concat(this.type," ")),this.customData={iterated:[]},!e.parentNode)throw new Error("No parent node!");e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)}},unbind:function(e){this.customData.iterated&&this.customData.iterated.forEach(function(e){e.unbind()})},routine:function(e,t){var n=this;if(null===this.args)throw new Error("args is null");var o=this.args[0];if(t=t||[],!Array.isArray(t))throw new Error("each-"+o+" needs an array to iterate over, but it is");var a=e.getAttribute("index-property")||this.getIterationAlias(o);t.forEach(function(e,t){var i={$parent:n.view.models};i[a]=t,i[o]=e;var s=n.customData.iterated[t];if(s)if(s.models[o]!==e){for(var u,c,l=t+1;l<n.customData.iterated.length;l++)if((c=n.customData.iterated[l]).models[o]===e){u=l;break}if(void 0!==u){if(n.customData.iterated.splice(u,1),!n.marker||!n.marker.parentNode)throw new Error("Marker has no parent node");n.marker.parentNode.insertBefore(c.els[0],s.els[0]),c.models[a]=t}else c=r.View.create(n,i,s.els[0]);n.customData.iterated.splice(t,0,c)}else s.models[a]=t;else{var f;if(n.customData.iterated.length)f=n.customData.iterated[n.customData.iterated.length-1].els[0];else{if(!n.marker)throw new Error("previous not defined");f=n.marker}s=r.View.create(n,i,f.nextSibling),n.customData.iterated.push(s)}}),this.customData.iterated.length>t.length&&(0,i.times)(this.customData.iterated.length-t.length,function(){var e=n.customData.iterated.pop();if(e.unbind(),!n.marker||!n.marker.parentNode)throw new Error("Marker has no parent node");n.marker.parentNode.removeChild(e.els[0])}),"OPTION"===e.nodeName&&this.view.bindings&&this.view.bindings.forEach(function(e){n.marker&&e.el===n.marker.parentNode&&"value"===e.type&&e.sync&&e.sync()})},update:function(e){var t=this,n={};Object.keys(e).forEach(function(r){if(null===t.args)throw new Error("args is null");r!==t.args[0]&&(n[r]=e[r])}),this.customData.iterated.forEach(function(e){e.update(n)})}},"class-*":function(e,t){if(null===this.args)throw new Error("args is null");var n=e.className.split(" ").filter(function(e){return""!==e}),r=this.args[0].trim(),i=n.indexOf(r);-1===i?t&&(e.className+=" ".concat(r)):t||(e.className=n.filter(function(e,t){return t!==i}).join(" "))},text:function(e,t){e.textContent=null!=t?t:""},html:function(e,t){e.innerHTML=null!=t?t:""},show:function(e,t){e.style.display=t?"":"none"},hide:function(e,t){e.style.display=t?"none":""},enabled:o.enabled,disabled:a.disabled,checked:{publishes:!0,priority:2e3,bind:function(e){var t=this;this.customData={},this.customData.callback||(this.customData.callback=function(){t.publish()}),e.addEventListener("change",this.customData.callback)},unbind:function(e){e.removeEventListener("change",this.customData.callback)},routine:function(e,t){"radio"===e.type?e.checked=(0,i.getString)(e.value)===(0,i.getString)(t):e.checked=!!t}},value:{publishes:!0,priority:3e3,bind:function(e){if(this.customData={},this.customData.isRadio="INPUT"===e.tagName&&"radio"===e.type,!this.customData.isRadio){this.customData.event=e.getAttribute("event-name")||("SELECT"===e.tagName?"change":"input");var t=this;this.customData.callback||(this.customData.callback=function(){t.publish()}),e.addEventListener(this.customData.event,this.customData.callback)}},unbind:function(e){this.customData.isRadio||e.removeEventListener(this.customData.event,this.customData.callback)},routine:function(e,t){if(this.customData&&this.customData.isRadio)e.setAttribute("value",t);else if("select-multiple"===e.type&&e instanceof HTMLSelectElement){if(t instanceof Array)for(var n=0;n<e.length;n++){var r=e[n];r.selected=t.indexOf(r.value)>-1}}else(0,i.getString)(t)!==(0,i.getString)(e.value)&&(e.value=null!=t?t:"")}},if:{block:!0,priority:4e3,bind:function(e){if(this.customData={},this.marker)!1===this.customData.bound&&this.customData.nested&&this.customData.nested.bind();else{if(this.marker=document.createComment(" tinybind: "+this.type+" "+this.keypath+" "),this.customData.attached=!1,!e.parentNode)throw new Error("Element has no parent node");e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)}this.customData.bound=!0},unbind:function(){this.customData.nested&&(this.customData.nested.unbind(),this.customData.bound=!1)},routine:function(e,t){if((t=!!t)!==this.customData.attached)if(t){if(this.customData.nested||(this.customData.nested=new r.View(e,this.view.models,this.view.options),this.customData.nested.bind()),!this.marker||!this.marker.parentNode)throw new Error("Marker has no parent node");this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.customData.attached=!0}else{if(!e.parentNode)throw new Error("Element has no parent node");e.parentNode.removeChild(e),this.customData.attached=!1}},update:function(e){this.customData.nested&&this.customData.nested.update(e)}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.routeBinder=void 0;var r=a(n(1)),i=a(n(2)),o=n(0);function a(e){return e&&e.__esModule?e:{default:e}}t.routeBinder=function(e,t,n){var a=(0,r.default)("binders:route");return{binder:function(r,s){var u=(0,i.default)(r),c=!1;a("getBinder",r,s),s||(s=u.attr("href")),"_blank"===u.attr("target")&&(c=!0);var l=o.Utils.getLocation(),f=l.protocol+"//"+l.hostname;s&&o.Utils.isAbsoluteUrl(s)&&(0===s.indexOf(f)?s=s.replace(f,""):c=!0);var d=function(e){if(e){var t=o.Utils.getLocation().pathname;if(a("checkURL",t,e),e===t)return!0}return!1},p=function(e){if(e){if(d(e))return u.addClass("active"),!0;u.removeClass("active")}return!1};e.on("newPageReady",function(){return p(s)}),u.off("click").on("click",function(e){a("go to ",s),e.preventDefault(),d(s)?a("already on this site"):s&&t.goTo(s,c)}),c||d(s)||u.off("mouseenter touchstart").on("mouseenter touchstart",function(e){n.onLinkEnter(e,s)}),p(s)},name:"route"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.viewBinder=void 0;var r=s(n(1)),i=s(n(2)),o=n(3),a=n(0);function s(e){return e&&e.__esModule?e:{default:e}}t.viewBinder=function(e,t,n){var s=(0,r.default)("binders:view");return{binder:function(r,u){var c=(0,i.default)(r),l=this;l.view.models.routerDispatcher=e,this.customData={nested:null},e.on("newPageReady",function(e,t,n,r,i,u){null!==l.customData.nested&&l.customData.nested.unbind(),a.Utils.isObject(l.view.models)||(l.view.models={}),l.view.models.dataset=n.data(),s("newPageReady dataset:",i),u||(l.customData.nested=new o.View(n[0],l.view.models,l.view.options),l.customData.nested.bind())}),setTimeout(function(){n.init(),t.start(c)},0)},name:"view"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Prefetch=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(0),a=n(20);function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"ignoreClassLink","no-barba-prefetch"),u(this,"debug",(0,i.default)("Prefetch")),e.instance)return e.instance;e.instance=this}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(!window.history.pushState)return!1;e&&(document.body.addEventListener("mouseover",this.onLinkEnter.bind(this)),document.body.addEventListener("touchstart",this.onLinkEnter.bind(this)))}},{key:"onLinkEnter",value:function(e,t){var n=e.target;if(!t){for(;n&&!a.Pjax.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;t=a.Pjax.getHref(n)}if(this.debug("onLinkEnter",t),t||console.warn("Url is not defined, you can't cache the link without the url. Please make shure your element has the href attribute or pass the url directly to this function."),t&&a.Pjax.preventCheck(e,n)&&!a.Pjax.cache.get(t)){var r=o.Utils.xhr(t);a.Pjax.cache.set(t,r)}}}])&&s(t.prototype,n),r&&s(t,r),e}();t.Prefetch=c,u(c,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dom=void 0;var r,i=(r=n(2))&&r.__esModule?r:{default:r};function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"dataNamespace","namespace"),a(this,"containerSelector",".rv-view-container"),a(this,"currentHTML",void 0),a(this,"_$wrapper",void 0),this._$wrapper=t}var t,n,r;return t=e,(n=[{key:"parseResponse",value:function(e){this.currentHTML=e;var t=(0,i.default)(i.default.parseHTML(e)),n=t.filter("title");return n.length&&(document.title=n.text()),this.getContainer(t)}},{key:"getWrapper",value:function(){return this._$wrapper}},{key:"getContainer",value:function(e){if(e||(e=(0,i.default)(document.body)),!e)throw new Error("[DOM] DOM not ready!");var t=this.parseContainer(e);if(!t)throw new Error("[DOM] No container found");return t}},{key:"getNamespace",value:function(e){if(e&&e.data())return e.data("namespace");throw new Error("[DOM] Missing data-namespace attribute")}},{key:"putContainer",value:function(e){e.css("visibility","hidden"),this.getWrapper().append(e)}},{key:"parseContainer",value:function(e){var t=e.find(this.containerSelector);if(!t.length)throw new Error('No container with selector "'.concat(this.containerSelector,'" found!'));return t}}])&&o(t.prototype,n),r&&o(t,r),e}();t.Dom=s},function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryManager=void 0;var o=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"history",new Array),e.instance?e.instance:(e.instance=this,e.instance)}var t,n,o;return t=e,(n=[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){var e=this.history;return e.length<2?null:e[e.length-2]}},{key:"add",value:function(e,t){t||(t=void 0),this.history.push({namespace:t,url:e})}}])&&r(t.prototype,n),o&&r(t,o),e}();t.HistoryManager=o,i(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseView=void 0;var r=n(10),i=n(0);function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"namespace",void 0),a(this,"$container",void 0),a(this,"dispatcher",new r.GlobalEvent)}var t,n,s;return t=e,(n=[{key:"extend",value:function(e){return i.Utils.extend(!1,this,e)}},{key:"init",value:function(){var e=this;this.dispatcher.on("initStateChange",function(t,n){n&&n.namespace===e.namespace&&e.onLeave()}),this.dispatcher.on("newPageReady",function(t,n,r,i,o){e.$container=r,t.namespace===e.namespace&&e.onEnter()}),this.dispatcher.on("transitionCompleted",function(t,n){t.namespace===e.namespace&&e.onEnterCompleted(),n&&n.namespace===e.namespace&&e.onLeaveCompleted()})}}])&&o(t.prototype,n),s&&o(t,s),e}();t.BaseView=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HideShowTransition=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(11);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(){var e,n,r,o,s,c,f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var d=arguments.length,p=new Array(d),h=0;h<d;h++)p[h]=arguments[h];return r=this,n=!(o=(e=u(t)).call.apply(e,[this].concat(p)))||"object"!==a(o)&&"function"!=typeof o?l(r):o,s=l(l(n)),c="debug",f=(0,i.default)("barba:HideShowTransition"),c in s?Object.defineProperty(s,c,{value:f,enumerable:!0,configurable:!0,writable:!0}):s[c]=f,n}var n,r,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,o.BaseTransition),n=t,(r=[{key:"start",value:function(){if(!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){document.body.scrollTop=0,this.done()}}])&&s(n.prototype,r),f&&s(n,f),t}();t.HideShowTransition=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomTransition=void 0;var r,i=(r=n(1))&&r.__esModule?r:{default:r},o=n(0),a=n(11);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var d=function(e){function t(){var e,n,r,o,a,u,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var d=arguments.length,p=new Array(d),h=0;h<d;h++)p[h]=arguments[h];return r=this,n=!(o=(e=c(t)).call.apply(e,[this].concat(p)))||"object"!==s(o)&&"function"!=typeof o?f(r):o,a=f(f(n)),u="debug",l=(0,i.default)("rivets:CustomTransition"),u in a?Object.defineProperty(a,u,{value:l,enumerable:!0,configurable:!0,writable:!0}):a[u]=l,n}var n,r,d;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,a.BaseTransition),n=t,(r=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.debug("init"),this.deferred=o.Utils.deferred();var r=o.Utils.deferred();return this.newContainerLoading=r.promise,this.start(),t.then(function(e){n.$newContainer=e,r.resolve()}),this.deferred.promise}},{key:"start",value:function(){if(this.debug("CustomTransition start"),!this.newContainerLoading)throw new Error("this.newContainerLoading is not set");this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(e){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}])&&u(n.prototype,r),d&&u(n,d),t}();t.CustomTransition=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(22);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})});var i=n(21);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})});var o=n(99);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}})});var a=n(20);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})});var s=n(10);Object.keys(s).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return r.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return r.Prefetch}}),Object.defineProperty(t,"GlobalEvent",{enumerable:!0,get:function(){return r.GlobalEvent}}),t.routerBinders=void 0;var r=n(102),i=n(95),o=n(94),a=new r.GlobalEvent,s=new r.Pjax,u=new r.Prefetch,c={};t.routerBinders=c;var l=(0,i.viewBinder)(a,s,u),f=(0,o.routeBinder)(a,s,u);c[l.name]=l.binder,c[f.name]=f.binder},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(103);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})});var i=n(93);Object.keys(i).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}})});var o=n(89);Object.keys(o).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}})});var a=n(18);Object.keys(a).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}})});var s=n(17);Object.keys(s).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}})});var u=n(16);Object.keys(u).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return u[e]}})});var c=n(15);Object.keys(c).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return c[e]}})});var l=n(7);Object.keys(l).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return l[e]}})});var f=n(19);Object.keys(f).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return f[e]}})});var d=n(4);Object.keys(d).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return d[e]}})});var p=n(9);Object.keys(p).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return p[e]}})});var h=n(0);Object.keys(h).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return h[e]}})});var v=n(3);Object.keys(v).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return v[e]}})});var m=n(46);Object.keys(m).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return m[e]}})})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e.attrFn=e.attrFn||{};var t="ontouchstart"in window,n={tap_pixel_range:5,swipe_h_threshold:50,swipe_v_threshold:50,taphold_threshold:750,doubletap_int:500,shake_threshold:15,touch_capable:t,orientation_support:"orientation"in window&&"onorientationchange"in window,startevent:t?"touchstart":"mousedown",endevent:t?"touchend":"mouseup",moveevent:t?"touchmove":"mousemove",tapevent:t?"tap":"click",scrollevent:t?"touchmove":"scroll",hold_timer:null,tap_timer:null};e.touch={},e.isTouchCapable=function(){return n.touch_capable},e.getStartEvent=function(){return n.startevent},e.getEndEvent=function(){return n.endevent},e.getMoveEvent=function(){return n.moveevent},e.getTapEvent=function(){return n.tapevent},e.getScrollEvent=function(){return n.scrollevent},e.touch.setSwipeThresholdX=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");n.swipe_h_threshold=e},e.touch.setSwipeThresholdY=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");n.swipe_v_threshold=e},e.touch.setDoubleTapInt=function(e){if("number"!=typeof e)throw new Error("Interval parameter must be a type of number");n.doubletap_int=e},e.touch.setTapHoldThreshold=function(e){if("number"!=typeof e)throw new Error("Threshold parameter must be a type of number");n.taphold_threshold=e},e.touch.setTapRange=function(e){if("number"!=typeof e)throw new Error("Ranger parameter must be a type of number");n.tap_pixel_range=threshold},e.each(["tapstart","tapend","tapmove","tap","singletap","doubletap","taphold","swipe","swipeup","swiperight","swipedown","swipeleft","swipeend","scrollstart","scrollend","orientationchange","tap2","taphold2"],function(t,n){e.fn[n]=function(e){return e?this.on(n,e):this.trigger(n)},e.attrFn[n]=!0}),e.event.special.tapstart={setup:function(){var t=this,r=e(t);r.on(n.startevent,function e(i){if(r.data("callee",e),i.which&&1!==i.which)return!1;var o=i.originalEvent,a={position:{x:n.touch_capable?o.touches[0].pageX:i.pageX,y:n.touch_capable?o.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:i.target};return g(t,"tapstart",i,a),!0})},remove:function(){e(this).off(n.startevent,e(this).data.callee)}},e.event.special.tapmove={setup:function(){var t=this,r=e(t);r.on(n.moveevent,function e(i){r.data("callee",e);var o=i.originalEvent,a={position:{x:n.touch_capable?o.touches[0].pageX:i.pageX,y:n.touch_capable?o.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:i.target};return g(t,"tapmove",i,a),!0})},remove:function(){e(this).off(n.moveevent,e(this).data.callee)}},e.event.special.tapend={setup:function(){var t=this,r=e(t);r.on(n.endevent,function e(i){r.data("callee",e);var o=i.originalEvent,a={position:{x:n.touch_capable?o.changedTouches[0].pageX:i.pageX,y:n.touch_capable?o.changedTouches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(o.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(i.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(o.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(i.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:i.target};return g(t,"tapend",i,a),!0})},remove:function(){e(this).off(n.endevent,e(this).data.callee)}},e.event.special.taphold={setup:function(){var t,r=this,i=e(r),o={x:0,y:0},a=0,s=0;i.on(n.startevent,function e(u){if(u.which&&1!==u.which)return!1;i.data("tapheld",!1),t=u.target;var c=u.originalEvent,l=Date.now();n.touch_capable?c.touches[0].pageX:u.pageX,n.touch_capable?c.touches[0].pageY:u.pageY,n.touch_capable?(c.touches[0].pageX,c.touches[0].target.offsetLeft):u.offsetX,n.touch_capable?(c.touches[0].pageY,c.touches[0].target.offsetTop):u.offsetY;o.x=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageX:u.pageX,o.y=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageY:u.pageY,a=o.x,s=o.y;var f=i.parent().data("threshold")?i.parent().data("threshold"):i.data("threshold"),d=void 0!==f&&!1!==f&&parseInt(f)?parseInt(f):n.taphold_threshold;return n.hold_timer=window.setTimeout(function(){var f=o.x-a,d=o.y-s;if(u.target==t&&(o.x==a&&o.y==s||f>=-n.tap_pixel_range&&f<=n.tap_pixel_range&&d>=-n.tap_pixel_range&&d<=n.tap_pixel_range)){i.data("tapheld",!0);for(var p=Date.now(),h=p-l,v=u.originalEvent.targetTouches?u.originalEvent.targetTouches:[u],m=[],b=0;b<v.length;b++){var y={position:{x:n.touch_capable?c.changedTouches[b].pageX:u.pageX,y:n.touch_capable?c.changedTouches[b].pageY:u.pageY},offset:{x:n.touch_capable?Math.round(c.changedTouches[b].pageX-(i.offset()?i.offset().left:0)):Math.round(u.pageX-(i.offset()?i.offset().left:0)),y:n.touch_capable?Math.round(c.changedTouches[b].pageY-(i.offset()?i.offset().top:0)):Math.round(u.pageY-(i.offset()?i.offset().top:0))},time:Date.now(),target:u.target,duration:h};m.push(y)}var w=2==v.length?"taphold2":"taphold";i.data("callee1",e),g(r,w,u,m)}},d),!0}).on(n.endevent,function e(){i.data("callee2",e),i.data("tapheld",!1),window.clearTimeout(n.hold_timer)}).on(n.moveevent,function e(t){i.data("callee3",e),a=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,s=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2).off(n.moveevent,e(this).data.callee3)}},e.event.special.doubletap={setup:function(){var t,r,i=this,o=e(i),a=null,s=!1;o.on(n.startevent,function t(i){return(!i.which||1===i.which)&&(o.data("doubletapped",!1),i.target,o.data("callee1",t),r=i.originalEvent,a||(a={position:{x:n.touch_capable?r.touches[0].pageX:i.pageX,y:n.touch_capable?r.touches[0].pageY:i.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(i.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(i.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:i.target,element:i.originalEvent.srcElement,index:e(i.target).index()}),!0)}).on(n.endevent,function u(c){var l=Date.now(),f=o.data("lastTouch")||l+1,d=l-f;if(window.clearTimeout(t),o.data("callee2",u),d<n.doubletap_int&&e(c.target).index()==a.index&&d>100){o.data("doubletapped",!0),window.clearTimeout(n.tap_timer);var p={position:{x:n.touch_capable?c.originalEvent.changedTouches[0].pageX:c.pageX,y:n.touch_capable?c.originalEvent.changedTouches[0].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(r.changedTouches[0].pageX-(o.offset()?o.offset().left:0)):Math.round(c.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(r.changedTouches[0].pageY-(o.offset()?o.offset().top:0)):Math.round(c.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:c.target,element:c.originalEvent.srcElement,index:e(c.target).index()},h={firstTap:a,secondTap:p,interval:p.time-a.time};s||(g(i,"doubletap",c,h),a=null),s=!0,window.setTimeout(function(){s=!1},n.doubletap_int)}else o.data("lastTouch",l),t=window.setTimeout(function(){a=null,window.clearTimeout(t)},n.doubletap_int,[c]);o.data("lastTouch",l)})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2)}},e.event.special.singletap={setup:function(){var t=this,r=e(t),i=null,o=null,a={x:0,y:0};r.on(n.startevent,function e(t){return(!t.which||1===t.which)&&(o=Date.now(),i=t.target,r.data("callee1",e),a.x=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageX:t.pageX,a.y=t.originalEvent.targetTouches?t.originalEvent.targetTouches[0].pageY:t.pageY,!0)}).on(n.endevent,function e(s){if(r.data("callee2",e),s.target==i){var u=s.originalEvent.changedTouches?s.originalEvent.changedTouches[0].pageX:s.pageX,c=s.originalEvent.changedTouches?s.originalEvent.changedTouches[0].pageY:s.pageY;n.tap_timer=window.setTimeout(function(){var e=a.x-u,i=a.y-c;if(!r.data("doubletapped")&&!r.data("tapheld")&&(a.x==u&&a.y==c||e>=-n.tap_pixel_range&&e<=n.tap_pixel_range&&i>=-n.tap_pixel_range&&i<=n.tap_pixel_range)){var l=s.originalEvent,f={position:{x:n.touch_capable?l.changedTouches[0].pageX:s.pageX,y:n.touch_capable?l.changedTouches[0].pageY:s.pageY},offset:{x:n.touch_capable?Math.round(l.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(s.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(l.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(s.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:s.target};f.time-o<n.taphold_threshold&&g(t,"singletap",s,f)}},n.doubletap_int)}})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2)}},e.event.special.tap={setup:function(){var t,r,i=this,o=e(i),a=!1,s=null,u={x:0,y:0};o.on(n.startevent,function e(n){return o.data("callee1",e),(!n.which||1===n.which)&&(a=!0,u.x=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageX:n.pageX,u.y=n.originalEvent.targetTouches?n.originalEvent.targetTouches[0].pageY:n.pageY,t=Date.now(),s=n.target,r=n.originalEvent.targetTouches?n.originalEvent.targetTouches:[n],!0)}).on(n.endevent,function e(c){o.data("callee2",e);var l=c.originalEvent.targetTouches?c.originalEvent.changedTouches[0].pageX:c.pageX,f=c.originalEvent.targetTouches?c.originalEvent.changedTouches[0].pageY:c.pageY,d=u.x-l,p=u.y-f;if(s==c.target&&a&&Date.now()-t<n.taphold_threshold&&(u.x==l&&u.y==f||d>=-n.tap_pixel_range&&d<=n.tap_pixel_range&&p>=-n.tap_pixel_range&&p<=n.tap_pixel_range)){for(var h=c.originalEvent,v=[],m=0;m<r.length;m++){var b={position:{x:n.touch_capable?h.changedTouches[m].pageX:c.pageX,y:n.touch_capable?h.changedTouches[m].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(h.changedTouches[m].pageX-(o.offset()?o.offset().left:0)):Math.round(c.pageX-(o.offset()?o.offset().left:0)),y:n.touch_capable?Math.round(h.changedTouches[m].pageY-(o.offset()?o.offset().top:0)):Math.round(c.pageY-(o.offset()?o.offset().top:0))},time:Date.now(),target:c.target};v.push(b)}var y=2==r.length?"tap2":"tap";g(i,y,c,v)}})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.endevent,e(this).data.callee2)}},e.event.special.swipe={setup:function(){var t,r=e(this),i=!1,o=!1,a={x:0,y:0},s={x:0,y:0};r.on(n.startevent,function o(u){r=e(u.currentTarget);r.data("callee1",o);a.x=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageX:u.pageX;a.y=u.originalEvent.targetTouches?u.originalEvent.targetTouches[0].pageY:u.pageY;s.x=a.x;s.y=a.y;i=!0;var c=u.originalEvent;t={position:{x:n.touch_capable?c.touches[0].pageX:u.pageX,y:n.touch_capable?c.touches[0].pageY:u.pageY},offset:{x:n.touch_capable?Math.round(c.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(u.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(c.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(u.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:u.target}}),r.on(n.moveevent,function u(c){r=e(c.currentTarget);r.data("callee2",u);s.x=c.originalEvent.targetTouches?c.originalEvent.targetTouches[0].pageX:c.pageX;s.y=c.originalEvent.targetTouches?c.originalEvent.targetTouches[0].pageY:c.pageY;var l;var f=r.parent().data("xthreshold")?r.parent().data("xthreshold"):r.data("xthreshold"),d=r.parent().data("ythreshold")?r.parent().data("ythreshold"):r.data("ythreshold"),p=void 0!==f&&!1!==f&&parseInt(f)?parseInt(f):n.swipe_h_threshold,h=void 0!==d&&!1!==d&&parseInt(d)?parseInt(d):n.swipe_v_threshold;a.y>s.y&&a.y-s.y>h&&(l="swipeup");a.x<s.x&&s.x-a.x>p&&(l="swiperight");a.y<s.y&&s.y-a.y>h&&(l="swipedown");a.x>s.x&&a.x-s.x>p&&(l="swipeleft");if(void 0!=l&&i){a.x=0,a.y=0,s.x=0,s.y=0,i=!1;var v=c.originalEvent,m={position:{x:n.touch_capable?v.touches[0].pageX:c.pageX,y:n.touch_capable?v.touches[0].pageY:c.pageY},offset:{x:n.touch_capable?Math.round(v.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(c.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(v.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(c.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:c.target},g=Math.abs(t.position.x-m.position.x),b=Math.abs(t.position.y-m.position.y),y={startEvnt:t,endEvnt:m,direction:l.replace("swipe",""),xAmount:g,yAmount:b,duration:m.time-t.time};o=!0,r.trigger("swipe",y).trigger(l,y)}}),r.on(n.endevent,function a(s){r=e(s.currentTarget);var u="";r.data("callee3",a);if(o){var c=r.data("xthreshold"),l=r.data("ythreshold"),f=void 0!==c&&!1!==c&&parseInt(c)?parseInt(c):n.swipe_h_threshold,d=void 0!==l&&!1!==l&&parseInt(l)?parseInt(l):n.swipe_v_threshold,p=s.originalEvent,h={position:{x:n.touch_capable?p.changedTouches[0].pageX:s.pageX,y:n.touch_capable?p.changedTouches[0].pageY:s.pageY},offset:{x:n.touch_capable?Math.round(p.changedTouches[0].pageX-(r.offset()?r.offset().left:0)):Math.round(s.pageX-(r.offset()?r.offset().left:0)),y:n.touch_capable?Math.round(p.changedTouches[0].pageY-(r.offset()?r.offset().top:0)):Math.round(s.pageY-(r.offset()?r.offset().top:0))},time:Date.now(),target:s.target};t.position.y>h.position.y&&t.position.y-h.position.y>d&&(u="swipeup"),t.position.x<h.position.x&&h.position.x-t.position.x>f&&(u="swiperight"),t.position.y<h.position.y&&h.position.y-t.position.y>d&&(u="swipedown"),t.position.x>h.position.x&&t.position.x-h.position.x>f&&(u="swipeleft");var v=Math.abs(t.position.x-h.position.x),m=Math.abs(t.position.y-h.position.y),g={startEvnt:t,endEvnt:h,direction:u.replace("swipe",""),xAmount:v,yAmount:m,duration:h.time-t.time};r.trigger("swipeend",g)}i=!1;o=!1})},remove:function(){e(this).off(n.startevent,e(this).data.callee1).off(n.moveevent,e(this).data.callee2).off(n.endevent,e(this).data.callee3)}},e.event.special.scrollstart={setup:function(){var t,r,i=this,o=e(i);function a(e,n){g(i,(t=n)?"scrollstart":"scrollend",e)}o.on(n.scrollevent,function e(n){o.data("callee",e),t||a(n,!0),clearTimeout(r),r=setTimeout(function(){a(n,!1)},50)})},remove:function(){e(this).off(n.scrollevent,e(this).data.callee)}};var r,i,o,a,s=e(window),u={0:!0,180:!0};if(n.orientation_support){var c=window.innerWidth||s.width(),l=window.innerHeight||s.height();o=c>l&&c-l>50,a=u[window.orientation],(o&&a||!o&&!a)&&(u={"-90":!0,90:!0})}function f(){var e=r();e!==i&&(i=e,s.trigger("orientationchange"))}e.event.special.orientationchange={setup:function(){return!n.orientation_support&&(i=r(),s.on("throttledresize",f),!0)},teardown:function(){return!n.orientation_support&&(s.off("throttledresize",f),!0)},add:function(e){var t=e.handler;e.handler=function(e){return e.orientation=r(),t.apply(this,arguments)}}},e.event.special.orientationchange.orientation=r=function(){var e=document.documentElement;return(n.orientation_support?u[window.orientation]:e&&e.clientWidth/e.clientHeight<1.1)?"portrait":"landscape"},e.event.special.throttledresize={setup:function(){e(this).on("resize",v)},teardown:function(){e(this).off("resize",v)}};var d,p,h,v=function(){p=Date.now(),(h=p-m)>=250?(m=p,e(this).trigger("throttledresize")):(d&&window.clearTimeout(d),d=window.setTimeout(f,250-h))},m=0;function g(t,n,r,i){var o=r.type;r.type=n,e.event.dispatch.call(t,r,i),r.type=o}return e.each({scrollend:"scrollstart",swipeup:"swipe",swiperight:"swipe",swipedown:"swipe",swipeleft:"swipe",swipeend:"swipe",tap2:"tap",taphold2:"taphold"},function(t,n){e.event.special[t]={setup:function(){e(this).on(n,e.noop)}}}),e}},function(e,t){var n=1e3,r=60*n,i=60*r,o=24*i,a=365.25*o;function s(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var s=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return s*a;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*i;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?s(u=e,o,"day")||s(u,i,"hour")||s(u,r,"minute")||s(u,n,"second")||u+" ms":function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=i)return Math.round(e/i)+"h";if(e>=r)return Math.round(e/r)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function r(e){var n;function r(){if(r.enabled){var e=r,i=+new Date,o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i;for(var a=new Array(arguments.length),s=0;s<a.length;s++)a[s]=arguments[s];a[0]=t.coerce(a[0]),"string"!=typeof a[0]&&a.unshift("%O");var u=0;a[0]=a[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var i=t.formatters[r];if("function"==typeof i){var o=a[u];n=i.call(e,o),a.splice(u,1),u--}return n}),t.formatArgs.call(e,a),(r.log||t.log||console.log.bind(console)).apply(e,a)}}return r.namespace=e,r.enabled=t.enabled(e),r.useColors=t.useColors(),r.color=function(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}(e),r.destroy=i,"function"==typeof t.init&&t.init(r),t.instances.push(r),r}function i(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=r.debug=r.default=r).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var o=t.instances[n];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(106),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=s(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Main=void 0;var r=u(n(1)),i=u(n(23)),o=n(12),a=n(45),s=n(32);function u(e){return e&&e.__esModule?e:{default:e}}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var l=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),c(this,"dispatcher",new o.GlobalEvent),c(this,"view",void 0),c(this,"debug",(0,r.default)("main")),c(this,"tinybind",new o.Tinybind),this.debug("init the main application"),this.tinybind.componentService.regist((0,s.contactComponent)()),this.tinybind.componentService.regist((0,s.navItemsComponent)()),this.tinybind.componentService.regist((0,s.iconsetComponent)()),this.tinybind.componentService.regist(s.ProductScrollbarRibaComponent,s.ProductScrollbarRibaComponent.tagName);var t=(0,o.basicBindersWrapper)(i.default);this.tinybind.binderService.regists(o.routerBinders),this.tinybind.binderService.regists(t),this.tinybind.binderService.regist((0,a.scrollbarDragableBinder)()),this.tinybind.binderService.registWrapper((0,a.autoscrollBinder)()),this.tinybind.binderService.registWrapper((0,a.removeClassBinder)()),this.tinybind.binderService.registWrapper((0,a.addClassBinder)()),this.tinybind.binderService.registWrapper((0,a.valueBinder)()),this.tinybind.formatterService.regists(o.compareFormatters),this.tinybind.formatterService.regists(o.mathFormatters),this.tinybind.formatterService.regists(o.propertyFormatters),this.tinybind.formatterService.regists(o.specialFormatters),this.tinybind.formatterService.regists(o.stringFormatters),this.view=this.tinybind.bind((0,i.default)("body")[0],window.model)};t.Main=l,(0,i.default)(function(e){new l})},function(e,t,n){n(109),e.exports=n(24)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvdmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9wYXJzZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9zZXJ2aWNlcy9VdGlscy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L2dldC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvY29tcG9uZW50LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvb2JzZXJ2ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvdGlueWJpbmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZ2xvYmFsLWV2ZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1RyYW5zaXRpb24vQmFzZVRyYW5zaXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3RpbnliaW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvZW1wdHkuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvY291bnQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2NvbXBvbmVudC1iaW5kaW5nLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRpbmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYWRhcHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXIuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9QamF4L1BqYXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvYmFyYmEvVHJhbnNpdGlvbi9UcmFuc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL0NhY2hlLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9qcXVlcnkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Njc3MvdGhlbWUuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9wcm9kdWN0LXNjcm9sbGJhci9wcm9kdWN0LXNjcm9sbGJhci5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvbmF2LWl0ZW1zL25hdi1pdGVtcy5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9uYXYtaXRlbXMvbmF2LWl0ZW1zLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9pY29uc2V0L2ljb25zZXQuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvaWNvbnNldC9pY29uc2V0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9jb250YWN0L2NvbnRhY3QuY29tcG9uZW50Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvY29udGFjdC9jb250YWN0LmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9zY3JvbGxiYXIvc2Nyb2xsYmFyLWRyYWdhYmxlLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy92YWx1ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvYmFja2dyb3VuZC1pbWFnZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvaW1hZ2UtYm94LmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9hcHBlbmQtaHRtbC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvY2xhc3MtYWRkLXJlbW92ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvYWRkLWNsYXNzLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9yZW1vdmUtY2xhc3MuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iaW5kZXJzL2Zvci1mcm9tLXRvLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy90ZWwuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iaW5kZXJzL21haWx0by5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvYXV0b3Njcm9sbC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvd2ViY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL3VwY2FzZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zdHJpbmcvc3RyaXAuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL3NsaWNlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3N0cmluZy9wcmVwZW5kLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3N0cmluZy9wbHVyYWxpemUuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL2lzU3RyaW5nLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3N0cmluZy9maWxsZWQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL2Rvd25jYXNlLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3N0cmluZy9hcHBlbmQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3RyaW5nL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvc3BlY2lhbC9jdXJyZW5jeS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zcGVjaWFsL2RlZi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9zcGVjaWFsL2RlYnVnLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3NwZWNpYWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9pc0xhc3QuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvbWF0Y2guZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvc2V0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L2NvbnRhaW5zLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL3Byb3BlcnR5L2xhc3QuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvZmlyc3QuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvcHJvcGVydHkvanNvbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9wYXJzZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9wcm9wZXJ0eS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvZGlnaXRzLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvdW5ldmVuLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvZXZlbi5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9tYXRoL2djZC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9tYXRoL21vZHVsby5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9tYXRoL2RpdmlkZWRCeS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9tYXRoL3RpbWVzLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvbWludXMuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvbWF0aC9wbHVzLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvcmFuZG9tLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL21hdGgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9jb21wYXJlL25vdC5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9jb21wYXJlL29yLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvZWx0LmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvbHQuZm9ybWF0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2Zvcm1hdHRlcnMvY29tcGFyZS9uZS5mb3JtYXR0ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9jb21wYXJlL2VxLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvYW5kLmZvcm1hdHRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9mb3JtYXR0ZXJzL2NvbXBhcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvZm9ybWF0dGVycy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL2Jhc2ljL29uLXN0YXIuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvYmFzaWMvZGlzYWJsZWQuYmluZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvYmFzaWMvZW5hYmxlZC5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9iYXNpYy9iYXNpYy5iaW5kZXJzLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL3JvdXRlLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci92aWV3LmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9QamF4L1ByZWZldGNoLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1BqYXgvRG9tLnRzIiwid2VicGFjazovLy8uL3NyYy9tb2R1bGVzL3RpbnliaW5kL2JpbmRlcnMvcm91dGVyL2JhcmJhL1BqYXgvSGlzdG9yeU1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvYmFyYmEvVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9UcmFuc2l0aW9uL0hpZGVTaG93VHJhbnNpdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90aW55YmluZC9iaW5kZXJzL3JvdXRlci9iYXJiYS9UcmFuc2l0aW9uL0N1c3RvbVRyYW5zaXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvYmFyYmEvYmFyYmEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvYmluZGVycy9yb3V0ZXIvcm91dGVyLmJpbmRlcnMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvdGlueWJpbmQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZHVsZXMvanF1ZXJ5LXRvdWNoLWV2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9kZWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy90cy9tYWluLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX2pxdWVyeSIsInN0ciIsInZhbCIsIkpTT04iLCJwYXJzZSIsIkFycmF5IiwiZXJyb3IiLCJvYmoiLCJfdHlwZW9mIiwidG9TdHJpbmciLCJ1bmRlZmluZWQiLCJjYiIsImVsIiwicmVzdWx0cyIsInR5cGUiLCJjaGVja2VkIiwib3B0aW9ucyIsIm9wdGlvbiIsInNlbGVjdGVkIiwicHVzaCIsIlV0aWxzIiwidGhpcyIsImlzVW5kZWZpbmVkIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNEZWZpbmVkIiwiaXNTdHJpbmciLCJ0ZXN0IiwibnVtIiwicmVwbGFjZSIsImlzTnVtYmVyIiwiTnVtYmVyIiwiZGVlcCIsInRhcmdldCIsIm9iamVjdDEiLCJvYmplY3ROIiwialF1ZXJ5IiwiZXh0ZW5kIiwib2JqZWN0MiIsInVybCIsImRlZmVycmVkIiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzb2x2ZSIsInJlc3BvbnNlVGV4dCIsInJlamVjdCIsIkVycm9yIiwib250aW1lb3V0Iiwib3BlbiIsInRpbWVvdXQiLCJ4aHJUaW1lb3V0Iiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJwcm9taXNlIiwicHJvbSIsIlByb21pc2UiLCJkZWZhdWx0IiwiY29uY2F0Iiwid2luZG93IiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsInBhdGhuYW1lIiwic2VhcmNoIiwicG9ydCIsImhyZWYiLCJSZWdFeHAiLCJleGVjIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiaGFzaCIsImhpc3RvcnkiLCJwdXNoU3RhdGUiLCJkb2N1bWVudCIsInRpdGxlIiwidyIsIk1hdGgiLCJtYXgiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsImlubmVyV2lkdGgiLCJoIiwiY2xpZW50SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJwcm9jZXNzIiwibG9hZCIsInN0b3JhZ2UiLCJkZWJ1ZyIsImUiLCJlbnYiLCJERUJVRyIsImxvZyIsImNvbnNvbGUiLCJGdW5jdGlvbiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZm9ybWF0QXJncyIsImFyZ3MiLCJ1c2VDb2xvcnMiLCJuYW1lc3BhY2UiLCJodW1hbml6ZSIsImRpZmYiLCJjb2xvciIsInNwbGljZSIsImluZGV4IiwibGFzdEMiLCJtYXRjaCIsInNhdmUiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwic3R5bGUiLCJXZWJraXRBcHBlYXJhbmNlIiwiZmlyZWJ1ZyIsImV4Y2VwdGlvbiIsInRhYmxlIiwicGFyc2VJbnQiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiY29sb3JzIiwiZm9ybWF0dGVycyIsImoiLCJ2Iiwic3RyaW5naWZ5IiwiZXJyIiwibWVzc2FnZSIsImVuYWJsZSIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwiaW5kZXhPZiIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwic3JjIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsImRvYyIsIm5vZGUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsInJ0cmltIiwiaXNBcnJheUxpa2UiLCJsZW5ndGgiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImVsZW0iLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImVuZCIsInNvcnQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwiZXhwYW5kbyIsInJhbmRvbSIsImlzUmVhZHkiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiaXRlcmF0b3IiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibm90IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsInJvb3QiLCJmb2N1cyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsInRhYkluZGV4IiwiZW5hYmxlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsInRva2VuIiwiY29tcGlsZWQiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwidGFyZ2V0cyIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsIm1ldGhvZCIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZGlzYWJsZSIsImxvY2siLCJmaXJlV2l0aCIsIkRlZmVycmVkIiwiZnVuYyIsInR1cGxlcyIsInN0YXRlIiwiYWx3YXlzIiwiY2F0Y2giLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInNldFRpbWVvdXQiLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJyZWFkeUV4Y2VwdGlvbiIsInJlYWR5TGlzdCIsImNvbXBsZXRlZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJkaXNwbGF5IiwiY3NzIiwic3dhcCIsIm9sZCIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsIm5vQnViYmxlIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwicHJvcHMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiY29sdW1uQ291bnQiLCJmaWxsT3BhY2l0eSIsImZsZXhHcm93IiwiZmxleFNocmluayIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0IiwicmVzcG9uc2VUeXBlIiwiYmluYXJ5IiwidGV4dCBzY3JpcHQiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJfdGlueWJpbmQiLCJfYmluZGluZyIsIl9jb21wb25lbnQiLCJfY29tcG9uZW50QmluZGluZyIsIl9wYXJzZXJzIiwiX2RlYnVnIiwiVmlldyIsIm1vZGVscyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsImJ1aWxkIiwiYmluZGluZyIsImFuY2hvckVsIiwidGVtcGxhdGUiLCJtYXJrZXIiLCJkZWNsYXJhdGlvbiIsImJpbmRlciIsInBhcnNlZERlY2xhcmF0aW9uIiwicGFyc2VEZWNsYXJhdGlvbiIsImtleXBhdGgiLCJwaXBlcyIsImJpbmRpbmdzIiwiQmluZGluZyIsInRlbXBsYXRlRGVsaW1pdGVycyIsInBhcnNlTm9kZSIsImJpbmRpbmdDb21wYXJhdG9yIiwiYmluZGluZ1ByZWZpeCIsImZ1bGxQcmVmaXgiLCJibG9jayIsImJpbmRJbmZvcyIsInN0YXJCaW5kZXJzIiwiYmluZGVycyIsImF0dHJpYnV0ZSIsImsiLCJUaW55YmluZCIsImZhbGxiYWNrQmluZGVyIiwiYnVpbGRCaW5kaW5nIiwiYmluZEluZm8iLCJjb21wb25lbnRzIiwiX2JvdW5kIiwiQ29tcG9uZW50U2VydmljZSIsIkNvbXBvbmVudEJpbmRpbmciLCJDT01QT05FTlQiLCJjdXN0b21FbGVtZW50cyIsImRlZmluZSIsImZvckVhY2giLCJzeW5jIiwicHVibGlzaCIsInB1Ymxpc2hlcyIsIl90aGlzIiwidXBkYXRlIiwicm91dGluZSIsImFQcmlvcml0eSIsInByaW9yaXR5IiwiUFJJTUlUSVZFIiwiUVVPVEVEX1NUUiIsIl91dGlscyIsImlzSnNvbiIsIktFWVBBVEgiLCJwYXJzZVRlbXBsYXRlIiwidGV4dEJpbmRlciIsInRyYXZlcnNlIiwiREVDTEFSQVRJT05fU1BMSVQiLCJfdmlldyIsIlRFWFQiLCJCSU5ESU5HIiwiZGVsaW1pdGVycyIsImxhc3RJbmRleCIsImNsb3NlIiwic3Vic3RyaW5nIiwibGFzdFRva2VuIiwidGlueWJpbmRVdGlscyIsInRhcmciLCJzcmNFbGVtZW50IiwicG9zeCIsInBvc3kiLCJ4IiwieSIsIiRlbCIsInBhZ2VZU2Nyb2xsIiwicGFnZVhTY3JvbGwiLCJmaXhlZC14IiwiZml4ZWQteSIsIiRlbGVtZW50IiwicGFyZW50U2VsZWN0b3IiLCJlbGVtZW50UG9zIiwiZ2V0RWxlbWVudFBvc2l0aW9uIiwicGFyZW50RWxlbWVudFBvcyIsIiRwYXJlbnQiLCJwYXJlbnRQb3MiLCJtb3VzZVBvc0RvYyIsImV2ZW50UG9zaXRpb25Eb2N1bWVudCIsImV2ZW50VGFyZ2V0IiwidGFyZ2V0UG9zIiwiZWxlbWVudCIsImlzT2JqZWN0IiwiY29tcG9uZW50IiwidGFnTmFtZSIsImNvbXBvbmVudFdyYXBwZXIiLCJyZWdpc3QiLCJPYnNlcnZlciIsIm9iamVjdFBhdGgiLCJwYXJzZVJlc3VsdCIsImdldFJvb3RPYmplY3QiLCJyZWFsaXplIiwiYWRhcHRlcnMiLCJyb290SW50ZXJmYWNlIiwiaW50ZXJmYWNlcyIsImNociIsInBhdGgiLCJjaGFyQXQiLCJzdWJzdHIiLCJ1bnJlYWNoZWQiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsInJvb3RQcm9wIiwiX2Zvcm1hdHRlciIsIl9hZGFwdGVyIiwiX2JpbmRlciIsIl9vYnNlcnZlciIsIi4iLCJhZGFwdGVyIiwicGFyc2VUeXBlIiwiYmluZGVyU2VydmljZSIsIkJpbmRlcnNTZXJ2aWNlIiwiY29tcG9uZW50U2VydmljZSIsImZvcm1hdHRlclNlcnZpY2UiLCJGb3JtYXR0ZXJTZXJ2aWNlIiwiaW5zdGFuY2UiLCJfcHJlZml4IiwiX2Z1bGxQcmVmaXgiLCJldiIsInByZWxvYWREYXRhIiwiY29tcG9uZW50S2V5Iiwic2NvcGUiLCJpbml0aWFsaXplIiwidmlld09wdGlvbnMiLCJnZXRWaWV3T3B0aW9ucyIsInVwZGF0ZU9wdGlvbnMiLCJHbG9iYWxFdmVudCIsImYiLCJfbGVuIiwiX2tleSIsIkJhc2VUcmFuc2l0aW9uIiwiJG9sZENvbnRhaW5lciIsIm5ld0NvbnRhaW5lciIsIm5ld0NvbnRhaW5lclJlYWR5IiwibmV3Q29udGFpbmVyTG9hZGluZyIsIiRuZXdDb250YWluZXIiLCJfaW5kZXgiLCJfY291bnQiLCJzdGF0aWMiLCJvYnNlcnZlcnMiLCJwYXJzZVRhcmdldCIsInByb3BlcnR5TmFtZSIsInNldFZhbHVlIiwiX3RoaXMyIiwiZ3JvdXBlZCIsImxvY2FscyIsImdldE1lcmdlZE9wdGlvbnMiLCJrZXlwYXRocyIsIl90aGlzMyIsImZvcm1hdHRlcnNPYnNlcnZlcnMiLCJmb3JtYXR0ZXJJbmRleCIsImFpIiwibW9kZWwiLCJjdXN0b21EYXRhIiwib2JzZXJ2ZXIiLCJtb2RlbE5hbWUiLCJfcmVmIiwiZm9ybWF0dGVyT2JzZXJ2ZXJzIiwicmVkdWNlIiwiRk9STUFUVEVSX0FSR1MiLCJmb3JtYXR0ZXJSZWFkRnVuY3Rpb24iLCJmb3JtYXR0ZXIiLCJwcm9jZXNzZWRBcmdzIiwicGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMiLCJyZWFkIiwiX3RvQ29uc3VtYWJsZUFycmF5Iiwicm91dGluZUZuIiwiZnVuY3Rpb24iLCJmb3JtYXR0ZWRWYWx1ZSIsIl90aGlzNCIsInJlZHVjZVJpZ2h0IiwiRk9STUFUVEVSX1NQTElUIiwiX3JlZjIiLCJnZXRWYWx1ZSIsIl90aGlzNSIsImZpIiwiZ2V0SW5wdXRWYWx1ZSIsImJpbmRlcldyYXBwZXIiLCJBZGFwdGVyIiwiY291bnRlciIsIndlYWttYXAiLCJfX3J2IiwiY2FsbGJhY2tzIiwicmVmIiwicG9pbnRlcnMiLCJ3ZWFrUmVmZXJlbmNlIiwiQVJSQVlfTUVUSE9EUyIsInN0dWJGdW5jdGlvbiIsImNsZWFudXBXZWFrUmVmZXJlbmNlIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVub2JzZXJ2ZU11dGF0aW9ucyIsIl9jYWxsYmFja3MiLCJvYnNlcnZlTXV0YXRpb25zIiwiX0hpc3RvcnlNYW5hZ2VyIiwiX2V4cG9ydE5hbWVzIiwiX0RvbSIsIl9QcmVmZXRjaCIsIl9nbG9iYWxFdmVudCIsIl9DYWNoZSIsIl9UcmFuc2l0aW9uIiwiUGpheCIsIkhpc3RvcnlNYW5hZ2VyIiwiSGlkZVNob3dUcmFuc2l0aW9uIiwiZ2V0SHJlZiIsImhvc3RuYW1lIiwiZ2V0UG9ydCIsImNsZWFuTGluayIsImNsYXNzTGlzdCIsImlnbm9yZUNsYXNzTGluayIsIiR3cmFwcGVyIiwidHJhbnNpdGlvbiIsImRvbSIsIkRvbSIsImdldFVybCIsIm5ld1RhYiIsIm9uU3RhdGVDaGFuZ2UiLCJmb3JjZUdvVG8iLCJMb2NhdGlvbiIsIiRjb250YWluZXIiLCJwYXJzZVJlc3BvbnNlIiwicHV0Q29udGFpbmVyIiwiY2FjaGVFbmFibGVkIiwicHJldmVudENoZWNrIiwiZGlzcGF0Y2hlciIsImdvVG8iLCJuZXdVcmwiLCJnZXRDdXJyZW50VXJsIiwidHJhbnNpdGlvblByb2dyZXNzIiwiY3VycmVudFN0YXR1cyIsImdldFRyYW5zaXRpb24iLCJwcmV2U3RhdHVzIiwidHJhbnNpdGlvbkluc3RhbmNlIiwiZ2V0Q29udGFpbmVyIiwib25OZXdDb250YWluZXJMb2FkZWQiLCJvblRyYW5zaXRpb25FbmQiLCJnZXROYW1lc3BhY2UiLCJjdXJyZW50SFRNTCIsImJpbmRFdmVudHMiLCJCYXNlQ2FjaGUiLCJfQ3VzdG9tVHJhbnNpdGlvbiIsIl9CYXNlVHJhbnNpdGlvbiIsIl9IaWRlU2hvd1RyYW5zaXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicGpheCIsInByZWZldGNoIiwiUHJlZmV0Y2giLCIkcHJvZHVjdHMiLCJvblByb2R1Y3RUYXAiLCJjb250cm9sbGVyIiwiZXZlbnRFbCIsIm9uUHJvZHVjdE1vdXNlZW50ZXIiLCJvbkxpbmtFbnRlciIsIm9uU2Nyb2xsIiwicHJvZHVjdCIsInByb2R1Y3REYXRhIiwiZGF0YXNldCIsInBhcmVudFJlY3QiLCJlbGVtZW50UmVjdCIsImVsZW1lbnRNaWRkbGUiLCJjZW50ZXJYIiwiUHJvZHVjdFNjcm9sbGJhclJpYmFDb21wb25lbnQiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX2dldFByb3RvdHlwZU9mIiwiUmliYUNvbXBvbmVudCIsIl9uYXZJdGVtc0NvbXBvbmVudCIsImxpbmtsaXN0IiwicGlsbHMiLCJ2ZXJ0aWNhbCIsIl9pY29uc2V0Q29tcG9uZW50Iiwic3lzdGVtIiwiYXNzZXRzUGF0aCIsImRpcmVjdGlvbiIsInNpemUiLCJjbGFzc1N0cmluZyIsIl9jb250YWN0Q29tcG9uZW50IiwicmVnYXJkcyIsIm1haWwiLCJwaG9uZSIsIl9jb250YWN0IiwiX2ljb25zZXQiLCJfbmF2SXRlbXMiLCJfcHJvZHVjdFNjcm9sbGJhciIsIkRyYWdzY3JvbGwiLCJkZXRlY3RHbG9iYWxNb3ZlIiwibWQiLCJtdSIsIm1tIiwicHVzaGVkIiwibGFzdENsaWVudFgiLCJsYXN0Q2xpZW50WSIsIm5ld1Njcm9sbFgiLCJuZXdTY3JvbGxZIiwiX1V0aWxzIiwiY29udGVudGVkaXRhYmxlIiwiYmFja2dyb3VuZEltYWdlIiwiaW1hZ2VCb3giLCJyYXRpb1N0cmluZ3MiLCJyYXRpb3MiLCJoZWlnaHRJblBlcmNlbnQiLCJyYXRpb0NsYXNzIiwiaHRtbE5vZGVzIiwiY2xhc3NBZGRSZW1vdmUiLCJodG1sU3RyaW5nIiwiZ2V0V2lkdGgiLCJnZXRWaWV3cG9ydERpbWVuc2lvbnMiLCJvdXRlcldpZHRoIiwiYW5nbGUiLCJqdW1wcyIsIm1heFNjcm9sbFdpZHRoIiwicmVzaXplIiwic2Nyb2xsIiwiaW5pdEF1dG9zY3JvbGwiLCJfYXV0b3Njcm9sbCIsIl9tYWlsdG8iLCJfdGVsIiwiX2ZvckZyb21UbyIsIl9yZW1vdmVDbGFzcyIsIl9hZGRDbGFzcyIsIl9jbGFzc0FkZFJlbW92ZSIsIl9hcHBlbmRIdG1sIiwiX2ltYWdlQm94IiwiX2JhY2tncm91bmRJbWFnZSIsIl92YWx1ZSIsIl9zY3JvbGxiYXJEcmFnYWJsZSIsIkZha2VIVE1MRWxlbWVudCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJIVE1MRWxlbWVudCIsInNldFByb3RvdHlwZU9mIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJhdHRyaWJ1dGVOYW1lIiwib2xkRG9jdW1lbnQiLCJuZXdEb2N1bWVudCIsImV2ZW50SGFuZGxlciIsIlJpYmFDb21wb25lbnRDbGFzcyIsInNpbmd1bGFyIiwicGx1cmFsIiwiX2VtcHR5IiwiX2FwcGVuZCIsIl9kb3duY2FzZSIsIl9maWxsZWQiLCJfaXNTdHJpbmciLCJfcGx1cmFsaXplIiwiX3ByZXBlbmQiLCJfc2xpY2UiLCJfc3RyaXAiLCJfdXBjYXNlIiwic3RyaW5nRm9ybWF0dGVycyIsImRvd25jYXNlIiwiZmlsbGVkIiwicGx1cmFsaXplIiwic3RyaXAiLCJ1cGNhc2UiLCJhbW91bnQiLCJzeW1ib2wiLCJ0b0ZpeGVkIiwiY29uc29sZURlYnVnIiwiX2RlZiIsIl9jdXJyZW5jeSIsInNwZWNpYWxGb3JtYXR0ZXJzIiwiZGVmIiwiY3VycmVuY3kiLCJhcnJheSIsInJlZ2V4cCIsImZsYWdzIiwiX2dldCIsImpzb25TdHJpbmciLCJfcGFyc2UiLCJfanNvbiIsIl9maXJzdCIsIl9sYXN0IiwiX2NvbnRhaW5zIiwiX3NldCIsIl9tYXRjaCIsIl9pc0xhc3QiLCJwcm9wZXJ0eUZvcm1hdHRlcnMiLCJpc0xhc3QiLCJnY2QiLCJmbG9vciIsIl9yYW5kb20iLCJfcGx1cyIsIl9taW51cyIsIl90aW1lcyIsIl9kaXZpZGVkQnkiLCJfbW9kdWxvIiwiX2djZCIsIl9ldmVuIiwiX3VuZXZlbiIsIl9kaWdpdHMiLCJtYXRoRm9ybWF0dGVycyIsImRpZ2l0cyIsImRpdmlkZWRCeSIsIm1pbnVzIiwibW9kdWxvIiwicGx1cyIsInRpbWVzIiwidW5ldmVuIiwiX2FuZCIsIl9lcSIsIl9uZSIsIl9sdCIsIl9lbHQiLCJfb3IiLCJfbm90IiwiY29tcGFyZUZvcm1hdHRlcnMiLCJhbmQiLCJlbHQiLCJuZSIsIm9yIiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsImV2ZW50TmFtZSIsIl9lbmFibGVkIiwiX2Rpc2FibGVkIiwiX29uU3RhciIsIm9uLSoiLCJvblN0YXJCaW5kZXJXcmFwcGVyIiwiZWFjaC0qIiwiaXRlcmF0ZWQiLCJpbmRleFByb3AiLCJnZXRJdGVyYXRpb25BbGlhcyIsIm1hdGNoSW5kZXgiLCJuZXh0VmlldyIsIm5leHRJbmRleCIsInByZXZpb3VzIiwiY2xhc3MtKiIsImVsZSIsImdldFN0cmluZyIsImlzUmFkaW8iLCJIVE1MU2VsZWN0RWxlbWVudCIsImlmIiwiYm91bmQiLCJuZXN0ZWQiLCJhdHRhY2hlZCIsImlzQWJzb2x1dGVVcmwiLCJhbHJlYWR5T25VUkwiLCJjaGVja1VybCIsImNoZWNrVVJMIiwidXJsVG9DaGVjayIsInJvdXRlckRpc3BhdGNoZXIiLCJuZXdQYWdlUmF3SFRNTCIsImlzSW5pdCIsIlJpdmV0c1ZpZXciLCJfUGpheCIsImF1dG9iaW5kTGlua3MiLCJfJHdyYXBwZXIiLCIkbmV3UGFnZSIsIiR0aXRsZSIsInBhcnNlQ29udGFpbmVyIiwiZ2V0V3JhcHBlciIsImNvbnRhaW5lclNlbGVjdG9yIiwiQmFzZVZpZXciLCJuZXdTdGF0dXMiLCJvbGRTdGF0dXMiLCJvbkxlYXZlIiwib25FbnRlciIsIm9uRW50ZXJDb21wbGV0ZWQiLCJvbkxlYXZlQ29tcGxldGVkIiwiX0Jhc2VUcmFuc2l0aW9uMiIsIkN1c3RvbVRyYW5zaXRpb24iLCJfVmlldyIsIl9iYXJiYSIsIl9yb3V0ZSIsInJvdXRlckJpbmRlcnMiLCJ2aWV3QmluZGVyV3JhcHBlciIsInZpZXdCaW5kZXIiLCJyb3V0ZUJpbmRlcldyYXBwZXIiLCJyb3V0ZUJpbmRlciIsIl9yb3V0ZXIiLCJfYmFzaWMiLCJfd2ViY29tcG9uZW50IiwiYXR0ckZuIiwidG91Y2hDYXBhYmxlIiwidGFwX3BpeGVsX3JhbmdlIiwic3dpcGVfaF90aHJlc2hvbGQiLCJzd2lwZV92X3RocmVzaG9sZCIsInRhcGhvbGRfdGhyZXNob2xkIiwiZG91YmxldGFwX2ludCIsInNoYWtlX3RocmVzaG9sZCIsInRvdWNoX2NhcGFibGUiLCJvcmllbnRhdGlvbl9zdXBwb3J0Iiwic3RhcnRldmVudCIsImVuZGV2ZW50IiwibW92ZWV2ZW50IiwidGFwZXZlbnQiLCJzY3JvbGxldmVudCIsImhvbGRfdGltZXIiLCJ0YXBfdGltZXIiLCJ0b3VjaCIsImlzVG91Y2hDYXBhYmxlIiwiZ2V0U3RhcnRFdmVudCIsImdldEVuZEV2ZW50IiwiZ2V0TW92ZUV2ZW50IiwiZ2V0VGFwRXZlbnQiLCJnZXRTY3JvbGxFdmVudCIsInNldFN3aXBlVGhyZXNob2xkWCIsInRocmVzaG9sZCIsInNldFN3aXBlVGhyZXNob2xkWSIsInNldERvdWJsZVRhcEludCIsInNldFRhcEhvbGRUaHJlc2hvbGQiLCJzZXRUYXBSYW5nZSIsInJhbmdlIiwidGFwc3RhcnQiLCJ0aGlzT2JqZWN0IiwiJHRoaXMiLCJ0YXBTdGFydEZ1bmMiLCJvcmlnRXZlbnQiLCJ0b3VjaERhdGEiLCJ0cmlnZ2VyQ3VzdG9tRXZlbnQiLCJjYWxsZWUiLCJ0YXBtb3ZlIiwidGFwTW92ZUZ1bmMiLCJ0YXBlbmQiLCJ0YXBFbmRGdW5jIiwidGFwaG9sZCIsIm9yaWdUYXJnZXQiLCJzdGFydF9wb3MiLCJlbmRfeCIsImVuZF95IiwidGFwSG9sZEZ1bmMxIiwic3RhcnRfdGltZSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJlbGVfdGhyZXNob2xkIiwiZGlmZl94IiwiZGlmZl95IiwiZW5kX3RpbWUiLCJldnRfbmFtZSIsInRhcEhvbGRGdW5jMiIsInRhcEhvbGRGdW5jMyIsImNhbGxlZTEiLCJjYWxsZWUyIiwiY2FsbGVlMyIsImRvdWJsZXRhcCIsImFjdGlvbiIsImZpcnN0VGFwIiwiY29vbGluZyIsImRvdWJsZVRhcEZ1bmMxIiwiZG91YmxlVGFwRnVuYzIiLCJsYXN0VG91Y2giLCJsYXN0VGFwIiwic2Vjb25kVGFwIiwic2luZ2xldGFwIiwic2luZ2xlVGFwRnVuYzEiLCJzaW5nbGVUYXBGdW5jMiIsImVuZF9wb3NfeCIsImVuZF9wb3NfeSIsInRhcCIsInN0YXJ0ZWQiLCJ0YXBGdW5jMSIsInRhcEZ1bmMyIiwic3dpcGUiLCJzdGFydEV2bnQiLCJoYXNTd2lwZWQiLCJvcmlnaW5hbENvb3JkIiwiZmluYWxDb29yZCIsInRvdWNoU3RhcnQiLCJ0b3VjaE1vdmUiLCJzd2lwZWRpciIsImVsZV94X3RocmVzaG9sZCIsImVsZV95X3RocmVzaG9sZCIsImhfdGhyZXNob2xkIiwidl90aHJlc2hvbGQiLCJlbmRFdm50IiwieEFtb3VudCIsImFicyIsInlBbW91bnQiLCJ0b3VjaEVuZCIsInNjcm9sbHN0YXJ0Iiwic2Nyb2xsaW5nIiwic2Nyb2xsRnVuYyIsImdldF9vcmllbnRhdGlvbiIsImxhc3Rfb3JpZW50YXRpb24iLCJpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSIsImluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCIsInBvcnRyYWl0X21hcCIsIjE4MCIsInd3Iiwid2giLCJvcmllbnRhdGlvbiIsIi05MCIsIjkwIiwib3JpZW50YXRpb25jaGFuZ2UiLCJvbGRfaGFuZGxlciIsInRocm90dGxlZHJlc2l6ZSIsInRocm90dGxlX2hhbmRsZXIiLCJoZWxkQ2FsbCIsImN1cnIiLCJsYXN0Q2FsbCIsImV2ZW50VHlwZSIsIm9yaWdpbmFsVHlwZSIsInNjcm9sbGVuZCIsInN3aXBldXAiLCJzd2lwZXJpZ2h0Iiwic3dpcGVkb3duIiwic3dpcGVsZWZ0Iiwic3dpcGVlbmQiLCJ0YXAyIiwidGFwaG9sZDIiLCJzcmNFIiwibXMiLCJsb25nIiwiZm10U2hvcnQiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiY29lcmNlIiwiZm9ybWF0Iiwic2VsZWN0Q29sb3IiLCJkZXN0cm95IiwiaW5zdGFuY2VzIiwibmFtZXMiLCJza2lwcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiTWFpbiIsInRpbnliaW5kIiwiY29udGFjdENvbXBvbmVudCIsIm5hdkl0ZW1zQ29tcG9uZW50IiwiaWNvbnNldENvbXBvbmVudCIsImJhc2ljQmluZGVycyIsImJhc2ljQmluZGVyc1dyYXBwZXIiLCJKUXVlcnkiLCJyZWdpc3RzIiwic2Nyb2xsYmFyRHJhZ2FibGVCaW5kZXIiLCJyZWdpc3RXcmFwcGVyIiwiYXV0b3Njcm9sbEJpbmRlciIsInJlbW92ZUNsYXNzQmluZGVyIiwiYWRkQ2xhc3NCaW5kZXIiLCJ2YWx1ZUJpbmRlciJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxT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MUQsU0FBU25oQixpQkFBaUIwaEIsUUFBUXRQLHFCQUN2Q3JtRCxLQUFLbzFELFNBQVNuaEIsaUJBQWlCMGhCLFFBQVFyUSxrQkFDdkN0bEQsS0FBS28xRCxTQUFTbmhCLGlCQUFpQjBoQixRQUFRblIsc0JBQ3ZDeGtELEtBQUtvMUQsU0FBU25oQixpQkFBaUIwaEIsUUFBUW5TLHFCQUN2Q3hqRCxLQUFLbzFELFNBQVNuaEIsaUJBQWlCMGhCLFFBQVEvUyxvQkFFdkM1aUQsS0FBSyt1QixLQUFPL3VCLEtBQUtvMUQsU0FBU2ozRCxNQUFLLEVBQUFRLEVBQUEyRCxTQUFPLFFBQVEsR0FBSUUsT0FBT2cwQyxrQkFRN0QsRUFBQTczQyxFQUFBMkQsU0FBTyxTQUFDeXBDLEdBQ08sSUFBSW9wQiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEwKTtcbiIsImltcG9ydCBqUXVlcnkgZnJvbSAnanF1ZXJ5JztcblxuLy8gVE9ET1xuZXhwb3J0IGludGVyZmFjZSBJRGVmZXJyZWQge1xuICByZXNvbHZlOiBhbnk7XG4gIHJlamVjdDogYW55O1xufVxuXG4vKipcbiAqIFRlc3QgaWYgc3RyaW5nIGlzIGEganNvbiBzdHJpbmdcbiAqIEBwYXJhbSBzdHJcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSnNvbiA9IChzdHI6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHZhbCA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgICByZXR1cm4gKHZhbCBpbnN0YW5jZW9mIEFycmF5IHx8IHZhbCBpbnN0YW5jZW9mIE9iamVjdCkgPyB0cnVlIDogZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgdmFsdWUgaXMgYW4gb2JqZWN0IHRoYW4gY2FuIGJlIG9ic2VydmVkLlxuICogQHBhcmFtIG9ialxuICovXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAob2JqOiBvYmplY3QpID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTdHJpbmcgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgdGltZXMgPSAobjogbnVtYmVyLCBjYjogKCkgPT4gdm9pZCkgPT4ge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGNiKCk7XG4gIH1cbn07XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNvbnN0IGdldElucHV0VmFsdWUgPSAoZWw6IEhUTUxTZWxlY3RFbGVtZW50IHwgSFRNTElucHV0RWxlbWVudCkgPT4ge1xuICBjb25zdCByZXN1bHRzOiBzdHJpbmdbXSA9IFtdO1xuICBpZiAoZWwudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgIHJldHVybiAoZWwgYXMgSFRNTElucHV0RWxlbWVudCkuY2hlY2tlZDtcbiAgfSBlbHNlIGlmIChlbC50eXBlID09PSAnc2VsZWN0LW11bHRpcGxlJykge1xuICAgIGNvbnN0IG9wdGlvbnM6IEhUTUxPcHRpb25zQ29sbGVjdGlvbiA9IChlbCBhcyBIVE1MU2VsZWN0RWxlbWVudCkub3B0aW9ucztcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gb3B0aW9uc1trZXldO1xuICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWwudmFsdWU7XG4gIH1cbn07XG5cbi8qKlxuICogSnVzdCBhbiBDbGFzcyB3aXRoIHNvbWUgaGVscGZ1bCBmdW5jdGlvbnNcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgVXRpbHNcbiAqL1xuZXhwb3J0IGNsYXNzIFV0aWxzIHtcblxuICAvKipcbiAgICogVGltZSBpbiBtaWxsaXNlY29uZCBhZnRlciB0aGUgeGhyIHJlcXVlc3QgZ29lcyBpbiB0aW1lb3V0XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5VdGlsc1xuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB4aHJUaW1lb3V0OiA1MDAwO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNVbmRlZmluZWQodmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mKHZhbHVlKSA9PT0gJ3VuZGVmaW5lZCc7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgaXMgdW5kZWZpbmVkXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzRGVmaW5lZCh2YWx1ZT86IGFueSkge1xuICAgIHJldHVybiAhdGhpcy5pc1VuZGVmaW5lZCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBmdW5jdGlvblxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0Z1bmN0aW9uKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mKHZhbHVlKSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YXJpYWJsZSBpcyBhbiBBcnJheVxuICAgKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80Nzc1NzM3LzE0NjU5MTlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNBcnJheSh2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCggdmFsdWUgKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHZhcmlhYmxlIGlzIG51bWJlciBvciBzdHJpbmcgaW4gSmF2YVNjcmlwdFxuICAgKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDIxOTg4LzE0NjU5MTlcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNOdW1iZXIodmFsdWU/OiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSAmJiAhaXNOYU4odmFsdWUgLSAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBoZWNrIGlmIHR5cGUgaXMgT2JqZWN0XG4gICAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3NzU3MzcvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc09iamVjdCh2YWx1ZT86IGFueSkge1xuICAgIHJldHVybiB0aGlzLmlzRGVmaW5lZCh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0eXBlIGlzIEJvb2xlYW5cbiAgICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjg4MTQ2MTUvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0Jvb2xlYW4odmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mKHZhbHVlKSA9PT0gdHlwZW9mKHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhbHVlIGlzIGEgc3RyaW5nXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzU3RyaW5nKHZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNEZWZpbmVkKHZhbHVlKSAmJiB0eXBlb2YodmFsdWUpID09PSAnc3RyaW5nJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBzdHJpbmcgY29udGFpbnMgYSBudW1iZXJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RyaW5nSGFzTnVtYmVyKHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5pc1N0cmluZyh2YWx1ZSkgJiYgL1xcZC8udGVzdCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbnVtYmVyc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdHJpbmdIYXNPbmx5TnVtYmVyKHZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuIC9eXFxkKyQvLnRlc3QodmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHN0cmluZyBjb250YWlucyBvbmx5IG51bWJlcnMsICssIC0gYW5kICgpXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0cmluZ0lzUGhvbmVOdW1iZXIodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiAvXlswLTkgKCkrLV0rJC8udGVzdCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSnVzdCBnZXQgdGhlIGRpZ2l0cyBvZiBhIHN0cmluZywgdXNlZnVsIHRvIHJlbW92ZSBweCBwaXhlbCBmcm9tIGNzcyB2YWx1ZVxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExMDA2NTMvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBqdXN0RGlnaXRzKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgbnVtID0gc3RyLnJlcGxhY2UoL1teLVxcZFxcLl0vZywgJycpO1xuICAgIGlmICghVXRpbHMuaXNOdW1iZXIobnVtKSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOdW1iZXIobnVtKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgdGhlIGNvbnRlbnRzIG9mIHR3byBvciBtb3JlIG9iamVjdHMgdG9nZXRoZXIgaW50byB0aGUgZmlyc3Qgb2JqZWN0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZXAgSWYgdHJ1ZSwgdGhlIG1lcmdlIGJlY29tZXMgcmVjdXJzaXZlIChha2EuIGRlZXAgY29weSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXQgQW4gb2JqZWN0IHRoYXQgd2lsbCByZWNlaXZlIHRoZSBuZXcgcHJvcGVydGllcyBpZiBhZGRpdGlvbmFsIG9iamVjdHMgYXJlIHBhc3NlZCBpbiBvciB0aGF0IHdpbGwgZXh0ZW5kIHRoZSBqUXVlcnkgbmFtZXNwYWNlIGlmIGl0IGlzIHRoZSBzb2xlIGFyZ3VtZW50LlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0MSBBbiBvYmplY3QgY29udGFpbmluZyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb2JqZWN0Tl0gQWRkaXRpb25hbCBvYmplY3RzIGNvbnRhaW5pbmcgcHJvcGVydGllcyB0byBtZXJnZSBpbi5cbiAgICogQHJldHVybnNcbiAgICogQG1lbWJlcm9mIFV0aWxzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGV4dGVuZChkZWVwOiBib29sZWFuLCB0YXJnZXQ6IG9iamVjdCwgb2JqZWN0MTogb2JqZWN0LCBvYmplY3ROPzogb2JqZWN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoZGVlcCkge1xuICAgICAgcmVzdWx0ID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB0YXJnZXQsIG9iamVjdDEsIG9iamVjdE4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQYXNzaW5nIGZhbHNlIGZvciBkZWVwIGFyZ3VtZW50IGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgICByZXN1bHQgPSBqUXVlcnkuZXh0ZW5kKHRhcmdldCwgb2JqZWN0MSwgb2JqZWN0Tik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29uY2F0IHRoZSBjb250ZW50cyBvZiB0d28gb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVlcCBJZiB0cnVlLCB0aGUgbWVyZ2UgYmVjb21lcyByZWN1cnNpdmUgKGFrYS4gZGVlcCBjb3B5KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9iamVjdDEgQW4gZmlyc3Qgb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyB0byBjb25jYXQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QyIFRoZSBzZWNvbmQgb2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyB0byBjb25jYXQuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNvbmNhdChkZWVwOiBib29sZWFuLCBvYmplY3QxPzogb2JqZWN0LCBvYmplY3QyPzogb2JqZWN0KTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoZGVlcCwge30sIG9iamVjdDEgfHwge30sIG9iamVjdDIgfHwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIFhNTEh0dHBSZXF1ZXN0KCkgYW5kIHJldHVybiBhIFByb21pc2VcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdXJsXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHhocih1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAocmVxLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoJ3hocjogSFRUUCBjb2RlIGlzIG5vdCAyMDAnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVxLm9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKCd4aHI6IFRpbWVvdXQgZXhjZWVkZWQnKSk7XG4gICAgfTtcblxuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwpO1xuICAgIHJlcS50aW1lb3V0ID0gdGhpcy54aHJUaW1lb3V0O1xuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCd4LWJhcmJhJywgJ3llcycpO1xuICAgIHJlcS5zZW5kKCk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBuZXcgXCJEZWZlcnJlZFwiIG9iamVjdFxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL01vemlsbGEvSmF2YVNjcmlwdF9jb2RlX21vZHVsZXMvUHJvbWlzZS5qc20vRGVmZXJyZWRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEByZXR1cm4ge0lEZWZlcnJlZH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVmZXJyZWQoKTogYW55IHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGNvbnN0IHByb20gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4ge1xuICAgICAgb2JqLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgb2JqLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcbiAgICBvYmoucHJvbWlzZSA9IHByb207XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgaG9zdG5hbWUgYW4gcGF0aCBvZiBhZGRyZXNzIGJhclxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzczNjk3MC8xNDY1OTE5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBsID0gZ2V0TG9jYXRpb24oXCJodHRwOi8vZXhhbXBsZS5jb20vcGF0aFwiKTtcbiAgICogY29uc29sZS5kZWJ1ZyhsLmhvc3RuYW1lKVxuICAgKiA+PiBcImV4YW1wbGUuY29tXCJcbiAgICogY29uc29sZS5kZWJ1ZyhsLnBhdGhuYW1lKVxuICAgKiA+PiBcIi9wYXRoXCJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TG9jYXRpb24odXJsPzogc3RyaW5nKTogTG9jYXRpb24ge1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICAvLyBsLmhyZWYgPSBocmVmO1xuICAgIGNvbnN0IGwgPSAoalF1ZXJ5KGA8YSBocmVmPVwiJHt1cmx9XCI+PC9hPmApWzBdIGFzIEhUTUxBbmNob3JFbGVtZW50IGFzIEhUTUxIeXBlcmxpbmtFbGVtZW50VXRpbHMgYXMgTG9jYXRpb24pO1xuICAgIHJldHVybiBsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgY3VycmVudCB1cmxcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEByZXR1cm4ge3N0cmluZ30gY3VycmVudFVybFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRVcmwodXJsPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBsb2NhdGlvbiA9IFV0aWxzLmdldExvY2F0aW9uKHVybCk7XG4gICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArXG4gICAgICBsb2NhdGlvbi5ob3N0ICtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lICtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhbiB1cmwsIHJldHVybiBpdCB3aXRob3V0IHRoZSBoYXNoXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5VdGlsc1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHVybFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IG5ld0NsZWFuVXJsXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNsZWFuTGluayh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHVybC5yZXBsYWNlKC8jLiovLCAnJyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBwb3J0IG51bWJlciBub3JtYWxpemVkLCBldmVudHVhbGx5IHlvdSBjYW4gcGFzcyBhIHN0cmluZyB0byBiZSBub3JtYWxpemVkLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuVXRpbHNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7U3RyaW5nfSBwXG4gICAqIEByZXR1cm4ge0ludH0gcG9ydFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRQb3J0KHA/OiBzdHJpbmcsIHVybD86IHN0cmluZykge1xuICAgIGNvbnN0IGxvY2F0aW9uID0gVXRpbHMuZ2V0TG9jYXRpb24odXJsKTtcbiAgICBjb25zdCBwb3J0ID0gdHlwZW9mIHAgIT09ICd1bmRlZmluZWQnID8gcCA6IGxvY2F0aW9uLnBvcnQ7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBsb2NhdGlvbi5wcm90b2NvbDtcblxuICAgIGlmIChwb3J0ICE9PSAnJykge1xuICAgICAgcmV0dXJuIE51bWJlcihwb3J0KTtcbiAgICB9XG4gICAgaWYgKHByb3RvY29sID09PSAnaHR0cDonKSB7XG4gICAgICByZXR1cm4gODA7XG4gICAgfVxuXG4gICAgaWYgKHByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgICAgcmV0dXJuIDQ0MztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGVzdCBpZiB1cmwgaXMgYWJzb2x1dGUgb3IgcmVsYXRpdmVcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNBYnNvbHV0ZVVybCh1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IHBhdCA9IC9eaHR0cHM/OlxcL1xcLy9pO1xuICAgIHJldHVybiBwYXQudGVzdCh1cmwpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldCBwYXJhbSBmcm9tIGhhc2hcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VXJsUGFyYW1ldGVyKG5hbWU6IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoJ1s/Jl0nICsgbmFtZSArICcoPShbXiYjXSopfCZ8I3wkKScpO1xuICAgIGNvbnN0IHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gICAgaWYgKCFyZXN1bHRzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHRzWzJdKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGhhc2ggZnJvbSBhZGRyZXNzIGJhciBvciB1cmwgaWYgc2V0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEhhc2godXJsPzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFV0aWxzLmdldExvY2F0aW9uKHVybCkuaGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgaGFzaCBmcm9tIGFkZHJlc3MgYmFyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHVwZGF0ZUhhc2goaGFzaDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgaGFzaCBmcm9tIGFkZHJlc3MgYmFyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJlbW92ZUhhc2goKSB7XG4gICAgcmV0dXJuIGhpc3RvcnkucHVzaFN0YXRlKCcnLCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldFZpZXdwb3J0RGltZW5zaW9ucygpICB7XG4gICAgY29uc3QgdyA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgY29uc3QgaCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICByZXR1cm4ge1xuICAgICAgaCxcbiAgICAgIHcsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgYSBtb25ldGFyeSBhbW91bnQgdXNpbmcgU2hvcGlmeSdzIGZvcm1hdE1vbmV5IGlmIGF2YWlsYWJsZS5cbiAgICogSWYgaXQncyBub3QgYXZhaWxhYmxlLCBqdXN0IHJldHVybiB0aGUgdmFsdWUuXG4gICAqIEBzb3VyY2UgaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvbGFicy9jYXJ0anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzLmNvZmZlZVxuICAgKiBAc291cmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9KdW1wTGlua05ldHdvcmsvc2hvcGlmeS1wcm9kdWN0anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxpdGllcy5qc1xuICAgKi9cbiAgLy8gcHVibGljIHN0YXRpYyBmb3JtYXRNb25leSh2YWx1ZSwgZm9ybWF0LCBmb3JtYXROYW1lLCBjdXJyZW5jeSkge1xuICAvLyAgIHZhciBfcmVmLCBfcmVmMTtcbiAgLy8gICBpZiAoY3VycmVuY3kgPT0gbnVsbCkge1xuICAvLyAgICAgY3VycmVuY3kgPSAnJztcbiAgLy8gICB9XG4gIC8vICAgaWYgKCFjdXJyZW5jeSkge1xuICAvLyAgICAgY3VycmVuY3kgPSBQcm9kdWN0SlMuc2V0dGluZ3MuY3VycmVuY3k7XG4gIC8vICAgfVxuICAvLyAgIGlmICgod2luZG93LkN1cnJlbmN5ICE9IG51bGwpICYmIGN1cnJlbmN5ICE9PSBQcm9kdWN0SlMuc2V0dGluZ3MuY3VycmVuY3kpIHtcbiAgLy8gICAgIHZhbHVlID0gQ3VycmVuY3kuY29udmVydCh2YWx1ZSwgUHJvZHVjdEpTLnNldHRpbmdzLmN1cnJlbmN5LCBjdXJyZW5jeSk7XG4gIC8vICAgICBpZiAoKCgoX3JlZiA9IHdpbmRvdy5DdXJyZW5jeSkgIT0gbnVsbCA/IF9yZWYubW9uZXlGb3JtYXRzIDogdm9pZCAwKSAhPSBudWxsKSAmJiAoY3VycmVuY3kgaW4gd2luZG93LkN1cnJlbmN5Lm1vbmV5Rm9ybWF0cykpIHtcbiAgLy8gICAgICAgZm9ybWF0ID0gd2luZG93LkN1cnJlbmN5Lm1vbmV5Rm9ybWF0c1tjdXJyZW5jeV1bZm9ybWF0TmFtZV07XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIGlmICgoKF9yZWYxID0gd2luZG93LlNob3BpZnkpICE9IG51bGwgPyBfcmVmMS5mb3JtYXRNb25leSA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAvLyAgICAgcmV0dXJuIFNob3BpZnkuZm9ybWF0TW9uZXkodmFsdWUsIGZvcm1hdCk7XG4gIC8vICAgfSBlbHNlIHtcbiAgLy8gICAgIHJldHVybiB2YWx1ZTtcbiAgLy8gICB9XG4gIC8vIH1cblxufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4zLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MsIG5vZGUgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblx0XHRcdFx0aWYgKCBub2RlWyBpIF0gKSB7XG5cdFx0XHRcdFx0c2NyaXB0WyBpIF0gPSBub2RlWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjMuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jLCBub2RlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMzYgfHwgXCJhYnNvbHV0ZVwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblx0XHQpICk7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3g7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gdmFsdWVJc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSB7XG5cblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF07XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgcHJvdmlkZSBib3JkZXItYm94IHZhbHVlc1xuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgPT09IHN0eWxlcy5wb3NpdGlvbiApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiaW1wb3J0IHsgSVZpZXdPcHRpb25zLCBUaW55YmluZCB9IGZyb20gJy4vdGlueWJpbmQnO1xuaW1wb3J0IHsgQmluZGVyLCBJVHdvV2F5QmluZGVyIH0gZnJvbSAnLi9iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBCaW5kaW5nLCBJQmluZGFibGUgfSBmcm9tICcuL2JpbmRpbmcnO1xuaW1wb3J0IHsgQ29tcG9uZW50U2VydmljZX0gZnJvbSAnLi9jb21wb25lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBDb21wb25lbnRCaW5kaW5nLCBJQm91bmRFbGVtZW50IH0gZnJvbSAnLi9jb21wb25lbnQtYmluZGluZyc7XG5pbXBvcnQgeyBwYXJzZU5vZGUsIHBhcnNlRGVjbGFyYXRpb24gfSBmcm9tICcuL3BhcnNlcnMnO1xuaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IFJpYmFDb21wb25lbnRDbGFzcywgUmliYUNvbXBvbmVudCB9IGZyb20gJy4vd2ViY29tcG9uZW50JztcblxuZXhwb3J0IHR5cGUgVEJsb2NrID0gYm9vbGVhbjtcblxuZXhwb3J0IGludGVyZmFjZSBJRGF0YUVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGRhdGE/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIGJpbmRpbmdzIGJ1aWx0IGZyb20gYSBzZXQgb2YgcGFyZW50IG5vZGVzLlxuICovXG5leHBvcnQgY2xhc3MgVmlldyB7XG4gIHB1YmxpYyBzdGF0aWMgZGVidWcgPSBEZWJ1ZygncmliYTp2aWV3Jyk7XG5cbiAgcHVibGljIHN0YXRpYyBERUNMQVJBVElPTl9TUExJVCA9IC8oKD86J1teJ10qJykqKD86KD86W15cXHwnXSooPzonW14nXSonKStbXlxcfCddKikrfFteXFx8XSspKXxeJC9nO1xuXG4gIHB1YmxpYyBzdGF0aWMgdGV4dEJpbmRlcjogSVR3b1dheUJpbmRlcjxzdHJpbmc+ID0ge1xuICAgIHJvdXRpbmU6IChub2RlOiBJRGF0YUVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgICAgIG5vZGUuZGF0YSA9ICh2YWx1ZSAhPSBudWxsKSA/IHZhbHVlIDogJyc7XG4gICAgfSxcbiAgfTtcblxuICBwdWJsaWMgc3RhdGljIGJpbmRpbmdDb21wYXJhdG9yID0gKGE6IElCaW5kYWJsZSwgYjogSUJpbmRhYmxlKSA9PiB7XG4gICAgY29uc3QgYVByaW9yaXR5ID0gYS5iaW5kZXIgPyAoKGEuYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55PikucHJpb3JpdHkgfHwgMCkgOiAwO1xuICAgIGNvbnN0IGJQcmlvcml0eSA9IGIuYmluZGVyID8gKChiLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pLnByaW9yaXR5IHx8IDApIDogMDtcbiAgICByZXR1cm4gYlByaW9yaXR5IC0gYVByaW9yaXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiB0byBDcmVhdGUgYSBuZXcgdmlldyBpbnNpdGUgb2YgYSBiaW5kaW5nXG4gICAqIEBwYXJhbSBiaW5kaW5cbiAgICogQHBhcmFtIG1vZGVsc1xuICAgKiBAcGFyYW0gYW5jaG9yRWxcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGJpbmRpbmc6IEJpbmRpbmcsIG1vZGVsczogYW55LCBhbmNob3JFbDogSFRNTEVsZW1lbnQgfCBOb2RlIHwgbnVsbCkge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gYmluZGluZy5lbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY29uc3QgdmlldyA9IG5ldyBWaWV3KCh0ZW1wbGF0ZSBhcyBOb2RlKSwgbW9kZWxzLCBiaW5kaW5nLnZpZXcub3B0aW9ucyk7XG4gICAgdmlldy5iaW5kKCk7XG4gICAgaWYgKCFiaW5kaW5nIHx8ICFiaW5kaW5nLm1hcmtlciB8fCBiaW5kaW5nLm1hcmtlci5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWaWV3XSBObyBwYXJlbnQgbm9kZSBmb3IgYmluZGluZyEnKTtcbiAgICB9XG4gICAgYmluZGluZy5tYXJrZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGVtcGxhdGUsIGFuY2hvckVsKTtcbiAgICByZXR1cm4gdmlldztcbiAgfVxuXG4gIHB1YmxpYyBlbHM6IEhUTUxDb2xsZWN0aW9uIHwgSFRNTEVsZW1lbnRbXSB8IE5vZGVbXTtcbiAgcHVibGljIG1vZGVsczogYW55O1xuICBwdWJsaWMgb3B0aW9uczogSVZpZXdPcHRpb25zO1xuICBwdWJsaWMgYmluZGluZ3M6IElCaW5kYWJsZVtdID0gW107XG4gIC8vIHB1YmxpYyBjb21wb25lbnRWaWV3OiBWaWV3IHwgbnVsbCA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBET00gZWxlbWVudHMgYW5kIHRoZSBtb2RlbCBvYmplY3RzIGZvciBiaW5kaW5nIGFyZSBwYXNzZWQgaW50byB0aGVcbiAgICogY29uc3RydWN0b3IgYWxvbmcgd2l0aCBhbnkgbG9jYWwgb3B0aW9ucyB0aGF0IHNob3VsZCBiZSB1c2VkIHRocm91Z2hvdXQgdGhlXG4gICAqIGNvbnRleHQgb2YgdGhlIHZpZXcgYW5kIGl0J3MgYmluZGluZ3MuXG4gICAqIEBwYXJhbSBlbHNcbiAgICogQHBhcmFtIG1vZGVsc1xuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZWxzOiBIVE1MQ29sbGVjdGlvbiB8IEhUTUxFbGVtZW50IHwgTm9kZSwgbW9kZWxzOiBhbnksIG9wdGlvbnM6IElWaWV3T3B0aW9ucykge1xuICAgIGlmIChlbHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5lbHMgPSBlbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxzID0gKFtlbHNdIGFzIEhUTUxFbGVtZW50W10gfCBOb2RlW10gKTtcbiAgICB9XG4gICAgdGhpcy5tb2RlbHMgPSBtb2RlbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMuYnVpbGQoKTtcbiAgfVxuXG4gIHB1YmxpYyBidWlsZEJpbmRpbmcobm9kZTogSFRNTEVsZW1lbnQgfCBUZXh0LCB0eXBlOiBzdHJpbmcgfCBudWxsLCBkZWNsYXJhdGlvbjogc3RyaW5nLCBiaW5kZXI6IEJpbmRlcjxhbnk+LCBhcmdzOiBzdHJpbmdbXSB8IG51bGwpIHtcbiAgICBjb25zdCBwYXJzZWREZWNsYXJhdGlvbiA9IHBhcnNlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pO1xuICAgIGNvbnN0IGtleXBhdGggPSBwYXJzZWREZWNsYXJhdGlvbi5rZXlwYXRoO1xuICAgIGNvbnN0IHBpcGVzID0gcGFyc2VkRGVjbGFyYXRpb24ucGlwZXM7XG4gICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBCaW5kaW5nKCh0aGlzIGFzIFZpZXcpLCAobm9kZSBhcyBIVE1MRWxlbWVudCksIHR5cGUsIGtleXBhdGgsIGJpbmRlciwgYXJncywgcGlwZXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIERPTSB0cmVlIGFuZCBidWlsZHMgYEJpbmRpbmdgIGluc3RhbmNlcyBmb3IgZXZlcnkgbWF0Y2hlZFxuICAgKiBiaW5kaW5nIGRlY2xhcmF0aW9uLlxuICAgKi9cbiAgcHVibGljIGJ1aWxkKCkge1xuICAgIHRoaXMuYmluZGluZ3MgPSBbXTtcblxuICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5lbHM7XG4gICAgbGV0IGk6IG51bWJlcjtcbiAgICBsZXQgbGVuOiBudW1iZXI7XG4gICAgZm9yIChpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICghIHRoaXMub3B0aW9ucy50ZW1wbGF0ZURlbGltaXRlcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0ZW1wbGF0ZURlbGltaXRlcnMgcmVxdWlyZWQnKTtcbiAgICAgIH1cbiAgICAgIHBhcnNlTm9kZSh0aGlzLCAoZWxlbWVudHNbaV0gYXMgSURhdGFFbGVtZW50KSwgdGhpcy5vcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycyk7XG4gICAgfVxuXG4gICAgdGhpcy5iaW5kaW5ncy5zb3J0KFZpZXcuYmluZGluZ0NvbXBhcmF0b3IpO1xuICB9XG5cbiAgcHVibGljIHRyYXZlcnNlKG5vZGU6IElCb3VuZEVsZW1lbnQpOiBUQmxvY2sge1xuXG4gICAgbGV0IGJpbmRpbmdQcmVmaXg7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5mdWxsUHJlZml4KSB7XG4gICAgICBiaW5kaW5nUHJlZml4ID0gdGhpcy5vcHRpb25zLmZ1bGxQcmVmaXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE8gRklYTUVcbiAgICAgIGJpbmRpbmdQcmVmaXggPSB0aGlzLm9wdGlvbnMucHJlZml4ICsgJy0nO1xuICAgIH1cblxuICAgIGlmICghYmluZGluZ1ByZWZpeCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmVmaXggaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICAvKiogSWYgdHJ1ZSBzdG9wIC8gYmxvY2sgdGhlIHBhcnNlTm9kZSAgcmVjdXJzaW9uICovXG4gICAgbGV0IGJsb2NrID0gbm9kZS5ub2RlTmFtZSA9PT0gJ1NDUklQVCcgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ1NUWUxFJztcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgIGNvbnN0IGJpbmRJbmZvcyA9IFtdO1xuICAgIGNvbnN0IHN0YXJCaW5kZXJzID0gdGhpcy5vcHRpb25zLnN0YXJCaW5kZXJzO1xuICAgIGxldCBub2RlTmFtZTtcbiAgICBsZXQgYmluZGVyO1xuICAgIGxldCBpZGVudGlmaWVyO1xuICAgIGxldCBhcmdzO1xuXG4gICAgLy8gYmluZCBhdHRyaWJ1dGUgYmluZGVycyBpZiBhdmFpYmxlXG4gICAgaWYgKHRoaXMub3B0aW9ucy5iaW5kZXJzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgc3RhcnRzIHdpdGggdGhlIGJpbmRpbmcgcHJlZml4LiBFLmcuIHJ2XG4gICAgICAgIGlmIChhdHRyaWJ1dGUubmFtZS5pbmRleE9mKGJpbmRpbmdQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgbm9kZU5hbWUgPSBhdHRyaWJ1dGUubmFtZS5zbGljZShiaW5kaW5nUHJlZml4Lmxlbmd0aCk7XG4gICAgICAgICAgYmluZGVyID0gdGhpcy5vcHRpb25zLmJpbmRlcnNbbm9kZU5hbWVdO1xuICAgICAgICAgIGFyZ3MgPSBbXTtcblxuICAgICAgICAgIGlmICghYmluZGVyKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHN0YXJCaW5kZXJzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGlkZW50aWZpZXIgPSBzdGFyQmluZGVyc1trXTtcbiAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lLnNsaWNlKDAsIGlkZW50aWZpZXIubGVuZ3RoIC0gMSkgPT09IGlkZW50aWZpZXIuc2xpY2UoMCwgLTEpKSB7XG4gICAgICAgICAgICAgICAgYmluZGVyID0gdGhpcy5vcHRpb25zLmJpbmRlcnNbaWRlbnRpZmllcl07XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKG5vZGVOYW1lLnNsaWNlKGlkZW50aWZpZXIubGVuZ3RoIC0gMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFiaW5kZXIpIHtcbiAgICAgICAgICAgIGJpbmRlciA9IFRpbnliaW5kLmZhbGxiYWNrQmluZGVyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55PikuYmxvY2spIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRCaW5kaW5nKG5vZGUsIG5vZGVOYW1lLCBhdHRyaWJ1dGUudmFsdWUsIGJpbmRlciwgYXJncyk7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiaW5kSW5mb3MucHVzaCh7YXR0cjogYXR0cmlidXRlLCBiaW5kZXIsIG5vZGVOYW1lLCBhcmdzfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kSW5mb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYmluZEluZm8gPSBiaW5kSW5mb3NbaV07XG4gICAgICAgIHRoaXMuYnVpbGRCaW5kaW5nKG5vZGUsIGJpbmRJbmZvLm5vZGVOYW1lLCBiaW5kSW5mby5hdHRyLnZhbHVlLCBiaW5kSW5mby5iaW5kZXIsIGJpbmRJbmZvLmFyZ3MpO1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShiaW5kSW5mby5hdHRyLm5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGJpbmQgY29tcG9uZW50c1xuICAgIGlmICghYmxvY2spIHtcbiAgICAgIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb21wb25lbnRzICYmIHRoaXMub3B0aW9ucy5jb21wb25lbnRzW25vZGVOYW1lXSAmJiAhbm9kZS5fYm91bmQpIHtcblxuICAgICAgICBjb25zdCB0eXBlID0gQ29tcG9uZW50U2VydmljZS50eXBlKHRoaXMub3B0aW9ucy5jb21wb25lbnRzW25vZGVOYW1lXSk7XG5cbiAgICAgICAgIC8vIGJpbmQgKGRlcHJlY2F0ZWQpIGNvbXBvbmVudHMgYW5kIHN0b3AgLyBibG9jayB0aGUgcGFyc2luZyBvZiB0aGUgY2hpbGRzXG4gICAgICAgIGlmICh0eXBlID09PSAnY2xhc3NpYycpIHtcbiAgICAgICAgICB0aGlzLmJpbmRpbmdzLnB1c2gobmV3IENvbXBvbmVudEJpbmRpbmcoKHRoaXMgYXMgVmlldyksIG5vZGUsIG5vZGVOYW1lKSk7XG4gICAgICAgICAgVmlldy5kZWJ1ZyhgU3RvcCBwYXJzaW5nIG9uIChkZXByZWNhdGVkKSBjb21wb25lbnQgJHtub2RlTmFtZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlID09PSAnd2ViY29tcG9uZW50Jykge1xuICAgICAgICAgIGNvbnN0IENPTVBPTkVOVCA9ICh0aGlzLm9wdGlvbnMuY29tcG9uZW50c1tub2RlTmFtZV0gYXMgdHlwZW9mIFJpYmFDb21wb25lbnRDbGFzcyk7XG4gICAgICAgICAgaWYgKCF3aW5kb3cuY3VzdG9tRWxlbWVudHMpIHtcbiAgICAgICAgICAgIFZpZXcuZGVidWcoYEZhbGxiYWNrIGZvciBXZWJjb21wb25lbnQgJHtub2RlTmFtZX1gKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IG5ldyBDT01QT05FTlQobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFZpZXcuZGVidWcoYERlZmluZSBXZWJjb21wb25lbnQgJHtub2RlTmFtZX0gd2l0aCBjdXN0b21FbGVtZW50cy5kZWZpbmVgKTtcbiAgICAgICAgICAgIGlmIChjdXN0b21FbGVtZW50cy5nZXQobm9kZU5hbWUpKSB7XG4gICAgICAgICAgICAgIFZpZXcuZGVidWcoYFdlYiBjb21wb25lbnQgYWxyZWFkeSBkZWZpbmVkYCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUobm9kZU5hbWUsIENPTVBPTkVOVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBibG9jayA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogU3RvcCAvIGJsb2NrIHRoZSBjaGlsZCBwYXJzaW5nIGlmIHRoZSBub2RlIG5hbWUgc3RhcnRzIHdpdGggdGhlIHJpYmEgd2ViIGNvbXBvbmVudCBwcmVmaXhcbiAgICAgICAqIGJlY2F1c2UgdGhlIG5ldyByaWJhIHdlYiBjb21wb25lbnRzIGhhdmUgdGhlaXIgb3duIGJpbmRpbmcuXG4gICAgICAgKi9cbiAgICAgIC8vIGlmIChub2RlTmFtZS5pbmRleE9mKGJpbmRpbmdQcmVmaXgpID09PSAwKSB7XG4gICAgICAvLyAgIGlmICh3aW5kb3cuY3VzdG9tRWxlbWVudHMpIHtcbiAgICAgIC8vICAgICBWaWV3LmRlYnVnKGBDb21wb25lbnQgXCIke25vZGVOYW1lfVwiIHdpbGwgYmUgYm91bmQgd2l0aCB3aW5kb3cuY3VzdG9tRWxlbWVudHMsIHNvIGlnbm9yZWApO1xuICAgICAgLy8gICB9IGVsc2Uge1xuICAgICAgLy8gICAgIFZpZXcuZGVidWcoYFRPRE9gKTtcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICBibG9jayA9IHRydWU7XG4gICAgICAvLyB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJsb2NrO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIGFsbCBvZiB0aGUgY3VycmVudCBiaW5kaW5ncyBmb3IgdGhpcyB2aWV3LlxuICAgKi9cbiAgcHVibGljIGJpbmQoKSB7XG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICBiaW5kaW5nLmJpbmQoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmJpbmRzIGFsbCBvZiB0aGUgY3VycmVudCBiaW5kaW5ncyBmb3IgdGhpcyB2aWV3LlxuICAgKi9cbiAgcHVibGljIHVuYmluZCgpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmJpbmRpbmdzKSkge1xuICAgICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICAgIGJpbmRpbmcudW5iaW5kKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gaWYodGhpcy5jb21wb25lbnRWaWV3KSB7XG4gICAgLy8gICB0aGlzLmNvbXBvbmVudFZpZXcudW5iaW5kKCk7XG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIFN5bmNzIHVwIHRoZSB2aWV3IHdpdGggdGhlIG1vZGVsIGJ5IHJ1bm5pbmcgdGhlIHJvdXRpbmVzIG9uIGFsbCBiaW5kaW5ncy5cbiAgICovXG4gIHB1YmxpYyBzeW5jKCkge1xuICAgIHRoaXMuYmluZGluZ3MuZm9yRWFjaCgoYmluZGluZykgPT4ge1xuICAgICAgaWYgKGJpbmRpbmcuc3luYykge1xuICAgICAgICBiaW5kaW5nLnN5bmMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXMgdGhlIGlucHV0IHZhbHVlcyBmcm9tIHRoZSB2aWV3IGJhY2sgdG8gdGhlIG1vZGVsIChyZXZlcnNlIHN5bmMpLlxuICAgKi9cbiAgcHVibGljIHB1Ymxpc2goKSB7XG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICBpZiAoYmluZGluZy5iaW5kZXIgJiYgYmluZGluZy5wdWJsaXNoICYmIChiaW5kaW5nLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pLnB1Ymxpc2hlcykge1xuICAgICAgICBiaW5kaW5nLnB1Ymxpc2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSB2aWV3J3MgbW9kZWxzIGFsb25nIHdpdGggYW55IGFmZmVjdGVkIGJpbmRpbmdzLlxuICAgKiBAcGFyYW0gbW9kZWxzXG4gICAqL1xuICBwdWJsaWMgdXBkYXRlKG1vZGVsczogYW55ID0ge30pIHtcbiAgICBPYmplY3Qua2V5cyhtb2RlbHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgdGhpcy5tb2RlbHNba2V5XSA9IG1vZGVsc1trZXldO1xuICAgIH0pO1xuXG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XG4gICAgICBpZiAoYmluZGluZy51cGRhdGUpIHtcbiAgICAgICAgYmluZGluZy51cGRhdGUobW9kZWxzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgaXNKc29uIH0gZnJvbSAnLi91dGlscyc7XG5cbmltcG9ydCB7IElEYXRhRWxlbWVudCwgVmlldywgVEJsb2NrIH0gZnJvbSAnLi92aWV3JztcblxuLyoqXG4gKiBVc2VkIGFsc28gaW4gcGFyc2Vycy5wYXJzZVR5cGVcbiAqIFRPRE8gb3V0c291cmNlXG4gKi9cbmV4cG9ydCBjb25zdCBQUklNSVRJVkUgPSAwO1xuZXhwb3J0IGNvbnN0IEtFWVBBVEggPSAxO1xuZXhwb3J0IGNvbnN0IFRFWFQgPSAwO1xuZXhwb3J0IGNvbnN0IEJJTkRJTkcgPSAxO1xuXG5jb25zdCBRVU9URURfU1RSID0gL14nLionJHxeXCIuKlwiJC87IC8vIHJlZ2V4IHRvIHRlc3QgaWYgc3RyaW5nIGlzIHdyYXBwZWQgaW4gXCIgb3IgJ1xuY29uc3QgREVDTEFSQVRJT05fU1BMSVQgPSAvKCg/OidbXiddKicpKig/Oig/OlteXFx8J10qKD86J1teJ10qJykrW15cXHwnXSopK3xbXlxcfF0rKSl8XiQvZztcblxuLyoqXG4gKiBQYXJzZXIgYW5kIHRva2VuaXplciBmb3IgZ2V0dGluZyB0aGUgdHlwZSBhbmQgdmFsdWUgZnJvbSBhIHN0cmluZy5cbiAqIEBwYXJhbSBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVHlwZShzdHI/OiBzdHJpbmcpIHtcbiAgbGV0IHR5cGUgPSBQUklNSVRJVkU7XG4gIGxldCB2YWx1ZTogYW55ID0gc3RyO1xuICBpZiAoc3RyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge3R5cGUsIHZhbHVlOiB1bmRlZmluZWR9O1xuICB9XG4gIGlmIChRVU9URURfU1RSLnRlc3Qoc3RyKSkge1xuICAgIHZhbHVlID0gc3RyLnNsaWNlKDEsIC0xKTtcbiAgfSBlbHNlIGlmIChzdHIgPT09ICd0cnVlJykge1xuICAgIHZhbHVlID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChzdHIgPT09ICdmYWxzZScpIHtcbiAgICB2YWx1ZSA9IGZhbHNlO1xuICB9IGVsc2UgaWYgKHN0ciA9PT0gJ251bGwnKSB7XG4gICAgdmFsdWUgPSBudWxsO1xuICB9IGVsc2UgaWYgKHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YWx1ZSA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChzdHIgPT09ICcnKSB7XG4gICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoIWlzTmFOKE51bWJlcihzdHIpKSkge1xuICAgIHZhbHVlID0gTnVtYmVyKHN0cik7XG4gIH0gZWxzZSBpZiAoaXNKc29uKHN0cikpIHtcbiAgICB2YWx1ZSA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gS0VZUEFUSDtcbiAgfVxuICByZXR1cm4ge3R5cGUsIHZhbHVlfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJVG9rZW5zIHtcbiAgdHlwZTogbnVtYmVyO1xuICB2YWx1ZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRlbXBsYXRlIHBhcnNlciBhbmQgdG9rZW5pemVyIGZvciBtdXN0YWNoZS1zdHlsZSB0ZXh0IGNvbnRlbnQgYmluZGluZ3MuXG4gKiBQYXJzZXMgdGhlIHRlbXBsYXRlIGFuZCByZXR1cm5zIGEgc2V0IG9mIHRva2Vucywgc2VwYXJhdGluZyBzdGF0aWMgcG9ydGlvbnNcbiAqIG9mIHRleHQgZnJvbSBiaW5kaW5nIGRlY2xhcmF0aW9ucy5cbiAqIEBwYXJhbSB0ZW1wbGF0ZVxuICogQHBhcmFtIGRlbGltaXRlcnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVGVtcGxhdGUodGVtcGxhdGU6IHN0cmluZywgZGVsaW1pdGVyczogc3RyaW5nW10pIHtcbiAgbGV0IHRva2VuczogSVRva2Vuc1tdIHwgbnVsbCA9IG51bGw7XG4gIGNvbnN0IGxlbmd0aCA9IHRlbXBsYXRlLmxlbmd0aDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgbGV0IGxhc3RJbmRleCA9IDA7XG4gIGNvbnN0IG9wZW4gPSBkZWxpbWl0ZXJzWzBdO1xuICBjb25zdCBjbG9zZSA9IGRlbGltaXRlcnNbMV07XG5cbiAgd2hpbGUgKGxhc3RJbmRleCA8IGxlbmd0aCkge1xuICAgIGluZGV4ID0gdGVtcGxhdGUuaW5kZXhPZihvcGVuLCBsYXN0SW5kZXgpO1xuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgaWYgKHRva2Vucykge1xuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogVEVYVCxcbiAgICAgICAgICB2YWx1ZTogdGVtcGxhdGUuc2xpY2UobGFzdEluZGV4KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b2tlbnMgPSB0b2tlbnMgfHwgW107XG4gICAgICBpZiAoaW5kZXggPiAwICYmIGxhc3RJbmRleCA8IGluZGV4KSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBURVhULFxuICAgICAgICAgIHZhbHVlOiB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXgsIGluZGV4KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgb3Blbi5sZW5ndGg7XG4gICAgICBpbmRleCA9IHRlbXBsYXRlLmluZGV4T2YoY2xvc2UsIGxhc3RJbmRleCk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgY29uc3Qgc3Vic3RyaW5nID0gdGVtcGxhdGUuc2xpY2UobGFzdEluZGV4IC0gY2xvc2UubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbGFzdFRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAobGFzdFRva2VuICYmIGxhc3RUb2tlbi50eXBlID09PSBURVhUKSB7XG4gICAgICAgICAgbGFzdFRva2VuLnZhbHVlICs9IHN1YnN0cmluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBURVhULFxuICAgICAgICAgICAgdmFsdWU6IHN1YnN0cmluZyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2YWx1ZSA9IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpLnRyaW0oKTtcblxuICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiBCSU5ESU5HLFxuICAgICAgICB2YWx1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBsYXN0SW5kZXggPSBpbmRleCArIGNsb3NlLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VOb2RlKHZpZXc6IFZpZXcsIG5vZGU6IElEYXRhRWxlbWVudCwgdGVtcGxhdGVEZWxpbWl0ZXJzOiBBcnJheTxzdHJpbmc+KSB7XG4gIC8qKiBJZiB0cnVlIHN0b3AgLyBibG9jayB0aGUgcGFyc2VOb2RlICByZWN1cnNpb24gKi9cbiAgbGV0IGJsb2NrOiBUQmxvY2sgPSBmYWxzZTtcblxuICAvLyBpZiBub2RlLm5vZGVUeXBlID09PSAzID09PSBOb2RlLlRFWFRfTk9ERVxuICBub2RlID0gKCBub2RlIGFzIElEYXRhRWxlbWVudCk7XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgbGV0IHRva2VucyA9IG51bGw7XG5cbiAgICAvLyBUT0RPIHdoeSBjaGVjayBkYXRhP1xuICAgIGlmIChub2RlLmRhdGEpIHtcbiAgICAgIHRva2VucyA9IHBhcnNlVGVtcGxhdGUobm9kZS5kYXRhLCB0ZW1wbGF0ZURlbGltaXRlcnMpO1xuICAgIH1cblxuICAgIGlmICh0b2tlbnMgJiYgdG9rZW5zLmxlbmd0aCkge1xuICAgICAgaWYgKCFub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbVmlld10gTm9kZSAoVEVYVF9OT0RFKSBoYXMgbm8gcGFyZW50IG5vZGUnKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodG9rZW4udmFsdWUpO1xuICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRleHQsIG5vZGUpO1xuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gMSkge1xuICAgICAgICAgIHZpZXcuYnVpbGRCaW5kaW5nKHRleHQsIG51bGwsIHRva2VuLnZhbHVlLCBWaWV3LnRleHRCaW5kZXIsIG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxuICAgIGJsb2NrID0gdHJ1ZTtcbiAgICAvLyBpZiBub2RlLm5vZGVUeXBlID09PSAxID09PSBOb2RlLkVMRU1FTlRfTk9ERVxuICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAvLyB0cmF2ZXJzZSBiaW5kcyBhdHRyaWJ1dGVzXG4gICAgYmxvY2sgPSB2aWV3LnRyYXZlcnNlKG5vZGUpO1xuICB9XG5cbiAgaWYgKCFibG9jaykge1xuICAgIGlmIChub2RlLmNoaWxkTm9kZXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcnNlTm9kZSh2aWV3LCAobm9kZS5jaGlsZE5vZGVzW2ldIGFzIElEYXRhRWxlbWVudCksIHRlbXBsYXRlRGVsaW1pdGVycyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlZERlY2xhcmF0aW9ucyB7XG4gIGtleXBhdGg/OiBzdHJpbmc7XG4gIHBpcGVzOiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgYW4gYXR0cmlidXRlIGFyZ3VtZW50IHRvIGhpcyBrZXlwYXRoIGFuZCBzcGxpdHMgdGhlIGZvcm1hdHRlciBuYW1lcyBpbnRvIGEgcGlwZXMgYXJyYXkuXG4gKiBAcGFyYW0gZGVjbGFyYXRpb24gZS5nLiBgb2JqZWN0LmRhdGEgfCB2YWxpZGF0ZSB8IGpzb25gXG4gKlxuICogaWYgZGVjbGFyYXRpb24gaXNcbiAqIGBgYFxuICogb2JqZWN0LmRhdGEgfCB2YWxpZGF0ZSB8IGpzb25gXG4gKiBgYFxuICpcbiAqIHRoZSByZXN1bHQgaXNcbiAqIGBgYFxuICoge1xuICogICAga2V5cGF0aDogXCJvYmplY3QuZGF0YVwiLFxuICogICAgcGlwZXM6IFtcInZhbGlkYXRlXCIsIFwianNvblwiXVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZURlY2xhcmF0aW9uKGRlY2xhcmF0aW9uOiBzdHJpbmcpOiBJUGFyc2VkRGVjbGFyYXRpb25zIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGRlY2xhcmF0aW9uLm1hdGNoKERFQ0xBUkFUSU9OX1NQTElUKTtcbiAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWaWV3XSBObyBtYXRjaGVzJyk7XG4gIH1cbiAgY29uc3QgcGlwZXMgPSBtYXRjaGVzLm1hcCgoc3RyOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKTtcbiAgfSk7XG4gIGNvbnN0IGtleXBhdGggPSBwaXBlcy5zaGlmdCgpIHx8IHVuZGVmaW5lZDtcblxuICByZXR1cm4gPElQYXJzZWREZWNsYXJhdGlvbnM+IHtcbiAgICBrZXlwYXRoLFxuICAgIHBpcGVzLFxuICB9O1xufVxuIiwiaW1wb3J0IHsgVXRpbHMgYXMgdGlueWJpbmRVdGlscyB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuLyoqXG4gKiBKdXN0IGFuIENsYXNzIHdpdGggc29tZSBoZWxwZnVsIGZ1bmN0aW9uc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBVdGlsc1xuICovXG5leHBvcnQgY2xhc3MgVXRpbHMgZXh0ZW5kcyB0aW55YmluZFV0aWxzIHtcblxuICAvKipcbiAgICogV2hpY2ggSFRNTCBlbGVtZW50IGlzIHRoZSB0YXJnZXQgb2YgdGhlIGV2ZW50XG4gICAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZWxlY3RyaWNnLzQ0MzUyNTlcbiAgICovXG4gIHB1YmxpYyBldmVudFRhcmdldChlOiBFdmVudCB8IEpRdWVyeS5FdmVudCkge1xuICAgIGxldCB0YXJnO1xuICAgIGxldCAkdGFyZztcbiAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQ7XG5cbiAgICBpZiAoZS50YXJnZXQpIHtcbiAgICAgIHRhcmcgPSBlLnRhcmdldDtcbiAgICB9IGVsc2UgaWYgKChlIGFzIGFueSkuc3JjRWxlbWVudCkge1xuICAgICAgdGFyZyA9IChlIGFzIGFueSkuc3JjRWxlbWVudDtcbiAgICB9XG4gICAgLy8gZGVmZWF0IFNhZmFyaSBidWdcbiAgICBpZiAodGFyZy5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgdGFyZyA9IHRhcmcucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgJHRhcmcgPSAkKHRhcmcpO1xuICAgIHJldHVybiAkdGFyZztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1vdXNlIC8gdG91Y2ggcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50XG4gICAqIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gICAqL1xuICBwdWJsaWMgZXZlbnRQb3NpdGlvbkRvY3VtZW50KGU/OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCB8IEV2ZW50KSB7XG4gICAgbGV0IHBvc3ggPSAwO1xuICAgIGxldCBwb3N5ID0gMDtcbiAgICBpZiAoIWUpIHtcbiAgICAgIGUgPSB3aW5kb3cuZXZlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGUpIHtcbiAgICAgIGlmICgoZSBhcyBhbnkpLm9yaWdpbmFsRXZlbnQpIHtcbiAgICAgICAgZSA9IChlIGFzIGFueSkub3JpZ2luYWxFdmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGUgJiYgKGUgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgIGUgPSAoZSBhcyBUb3VjaEV2ZW50KTtcbiAgICAgIGlmICgoZSBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlcyAmJiAoZSBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1swXSAmJiAoKGUgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggfHwgKGUgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkpKSB7XG4gICAgICAgIHBvc3ggPSAoZSBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgcG9zeSA9IChlIGFzIFRvdWNoRXZlbnQpLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgfSBlbHNlIGlmICgoZSBhcyBNb3VzZUV2ZW50KS5wYWdlWCB8fCAoZSBhcyBNb3VzZUV2ZW50KS5wYWdlWSkge1xuICAgICAgICBwb3N4ID0gKGUgYXMgTW91c2VFdmVudCkucGFnZVg7XG4gICAgICAgIHBvc3kgPSAoZSBhcyBNb3VzZUV2ZW50KS5wYWdlWTtcbiAgICAgIH0gZWxzZSBpZiAoKGUgYXMgVG91Y2hFdmVudCkudG91Y2hlcyAmJiAoZSBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1swXSAmJiAoKGUgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCB8fCAoZSBhcyBUb3VjaEV2ZW50KS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZKSkge1xuICAgICAgICBwb3N4ID0gKGUgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCArIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgICBwb3N5ID0gKGUgYXMgVG91Y2hFdmVudCkuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgIH0gZWxzZSBpZiAoKGUgYXMgTW91c2VFdmVudCkuY2xpZW50WCB8fCAoZSBhcyBNb3VzZUV2ZW50KS5jbGllbnRZKSB7XG4gICAgICAgIHBvc3ggPSAoZSBhcyBNb3VzZUV2ZW50KS5jbGllbnRYICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0ICsgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgICAgIHBvc3kgPSAoZSBhcyBNb3VzZUV2ZW50KS5jbGllbnRZICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgKyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeCA6IHBvc3gsXG4gICAgICB5IDogcG9zeSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBkb2N1bWVudFxuICAgKi9cbiAgcHVibGljIGdldEVsZW1lbnRQb3NpdGlvbihzZWxlY3Rvcjogc3RyaW5nIHwgSlF1ZXJ5PGFueT4pIHtcbiAgICBjb25zdCAkZWwgPSAkKHNlbGVjdG9yKTtcbiAgICBjb25zdCBwYWdlWVNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IHBhZ2VYU2Nyb2xsID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIC8vIG9wdGlvbmFsbHkgZ2V0IGhvcml6b250YWwgc2Nyb2xsXG4gICAgLy8gZ2V0IHBvc2l0aW9uIG9mIGVsZW1lbnQgcmVsYXRpdmUgdG8gdmlld3BvcnRcbiAgICBjb25zdCByZWN0ID0gJGVsWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICd4JzogcmVjdC5sZWZ0ICsgcGFnZVhTY3JvbGwsXG4gICAgICAnZml4ZWQteCc6IHJlY3QubGVmdCxcbiAgICAgICd5JzogcmVjdC50b3AgKyBwYWdlWVNjcm9sbCxcbiAgICAgICdmaXhlZC15JzogcmVjdC50b3AsXG4gICAgICAndyc6IHJlY3Qud2lkdGgsXG4gICAgICAnaCc6IHJlY3QuaGVpZ2h0LFxuICAgICAgJyRlbGVtZW50JzogJGVsLFxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gYW5vdGhlciBlbGVtZW50IGUuZy4gaGlzIHBhcmVudCBlbGVtZW50XG4gICAqIEUuZy4gdXNlZCBpbiBydi10YWJzIHRvIGdldCB0aGUgc2Nyb2xscG9zdGlvbiBvZiBhbiBlbGVtZW50IGluc2l0ZSBhIHNjcm9sbGFibGUgZWxlbWVudCB0byBzY3JvbGwgdGhlIGFjdGl2ZSB0YWIgdG8gbGVmdFxuICAgKi9cbiAgcHVibGljIGdldEVsZW1lbnRQb3NpdGlvbkluRWxlbWVudChzZWxlY3Rvcjogc3RyaW5nLCBwYXJlbnRTZWxlY3Rvcjogc3RyaW5nKSB7XG4gICAgY29uc3QgZWxlbWVudFBvcyA9IHRoaXMuZ2V0RWxlbWVudFBvc2l0aW9uKHNlbGVjdG9yKTtcbiAgICBjb25zdCBwYXJlbnRFbGVtZW50UG9zID0gdGhpcy5nZXRFbGVtZW50UG9zaXRpb24ocGFyZW50U2VsZWN0b3IpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICd4JzogZWxlbWVudFBvcy54IC0gcGFyZW50RWxlbWVudFBvcy54LFxuICAgICAgJ3knOiBlbGVtZW50UG9zLnkgLSBwYXJlbnRFbGVtZW50UG9zLnksXG4gICAgICAnZml4ZWQteCc6IGVsZW1lbnRQb3NbJ2ZpeGVkLXgnXSAtIHBhcmVudEVsZW1lbnRQb3NbJ2ZpeGVkLXgnXSxcbiAgICAgICdmaXhlZC15JzogZWxlbWVudFBvc1snZml4ZWQteSddIC0gcGFyZW50RWxlbWVudFBvc1snZml4ZWQteSddLFxuICAgICAgJ3cnOiBlbGVtZW50UG9zLncsXG4gICAgICAnaCc6IGVsZW1lbnRQb3MuaCxcbiAgICAgICckZWxlbWVudCc6IGVsZW1lbnRQb3MuJGVsZW1lbnQsXG4gICAgICAnJHBhcmVudCc6IHBhcmVudEVsZW1lbnRQb3MuJGVsZW1lbnQsXG4gICAgICAnZWxlbWVudFBvcyc6IGVsZW1lbnRQb3MsXG4gICAgICAncGFyZW50UG9zJzogcGFyZW50RWxlbWVudFBvcyxcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogTW91c2UgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQgIChub3Qgd29ya2luZyBvbiBJRTcgYW5kIGJlbG93KVxuICAgKiBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2VsZWN0cmljZy80NDM1MjU5XG4gICAqL1xuICBwdWJsaWMgbW91c2VQb3NpdGlvbkVsZW1lbnQoZTogTW91c2VFdmVudCwgdGFyZ2V0OiBKUXVlcnk8YW55Pikge1xuICAgIGNvbnN0IG1vdXNlUG9zRG9jID0gdGhpcy5ldmVudFBvc2l0aW9uRG9jdW1lbnQoZSk7XG4gICAgLy8gaWYgdGFyZ2V0IG5vdCBzZXQgdHJ5IHRvIGdldCB0YXJnZXQgZnJvbSBldmVudFxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0YXJnZXQgPSB0aGlzLmV2ZW50VGFyZ2V0KGUpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRQb3MgPSB0aGlzLmdldEVsZW1lbnRQb3NpdGlvbih0YXJnZXQpO1xuICAgIGNvbnN0IHBvc3ggPSBtb3VzZVBvc0RvYy54IC0gdGFyZ2V0UG9zLng7XG4gICAgY29uc3QgcG9zeSA9IG1vdXNlUG9zRG9jLnkgLSB0YXJnZXRQb3MueTtcbiAgICByZXR1cm4ge1xuICAgICAgeCA6IHBvc3gsXG4gICAgICB5IDogcG9zeSxcbiAgICAgIGVsZW1lbnQ6IHRhcmdldCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdXNlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBlbGVtZW50IGluIHBlcmNlbnQgKG5vdCB3b3JraW5nIG9uIElFNyBhbmQgYmVsb3cpXG4gICAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZWxlY3RyaWNnLzQ0MzUyNTlcbiAgICovXG4gIHB1YmxpYyBtb3VzZVBvc2l0aW9uRWxlbWVudEluUGVyY2VudChlOiBNb3VzZUV2ZW50LCB0YXJnZXQ6IEpRdWVyeTxhbnk+KSB7XG4gICAgY29uc3QgbW91c2VQb3NEb2MgPSB0aGlzLmV2ZW50UG9zaXRpb25Eb2N1bWVudChlKTtcbiAgICAvLyBpZiB0YXJnZXQgbm90IHNldCB0cnkgdG8gZ2V0IHRhcmdldCBmcm9tIGV2ZW50XG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRhcmdldCA9IHRoaXMuZXZlbnRUYXJnZXQoZSk7XG4gICAgfVxuICAgIGNvbnN0IHdpZHRoID0gdGFyZ2V0WzBdLm9mZnNldFdpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHRhcmdldFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgY29uc3QgdGFyZ2V0UG9zID0gdGhpcy5nZXRFbGVtZW50UG9zaXRpb24odGFyZ2V0KTtcbiAgICBjb25zdCBwb3N4ID0gbW91c2VQb3NEb2MueCAtIHRhcmdldFBvcy54O1xuICAgIGNvbnN0IHBvc3kgPSBtb3VzZVBvc0RvYy55IC0gdGFyZ2V0UG9zLnk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHBvc3gsXG4gICAgICB5OiBwb3N5LFxuICAgICAgbGVmdDogcG9zeCAvIHdpZHRoLCAvLyBwZXJjZW50IHZhbHVlXG4gICAgICB0b3A6IHBvc3kgLyBoZWlnaHQsIC8vIHBlcmNlbnQgdmFsdWVcbiAgICAgIHc6IHdpZHRoLFxuICAgICAgaDogaGVpZ2h0LFxuICAgICAgZWxlbWVudDogdGFyZ2V0LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBicm93c2VyIHZpZXdwb3J0IGRpbWVuc2lvbnNcbiAgICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODg3NjA2OS8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgZ2V0Vmlld3BvcnREaW1lbnNpb25zKCkgIHtcbiAgICBjb25zdCB3ID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICBjb25zdCBoID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIHJldHVybiB7XG4gICAgICB3LFxuICAgICAgaCxcbiAgICB9O1xuICB9XG5cbn1cbiIsImltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIEdldCBwcm9wZXJ0eSBvZiBvYmplY3Qgb3IgYXJyYXlcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBnZXQgPSAob2JqOiBhbnkgfCBhbnlbXSwga2V5OiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgaWYgKFV0aWxzLmlzT2JqZWN0KG9iaikgfHwgVXRpbHMuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBJQmluZGVycyB9IGZyb20gJy4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSUZvcm1hdHRlcnMgfSBmcm9tICcuL2Zvcm1hdHRlci5zZXJ2aWNlJztcbmltcG9ydCB7IElBZGFwdGVycyB9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgeyBJQmluZGFibGUgfSBmcm9tICcuL2JpbmRpbmcnO1xuaW1wb3J0IHsgUmliYUNvbXBvbmVudENsYXNzLCBSaWJhQ29tcG9uZW50IH0gZnJvbSAnLi93ZWJjb21wb25lbnQnO1xuXG5leHBvcnQgdHlwZSBTY29wZSA9IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBJQ2xhc3NpY0NvbXBvbmVudDxWYWx1ZVR5cGU+IHtcbiAgLyoqIElmIHRoZSB0ZW1wbGF0ZSBmdW5jdGlvbiByZXR1cm5zIG51bGwgbm8gdGVtcGxhdGUgaXMgaW5qZWN0ZWQgKi9cbiAgdGVtcGxhdGU6ICgoKSA9PiBzdHJpbmcgfCBudWxsKSB8ICgoKSA9PiBIVE1MRWxlbWVudCk7XG4gIGluaXRpYWxpemU6IChlbDogSFRNTEVsZW1lbnQsIGRhdGE6IFZhbHVlVHlwZSkgPT4gU2NvcGU7XG5cbiAgLyoqIGFycmF5IG9mIGF0dHJpYml1dGUgbmFtZXMgdG8gZm9yY2UgcGFyc2UgYXR0cmlidXRlcyBhcyBzdGF0aWMgKHByaW1pdGl2ZSkgdmFsdWVzICovXG4gIHN0YXRpYz86IHN0cmluZ1tdO1xuXG4gIC8qKiBhcnJheSBvZiBhdHRyaWJpdXRlIG5hbWVzIHRvIGF1dG8gYmluZCBhdHRyaWJ1dGVzIHRvIHRoZSBzY29wZSAqL1xuICBiaW5kPzogc3RyaW5nW107XG5cbiAgLy8gZXh0ZW5zaW9uIG9wdGlvbnNcbiAgYmluZGVycz86IElCaW5kZXJzPGFueT47XG4gIGZvcm1hdHRlcnM/OiBJRm9ybWF0dGVycztcbiAgY29tcG9uZW50cz86IElDb21wb25lbnRzO1xuICBhZGFwdGVycz86IElBZGFwdGVycztcblxuICAvLyBvdGhlciBvcHRpb25zXG4gIHByZWZpeD86IHN0cmluZztcbiAgcHJlbG9hZERhdGE/OiBib29sZWFuO1xuICByb290SW50ZXJmYWNlPzogc3RyaW5nO1xuICB0ZW1wbGF0ZURlbGltaXRlcnM/OiBBcnJheTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBJZiB5b3Ugd2FudCB0byBzYXZlIGN1c3RvbSBkYXRhIGluIHlvdXIgYmluZGVyIGxvZ2ljXG4gICAqL1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG5cbiAgaGFuZGxlcj86ICh0aGlzOiBhbnksIGNvbnRleHQ6IGFueSwgZXY6IEV2ZW50LCBiaW5kaW5nOiBJQmluZGFibGUpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXBvbmVudHMge1xuICBbbmFtZTogc3RyaW5nXTogSUNsYXNzaWNDb21wb25lbnQ8YW55PiB8IHR5cGVvZiBSaWJhQ29tcG9uZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDb21wb25lbnRXcmFwcGVyUmVzdWx0PFZhbHVlVHlwZT4gZXh0ZW5kcyBJQ2xhc3NpY0NvbXBvbmVudDxWYWx1ZVR5cGU+IHtcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgdHlwZSBDb21wb25lbnRXcmFwcGVyPFZhbHVlVHlwZT4gPSAoLi4uZGVwczogYW55W10pID0+IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PFZhbHVlVHlwZT47XG5cbmV4cG9ydCBjbGFzcyBDb21wb25lbnRTZXJ2aWNlIHtcblxuICBwdWJsaWMgc3RhdGljIHR5cGUoY29tcG9uZW50OiBJQ2xhc3NpY0NvbXBvbmVudDxhbnk+IHwgdHlwZW9mIFJpYmFDb21wb25lbnQpOiAnY2xhc3NpYycgfCAnd2ViY29tcG9uZW50JyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnaW5pdGlhbGl6ZScpICYmIGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgndGVtcGxhdGUnKSkge1xuICAgICAgcmV0dXJuICdjbGFzc2ljJztcbiAgICB9XG5cbiAgICBpZiAoKGNvbXBvbmVudCBhcyB0eXBlb2YgUmliYUNvbXBvbmVudCkudGFnTmFtZSkge1xuICAgICAgcmV0dXJuICd3ZWJjb21wb25lbnQnO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGNvbXBvbmVudHM6IElDb21wb25lbnRzO1xuICBwcml2YXRlIGRlYnVnID0gRGVidWcoJ2NvbXBvbmVudHM6Q29tcG9uZW50U2VydmljZScpO1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gY29tcG9uZW50c1xuICAgKi9cbiAgY29uc3RydWN0b3IoY29tcG9uZW50czogSUNvbXBvbmVudHMpIHtcbiAgICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIGNvbXBvbmVudCB3cmFwcGVyXG4gICAqIEBwYXJhbSBDb21wb25lbnRXcmFwcGVyXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0V3JhcHBlcihjb21wb25lbnRXcmFwcGVyOiBJQ29tcG9uZW50V3JhcHBlclJlc3VsdDxhbnk+LCBuYW1lPzogc3RyaW5nKTogSUNvbXBvbmVudHMge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgbmFtZSA9IGNvbXBvbmVudFdyYXBwZXIubmFtZTtcbiAgICB9XG4gICAgY29uc3QgY29tcG9uZW50ID0gKGNvbXBvbmVudFdyYXBwZXIgYXMgSUNvbXBvbmVudFdyYXBwZXJSZXN1bHQ8YW55Pik7XG4gICAgdGhpcy5jb21wb25lbnRzW25hbWVdID0gY29tcG9uZW50O1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHM7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0IGEgY29tcG9uZW50IHdpdGggaGlzIG5hbWVcbiAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gbmFtZVxuICAgKi9cbiAgcHVibGljIHJlZ2lzdChjb21wb25lbnQ6IElDbGFzc2ljQ29tcG9uZW50PGFueT4gfCB0eXBlb2YgUmliYUNvbXBvbmVudCwgbmFtZT86IHN0cmluZyk6IElDb21wb25lbnRzIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xuICAgICAgICBuYW1lID0gKGNvbXBvbmVudCBhcyB0eXBlb2YgUmliYUNvbXBvbmVudCkudGFnTmFtZSB8fCAoY29tcG9uZW50IGFzIElDbGFzc2ljQ29tcG9uZW50PGFueT4pLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZygnbmFtZScsIG5hbWUsIGNvbXBvbmVudCk7XG5cbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0NvbXBvbmVudFNlcnZpY2VdIG5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3QgYSBzZXQgb2YgY29tcG9uZW50c1xuICAgKiBAcGFyYW0gY29tcG9uZW50c1xuICAgKi9cbiAgcHVibGljIHJlZ2lzdHMoY29tcG9uZW50czogSUNvbXBvbmVudHMpOiBJQ29tcG9uZW50cyB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIGNvbXBvbmVudHMpIHtcbiAgICAgIGlmIChjb21wb25lbnRzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHRoaXMucmVnaXN0KGNvbXBvbmVudHNbbmFtZV0sIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzO1xuICB9XG59XG4iLCJcbmltcG9ydCB7IElBZGFwdGVycyB9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgeyBpc09iamVjdCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgSVZpZXdPcHRpb25zIH0gZnJvbSAnLi90aW55YmluZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ic2VydmVyU3luY0NhbGxiYWNrIHtcbiAgc3luYzogKCkgPT4gdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUtleSB7XG4gIHBhdGg6IGFueTtcbiAgaTogUm9vdDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2ZXJzIHtcbiAgW2tleTogc3RyaW5nXTogT2JzZXJ2ZXI7XG59XG5cbmV4cG9ydCB0eXBlIE9iaiA9IGFueTtcblxuZXhwb3J0IHR5cGUgUm9vdCA9IGFueTtcblxuZXhwb3J0IGNsYXNzIE9ic2VydmVyIHtcblxuICBwdWJsaWMgc3RhdGljIGFkYXB0ZXJzOiBJQWRhcHRlcnM7XG4gIHB1YmxpYyBzdGF0aWMgaW50ZXJmYWNlczogc3RyaW5nW107XG4gIHB1YmxpYyBzdGF0aWMgcm9vdEludGVyZmFjZTogUm9vdDtcblxuICBwdWJsaWMgc3RhdGljIHVwZGF0ZU9wdGlvbnMob3B0aW9uczogSVZpZXdPcHRpb25zKSB7XG5cbiAgICBpZiAoIW9wdGlvbnMuYWRhcHRlcnMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWRhcHRlcnMgYXJlIHJlcXVpcmVkIScpO1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5yb290SW50ZXJmYWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Jvb3RJbnRlcmZhY2UgaXMgcmVxdWlyZWQhJyk7XG4gICAgfVxuXG4gICAgT2JzZXJ2ZXIuYWRhcHRlcnMgPSBvcHRpb25zLmFkYXB0ZXJzO1xuICAgIE9ic2VydmVyLmludGVyZmFjZXMgPSBPYmplY3Qua2V5cyhPYnNlcnZlci5hZGFwdGVycyk7XG4gICAgT2JzZXJ2ZXIucm9vdEludGVyZmFjZSA9IG9wdGlvbnMucm9vdEludGVyZmFjZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2tlbml6ZXMgdGhlIHByb3ZpZGVkIGtleXBhdGggc3RyaW5nIGludG8gaW50ZXJmYWNlICsgcGF0aCB0b2tlbnMgZm9yIHRoZVxuICAgKiBvYnNlcnZlciB0byB3b3JrIHdpdGguXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHRva2VuaXplKGtleXBhdGg6IHN0cmluZywgcm9vdDogUm9vdCkge1xuICAgIGNvbnN0IHRva2VuczogYW55W10gPSBbXTtcbiAgICBsZXQgY3VycmVudDogSUtleSA9IHtpOiByb290LCBwYXRoOiAnJ307XG4gICAgbGV0IGluZGV4OiBudW1iZXI7XG4gICAgbGV0IGNocjogc3RyaW5nO1xuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwga2V5cGF0aC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNociA9IGtleXBhdGguY2hhckF0KGluZGV4KTtcbiAgICAgIGlmICghIX5PYnNlcnZlci5pbnRlcmZhY2VzLmluZGV4T2YoY2hyKSkge1xuICAgICAgICB0b2tlbnMucHVzaChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IHtpOiBjaHIsIHBhdGg6ICcnfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQucGF0aCArPSBjaHI7XG4gICAgICB9XG4gICAgfVxuICAgIHRva2Vucy5wdXNoKGN1cnJlbnQpO1xuICAgIHJldHVybiB0b2tlbnM7XG4gIH1cblxuICBwdWJsaWMga2V5cGF0aDogc3RyaW5nO1xuICBwdWJsaWMgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjaztcbiAgcHVibGljIG9iamVjdFBhdGg6IE9ialtdO1xuICBwdWJsaWMgb2JqOiBPYmo7XG4gIHB1YmxpYyB0YXJnZXQ6IE9iajtcbiAgcHVibGljIGtleTogSUtleTtcbiAgcHVibGljIHRva2VuczogSUtleVtdO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGtleXBhdGggb2JzZXJ2ZXIgYW5kIGtpY2tzIHRoaW5ncyBvZmYuXG4gICAqIEBwYXJhbSBvYmpcbiAgICogQHBhcmFtIGtleXBhdGhcbiAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvYmo6IE9iaiwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKSB7XG4gICAgdGhpcy5rZXlwYXRoID0ga2V5cGF0aDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5vYmplY3RQYXRoID0gW107XG4gICAgY29uc3QgcGFyc2VSZXN1bHQgPSB0aGlzLnBhcnNlKCk7XG4gICAgdGhpcy5rZXkgPSBwYXJzZVJlc3VsdC5rZXk7XG4gICAgdGhpcy50b2tlbnMgPSBwYXJzZVJlc3VsdC50b2tlbnM7XG4gICAgdGhpcy5vYmogPSB0aGlzLmdldFJvb3RPYmplY3Qob2JqKTtcbiAgICB0aGlzLnRhcmdldCA9IHRoaXMucmVhbGl6ZSgpO1xuICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgIHRoaXMuc2V0KHRydWUsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUga2V5cGF0aCB1c2luZyB0aGUgaW50ZXJmYWNlcyBkZWZpbmVkIG9uIHRoZSB2aWV3LiBTZXRzIHZhcmlhYmxlc1xuICAgKiBmb3IgdGhlIHRva2VuaXplZCBrZXlwYXRoIGFzIHdlbGwgYXMgdGhlIGVuZCBrZXkuXG4gICAqL1xuICBwdWJsaWMgcGFyc2UoKSB7XG4gICAgbGV0IHBhdGg6IHN0cmluZztcbiAgICBsZXQgcm9vdDogUm9vdDtcblxuICAgIGlmICghT2JzZXJ2ZXIuaW50ZXJmYWNlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW09ic2VydmVyXSBNdXN0IGRlZmluZSBhdCBsZWFzdCBvbmUgYWRhcHRlciBpbnRlcmZhY2UuJyk7XG4gICAgfVxuXG4gICAgaWYgKCEhfk9ic2VydmVyLmludGVyZmFjZXMuaW5kZXhPZih0aGlzLmtleXBhdGhbMF0pKSB7XG4gICAgICByb290ID0gdGhpcy5rZXlwYXRoWzBdO1xuICAgICAgcGF0aCA9IHRoaXMua2V5cGF0aC5zdWJzdHIoMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QgPSBPYnNlcnZlci5yb290SW50ZXJmYWNlO1xuICAgICAgcGF0aCA9IHRoaXMua2V5cGF0aDtcbiAgICB9XG5cbiAgICB0aGlzLnRva2VucyA9IE9ic2VydmVyLnRva2VuaXplKHBhdGgsIHJvb3QpO1xuXG4gICAgaWYgKCF0aGlzLnRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW09ic2VydmVyXSBObyB0b2tlbnMnKTtcbiAgICB9XG5cbiAgICB0aGlzLmtleSA9ICh0aGlzLnRva2Vucy5wb3AoKSBhcyBJS2V5KTtcblxuICAgIHJldHVybiB7XG4gICAgICBrZXk6IHRoaXMua2V5LFxuICAgICAgdG9rZW5zOiB0aGlzLnRva2VucyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWxpemVzIHRoZSBmdWxsIGtleXBhdGgsIGF0dGFjaGluZyBvYnNlcnZlcnMgZm9yIGV2ZXJ5IGtleSBhbmQgY29ycmVjdGluZ1xuICAgKiBvbGQgb2JzZXJ2ZXJzIHRvIGFueSBjaGFuZ2VkIG9iamVjdHMgaW4gdGhlIGtleXBhdGguXG4gICAqL1xuICBwdWJsaWMgcmVhbGl6ZSgpIHtcbiAgICBsZXQgY3VycmVudDogT2JqID0gdGhpcy5vYmo7XG4gICAgbGV0IHVucmVhY2hlZCA9IC0xO1xuICAgIGxldCBwcmV2O1xuICAgIGxldCB0b2tlbjtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbnNbaW5kZXhdO1xuICAgICAgaWYgKGlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3RQYXRoW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBwcmV2ID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XTtcbiAgICAgICAgICBpZiAoY3VycmVudCAhPT0gcHJldikge1xuICAgICAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBwcmV2LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KHRydWUsIHRva2VuLCBjdXJyZW50LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0UGF0aFtpbmRleF0gPSBjdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldCh0cnVlLCB0b2tlbiwgY3VycmVudCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5vYmplY3RQYXRoW2luZGV4XSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHRoaXMuZ2V0KHRva2VuLCBjdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh1bnJlYWNoZWQgPT09IC0xKSB7XG4gICAgICAgICAgdW5yZWFjaGVkID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IHRoaXMub2JqZWN0UGF0aFtpbmRleF07XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBwcmV2LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodW5yZWFjaGVkICE9PSAtMSkge1xuICAgICAgdGhpcy5vYmplY3RQYXRoLnNwbGljZSh1bnJlYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBrZXlwYXRoLiBUaGlzIGlzIGNhbGxlZCB3aGVuIGFueSBpbnRlcm1lZGlhcnkga2V5IGlzIGNoYW5nZWQuXG4gICAqL1xuICBwdWJsaWMgc3luYygpIHtcbiAgICBsZXQgbmV4dDtcbiAgICBsZXQgb2xkVmFsdWU7XG4gICAgbGV0IG5ld1ZhbHVlO1xuICAgIG5leHQgPSB0aGlzLnJlYWxpemUoKTtcbiAgICBpZiAobmV4dCAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc09iamVjdChuZXh0KSkge1xuICAgICAgICB0aGlzLnNldCh0cnVlLCB0aGlzLmtleSwgbmV4dCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIG9sZFZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgdGhpcy50YXJnZXQgPSBuZXh0O1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlIHx8IG5ld1ZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5jYWxsYmFjay5zeW5jKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRoaXMuY2FsbGJhY2suc3luYygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgY3VycmVudCBlbmQgdmFsdWUgb2YgdGhlIG9ic2VydmVkIGtleXBhdGguIFJldHVybnMgdW5kZWZpbmVkIGlmXG4gICAqIHRoZSBmdWxsIGtleXBhdGggaXMgdW5yZWFjaGFibGUuXG4gICAqL1xuICBwdWJsaWMgdmFsdWUoKSB7XG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMua2V5LCB0aGlzLnRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgZW5kIHZhbHVlIG9mIHRoZSBvYnNlcnZlZCBrZXlwYXRoLiBDYWxsaW5nIHNldFZhbHVlIHdoZW5cbiAgICogIHRoZSBmdWxsIGtleXBhdGggaXMgdW5yZWFjaGFibGUgaXMgYSBuby1vcC5cbiAgICogQHBhcmFtIHZhbHVlXG4gICAqL1xuICBwdWJsaWMgc2V0VmFsdWUodmFsdWU6IGFueSkge1xuICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgIE9ic2VydmVyLmFkYXB0ZXJzW3RoaXMua2V5LmldLnNldCh0aGlzLnRhcmdldCwgdGhpcy5rZXkucGF0aCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwcm92aWRlZCBrZXkgb24gYW4gb2JqZWN0LlxuICAgKiBAcGFyYW0ga2V5XG4gICAqIEBwYXJhbSBvYmpcbiAgICovXG4gIHB1YmxpYyBnZXQoa2V5OiBJS2V5LCBvYmo6IE9iaikge1xuICAgIHJldHVybiBPYnNlcnZlci5hZGFwdGVyc1trZXkuaV0uZ2V0KG9iaiwga2V5LnBhdGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIG9yIHVub2JzZXJ2ZXMgYSBjYWxsYmFjayBvbiB0aGUgb2JqZWN0IHVzaW5nIHRoZSBwcm92aWRlZCBrZXkuXG4gICAqIEBwYXJhbSBhY3RpdmVcbiAgICogQHBhcmFtIGtleVxuICAgKiBAcGFyYW0gb2JqXG4gICAqIEBwYXJhbSBjYWxsYmFja1xuICAgKi9cbiAgcHVibGljIHNldChhY3RpdmU6IGJvb2xlYW4sIGtleTogSUtleSwgb2JqOiBPYmosIGNhbGxiYWNrOiBJT2JzZXJ2ZXJTeW5jQ2FsbGJhY2spIHtcbiAgICBpZiAoYWN0aXZlKSB7XG4gICAgICBPYnNlcnZlci5hZGFwdGVyc1trZXkuaV0ub2JzZXJ2ZShvYmosIGtleS5wYXRoLCBjYWxsYmFjayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIE9ic2VydmVyLmFkYXB0ZXJzW2tleS5pXS51bm9ic2VydmUob2JqLCBrZXkucGF0aCwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbm9ic2VydmVzIHRoZSBlbnRpcmUga2V5cGF0aC5cbiAgICovXG4gIHB1YmxpYyB1bm9ic2VydmUoKSB7XG4gICAgbGV0IG9iajogT2JqO1xuICAgIGxldCB0b2tlbjtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbnNbaW5kZXhdO1xuICAgICAgb2JqID0gdGhpcy5vYmplY3RQYXRoW2luZGV4XTtcbiAgICAgIGlmIChvYmopIHtcbiAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBvYmosIHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgIHRoaXMuc2V0KGZhbHNlLCB0aGlzLmtleSwgdGhpcy50YXJnZXQsIHRoaXMuY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiB0cmF2ZXJzZSB0aGUgc2NvcGUgY2hhaW4gdG8gZmluZCB0aGUgc2NvcGUgd2hpY2ggaGFzIHRoZSByb290IHByb3BlcnR5XG4gICAqIGlmIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQgaW4gY2hhaW4sIHJldHVybnMgdGhlIHJvb3Qgc2NvcGVcbiAgICogQHBhcmFtIG9ialxuICAgKi9cbiAgcHVibGljIGdldFJvb3RPYmplY3Qob2JqOiBPYmopIHtcbiAgICBsZXQgcm9vdFByb3A7XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgaWYgKCFvYmouJHBhcmVudCkge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoKSB7XG4gICAgICByb290UHJvcCA9IHRoaXMudG9rZW5zWzBdLnBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3RQcm9wID0gdGhpcy5rZXkucGF0aDtcbiAgICB9XG5cbiAgICBjdXJyZW50ID0gb2JqO1xuICAgIHdoaWxlIChjdXJyZW50LiRwYXJlbnQgJiYgKGN1cnJlbnRbcm9vdFByb3BdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IHBhcnNlVGVtcGxhdGUsIHBhcnNlVHlwZSB9IGZyb20gJy4vcGFyc2Vycyc7XG5pbXBvcnQgeyBJRm9ybWF0dGVycywgRm9ybWF0dGVyU2VydmljZSB9IGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQmluZGluZywgSUJpbmRhYmxlIH0gZnJvbSAnLi9iaW5kaW5nJztcbmltcG9ydCB7IGFkYXB0ZXIgfSBmcm9tICcuL2FkYXB0ZXInO1xuXG5pbXBvcnQgeyBJQmluZGVycywgQmluZGVyc1NlcnZpY2UgfSBmcm9tICcuL2JpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgSUFkYXB0ZXJzIH0gZnJvbSAnLi9hZGFwdGVyJztcbmltcG9ydCB7IE9ic2VydmVyLCBSb290IH0gZnJvbSAnLi9vYnNlcnZlcic7XG5pbXBvcnQgeyBJQ2xhc3NpY0NvbXBvbmVudCwgSUNvbXBvbmVudHMsIENvbXBvbmVudFNlcnZpY2UgfSBmcm9tICcuL2NvbXBvbmVudC5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBJRXh0ZW5zaW9ucyB7XG4gIGJpbmRlcnM/OiBJQmluZGVyczxhbnk+O1xuICBmb3JtYXR0ZXJzPzogSUZvcm1hdHRlcnM7XG4gIGNvbXBvbmVudHM/OiBJQ29tcG9uZW50cztcbiAgYWRhcHRlcnM/OiBJQWRhcHRlcnM7XG59XG5cbmV4cG9ydCB0eXBlIEV2ZW50SGFuZGxlciA9ICh0aGlzOiBhbnksIGNvbnRleHQ6IEJpbmRpbmcsIGV2OiBFdmVudCwgYmluZGluZzogQmluZGluZywgZWw6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIElPcHRpb25zIHtcbiAgLyoqIEF0dHJpYnV0ZSAvIHdlYi1jb21wb25lbnQgcHJlZml4IGluIHRlbXBsYXRlcyAqL1xuICBwcmVmaXg/OiBzdHJpbmc7XG5cbiAgLyoqIEF0dHJpYnV0ZS8gd2ViLWNvbXBvbmVudCAgcHJlZml4ICsgJy0nICovXG4gIGZ1bGxQcmVmaXg/OiBzdHJpbmc7XG5cbiAgLyoqIFByZWxvYWQgdGVtcGxhdGVzIHdpdGggaW5pdGlhbCBkYXRhIG9uIGJpbmQgKi9cbiAgcHJlbG9hZERhdGE/OiBib29sZWFuO1xuXG4gIC8qKiBSb290IHNpZ2h0Z2xhc3MgaW50ZXJmYWNlIGZvciBrZXlwYXRocyAqL1xuICByb290SW50ZXJmYWNlPzogc3RyaW5nO1xuXG4gIC8qKiBUZW1wbGF0ZSBkZWxpbWl0ZXJzIGZvciB0ZXh0IGJpbmRpbmdzICovXG4gIHRlbXBsYXRlRGVsaW1pdGVycz86IEFycmF5PHN0cmluZz47XG5cbiAgLyoqIEF1Z21lbnQgdGhlIGV2ZW50IGhhbmRsZXIgb2YgdGhlIG9uLSogYmluZGVyICovXG4gIGhhbmRsZXI/OiBFdmVudEhhbmRsZXI7XG5cbiAgc3RhckJpbmRlcnM/OiBhbnk7XG59XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJT3B0aW9uc1BhcmFtIGV4dGVuZHMgSUV4dGVuc2lvbnMsIElPcHRpb25zIHt9XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJVmlld09wdGlvbnMgZXh0ZW5kcyBJT3B0aW9uc1BhcmFtIHtcbiAgYmluZGVyczogSUJpbmRlcnM8YW55PjtcbiAgZm9ybWF0dGVyczogSUZvcm1hdHRlcnM7XG4gIGNvbXBvbmVudHM6IElDb21wb25lbnRzO1xuICBhZGFwdGVyczogSUFkYXB0ZXJzO1xuXG4gIC8qKiBBdHRyaWJ1dGUgLyB3ZWItY29tcG9uZW50IHByZWZpeCBpbiB0ZW1wbGF0ZXMgKi9cbiAgcHJlZml4OiBzdHJpbmc7XG5cbiAgLyoqIEF0dHJpYnV0ZS8gd2ViLWNvbXBvbmVudCAgcHJlZml4ICsgJy0nICovXG4gIGZ1bGxQcmVmaXg6IHN0cmluZztcblxuICAvKiogUHJlbG9hZCB0ZW1wbGF0ZXMgd2l0aCBpbml0aWFsIGRhdGEgb24gYmluZCAqL1xuICBwcmVsb2FkRGF0YTogYm9vbGVhbjtcblxuICAvKiogUm9vdCBzaWdodGdsYXNzIGludGVyZmFjZSBmb3Iga2V5cGF0aHMgKi9cbiAgcm9vdEludGVyZmFjZTogc3RyaW5nO1xuXG4gIC8qKiBUZW1wbGF0ZSBkZWxpbWl0ZXJzIGZvciB0ZXh0IGJpbmRpbmdzICovXG4gIHRlbXBsYXRlRGVsaW1pdGVycz86IEFycmF5PHN0cmluZz47XG5cbiAgLyoqIEF1Z21lbnQgdGhlIGV2ZW50IGhhbmRsZXIgb2YgdGhlIG9uLSogYmluZGVyICovXG4gIGhhbmRsZXI/OiBFdmVudEhhbmRsZXI7XG4gIHN0YXJCaW5kZXJzOiBhbnk7XG59XG5cbmV4cG9ydCBjbGFzcyBUaW55YmluZCB7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgZXZlbnQgaGFuZGxlciwgY2FsbGVzIHRoZSBmdW5jdGlvbiBkZWZpbmVkIGluIGhpcyBiaW5kZXJcbiAgICogQHNlZSBCaW5kaW5nLmV2ZW50SGFuZGxlclxuICAgKiBAcGFyYW0gZWwgVGhlIGVsZW1lbnQgdGhlIGV2ZW50IHdhcyB0cmlnZ2VyZWQgZnJvbVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBoYW5kbGVyKHRoaXM6IGFueSwgY29udGV4dDogYW55LCBldjogRXZlbnQsIGJpbmRpbmc6IEJpbmRpbmcsIGVsOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnNvbGUud2FybignaGFuZGxlcicsIHRoaXMpO1xuICAgIHRoaXMuY2FsbChjb250ZXh0LCBldiwgYmluZGluZy52aWV3Lm1vZGVscywgZWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC4gSWYgbm8gYmluZGVyIGFib3ZlIGlzIG1hdGNoZWQgaXQgd2lsbCBmYWxsXG4gICAqIGJhY2sgdG8gdXNpbmcgdGhpcyBiaW5kZXIuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGZhbGxiYWNrQmluZGVyKHRoaXM6IEJpbmRpbmcsIGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGFueSkge1xuICAgIGlmICghdGhpcy50eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3Qgc2V0IGF0dHRyaWJ1dGUgb2YgJyArIHRoaXMudHlwZSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUodGhpcy50eXBlLCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLnR5cGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBzaW5nbGV0b24gaW5zdGFuY2UgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFRpbnliaW5kO1xuXG4gIHB1YmxpYyBiaW5kZXJTZXJ2aWNlOiBCaW5kZXJzU2VydmljZTtcblxuICBwdWJsaWMgY29tcG9uZW50U2VydmljZTogQ29tcG9uZW50U2VydmljZTtcblxuICBwdWJsaWMgZm9ybWF0dGVyU2VydmljZTogRm9ybWF0dGVyU2VydmljZTtcblxuICAvKiogR2xvYmFsIGJpbmRlcnMgKi9cbiAgcHVibGljIGJpbmRlcnM6IElCaW5kZXJzPGFueT4gPSB7fTtcblxuICAvKiogR2xvYmFsIGNvbXBvbmVudHMuICovXG4gIHB1YmxpYyBjb21wb25lbnRzOiBJQ29tcG9uZW50cyA9IHt9O1xuXG4gIC8qKiBHbG9iYWwgZm9ybWF0dGVycy4gKi9cbiAgcHVibGljIGZvcm1hdHRlcnM6IElGb3JtYXR0ZXJzID0ge307XG5cbiAgLyoqIEdsb2JhbCAoc2lnaHRnbGFzcykgYWRhcHRlcnMuICovXG4gIHB1YmxpYyAgYWRhcHRlcnM6IElBZGFwdGVycyA9IHtcbiAgICAnLic6IGFkYXB0ZXIsXG4gIH07XG5cbiAgcHVibGljIHBhcnNlVGVtcGxhdGUgPSBwYXJzZVRlbXBsYXRlO1xuXG4gIHB1YmxpYyBwYXJzZVR5cGUgPSBwYXJzZVR5cGU7XG5cbiAgLyoqIERlZmF1bHQgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgcHVibGljIHRlbXBsYXRlRGVsaW1pdGVycyA9IFsneycsICd9J107XG5cbiAgLyoqIERlZmF1bHQgc2lnaHRnbGFzcyByb290IGludGVyZmFjZS4gKi9cbiAgcHVibGljIHJvb3RJbnRlcmZhY2UgPSAnLic7XG5cbiAgLyoqIFByZWxvYWQgZGF0YSBieSBkZWZhdWx0LiAqL1xuICBwdWJsaWMgcHJlbG9hZERhdGEgPSB0cnVlO1xuXG4gIC8qKiBEZWZhdWx0IGF0dHJpYnV0ZSBwcmVmaXguICovXG4gIHByaXZhdGUgX3ByZWZpeCA9ICdydic7XG5cbiAgLyoqIERlZmF1bHQgYXR0cmlidXRlIGZ1bGwgcHJlZml4LiAqL1xuICBwcml2YXRlIF9mdWxsUHJlZml4ID0gJ3J2LSc7XG5cbiAgc2V0IHByZWZpeCh2YWx1ZSkge1xuICAgIHRoaXMuX3ByZWZpeCA9IHZhbHVlO1xuICAgIHRoaXMuX2Z1bGxQcmVmaXggPSB2YWx1ZSArICctJztcbiAgfVxuXG4gIGdldCBwcmVmaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZWZpeDtcbiAgfVxuXG4gIGdldCBmdWxsUHJlZml4KCkge1xuICAgIHJldHVybiB0aGlzLl9mdWxsUHJlZml4O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gc2luZ2xldG9uIGluc3RhbmNlIG9mIFRpbnliaW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iaW5kZXJTZXJ2aWNlID0gbmV3IEJpbmRlcnNTZXJ2aWNlKHRoaXMuYmluZGVycyk7XG4gICAgdGhpcy5jb21wb25lbnRTZXJ2aWNlID0gbmV3IENvbXBvbmVudFNlcnZpY2UodGhpcy5jb21wb25lbnRzKTtcbiAgICB0aGlzLmZvcm1hdHRlclNlcnZpY2UgPSBuZXcgRm9ybWF0dGVyU2VydmljZSh0aGlzLmZvcm1hdHRlcnMpO1xuICAgIGlmIChUaW55YmluZC5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIFRpbnliaW5kLmluc3RhbmNlO1xuICAgIH1cbiAgICBUaW55YmluZC5pbnN0YW5jZSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2VzIGFuIG9iamVjdCBsaXRlcmFsIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgZ2xvYmFsIG9wdGlvbnMuXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqL1xuICBwdWJsaWMgY29uZmlndXJlKG9wdGlvbnM6IGFueSkge1xuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goIChvcHRpb24pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRpb25dO1xuICAgICAgc3dpdGNoIChvcHRpb24pIHtcbiAgICAgICAgY2FzZSAnYmluZGVycyc6XG4gICAgICAgICAgdGhpcy5iaW5kZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB0aGlzLmJpbmRlcnMsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZm9ybWF0dGVycyc6XG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB0aGlzLmZvcm1hdHRlcnMsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY29tcG9uZW50cyc6XG4gICAgICAgICAgdGhpcy5jb21wb25lbnRzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB0aGlzLmNvbXBvbmVudHMsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWRhcHRlcnMnOlxuICAgICAgICAgIHRoaXMuYWRhcHRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHRoaXMuYWRhcHRlcnMsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYWRhcHRlcic6XG4gICAgICAgICAgdGhpcy5hZGFwdGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdGhpcy5hZGFwdGVycywgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwcmVmaXgnOlxuICAgICAgICAgIHRoaXMucHJlZml4ID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BhcnNlVGVtcGxhdGUnOlxuICAgICAgICAgIHRoaXMucGFyc2VUZW1wbGF0ZSA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwYXJzZVR5cGUnOlxuICAgICAgICAgIHRoaXMucGFyc2VUeXBlID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3RlbXBsYXRlRGVsaW1pdGVycyc6XG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZURlbGltaXRlcnMgPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncm9vdEludGVyZmFjZSc6XG4gICAgICAgICAgdGhpcy5yb290SW50ZXJmYWNlID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ByZWxvYWREYXRhJzpcbiAgICAgICAgICB0aGlzLnByZWxvYWREYXRhID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS53YXJuKCdPcHRpb24gbm90IHN1cHBvcnRlZCcsIG9wdGlvbiwgdmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGEgY29tcG9uZW50IG9uIHRoZSBzcGVjaWZpZWQgZWxlbWVudCBhbmRcbiAgICogcmV0dXJucyBhIHRpbnliaW5kLlZpZXcgaW5zdGFuY2UuXG4gICAqL1xuICBwdWJsaWMgaW5pdChjb21wb25lbnRLZXk6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50LCBkYXRhID0ge30pIHtcbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIH1cblxuICAgIC8vIENvbXBvbmVudCBpcyBkZXByaWNhdGVkIGNvbXBvbmVudFxuICAgIGlmICh0aGlzLmNvbXBvbmVudHNbY29tcG9uZW50S2V5XS5oYXNPd25Qcm9wZXJ0eSgnaW5pdGlhbGl6ZScpICYmIHRoaXMuY29tcG9uZW50c1tjb21wb25lbnRLZXldLmhhc093blByb3BlcnR5KCd0ZW1wbGF0ZScpKSB7XG4gICAgICBjb25zdCBjb21wb25lbnQgPSAodGhpcy5jb21wb25lbnRzW2NvbXBvbmVudEtleV0gYXMgSUNsYXNzaWNDb21wb25lbnQ8YW55Pik7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IGNvbXBvbmVudC50ZW1wbGF0ZS5jYWxsKHRoaXMsIGVsKTtcbiAgICAgIGlmICh0ZW1wbGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICBlbC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjb3BlID0gY29tcG9uZW50LmluaXRpYWxpemUuY2FsbCh0aGlzLCBlbCwgZGF0YSk7XG5cbiAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmJpbmQoZWwsIHNjb3BlKTtcbiAgICAgIHZpZXcuYmluZCgpO1xuICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldFZpZXdPcHRpb25zKG9wdGlvbnM/OiBJT3B0aW9uc1BhcmFtKSB7XG4gICAgY29uc3Qgdmlld09wdGlvbnM6IElPcHRpb25zUGFyYW0gPSB7XG4gICAgICAvLyBFWFRFTlNJT05TXG4gICAgICBhZGFwdGVyczogPElBZGFwdGVycz4gbmV3IE9iamVjdCgpLFxuICAgICAgYmluZGVyczogPElCaW5kZXJzPGFueT4+IG5ldyBPYmplY3QobnVsbCksXG4gICAgICBjb21wb25lbnRzOiA8SUNvbXBvbmVudHM+IG5ldyBPYmplY3QobnVsbCksXG4gICAgICBmb3JtYXR0ZXJzOiA8SUZvcm1hdHRlcnM+IG5ldyBPYmplY3QobnVsbCksXG5cbiAgICAgIC8vIG90aGVyXG4gICAgICBzdGFyQmluZGVyczogbmV3IE9iamVjdChudWxsKSxcblxuICAgICAgLy8gc2lnaHRnbGFzc1xuICAgICAgcm9vdEludGVyZmFjZTogPFJvb3Q+IG5ldyBPYmplY3QobnVsbCksXG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB2aWV3T3B0aW9ucy5iaW5kZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB2aWV3T3B0aW9ucy5iaW5kZXJzLCBvcHRpb25zLmJpbmRlcnMpO1xuICAgICAgdmlld09wdGlvbnMuZm9ybWF0dGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuZm9ybWF0dGVycywgb3B0aW9ucy5mb3JtYXR0ZXJzKTtcbiAgICAgIHZpZXdPcHRpb25zLmNvbXBvbmVudHMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHZpZXdPcHRpb25zLmNvbXBvbmVudHMsIG9wdGlvbnMuY29tcG9uZW50cyk7XG4gICAgICB2aWV3T3B0aW9ucy5hZGFwdGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuYWRhcHRlcnMsIG9wdGlvbnMuYWRhcHRlcnMpO1xuICAgIH1cblxuICAgIHZpZXdPcHRpb25zLnByZWZpeCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wcmVmaXggPyBvcHRpb25zLnByZWZpeCA6IHRoaXMucHJlZml4O1xuICAgIHZpZXdPcHRpb25zLmZ1bGxQcmVmaXggPSB2aWV3T3B0aW9ucy5wcmVmaXggPyB2aWV3T3B0aW9ucy5wcmVmaXggKyAnLScgOiB0aGlzLmZ1bGxQcmVmaXg7XG4gICAgdmlld09wdGlvbnMudGVtcGxhdGVEZWxpbWl0ZXJzID0gb3B0aW9ucyAmJiBvcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycyA/IG9wdGlvbnMudGVtcGxhdGVEZWxpbWl0ZXJzIDogdGhpcy50ZW1wbGF0ZURlbGltaXRlcnM7XG4gICAgdmlld09wdGlvbnMucm9vdEludGVyZmFjZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5yb290SW50ZXJmYWNlID8gb3B0aW9ucy5yb290SW50ZXJmYWNlIDogdGhpcy5yb290SW50ZXJmYWNlO1xuICAgIHZpZXdPcHRpb25zLnByZWxvYWREYXRhID0gb3B0aW9ucyAmJiBvcHRpb25zLnByZWxvYWREYXRhID8gb3B0aW9ucy5wcmVsb2FkRGF0YSA6IHRoaXMucHJlbG9hZERhdGE7XG4gICAgdmlld09wdGlvbnMuaGFuZGxlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5oYW5kbGVyID8gb3B0aW9ucy5oYW5kbGVyIDogVGlueWJpbmQuaGFuZGxlcjtcblxuICAgIC8vIG1lcmdlIGV4dGVuc2lvbnNcbiAgICB2aWV3T3B0aW9ucy5iaW5kZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCB2aWV3T3B0aW9ucy5iaW5kZXJzLCB0aGlzLmJpbmRlcnMpO1xuICAgIHZpZXdPcHRpb25zLmZvcm1hdHRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIHZpZXdPcHRpb25zLmZvcm1hdHRlcnMsIHRoaXMuZm9ybWF0dGVycyk7XG4gICAgdmlld09wdGlvbnMuY29tcG9uZW50cyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuY29tcG9uZW50cywgdGhpcy5jb21wb25lbnRzKTtcbiAgICB2aWV3T3B0aW9ucy5hZGFwdGVycyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgdmlld09wdGlvbnMuYWRhcHRlcnMsIHRoaXMuYWRhcHRlcnMpO1xuXG4gICAgLy8gZ2V0IGFsbCBzdGFyQmluZGVycyBmcm9tIGF2YWlsYWJsZSBiaW5kZXJzXG4gICAgaWYgKHZpZXdPcHRpb25zLmJpbmRlcnMpIHtcbiAgICAgIHZpZXdPcHRpb25zLnN0YXJCaW5kZXJzID0gT2JqZWN0LmtleXModmlld09wdGlvbnMuYmluZGVycykuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGtleS5pbmRleE9mKCcqJykgPiAwO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICh2aWV3T3B0aW9ucyBhcyBJVmlld09wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJpbmRzIHNvbWUgZGF0YSB0byBhIHRlbXBsYXRlIC8gZWxlbWVudC4gUmV0dXJucyBhIHRpbnliaW5kLlZpZXcgaW5zdGFuY2UuXG4gICAqL1xuICBwdWJsaWMgYmluZChlbDogSFRNTEVsZW1lbnQsIG1vZGVsczogYW55LCBvcHRpb25zPzogSU9wdGlvbnNQYXJhbSkge1xuICAgIGNvbnN0IHZpZXdPcHRpb25zOiBJVmlld09wdGlvbnMgPSB0aGlzLmdldFZpZXdPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgbW9kZWxzID0gbW9kZWxzIHx8IG5ldyBPYmplY3QobnVsbCk7XG4gICAgT2JzZXJ2ZXIudXBkYXRlT3B0aW9ucyh2aWV3T3B0aW9ucyk7XG5cbiAgICBjb25zdCB2aWV3ID0gbmV3IFZpZXcoZWwsIG1vZGVscywgdmlld09wdGlvbnMpO1xuICAgIHZpZXcuYmluZCgpO1xuICAgIHJldHVybiB2aWV3O1xuICB9XG59XG4iLCJ0eXBlIEV2ZW50Q2FsbGJhY2sgPSAoLi4uYXJnczogYW55W10pID0+IGFueTtcblxuaW50ZXJmYWNlIElFdmVudHMge1xuICBbZXZlbnROYW1lOiBzdHJpbmddOiBFdmVudENhbGxiYWNrW107XG59XG5cbi8qKlxuICogTGl0dGxlIERpc3BhdGNoZXIgaW5zcGlyZWQgYnkgTWljcm9FdmVudC5qc1xuICpcbiAqIEB0eXBlIHtvYmplY3R9XG4gKi9cbmNsYXNzIEdsb2JhbEV2ZW50IHtcblxuICAvKiogc2luZ2xldG9uIGluc3RhbmNlICovXG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBHbG9iYWxFdmVudDtcbiAgLyoqXG4gICAqIE9iamVjdCB0aGF0IGtlZXBzIGFsbCB0aGUgZXZlbnRzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5EaXNwYXRjaGVyXG4gICAqIEByZWFkT25seVxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKi9cbiAgcHJpdmF0ZSBldmVudHM6IElFdmVudHMgPSB7fTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgRGlzcGF0Y2hlci5cbiAgICogQG1lbWJlcm9mIERpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmIChHbG9iYWxFdmVudC5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIEdsb2JhbEV2ZW50Lmluc3RhbmNlO1xuICAgIH1cblxuICAgIEdsb2JhbEV2ZW50Lmluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBCaW5kIGEgY2FsbGJhY2sgdG8gYW4gZXZlbnRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkRpc3BhdGNoZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge0V2ZW50Q2FsbGJhY2t9IGZ1bmN0aW9uXG4gICAqL1xuICBwdWJsaWMgb24oZTogc3RyaW5nLCBmOiBFdmVudENhbGxiYWNrKSB7XG4gICAgdGhpcy5ldmVudHNbZV0gPSB0aGlzLmV2ZW50c1tlXSB8fCBbXTtcbiAgICB0aGlzLmV2ZW50c1tlXS5wdXNoKGYpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuYmluZCBldmVudFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuRGlzcGF0Y2hlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7RXZlbnRDYWxsYmFja30gZnVuY3Rpb25cbiAgICovXG4gIHB1YmxpYyBvZmYoZTogc3RyaW5nLCBmOiBFdmVudENhbGxiYWNrKSB7XG4gICAgaWYgKGUgaW4gdGhpcy5ldmVudHMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudHNbZV0uc3BsaWNlKHRoaXMuZXZlbnRzW2VdLmluZGV4T2YoZiksIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmUgdGhlIGV2ZW50IHJ1bm5pbmcgYWxsIHRoZSBldmVudCBhc3NvY2lhdGVkIHRvIGl0XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5EaXNwYXRjaGVyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSAge2FueVtdfSBhcmdzXG4gICAqL1xuICBwdWJsaWMgdHJpZ2dlcihlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7IC8vIGUsIC4uLmFyZ3NcbiAgICBpZiAoZSBpbiB0aGlzLmV2ZW50cyA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXZlbnRzW2VdLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmV2ZW50c1tlXVtpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgR2xvYmFsRXZlbnQgfTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJVHJhbnNpdGlvbiB7XG4gIC8vICRvbGRDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD47XG4gIC8vICRuZXdDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD47XG4gIC8vIG5ld0NvbnRhaW5lckxvYWRpbmc6IFByb21pc2U8SlF1ZXJ5PEhUTUxFbGVtZW50Pj47XG4gIC8vIGV4dGVuZChvYmo6IG9iamVjdCk6IG9iamVjdDtcbiAgaW5pdCgkb2xkQ29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBuZXdDb250YWluZXI6IFByb21pc2U8SlF1ZXJ5PEhUTUxFbGVtZW50Pj4pOiBQcm9taXNlPHZvaWQ+O1xuICBkb25lKCk6IHZvaWQ7XG4gIHN0YXJ0KCk6IGFueTtcbn1cblxuLyoqXG4gKiBCYXNlVHJhbnNpdGlvbiB0byBleHRlbmRcbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVRyYW5zaXRpb24gaW1wbGVtZW50cyBJVHJhbnNpdGlvbiB7XG4gIC8qKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQHR5cGUge0pRdWVyeTxIVE1MRWxlbWVudD59XG4gICAqL1xuICBwcm90ZWN0ZWQgJG9sZENvbnRhaW5lcj86IEpRdWVyeTxIVE1MRWxlbWVudD47XG5cbiAgLyoqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKiBAdHlwZSB7SlF1ZXJ5PEhUTUxFbGVtZW50Pn1cbiAgICovXG4gIHByb3RlY3RlZCAkbmV3Q29udGFpbmVyPzogSlF1ZXJ5PEhUTUxFbGVtZW50PjtcblxuICAvKipcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqIEB0eXBlIHtQcm9taXNlfVxuICAgKi9cbiAgcHJvdGVjdGVkIG5ld0NvbnRhaW5lckxvYWRpbmc/OiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+O1xuXG4gIHByb3RlY3RlZCBkZWZlcnJlZDogYW55OyAvLyBUT0RPIHR5cGVcblxuICBwcm90ZWN0ZWQgZGVidWcgPSBEZWJ1ZygnYmFyYmE6QmFzZVRyYW5zaXRpb24nKTtcblxuICAvKipcbiAgICogSGVscGVyIHRvIGV4dGVuZCB0aGUgb2JqZWN0XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG5ld09iamVjdFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IG5ld0luaGVyaXRPYmplY3RcbiAgICovXG4gIC8vIHB1YmxpYyBleHRlbmQob2JqOiBvYmplY3QpIHtcbiAgLy8gICByZXR1cm4gVXRpbHMuZXh0ZW5kKHRoaXMsIG9iaik7XG4gIC8vIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZnJvbSBQamF4IG1vZHVsZSB0byBpbml0aWFsaXplXG4gICAqIHRoZSB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IG9sZENvbnRhaW5lclxuICAgKiBAcGFyYW0gIHtQcm9taXNlfSBuZXdDb250YWluZXJcbiAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICovXG4gIHB1YmxpYyBpbml0KCRvbGRDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG5ld0NvbnRhaW5lcjogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy4kb2xkQ29udGFpbmVyID0gJG9sZENvbnRhaW5lcjtcblxuICAgIHRoaXMuZGVmZXJyZWQgPSBVdGlscy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IG5ld0NvbnRhaW5lclJlYWR5ID0gVXRpbHMuZGVmZXJyZWQoKTtcbiAgICB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgPSBuZXdDb250YWluZXJSZWFkeS5wcm9taXNlO1xuXG4gICAgdGhpcy5zdGFydCgpO1xuXG4gICAgbmV3Q29udGFpbmVyLnRoZW4oKCRuZXdDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pID0+IHtcbiAgICAgIHNlbGYuJG5ld0NvbnRhaW5lciA9ICRuZXdDb250YWluZXI7XG4gICAgICBuZXdDb250YWluZXJSZWFkeS5yZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5kZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgY2FsbGVkIGFzIHNvb24gdGhlIFRyYW5zaXRpb24gaXMgZmluaXNoZWRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqL1xuICBwdWJsaWMgZG9uZSgpIHtcbiAgICB0aGlzLmRlYnVnKCdkb25lJyk7XG4gICAgLy8gdGhpcy4kb2xkQ29udGFpbmVyWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy4kb2xkQ29udGFpbmVyW10pO1xuICAgIGlmICghdGhpcy4kb2xkQ29udGFpbmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgcmVtb3ZlIG9sZCBjb250YWluZXInKTtcbiAgICB9XG4gICAgdGhpcy4kb2xkQ29udGFpbmVyLnJlbW92ZSgpO1xuICAgIC8vIHRoaXMubmV3Q29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgaWYgKCF0aGlzLiRuZXdDb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBzaG93IG5ldyBjb250YWluZXInKTtcbiAgICB9XG4gICAgdGhpcy4kbmV3Q29udGFpbmVyLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XG4gICAgdGhpcy5kZWZlcnJlZC5yZXNvbHZlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29uc3RydWN0b3IgZm9yIHlvdXIgVHJhbnNpdGlvblxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3Qgc3RhcnQoKTogYW55O1xufVxuIiwiLy8gZXhwb3J0ICogZnJvbSAnLi4vLi4vbm9kZV9tb2R1bGVzL3RpbnliaW5kL3NyYy9pbmRleCc7IC8vIGVycm9yIG9uIHRzYyB3aXRoIGxpbmtlZCBwYWNrYWdlIChkdXBsaWNhdGVkIGpxdWVyeSBkZWZpbml0aW9ucylcbi8vIGV4cG9ydCAqIGZyb20gJ3RpbnliaW5kJzsgLy8gZXJyb3Igb24gd2VicGFjayAvIGJhYmVsLWxvYWRlciB3aXRoIGxpbmtlZCBwYWNrYWdlcyAoY2FuJ3QgaW1wb3J0IHRoZSBzb3VyY2UgZmlsZXMpXG5cbi8vIGp1c3QgYSBjb3B5IG9mIHRoZSBzb3VyY2UgZmlsZXMgc2VlbXMgdG8gd29yayBvbiBib3RoIHRzYyBhbmQgd2VicGFja1xuZXhwb3J0ICogZnJvbSAnLi4vbW9kdWxlcy90aW55YmluZC9pbmRleCc7XG4iLCJpbXBvcnQgeyBjb3VudCB9IGZyb20gJy4vY291bnQuZm9ybWF0dGVyJztcblxuZXhwb3J0IGNvbnN0IGVtcHR5ID0gKGE6IGFueVtdIHwgc3RyaW5nICkgPT4ge1xuICByZXR1cm4gIWNvdW50KGEpO1xufTtcbiIsIi8qKlxuICogUmV0dXJucyB0aGUgc2l6ZSBvZiBhIHN0cmluZyAodGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzKSBvciBhbiBhcnJheSAodGhlIG51bWJlciBvZiBlbGVtZW50cykuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvYXJyYXktZmlsdGVycyNzaXplXG4gKi9cbmV4cG9ydCBjb25zdCBjb3VudCA9ICh2YWx1ZTogYW55W10gfCBzdHJpbmcpID0+IHtcbiAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZS5sZW5ndGgpID8gdmFsdWUubGVuZ3RoIDogMDtcbn07XG4iLCJpbXBvcnQgeyBJT3B0aW9uc1BhcmFtLCBJVmlld09wdGlvbnMgfSBmcm9tICcuL3RpbnliaW5kJztcbmltcG9ydCB7IFBSSU1JVElWRSwgS0VZUEFUSCwgcGFyc2VUeXBlLCBwYXJzZURlY2xhcmF0aW9uIH0gZnJvbSAnLi9wYXJzZXJzJztcbmltcG9ydCB7IElGb3JtYXR0ZXJPYnNlcnZlcnMsIElCaW5kYWJsZSB9IGZyb20gJy4vYmluZGluZyc7XG5pbXBvcnQgeyBJQmluZGVycyB9IGZyb20gJy4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSUZvcm1hdHRlcnMgfSBmcm9tICcuL2Zvcm1hdHRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgSUNsYXNzaWNDb21wb25lbnQsIElDb21wb25lbnRzIH0gZnJvbSAnLi9jb21wb25lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZlciwgSU9ic2VydmVycywgSU9ic2VydmVyU3luY0NhbGxiYWNrIH0gZnJvbSAnLi9vYnNlcnZlcic7XG5pbXBvcnQgeyBJQWRhcHRlcnMgfSBmcm9tICcuL2FkYXB0ZXInO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBJQm91bmRFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBfYm91bmQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElGb3JtYXR0ZXJzT2JzZXJ2ZXJzIHtcbiAgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogSUZvcm1hdHRlck9ic2VydmVycztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJS2V5cGF0aHMge1xuICBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbi8qKlxuICogY29tcG9uZW50IHZpZXcgZW5jYXBzdWxhdGVkIGFzIGEgYmluZGluZyB3aXRoaW4gaXQncyBwYXJlbnQgdmlldy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbXBvbmVudEJpbmRpbmcgaW1wbGVtZW50cyBJQmluZGFibGUge1xuICBwdWJsaWMgdmlldzogVmlldztcbiAgcHVibGljIGVsOiBJQm91bmRFbGVtZW50O1xuICBwdWJsaWMgdHlwZTogc3RyaW5nO1xuICBwdWJsaWMgY29tcG9uZW50OiBJQ2xhc3NpY0NvbXBvbmVudDxhbnk+O1xuICAvKipcbiAgICogc3RhdGljIHZhbHVlcyAoUFJJTUlUSVZFIEF0dHJpYnV0ZXMpXG4gICAqL1xuICBwdWJsaWMgc3RhdGljOiB7W2tleTogc3RyaW5nXTogYW55fSA9IHt9O1xuICAvKipcbiAgICoga2V5cGF0aCB2YWx1ZXMgKEtFWVBBVEggQXR0cmlidXRlcylcbiAgICovXG4gIHB1YmxpYyBrZXlwYXRoczogSUtleXBhdGhzID0ge307XG4gIHB1YmxpYyBmb3JtYXR0ZXJzT2JzZXJ2ZXJzOiBJRm9ybWF0dGVyc09ic2VydmVycyA9IHt9O1xuICBwdWJsaWMgb2JzZXJ2ZXJzOiBJT2JzZXJ2ZXJzO1xuICBwdWJsaWMgYmluZGluZ1ByZWZpeDogc3RyaW5nOyAvLyA9IHRpbnliaW5kLmZ1bGxQcmVmaXg7XG4gIHB1YmxpYyBwaXBlczogYW55ID0ge307XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGEgY29tcG9uZW50IGJpbmRpbmcgZm9yIHRoZSBzcGVjaWZpZWQgdmlldy4gVGhlIHJhdyBjb21wb25lbnRcbiAgICogZWxlbWVudCBpcyBwYXNzZWQgaW4gYWxvbmcgd2l0aCB0aGUgY29tcG9uZW50IHR5cGUuIEF0dHJpYnV0ZXMgYW5kIHNjb3BlXG4gICAqIGluZmxlY3Rpb25zIGFyZSBkZXRlcm1pbmVkIGJhc2VkIG9uIHRoZSBjb21wb25lbnRzIGRlZmluZWQgYXR0cmlidXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHZpZXdcbiAgICogQHBhcmFtIGVsXG4gICAqIEBwYXJhbSB0eXBlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2aWV3OiBWaWV3LCBlbDogSFRNTEVsZW1lbnQsIHR5cGU6IHN0cmluZykge1xuICAgIGlmICghdmlldy5vcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY29tcG9uZW50cyBmb3VuZCEnKTtcbiAgICB9XG4gICAgdGhpcy52aWV3ID0gdmlldztcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmNvbXBvbmVudCA9ICh2aWV3Lm9wdGlvbnMuY29tcG9uZW50c1t0aGlzLnR5cGVdIGFzIElDbGFzc2ljQ29tcG9uZW50PGFueT4pO1xuICAgIHRoaXMuc3RhdGljID0ge307XG4gICAgdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgICB0aGlzLmJpbmRpbmdQcmVmaXggPSB2aWV3Lm9wdGlvbnMucHJlZml4ICsgJy0nOyAvLyBUT0RPXG4gICAgdGhpcy5wYXJzZVRhcmdldCgpO1xuICAgIHRoaXMuc3luYygpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIHRoZSBvYmplY3Qga2V5cGF0aFxuICAgKiBAcGFyYW0gb2JqXG4gICAqIEBwYXJhbSBrZXlwYXRoXG4gICAqL1xuICBwdWJsaWMgb2JzZXJ2ZShvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKTogT2JzZXJ2ZXIge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2ZXIob2JqLCBrZXlwYXRoLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmFsdWVzIGluIG1vZGVsIHdoZW4gdGhlIG9ic2VydmVyIGNhbGxzIHRoaXMgZnVuY3Rpb25cbiAgICogT25seSBzeW5jIHZhbHVlIGlmIGl0IGlzIG1hcmtlZCBhcyBiaW5kXG4gICAqL1xuICBwdWJsaWMgc3luYygpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLnN0YXRpYykuZm9yRWFjaCgocHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICBpZiAodGhpcy5jb21wb25lbnQuYmluZCAmJiB0aGlzLmNvbXBvbmVudC5iaW5kLmluZGV4T2YocHJvcGVydHlOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgKHRoaXMgYXMgYW55KVtwcm9wZXJ0eU5hbWVdID0gdGhpcy5zdGF0aWNbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgLy8gKHRoaXMgYXMgYW55KVtrZXldID0gdGhpcy5mb3JtYXR0ZWRWYWx1ZXModGhpcy5zdGF0aWNba2V5XSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMub2JzZXJ2ZXJzKS5mb3JFYWNoKChwcm9wZXJ0eU5hbWUpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbXBvbmVudC5iaW5kICYmIHRoaXMuY29tcG9uZW50LmJpbmQuaW5kZXhPZihwcm9wZXJ0eU5hbWUpICE9PSAtMSkge1xuICAgICAgICAodGhpcyBhcyBhbnkpW3Byb3BlcnR5TmFtZV0gPSB0aGlzLm9ic2VydmVyc1twcm9wZXJ0eU5hbWVdLnZhbHVlKCk7XG4gICAgICAgIC8vICh0aGlzIGFzIGFueSlbcHJvcGVydHlOYW1lXSA9IHRoaXMuZm9ybWF0dGVkVmFsdWVzKHRoaXMub2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV0udmFsdWUoKSwgcHJvcGVydHlOYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXMgdGhlIHZhbHVlIGN1cnJlbnRseSBzZXQgb24gdGhlIG1vZGVsIGJhY2sgdG8gdGhlIHBhcmVudCBtb2RlbC5cbiAgICogWW91IG5lZWQgdG8gY2FsbCB0aGlzIG1ldGhvZCBtYW51YWxseSBpbiB5b3VyIGNvbXBvbmVudFxuICAgKi9cbiAgcHVibGljIHB1Ymxpc2gocHJvcGVydHlOYW1lPzogc3RyaW5nLCB2YWx1ZT86IGFueSkge1xuICAgIGlmIChwcm9wZXJ0eU5hbWUpIHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVyc1twcm9wZXJ0eU5hbWVdKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV0uc2V0VmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCBtYXAgdXNpbmcgdGhlIGNvbXBvbmVudCdzIHNjb3BlIGluZmxlY3Rpb25zLlxuICAgKi9cbiAgcHVibGljIGxvY2FscygpIHtcbiAgICBjb25zdCByZXN1bHQ6IGFueSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGljKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5zdGF0aWNba2V5XTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMub2JzZXJ2ZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHJlc3VsdFtrZXldID0gdGhpcy5vYnNlcnZlcnNba2V5XS52YWx1ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGNhbWVsLWNhc2VkIHZlcnNpb24gb2YgdGhlIHN0cmluZy4gVXNlZCB3aGVuIHRyYW5zbGF0aW5nIGFuXG4gICAqIGVsZW1lbnQncyBhdHRyaWJ1dGUgbmFtZSBpbnRvIGEgcHJvcGVydHkgbmFtZSBmb3IgdGhlIGNvbXBvbmVudCdzIHNjb3BlLlxuICAgKiBUT0RPIG1vdmUgdG8gdXRpbHNcbiAgICogQHBhcmFtIHN0cmluZ1xuICAgKi9cbiAgcHVibGljIGNhbWVsQ2FzZShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvLShbYS16XSkvZywgKGdyb3VwZWQpID0+IHtcbiAgICAgIHJldHVybiBncm91cGVkWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TWVyZ2VkT3B0aW9ucygpIHtcbiAgICBjb25zdCBvcHRpb25zOiBJT3B0aW9uc1BhcmFtID0ge1xuICAgICAgLy8gRVhURU5TSU9OU1xuICAgICAgYWRhcHRlcnM6IDxJQWRhcHRlcnM+IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBiaW5kZXJzOiA8SUJpbmRlcnM8YW55Pj4gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbXBvbmVudHM6IDxJQ29tcG9uZW50cz4gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGZvcm1hdHRlcnM6IDxJRm9ybWF0dGVycz4gT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAgICAgLy8gb3RoZXJcbiAgICAgIHN0YXJCaW5kZXJzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gICAgICAvLyBzaWdodGdsYXNzXG4gICAgICByb290SW50ZXJmYWNlOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5jb21wb25lbnQuYmluZGVycykge1xuICAgICAgb3B0aW9ucy5iaW5kZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmJpbmRlcnMsIHRoaXMuY29tcG9uZW50LmJpbmRlcnMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb21wb25lbnQuZm9ybWF0dGVycykge1xuICAgICAgb3B0aW9ucy5mb3JtYXR0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmZvcm1hdHRlcnMsIHRoaXMuY29tcG9uZW50LmZvcm1hdHRlcnMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb21wb25lbnQuY29tcG9uZW50cykge1xuICAgICAgb3B0aW9ucy5jb21wb25lbnRzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmNvbXBvbmVudHMsIHRoaXMuY29tcG9uZW50LmNvbXBvbmVudHMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb21wb25lbnQuYWRhcHRlcnMpIHtcbiAgICAgIG9wdGlvbnMuYWRhcHRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIG9wdGlvbnMuYWRhcHRlcnMsIHRoaXMuY29tcG9uZW50LmFkYXB0ZXJzKTtcbiAgICB9XG5cbiAgICBvcHRpb25zLmJpbmRlcnMgPSBVdGlscy5jb25jYXQoZmFsc2UsIG9wdGlvbnMuYmluZGVycywgdGhpcy52aWV3Lm9wdGlvbnMuYmluZGVycyk7XG4gICAgb3B0aW9ucy5mb3JtYXR0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmZvcm1hdHRlcnMsIHRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnMpO1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IFV0aWxzLmNvbmNhdChmYWxzZSwgb3B0aW9ucy5jb21wb25lbnRzLCB0aGlzLnZpZXcub3B0aW9ucy5jb21wb25lbnRzKTtcbiAgICBvcHRpb25zLmFkYXB0ZXJzID0gVXRpbHMuY29uY2F0KGZhbHNlLCBvcHRpb25zLmFkYXB0ZXJzLCB0aGlzLnZpZXcub3B0aW9ucy5hZGFwdGVycyk7XG5cbiAgICBvcHRpb25zLnByZWZpeCA9IHRoaXMuY29tcG9uZW50LnByZWZpeCA/IHRoaXMuY29tcG9uZW50LnByZWZpeCA6IHRoaXMudmlldy5vcHRpb25zLnByZWZpeDtcbiAgICBvcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycyA9IHRoaXMuY29tcG9uZW50LnRlbXBsYXRlRGVsaW1pdGVycyA/IHRoaXMuY29tcG9uZW50LnRlbXBsYXRlRGVsaW1pdGVycyA6IHRoaXMudmlldy5vcHRpb25zLnRlbXBsYXRlRGVsaW1pdGVycztcbiAgICBvcHRpb25zLnJvb3RJbnRlcmZhY2UgPSB0aGlzLmNvbXBvbmVudC5yb290SW50ZXJmYWNlID8gdGhpcy5jb21wb25lbnQucm9vdEludGVyZmFjZSA6IHRoaXMudmlldy5vcHRpb25zLnJvb3RJbnRlcmZhY2U7XG4gICAgb3B0aW9ucy5wcmVsb2FkRGF0YSA9IHRoaXMuY29tcG9uZW50LnByZWxvYWREYXRhID8gdGhpcy5jb21wb25lbnQucHJlbG9hZERhdGEgOiB0aGlzLnZpZXcub3B0aW9ucy5wcmVsb2FkRGF0YTtcbiAgICBvcHRpb25zLmhhbmRsZXIgPSB0aGlzLmNvbXBvbmVudC5oYW5kbGVyID8gdGhpcy5jb21wb25lbnQuaGFuZGxlciA6IHRoaXMudmlldy5vcHRpb25zLmhhbmRsZXI7XG5cbiAgICAvLyBnZXQgYWxsIHN0YXJCaW5kZXJzIGZyb20gYXZhaWxhYmxlIGJpbmRlcnNcbiAgICBpZiAob3B0aW9ucy5iaW5kZXJzKSB7XG4gICAgICBvcHRpb25zLnN0YXJCaW5kZXJzID0gT2JqZWN0LmtleXMob3B0aW9ucy5iaW5kZXJzKS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4ga2V5LmluZGV4T2YoJyonKSA+IDA7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIChvcHRpb25zIGFzIElWaWV3T3B0aW9ucyApO1xuICB9XG5cbiAgLyoqXG4gICAqIEludGVyY2VwdHMgYHRpbnliaW5kLkJpbmRpbmc6OmJpbmRgIHRvIGJ1aWxkIGB0aGlzLnZpZXdgIHdpdGggYSBsb2NhbGl6ZWRcbiAgICogbWFwIG9mIG1vZGVscyBmcm9tIHRoZSByb290IHZpZXcuIEJpbmQgYHRoaXMudmlld2Agb24gc3Vic2VxdWVudCBjYWxscy5cbiAgICovXG4gIHB1YmxpYyBiaW5kKCkge1xuICAgIGlmICghdGhpcy5lbC5fYm91bmQpIHtcblxuICAgICAgY29uc3QgaW5uZXJIVE1MID0gdGhpcy5jb21wb25lbnQudGVtcGxhdGUuY2FsbCh0aGlzKTtcbiAgICAgIC8vIGlmIGlubmVySFRNTCBpcyBudWxsIHRoaXMgY29tcG9uZW50IHVzZXMgdGhlIGlubmVySFRNTCB3aGljaCBoZSBhbHJlYWR5IGhhcyFcbiAgICAgIGlmIChpbm5lckhUTUwgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5lbC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogdGhlcmUncyBhIGN5Y2xpYyBkZXBlbmRlbmN5IHRoYXQgbWFrZXMgaW1wb3J0ZWQgVmlldyBhIGR1bW15IG9iamVjdC4gVXNlIHRpbnliaW5kLmJpbmRcbiAgICAgICAqL1xuICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLmNvbXBvbmVudC5pbml0aWFsaXplLmNhbGwodGhpcywgdGhpcy5lbCwgdGhpcy5sb2NhbHMoKSk7XG4gICAgICB0aGlzLnZpZXcgPSBuZXcgVmlldyhBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLmVsLmNoaWxkTm9kZXMpLCBzY29wZSwgdGhpcy5nZXRNZXJnZWRPcHRpb25zKCkpO1xuICAgICAgdGhpcy52aWV3LmJpbmQoKTtcblxuICAgICAgdGhpcy5lbC5fYm91bmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXcuYmluZCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwYXJzZVRhcmdldCgpIHtcblxuICAgIC8vIHBhcnNlIGNvbXBvbmVudCBhdHRyaWJ1dGVzXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuZWwuYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgYXR0cmlidXRlID0gdGhpcy5lbC5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICAvLyBpZiBhdHRyaWJ1dGUgc3RhcnRzIG5vdCB3aXRoIGJpbmRpbmcgcHJlZml4LiBFLmcuIHJ2LVxuICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lLmluZGV4T2YodGhpcy5iaW5kaW5nUHJlZml4KSAhPT0gMCkge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSB0aGlzLmNhbWVsQ2FzZShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICBjb25zdCBwYXJzZWREZWNsYXJhdGlvbiA9IHBhcnNlRGVjbGFyYXRpb24oZGVjbGFyYXRpb24pO1xuXG4gICAgICAgIGlmIChwYXJzZWREZWNsYXJhdGlvbi5waXBlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdGb3JtYXR0ZXJzIG9uIGNvbXBvbmVudCBhcmd1bWVudHMgbm90IHN1cHBvcnRlZCBmb3IgdGhlIG1vbWVudCcsIHBhcnNlZERlY2xhcmF0aW9uLnBpcGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGlwZXNbcHJvcGVydHlOYW1lXSA9IHBhcnNlZERlY2xhcmF0aW9uLnBpcGVzO1xuXG4gICAgICAgIGNvbnN0IHRva2VuID0gcGFyc2VUeXBlKHBhcnNlZERlY2xhcmF0aW9uLmtleXBhdGgpO1xuXG4gICAgICAgIC8vIGlmIGNvbXBvbmVudCBmb3JjZSB0aGlzIHByb3BlcnR5TmFtZSBhcyBzdGF0aWNcbiAgICAgICAgaWYgKHR5cGVvZih0aGlzLmNvbXBvbmVudC5zdGF0aWMpICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmNvbXBvbmVudC5zdGF0aWMuaW5kZXhPZihwcm9wZXJ0eU5hbWUpICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMuc3RhdGljW3Byb3BlcnR5TmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gICAgICAgICAgdGhpcy5zdGF0aWNbcHJvcGVydHlOYW1lXSA9IHRva2VuLnZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IEtFWVBBVEgpIHtcbiAgICAgICAgICB0aGlzLmtleXBhdGhzW3Byb3BlcnR5TmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgICAgdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXSA9IHRoaXMub2JzZXJ2ZSh0aGlzLnZpZXcubW9kZWxzLCB0aGlzLmtleXBhdGhzW3Byb3BlcnR5TmFtZV0sIHRoaXMpO1xuICAgICAgICAgIC8vIG1vZGVsIGJpZGluZyBpcyBjYWxsZWQgaW4gdGhpcy5zeW5jISFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhblxcJ3QgcGFyc2UgY29tcG9uZW50IGF0dHJpYnV0ZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRk9STUFUVEVSUyBUT0RPXG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIHBhcnNlcyB0aGUgZm9ybWF0dGVycyBpbiBhcmd1bWVudHNcbiAgICogQHBhcmFtIGZvcm1hdHRlckluZGV4XG4gICAqL1xuICAvLyBwYXJzZUZvcm1hdHRlckFyZ3VtZW50c1Byb3BlcnR5KGFyZ3M6IHN0cmluZ1tdLCBmb3JtYXR0ZXJJbmRleDogbnVtYmVyLCBwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgLy8gICByZXR1cm4gYXJnc1xuICAvLyAgIC5tYXAocGFyc2VUeXBlKVxuICAvLyAgIC5tYXAoKHt0eXBlLCB2YWx1ZX0sIGFpKSA9PiB7XG4gIC8vICAgICBpZiAodHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gIC8vICAgICAgIGNvbnN0IHByaW1pdGl2ZVZhbHVlID0gdmFsdWU7XG4gIC8vICAgICAgIHJldHVybiBwcmltaXRpdmVWYWx1ZTtcbiAgLy8gICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gS0VZUEFUSCkge1xuICAvLyAgICAgICBjb25zb2xlLmxvZygnVE9ETycsIHByb3BlcnR5TmFtZSk7XG4gIC8vICAgICAgIC8vIGtleXBhdGggaXMgc3RyaW5nXG4gIC8vICAgICAgIGNvbnN0IGtleXBhdGggPSAodmFsdWUgYXMgc3RyaW5nICk7XG4gIC8vICAgICAgIGlmICghdGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV0pIHtcbiAgLy8gICAgICAgICB0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXSA9IHt9O1xuICAvLyAgICAgICB9XG4gIC8vICAgICAgIGlmICghdGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV1bZm9ybWF0dGVySW5kZXhdKSB7XG4gIC8vICAgICAgICAgdGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV1bZm9ybWF0dGVySW5kZXhdID0ge307XG4gIC8vICAgICAgIH1cblxuICAvLyAgICAgICBsZXQgb2JzZXJ2ZXIgPSB0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXVtmb3JtYXR0ZXJJbmRleF1bYWldO1xuXG4gIC8vICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgLy8gICAgICAgICBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZSh0aGlzLnZpZXcubW9kZWxzLCBrZXlwYXRoLCB0aGlzKTtcbiAgLy8gICAgICAgICB0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXVtmb3JtYXR0ZXJJbmRleF1bYWldID0gb2JzZXJ2ZXI7XG4gIC8vICAgICAgIH1cbiAgLy8gICAgICAgcmV0dXJuIG9ic2VydmVyLnZhbHVlKCk7XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gYXJndW1lbnQgdHlwZScpO1xuICAvLyAgICAgfVxuICAvLyAgIH0pO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgYWxsIHRoZSBjdXJyZW50IGZvcm1hdHRlcnMgdG8gdGhlIHN1cHBsaWVkIHZhbHVlIGFuZCByZXR1cm5zIHRoZVxuICAgKiBmb3JtYXR0ZWQgdmFsdWUuXG4gICAqL1xuICAvLyBmb3JtYXR0ZWRWYWx1ZXModmFsdWU6IGFueSwgcHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcbiAgLy8gICBpZih0aGlzLnBpcGVzW3Byb3BlcnR5TmFtZV0gPT09IG51bGwpIHtcbiAgLy8gICAgIHRocm93IG5ldyBFcnJvcignZm9ybWF0dGVycyBpcyBudWxsJyk7XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB0aGlzLnBpcGVzW3Byb3BlcnR5TmFtZV0ucmVkdWNlKChyZXN1bHQ6IGFueS8qY2hlY2sgdHlwZSovLCBkZWNsYXJhdGlvbjogc3RyaW5nIC8qY2hlY2sgdHlwZSovLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gIC8vICAgICBsZXQgYXJncyA9IGRlY2xhcmF0aW9uLm1hdGNoKEJpbmRpbmcuRk9STUFUVEVSX0FSR1MpO1xuICAvLyAgICAgaWYoYXJncyA9PT0gbnVsbCkge1xuICAvLyAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGFyZ3MgbWF0Y2hlZCBmcm9tIEZPUk1BVFRFUl9BUkdTJyk7XG4gIC8vICAgICB9XG4gIC8vICAgICBsZXQgaWQgPSBhcmdzLnNoaWZ0KCk7XG4gIC8vICAgICBpZighaWQpIHtcbiAgLy8gICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpZCBmb3VuZCBpbiBhcmdzJyk7XG4gIC8vICAgICB9XG4gIC8vICAgICBsZXQgZm9ybWF0dGVyID0gdGhpcy52aWV3Lm9wdGlvbnMuZm9ybWF0dGVyc1tpZF07XG5cbiAgLy8gICAgIGNvbnN0IHByb2Nlc3NlZEFyZ3MgPSB0aGlzLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzUHJvcGVydHkoYXJncywgaW5kZXgsIHByb3BlcnR5TmFtZSk7XG5cbiAgLy8gICAgIGlmIChmb3JtYXR0ZXIgJiYgKGZvcm1hdHRlci5yZWFkIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG4gIC8vICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5yZWFkKHJlc3VsdCwgLi4ucHJvY2Vzc2VkQXJncyk7XG4gIC8vICAgICB9IGVsc2UgaWYgKGZvcm1hdHRlciBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gIC8vICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlcihyZXN1bHQsIC4uLnByb2Nlc3NlZEFyZ3MpO1xuICAvLyAgICAgfVxuICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcbiAgLy8gICB9LCB2YWx1ZSk7XG4gIC8vIH1cblxuICAvKipcbiAgICogSW50ZXJjZXB0IGB0aW55YmluZC5CaW5kaW5nOjp1bmJpbmRgIHRvIGJlIGNhbGxlZCBvbiBgdGhpcy52aWV3YC5cbiAgICovXG4gIHB1YmxpYyB1bmJpbmQoKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5vYnNlcnZlcnMpLmZvckVhY2goKHByb3BlcnR5TmFtZSkgPT4ge1xuICAgICAgdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXS51bm9ic2VydmUoKTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybWF0dGVyc09ic2VydmVycykuZm9yRWFjaCgocHJvcGVydHlOYW1lKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLmZvcm1hdHRlcnNPYnNlcnZlcnNbcHJvcGVydHlOYW1lXSkuZm9yRWFjaCgoZm9ybWF0dGVySW5kZXgpID0+IHtcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5mb3JtYXR0ZXJzT2JzZXJ2ZXJzW3Byb3BlcnR5TmFtZV1bZm9ybWF0dGVySW5kZXhdKS5mb3JFYWNoKChhaSkgPT4ge1xuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyc09ic2VydmVyc1twcm9wZXJ0eU5hbWVdW2Zvcm1hdHRlckluZGV4XVthaV0udW5vYnNlcnZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICB0aGlzLnZpZXcudW5iaW5kLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQUklNSVRJVkUsIEtFWVBBVEgsIHBhcnNlVHlwZSB9IGZyb20gJy4vcGFyc2Vycyc7XG5pbXBvcnQgeyBPYnNlcnZlciwgSU9ic2VydmVyU3luY0NhbGxiYWNrIH0gZnJvbSAnLi9vYnNlcnZlcic7XG5pbXBvcnQgeyBCaW5kZXIsIElPbmVXYXlCaW5kZXIsIElUd29XYXlCaW5kZXIgfSBmcm9tICcuL2JpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgZ2V0SW5wdXRWYWx1ZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgSU9uZVR3b0Zvcm1hdHRlciB9IGZyb20gJy4vZm9ybWF0dGVyLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElCaW5kYWJsZSB7XG5cbiAgYmluZGVyPzogQmluZGVyPGFueT47XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGJpbmRlciB3aXRob3V0IHRoZSBwcmVmaXhcbiAgICovXG4gIHR5cGU6IHN0cmluZyB8IG51bGw7XG5cbiAgZWw6IEhUTUxFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBPYnNlcnZlcyB0aGUgb2JqZWN0IGtleXBhdGhcbiAgICogQHBhcmFtIG9ialxuICAgKiBAcGFyYW0ga2V5cGF0aFxuICAgKi9cbiAgb2JzZXJ2ZShvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKTogT2JzZXJ2ZXI7XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgdG8gdGhlIG1vZGVsIGZvciBjaGFuZ2VzIGF0IHRoZSBzcGVjaWZpZWQga2V5cGF0aC4gQmktZGlyZWN0aW9uYWxcbiAgICogcm91dGluZXMgd2lsbCBhbHNvIGxpc3RlbiBmb3IgY2hhbmdlcyBvbiB0aGUgZWxlbWVudCB0byBwcm9wYWdhdGUgdGhlbSBiYWNrXG4gICAqIHRvIHRoZSBtb2RlbC5cbiAgICovXG4gIGJpbmQoKTogdm9pZDtcblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gdGhlIG1vZGVsIGFuZCB0aGUgZWxlbWVudC5cbiAgICovXG4gIHVuYmluZCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBiaW5kaW5nJ3MgbW9kZWwgZnJvbSB3aGF0IGlzIGN1cnJlbnRseSBzZXQgb24gdGhlIHZpZXcuIFVuYmluZHNcbiAgICogdGhlIG9sZCBtb2RlbCBmaXJzdCBhbmQgdGhlbiByZS1iaW5kcyB3aXRoIHRoZSBuZXcgbW9kZWwuXG4gICAqIEBwYXJhbSB7YW55fSBtb2RlbHNcbiAgICovXG4gIHVwZGF0ZT8obW9kZWxzOiBhbnkpOiB2b2lkO1xuXG4gIHB1Ymxpc2g/KCk6IHZvaWQ7XG5cbiAgc3luYz8oKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRm9ybWF0dGVyT2JzZXJ2ZXJzIHtcbiAgW2tleTogc3RyaW5nXToge1xuICAgIFtrZXk6IHN0cmluZ106IE9ic2VydmVyLFxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBldmVudEhhbmRsZXJGdW5jdGlvbiA9IChldmVudDogRXZlbnQpID0+IHZvaWQ7XG5cbi8qKlxuICogIEEgc2luZ2xlIGJpbmRpbmcgYmV0d2VlbiBhIG1vZGVsIGF0dHJpYnV0ZSBhbmQgYSBET00gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEJpbmRpbmcgaW1wbGVtZW50cyBJQmluZGFibGUge1xuXG4gIHB1YmxpYyBzdGF0aWMgRk9STUFUVEVSX0FSR1MgPSAgL1teXFxzJ10rfCcoW14nXXwnW15cXHNdKSonfFwiKFteXCJdfFwiW15cXHNdKSpcIi9nO1xuICBwdWJsaWMgc3RhdGljIEZPUk1BVFRFUl9TUExJVCA9IC9cXHMrLztcblxuICBwdWJsaWMgdmFsdWU/OiBhbnk7XG4gIHB1YmxpYyBvYnNlcnZlcj86IE9ic2VydmVyO1xuICBwdWJsaWMgdmlldzogVmlldztcbiAgcHVibGljIGVsOiBIVE1MRWxlbWVudDtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGJpbmRlciB3aXRob3V0IHRoZSBwcmVmaXhcbiAgICovXG4gIHB1YmxpYyB0eXBlOiBzdHJpbmcgfCBudWxsO1xuICBwdWJsaWMgYmluZGVyOiBCaW5kZXI8YW55PjtcbiAgcHVibGljIGZvcm1hdHRlcnM6IHN0cmluZ1tdIHwgbnVsbDtcbiAgcHVibGljIGZvcm1hdHRlck9ic2VydmVyczogSUZvcm1hdHRlck9ic2VydmVycyA9IHt9O1xuICBwdWJsaWMga2V5cGF0aD86IHN0cmluZztcbiAgLyoqXG4gICAqIEFyZ3VtZW50cyBwYXJzZWQgZnJvbSBzdGFyIGJpbmRlcnMsIGUuZy4gb24gZm9vLSotKiBhcmdzWzBdIGlzIHRoZSBmaXJzdCBzdGFyLCBhcmdzWzFdIHRoZSBzZWNvbmQtXG4gICAqL1xuICBwdWJsaWMgYXJnczogc3RyaW5nW10gfCBudWxsO1xuICAvKipcbiAgICpcbiAgICovXG4gIHB1YmxpYyBtb2RlbD86IGFueTtcbiAgLyoqXG4gICAqIEhUTUwgQ29tbWVudCB0byBtYXJrIGEgYmluZGluZyBpbiB0aGUgRE9NXG4gICAqL1xuICBwdWJsaWMgbWFya2VyPzogQ29tbWVudDtcbiAgLyoqXG4gICAqIFVzZWQgaW4gY29tcG9uZW50IGJpbmRpbmdzLiBUT0RPIGUuZy4gbW92ZSB0byBDb21wb25lbnRCaW5kaW5nIG9yIGJpbmRlcnM/XG4gICAqL1xuICBwdWJsaWMgX2JvdW5kPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIGp1c3QgdG8gaGF2ZSBhIHZhbHVlIHdoZXJlIHdlIGNvdWxkIHN0b3JlIGN1c3RvbSBkYXRhXG4gICAqL1xuICBwdWJsaWMgY3VzdG9tRGF0YT86IGFueTtcblxuICAvKipcbiAgICogQWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBiaW5kaW5nIGlzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvcjsgdGhlXG4gICAqIGNvbnRhaW5pbmcgdmlldywgdGhlIERPTSBub2RlLCB0aGUgdHlwZSBvZiBiaW5kaW5nLCB0aGUgbW9kZWwgb2JqZWN0IGFuZCB0aGVcbiAgICoga2V5cGF0aCBhdCB3aGljaCB0byBsaXN0ZW4gZm9yIGNoYW5nZXMuXG4gICAqIEBwYXJhbSB7Kn0gdmlld1xuICAgKiBAcGFyYW0geyp9IGVsXG4gICAqIEBwYXJhbSB7Kn0gdHlwZVxuICAgKiBAcGFyYW0geyp9IGtleXBhdGhcbiAgICogQHBhcmFtIHsqfSBiaW5kZXJcbiAgICogQHBhcmFtIHsqfSBhcmdzIFRoZSBzdGFydCBiaW5kZXJzLCBvbiBgY2xhc3MtKmAgYXJnc1swXSB3aWwgYmUgdGhlIGNsYXNzbmFtZS5cbiAgICogQHBhcmFtIHsqfSBmb3JtYXR0ZXJzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2aWV3OiBWaWV3LCBlbDogSFRNTEVsZW1lbnQsIHR5cGU6IHN0cmluZyB8IG51bGwsIGtleXBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCwgYmluZGVyOiBCaW5kZXI8YW55PiwgYXJnczogc3RyaW5nW10gfCBudWxsLCBmb3JtYXR0ZXJzOiBzdHJpbmdbXSB8IG51bGwpIHtcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgIHRoaXMuZWwgPSBlbDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMua2V5cGF0aCA9IGtleXBhdGg7XG4gICAgdGhpcy5iaW5kZXIgPSBiaW5kZXI7XG4gICAgdGhpcy5hcmdzID0gYXJncztcbiAgICB0aGlzLmZvcm1hdHRlcnMgPSBmb3JtYXR0ZXJzO1xuICAgIHRoaXMubW9kZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jdXN0b21EYXRhID0ge307XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlcyB0aGUgb2JqZWN0IGtleXBhdGhcbiAgICogQHBhcmFtIG9ialxuICAgKiBAcGFyYW0ga2V5cGF0aFxuICAgKi9cbiAgcHVibGljIG9ic2VydmUob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjayk6IE9ic2VydmVyIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmVyKG9iaiwga2V5cGF0aCwgY2FsbGJhY2spO1xuICB9XG5cbiAgcHVibGljIHBhcnNlVGFyZ2V0KCkge1xuICAgIGlmICh0aGlzLmtleXBhdGgpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gcGFyc2VUeXBlKHRoaXMua2V5cGF0aCk7XG4gICAgICBpZiAodG9rZW4udHlwZSA9PT0gUFJJTUlUSVZFKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0b2tlbi52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gS0VZUEFUSCkge1xuICAgICAgICB0aGlzLm9ic2VydmVyID0gdGhpcy5vYnNlcnZlKHRoaXMudmlldy5tb2RlbHMsIHRoaXMua2V5cGF0aCwgdGhpcyk7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm9ic2VydmVyLnRhcmdldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlIGluIHRva2VuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaXRlcmF0aW9uIGFsaWFzLCB1c2VkIGluIHRoZSBpbnRlcmF0aW9uIGJpbmRlcnMgbGlrZSBgZWFjaC0qYFxuICAgKiBAcGFyYW0geyp9IG1vZGVsTmFtZVxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWtlcmljL3JpdmV0cy9ibG9iL21hc3Rlci9kaXN0L3JpdmV0cy5qcyNMMjZcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWlrZXJpYy9yaXZldHMvYmxvYi9tYXN0ZXIvZGlzdC9yaXZldHMuanMjTDExNzVcbiAgICovXG4gIHB1YmxpYyBnZXRJdGVyYXRpb25BbGlhcyhtb2RlbE5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiAnJScgKyBtb2RlbE5hbWUgKyAnJSc7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJnczogc3RyaW5nW10sIGZvcm1hdHRlckluZGV4OiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIGFyZ3NcbiAgICAubWFwKHBhcnNlVHlwZSlcbiAgICAubWFwKCh7dHlwZSwgdmFsdWV9LCBhaSkgPT4ge1xuICAgICAgaWYgKHR5cGUgPT09IFBSSU1JVElWRSkge1xuICAgICAgICBjb25zdCBwcmltaXRpdmVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcHJpbWl0aXZlVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEtFWVBBVEgpIHtcbiAgICAgICAgLy8ga2V5cGF0aCBpcyBzdHJpbmdcbiAgICAgICAgY29uc3Qga2V5cGF0aCA9ICh2YWx1ZSBhcyBzdHJpbmcgKTtcbiAgICAgICAgaWYgKCF0aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmb3JtYXR0ZXJJbmRleF0pIHtcbiAgICAgICAgICB0aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmb3JtYXR0ZXJJbmRleF0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvYnNlcnZlciA9IHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2Zvcm1hdHRlckluZGV4XVthaV07XG5cbiAgICAgICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgICAgIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlKHRoaXMudmlldy5tb2RlbHMsIGtleXBhdGgsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2Zvcm1hdHRlckluZGV4XVthaV0gPSBvYnNlcnZlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIudmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBhcmd1bWVudCB0eXBlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBhbGwgdGhlIGN1cnJlbnQgZm9ybWF0dGVycyB0byB0aGUgc3VwcGxpZWQgdmFsdWUgYW5kIHJldHVybnMgdGhlXG4gICAqIGZvcm1hdHRlZCB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBmb3JtYXR0ZWRWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0dGVycyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdmb3JtYXR0ZXJzIGlzIG51bGwnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXJzLnJlZHVjZSgocmVzdWx0OiBhbnkvKmNoZWNrIHR5cGUqLywgZGVjbGFyYXRpb246IHN0cmluZyAvKmNoZWNrIHR5cGUqLywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgY29uc3QgYXJncyA9IGRlY2xhcmF0aW9uLm1hdGNoKEJpbmRpbmcuRk9STUFUVEVSX0FSR1MpO1xuICAgICAgaWYgKGFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBhcmdzIG1hdGNoZWQgZnJvbSBGT1JNQVRURVJfQVJHUycpO1xuICAgICAgfVxuICAgICAgY29uc3QgaWQgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICBpZiAoIWlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaWQgZm91bmQgaW4gYXJncycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBmb3JtYXR0ZXJzIGFyZSBkZWZpbmVkJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnNbaWRdO1xuXG4gICAgICBjb25zdCBwcm9jZXNzZWRBcmdzID0gdGhpcy5wYXJzZUZvcm1hdHRlckFyZ3VtZW50cyhhcmdzLCBpbmRleCk7XG5cbiAgICAgIGxldCBmb3JtYXR0ZXJSZWFkRnVuY3Rpb247XG5cbiAgICAgIC8vIGdldCBmb3JtYXR0ZXIgcmVhZCBmdW5jaW9uXG4gICAgICBpZiAoZm9ybWF0dGVyICYmIChmb3JtYXR0ZXIucmVhZCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgICBmb3JtYXR0ZXJSZWFkRnVuY3Rpb24gPSBmb3JtYXR0ZXIucmVhZDtcbiAgICAgIH0gZWxzZSBpZiAoZm9ybWF0dGVyIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgZm9ybWF0dGVyUmVhZEZ1bmN0aW9uID0gZm9ybWF0dGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9ybWF0dGVyUmVhZEZ1bmN0aW9uIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gZm9ybWF0dGVyUmVhZEZ1bmN0aW9uKHJlc3VsdCwgLi4ucHJvY2Vzc2VkQXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgdmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZXZlbnQgaGFuZGxlciBmb3IgdGhlIGJpbmRpbmcgYXJvdW5kIHRoZSBzdXBwbGllZCBmdW5jdGlvbi5cbiAgICogVGlocyBldmVudCBIYW5kbGVyIGlzIG1haW5seSB1c2VkIGJ5IHRoZSBvbi0qIGJpbmRlclxuICAgKiBAcGFyYW0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgYnkgdGhlIGhhbmRsZXJcbiAgICogQHBhcmFtIGVsIFRoZSBlbGVtZW50IHRoZSBldmVudCB3YXMgdHJpZ2dlcmVkIGZyb21cbiAgICovXG4gIHB1YmxpYyBldmVudEhhbmRsZXIoZm46IGV2ZW50SGFuZGxlckZ1bmN0aW9uLCBlbDogSFRNTEVsZW1lbnQpOiAoZXY6IEV2ZW50KSA9PiBhbnkge1xuICAgIGNvbnN0IGJpbmRpbmcgPSB0aGlzO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBiaW5kaW5nLnZpZXcub3B0aW9ucy5oYW5kbGVyO1xuICAgIHJldHVybiAoZXYpID0+IHtcbiAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGhhbmRsZXIgZGVmaW5lZCBpbiBiaW5kaW5nLnZpZXcub3B0aW9ucy5oYW5kbGVyJyk7XG4gICAgICB9XG4gICAgICBoYW5kbGVyLmNhbGwoZm4sIHRoaXMsIGV2LCBiaW5kaW5nLCBlbCk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB2YWx1ZSBmb3IgdGhlIGJpbmRpbmcuIFRoaXMgQmFzaWNhbGx5IGp1c3QgcnVucyB0aGUgYmluZGluZyByb3V0aW5lXG4gICAqIHdpdGggdGhlIHN1cHBsaWVkIHZhbHVlIGZvcm1hdHRlZC5cbiAgICovXG4gIHB1YmxpYyBzZXQodmFsdWU6IGFueSkge1xuICAgIGlmICgodmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvbikgJiYgISh0aGlzLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4gKS5mdW5jdGlvbikge1xuICAgICAgdmFsdWUgPSAodmFsdWUgYXMgSU9uZVdheUJpbmRlcjxhbnk+ICk7XG4gICAgICB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVkVmFsdWUodmFsdWUuY2FsbCh0aGlzLm1vZGVsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gKHZhbHVlIGFzIElUd29XYXlCaW5kZXI8YW55PiApO1xuICAgICAgdmFsdWUgPSB0aGlzLmZvcm1hdHRlZFZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBsZXQgcm91dGluZUZuO1xuICAgIGlmICh0aGlzLmJpbmRlciA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kZXIgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5iaW5kZXIuaGFzT3duUHJvcGVydHkoJ3JvdXRpbmUnKSkge1xuICAgICAgdGhpcy5iaW5kZXIgPSAoIHRoaXMuYmluZGVyIGFzIElUd29XYXlCaW5kZXI8YW55Pik7XG4gICAgICByb3V0aW5lRm4gPSB0aGlzLmJpbmRlci5yb3V0aW5lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmJpbmRlciA9ICggdGhpcy5iaW5kZXIgYXMgSU9uZVdheUJpbmRlcjxhbnk+KTtcbiAgICAgIHJvdXRpbmVGbiA9IHRoaXMuYmluZGVyO1xuICAgIH1cblxuICAgIGlmIChyb3V0aW5lRm4gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgcm91dGluZUZuLmNhbGwodGhpcywgdGhpcy5lbCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jcyB1cCB0aGUgdmlldyBiaW5kaW5nIHdpdGggdGhlIG1vZGVsLlxuICAgKi9cbiAgcHVibGljIHN5bmMoKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm9ic2VydmVyLnRhcmdldDtcbiAgICAgIHRoaXMuc2V0KHRoaXMub2JzZXJ2ZXIudmFsdWUoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXMgdGhlIHZhbHVlIGN1cnJlbnRseSBzZXQgb24gdGhlIGlucHV0IGVsZW1lbnQgYmFjayB0byB0aGUgbW9kZWwuXG4gICAqL1xuICBwdWJsaWMgcHVibGlzaCgpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgaWYgKHRoaXMuZm9ybWF0dGVycyA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Zvcm1hdHRlcnMgaXMgbnVsbCcpO1xuICAgICAgfVxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmZvcm1hdHRlcnMucmVkdWNlUmlnaHQoKHJlc3VsdDogYW55LypjaGVjayB0eXBlKi8sIGRlY2xhcmF0aW9uOiBzdHJpbmcgLypjaGVjayB0eXBlKi8sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgYXJncyA9IGRlY2xhcmF0aW9uLnNwbGl0KEJpbmRpbmcuRk9STUFUVEVSX1NQTElUKTtcbiAgICAgICAgY29uc3QgaWQgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lkIG5vdCBkZWZpbmVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMudmlldy5vcHRpb25zLmZvcm1hdHRlcnMpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gdGhpcy52aWV3Lm9wdGlvbnMuZm9ybWF0dGVyc1tpZF07XG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZEFyZ3MgPSB0aGlzLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzKGFyZ3MsIGluZGV4KTtcblxuICAgICAgICBpZiAoZm9ybWF0dGVyICYmIChmb3JtYXR0ZXIgYXMgSU9uZVR3b0Zvcm1hdHRlcikucHVibGlzaCkge1xuICAgICAgICAgIHJlc3VsdCA9IChmb3JtYXR0ZXIgYXMgSU9uZVR3b0Zvcm1hdHRlcikucHVibGlzaChyZXN1bHQsIC4uLnByb2Nlc3NlZEFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9LCB0aGlzLmdldFZhbHVlKCh0aGlzLmVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpKSk7XG5cbiAgICAgIHRoaXMub2JzZXJ2ZXIuc2V0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRvIHRoZSBtb2RlbCBmb3IgY2hhbmdlcyBhdCB0aGUgc3BlY2lmaWVkIGtleXBhdGguIEJpLWRpcmVjdGlvbmFsXG4gICAqIHJvdXRpbmVzIHdpbGwgYWxzbyBsaXN0ZW4gZm9yIGNoYW5nZXMgb24gdGhlIGVsZW1lbnQgdG8gcHJvcGFnYXRlIHRoZW0gYmFja1xuICAgKiB0byB0aGUgbW9kZWwuXG4gICAqL1xuICBwdWJsaWMgYmluZCgpIHtcbiAgICB0aGlzLnBhcnNlVGFyZ2V0KCk7XG5cbiAgICBpZiAodGhpcy5iaW5kZXIgJiYgdGhpcy5iaW5kZXIuaGFzT3duUHJvcGVydHkoJ2JpbmQnKSkge1xuICAgICAgdGhpcy5iaW5kZXIgPSAodGhpcy5iaW5kZXIgYXMgSVR3b1dheUJpbmRlcjxhbnk+KTtcbiAgICAgIGlmICghdGhpcy5iaW5kZXIuYmluZCAmJiB0eXBlb2YodGhpcy5iaW5kZXIuYmluZCkgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGUgbWV0aG9kIGJpbmQgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYmluZGVyLmJpbmQuY2FsbCh0aGlzLCB0aGlzLmVsKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWV3Lm9wdGlvbnMucHJlbG9hZERhdGEpIHtcbiAgICAgIHRoaXMuc3luYygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZXMgZnJvbSB0aGUgbW9kZWwgYW5kIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgcHVibGljIHVuYmluZCgpIHtcbiAgICBpZiAodGhpcy5iaW5kZXIgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYmluZGVyIGlzIG51bGwnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYmluZGVyLmhhc093blByb3BlcnR5KCdiaW5kJykpIHtcbiAgICAgIHRoaXMuYmluZGVyID0gKCB0aGlzLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pO1xuICAgICAgaWYgKHRoaXMuYmluZGVyLnVuYmluZCkge1xuICAgICAgICB0aGlzLmJpbmRlci51bmJpbmQuY2FsbCh0aGlzLCB0aGlzLmVsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgdGhpcy5vYnNlcnZlci51bm9ic2VydmUoKTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLmZvcm1hdHRlck9ic2VydmVycykuZm9yRWFjaCgoZmkpID0+IHtcbiAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmaV07XG5cbiAgICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goKGFpKSA9PiB7XG4gICAgICAgIGFyZ3NbYWldLnVub2JzZXJ2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmZvcm1hdHRlck9ic2VydmVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGJpbmRpbmcncyBtb2RlbCBmcm9tIHdoYXQgaXMgY3VycmVudGx5IHNldCBvbiB0aGUgdmlldy4gVW5iaW5kc1xuICAgKiB0aGUgb2xkIG1vZGVsIGZpcnN0IGFuZCB0aGVuIHJlLWJpbmRzIHdpdGggdGhlIG5ldyBtb2RlbC5cbiAgICogQHBhcmFtIHthbnl9IG1vZGVsc1xuICAgKi9cbiAgcHVibGljIHVwZGF0ZShtb2RlbHM6IGFueSA9IHt9KSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm9ic2VydmVyLnRhcmdldDtcbiAgICB9XG4gICAgaWYgKHRoaXMuYmluZGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JpbmRlciBpcyBudWxsJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmJpbmRlci5oYXNPd25Qcm9wZXJ0eSgndXBkYXRlJykpIHtcbiAgICAgIHRoaXMuYmluZGVyID0gKCB0aGlzLmJpbmRlciBhcyBJVHdvV2F5QmluZGVyPGFueT4pO1xuICAgICAgaWYgKHRoaXMuYmluZGVyLnVwZGF0ZSkge1xuICAgICAgICB0aGlzLmJpbmRlci51cGRhdGUuY2FsbCh0aGlzLCBtb2RlbHMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGVsZW1lbnRzIHZhbHVlXG4gICAqIEBwYXJhbSBlbFxuICAgKi9cbiAgcHVibGljIGdldFZhbHVlKGVsOiBIVE1MU2VsZWN0RWxlbWVudCB8IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5iaW5kZXIgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYmluZGVyIGlzIG51bGwnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYmluZGVyLmhhc093blByb3BlcnR5KCdnZXRWYWx1ZScpKSB7XG4gICAgICB0aGlzLmJpbmRlciA9ICggdGhpcy5iaW5kZXIgYXMgSVR3b1dheUJpbmRlcjxhbnk+KTtcbiAgICAgIGlmICh0eXBlb2YodGhpcy5iaW5kZXIuZ2V0VmFsdWUpICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZ2V0VmFsdWUgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmJpbmRlci5nZXRWYWx1ZS5jYWxsKHRoaXMsIGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldElucHV0VmFsdWUoZWwpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IEJpbmRpbmcsIElCaW5kYWJsZSB9IGZyb20gJy4vYmluZGluZyc7XG4vKipcbiAqIE9uZSB3YXkgYmluZGVyIGludGVyZmFjZVxuICovXG5leHBvcnQgdHlwZSBJT25lV2F5QmluZGVyPFZhbHVlVHlwZT4gPSAodGhpczogQmluZGluZywgZWxlbWVudDogSFRNTEVsZW1lbnQsIHZhbHVlOiBWYWx1ZVR5cGUpID0+IHZvaWQ7XG5cbi8qKlxuICogVG8gd2F5IGJpbmRlciBpbnRlcmZhY2VcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVHdvV2F5QmluZGVyPFZhbHVlVHlwZT4ge1xuICByb3V0aW5lOiAodGhpczogQmluZGluZywgZWxlbWVudDogSFRNTEVsZW1lbnQsIHZhbHVlOiBWYWx1ZVR5cGUpID0+IHZvaWQ7XG4gIGJpbmQ/OiAodGhpczogQmluZGluZywgZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHZvaWQ7XG4gIHVuYmluZD86ICh0aGlzOiBCaW5kaW5nLCBlbGVtZW50OiBIVE1MRWxlbWVudCkgPT4gdm9pZDtcbiAgdXBkYXRlPzogKHRoaXM6IEJpbmRpbmcsIG1vZGVsOiBhbnkpID0+IHZvaWQ7XG4gIGdldFZhbHVlPzogKHRoaXM6IEJpbmRpbmcsIGVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiB2b2lkO1xuICBibG9jaz86IGJvb2xlYW47XG4gIGZ1bmN0aW9uPzogYm9vbGVhbjtcbiAgcHVibGlzaGVzPzogYm9vbGVhbjtcbiAgcHJpb3JpdHk/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBJZiB5b3Ugd2FudCB0byBzYXZlIGN1c3RvbSBkYXRhIGluIHlvdXIgYmluZGVyIGxvZ2ljXG4gICAqL1xuICBjdXN0b21EYXRhPzogYW55O1xufVxuXG4vKipcbiAqIEEgYmluZGVyIGNhbiBiZSBhIG9uZSB3YXkgYmluZGVyIG9yIGEgdHdvIHdheSBiaW5kZXJcbiAqL1xuZXhwb3J0IHR5cGUgQmluZGVyPFZhbHVlVHlwZT4gPSBJT25lV2F5QmluZGVyPFZhbHVlVHlwZT4gfCBJVHdvV2F5QmluZGVyPFZhbHVlVHlwZT4gfCBJQmluZGFibGU7XG5cbi8qKlxuICogQSBsaXN0IG9mIGJpbmRlcnMgd2l0aCBhbnkga2V5IG5hbWVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmluZGVyczxWYWx1ZVR5cGU+IHtcbiAgW25hbWU6IHN0cmluZ106IEJpbmRlcjxWYWx1ZVR5cGU+O1xufVxuXG4vKipcbiAqIFRoaXMgd3JhcHBlciBpIHVzZWQgdG8gc3RvcmUgdGhlIGJpbmRlciBuYW1lIGluIHRoZSBuYW1lIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJpbmRlcldyYXBwZXJSZXN1bHQge1xuICBuYW1lOiBzdHJpbmc7XG4gIGJpbmRlcjogQmluZGVyPGFueT47XG59XG5cbi8qKlxuICogVGhpcyB3cmFwcGVyIGlzIHVzZWQgaWYgeW91IG5lZWQgdG8gcGFzcyBvdmVyIHNvbWUgZGVwZW5kZW5jaWVzIGZvciB5b3VyIGJpbmRlclxuICovXG5leHBvcnQgdHlwZSBCaW5kZXJXcmFwcGVyID0gKC4uLmRlcHM6IGFueVtdKSA9PiBJQmluZGVyV3JhcHBlclJlc3VsdDtcblxuZXhwb3J0IGNsYXNzIEJpbmRlcnNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBiaW5kZXJzOiBJQmluZGVyczxhbnk+O1xuICBwcml2YXRlIGRlYnVnID0gRGVidWcoJ2JpbmRlcnM6QmluZGVyc1NlcnZpY2UnKTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGJpbmRlcnM7XG4gICAqL1xuICBjb25zdHJ1Y3RvcihiaW5kZXJzOiBJQmluZGVyczxhbnk+KSB7XG4gICAgdGhpcy5iaW5kZXJzID0gYmluZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3QgYSBiaW5kZXIgd3JhcHBlclxuICAgKiBAcGFyYW0gYmluZGVyXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0V3JhcHBlcihiaW5kZXJXcmFwcGVyOiBJQmluZGVyV3JhcHBlclJlc3VsdCwgbmFtZT86IHN0cmluZyk6IElCaW5kZXJzPGFueT4ge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgbmFtZSA9IGJpbmRlcldyYXBwZXIubmFtZTtcbiAgICB9XG4gICAgY29uc3QgYmluZGVyID0gKGJpbmRlcldyYXBwZXIgYXMgSUJpbmRlcldyYXBwZXJSZXN1bHQpLmJpbmRlcjtcbiAgICB0aGlzLmJpbmRlcnNbbmFtZV0gPSBiaW5kZXI7XG4gICAgcmV0dXJuIHRoaXMuYmluZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3QgYSBiaW5kZXIgd2l0aCBoaXMgbmFtZVxuICAgKiBAcGFyYW0gYmluZGVyXG4gICAqIEBwYXJhbSBuYW1lXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0KGJpbmRlcjogQmluZGVyPGFueT4gfCBJQmluZGVyV3JhcHBlclJlc3VsdCwgbmFtZT86IHN0cmluZyk6IElCaW5kZXJzPGFueT4ge1xuXG4gICAgaWYgKGJpbmRlci5oYXNPd25Qcm9wZXJ0eSgnYmluZGVyJykpIHtcbiAgICAgIGJpbmRlciA9IChiaW5kZXIgYXMgSUJpbmRlcldyYXBwZXJSZXN1bHQpO1xuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIG5hbWUgPSAoYmluZGVyIGFzIGFueSkubmFtZTtcbiAgICAgIH1cbiAgICAgIGJpbmRlciA9IGJpbmRlci5iaW5kZXI7XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZygnbmFtZScsIG5hbWUsIGJpbmRlcik7XG5cbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0JpbmRlcnNTZXJ2aWNlXSBuYW1lIGlzIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgLy8gaWYgQmluZGVyPGFueT5cbiAgICB0aGlzLmJpbmRlcnNbbmFtZV0gPSAoYmluZGVyIGFzIEJpbmRlcjxhbnk+KTtcbiAgICByZXR1cm4gdGhpcy5iaW5kZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIHNldCBvZiBiaW5kZXJzXG4gICAqIEBwYXJhbSBiaW5kZXJzXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0cyhiaW5kZXJzOiBJQmluZGVyczxhbnk+KTogSUJpbmRlcnM8YW55PiB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIGJpbmRlcnMpIHtcbiAgICAgIGlmIChiaW5kZXJzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHRoaXMucmVnaXN0KGJpbmRlcnNbbmFtZV0sIG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5iaW5kZXJzO1xuICB9XG59XG4iLCIvKipcbiAqIFRoZSBkZWZhdWx0IGAuYCBhZGFwdGVyIHRoYXQgY29tZXMgd2l0aCB0aW55YmluZC5qcy4gQWxsb3dzIHN1YnNjcmliaW5nIHRvXG4gKiBwcm9wZXJ0aWVzIG9uIHBsYWluIG9iamVjdHMsIGltcGxlbWVudGVkIGluIEVTNSBuYXRpdmVzIHVzaW5nXG4gKiBgT2JqZWN0LmRlZmluZVByb3BlcnR5YC5cbiAqL1xuXG5pbXBvcnQgeyBJT2JzZXJ2ZXJTeW5jQ2FsbGJhY2sgfSBmcm9tICcuL29ic2VydmVyJztcblxuZXhwb3J0IGludGVyZmFjZSBJUmVmIHtcbiAgY2FsbGJhY2tzOiBhbnlbXTtcbiAgcG9pbnRlcnM6IGFueVtdO1xufVxuXG4vKipcbiAqIFRPRE8gRm9yIHdoYXQgaXMgdGhpcz9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUlZBcnJheSBleHRlbmRzIEFycmF5PGFueT4ge1xuICBfX3J2OiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIEFkYXB0ZXJGdW5jdGlvbiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIElBZGFwdGVyIHtcbiAgY291bnRlcjogbnVtYmVyO1xuICB3ZWFrbWFwOiBhbnk7XG4gIHdlYWtSZWZlcmVuY2U6IChvYmo6IGFueSkgPT4gYW55OyAvLyA9PiBfX3J2ID9cbiAgY2xlYW51cFdlYWtSZWZlcmVuY2U6IChyZWY6IElSZWYsIGlkOiBudW1iZXIpID0+IHZvaWQ7XG4gIHN0dWJGdW5jdGlvbjogKG9iajogYW55LCBmbjogc3RyaW5nKSA9PiBhbnk7IC8vID0+IHJlc3BvbnNlID9cbiAgb2JzZXJ2ZU11dGF0aW9uczogKG9iajogYW55LCByZWY6IHN0cmluZywga2V5cGF0aDogc3RyaW5nKSA9PiB2b2lkO1xuICB1bm9ic2VydmVNdXRhdGlvbnM6IChvYmo6IElSVkFycmF5LCByZWY6IHN0cmluZywga2V5cGF0aDogc3RyaW5nKSA9PiB2b2lkO1xuICBvYnNlcnZlOiAob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjaykgPT4gdm9pZDtcbiAgdW5vYnNlcnZlOiAob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZywgY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjaykgPT4gdm9pZDtcbiAgZ2V0OiAob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZykgPT4gYW55O1xuICBzZXQ6IChvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBZGFwdGVycyB7XG4gIFtuYW1lOiBzdHJpbmddOiBJQWRhcHRlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEFkYXB0ZXIgaW1wbGVtZW50cyBJQWRhcHRlciB7XG5cbiAgcHVibGljIHN0YXRpYyBBUlJBWV9NRVRIT0RTID0gW1xuICAgICdwdXNoJyxcbiAgICAncG9wJyxcbiAgICAnc2hpZnQnLFxuICAgICd1bnNoaWZ0JyxcbiAgICAnc29ydCcsXG4gICAgJ3JldmVyc2UnLFxuICAgICdzcGxpY2UnLFxuICBdO1xuXG4gIHB1YmxpYyBjb3VudGVyOiBudW1iZXIgPSAwO1xuICBwdWJsaWMgd2Vha21hcDogYW55ID0ge307XG5cbiAgcHVibGljIHdlYWtSZWZlcmVuY2Uob2JqOiBhbnkpIHtcbiAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eSgnX19ydicpKSB7XG4gICAgICBjb25zdCBpZCA9IHRoaXMuY291bnRlcisrO1xuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19ydicsIHtcbiAgICAgICAgdmFsdWU6IGlkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLndlYWttYXBbb2JqLl9fcnZdKSB7XG4gICAgICB0aGlzLndlYWttYXBbb2JqLl9fcnZdID0ge1xuICAgICAgICBjYWxsYmFja3M6IHt9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy53ZWFrbWFwW29iai5fX3J2XTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhbnVwV2Vha1JlZmVyZW5jZShyZWY6IElSZWYsIGlkOiBudW1iZXIpIHtcbiAgICBpZiAoIU9iamVjdC5rZXlzKHJlZi5jYWxsYmFja3MpLmxlbmd0aCkge1xuICAgICAgaWYgKCEocmVmLnBvaW50ZXJzICYmIE9iamVjdC5rZXlzKHJlZi5wb2ludGVycykubGVuZ3RoKSkge1xuICAgICAgICBkZWxldGUgdGhpcy53ZWFrbWFwW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3R1YkZ1bmN0aW9uKG9iajogYW55LCBmbjogc3RyaW5nKSB7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSBvYmpbZm5dO1xuICAgIGNvbnN0IG1hcCA9IHRoaXMud2Vha1JlZmVyZW5jZShvYmopO1xuICAgIGNvbnN0IHdlYWttYXAgPSB0aGlzLndlYWttYXA7XG5cbiAgICBvYmpbZm5dID0gKC4uLmFyZ3M6IGFueVtdKTogQWRhcHRlckZ1bmN0aW9uID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gb3JpZ2luYWwuYXBwbHkob2JqLCBhcmdzKTtcblxuICAgICAgT2JqZWN0LmtleXMobWFwLnBvaW50ZXJzKS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICAgIGNvbnN0IGsgPSBtYXAucG9pbnRlcnNbcl07XG5cbiAgICAgICAgaWYgKHdlYWttYXBbcl0pIHtcbiAgICAgICAgICBpZiAod2Vha21hcFtyXS5jYWxsYmFja3Nba10gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgd2Vha21hcFtyXS5jYWxsYmFja3Nba10uZm9yRWFjaCgoY2FsbGJhY2s6IElPYnNlcnZlclN5bmNDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICBjYWxsYmFjay5zeW5jKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBvYnNlcnZlTXV0YXRpb25zKG9iajogYW55LCByZWY6IHN0cmluZywga2V5cGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBjb25zdCBtYXAgPSB0aGlzLndlYWtSZWZlcmVuY2Uob2JqKTtcblxuICAgICAgaWYgKCFtYXAucG9pbnRlcnMpIHtcbiAgICAgICAgbWFwLnBvaW50ZXJzID0ge307XG5cbiAgICAgICAgQWRhcHRlci5BUlJBWV9NRVRIT0RTLmZvckVhY2goKGZuKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdHViRnVuY3Rpb24ob2JqLCBmbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1hcC5wb2ludGVyc1tyZWZdKSB7XG4gICAgICAgIG1hcC5wb2ludGVyc1tyZWZdID0gW107XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXAucG9pbnRlcnNbcmVmXS5pbmRleE9mKGtleXBhdGgpID09PSAtMSkge1xuICAgICAgICBtYXAucG9pbnRlcnNbcmVmXS5wdXNoKGtleXBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1bm9ic2VydmVNdXRhdGlvbnMob2JqOiBJUlZBcnJheSwgcmVmOiBzdHJpbmcsIGtleXBhdGg6IHN0cmluZykge1xuICAgIGlmICgob2JqIGluc3RhbmNlb2YgQXJyYXkpICYmIChvYmouX19ydiAhPSBudWxsKSkge1xuICAgICAgY29uc3QgbWFwID0gdGhpcy53ZWFrbWFwW29iai5fX3J2XTtcblxuICAgICAgaWYgKG1hcCkge1xuICAgICAgICBjb25zdCBwb2ludGVycyA9IG1hcC5wb2ludGVyc1tyZWZdO1xuXG4gICAgICAgIGlmIChwb2ludGVycykge1xuICAgICAgICAgIGNvbnN0IGlkeCA9IHBvaW50ZXJzLmluZGV4T2Yoa2V5cGF0aCk7XG5cbiAgICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIHBvaW50ZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghcG9pbnRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBkZWxldGUgbWFwLnBvaW50ZXJzW3JlZl07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jbGVhbnVwV2Vha1JlZmVyZW5jZShtYXAsIG9iai5fX3J2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvYnNlcnZlKG9iajogYW55LCBrZXlwYXRoOiBzdHJpbmcsIGNhbGxiYWNrOiBJT2JzZXJ2ZXJTeW5jQ2FsbGJhY2spIHtcbiAgICBsZXQgdmFsdWU6IGFueTtcbiAgICBjb25zdCBjYWxsYmFja3MgPSB0aGlzLndlYWtSZWZlcmVuY2Uob2JqKS5jYWxsYmFja3M7XG5cbiAgICBpZiAoIWNhbGxiYWNrc1trZXlwYXRoXSkge1xuICAgICAgY2FsbGJhY2tzW2tleXBhdGhdID0gW107XG4gICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleXBhdGgpO1xuXG4gICAgICBpZiAoIWRlc2MgfHwgIShkZXNjLmdldCB8fCBkZXNjLnNldCB8fCAhZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2tleXBhdGhdO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleXBhdGgsIHtcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuXG4gICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIHNldDogKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIHRoaXMudW5vYnNlcnZlTXV0YXRpb25zKHZhbHVlLCBvYmouX19ydiwga2V5cGF0aCk7XG4gICAgICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgIGNvbnN0IG1hcCA9IHRoaXMud2Vha21hcFtvYmouX19ydl07XG5cbiAgICAgICAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IF9jYWxsYmFja3MgPSBtYXAuY2FsbGJhY2tzW2tleXBhdGhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKF9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgIF9jYWxsYmFja3MuZm9yRWFjaCgoY2I6IElPYnNlcnZlclN5bmNDYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjYi5zeW5jKCk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmVNdXRhdGlvbnMobmV3VmFsdWUsIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjYWxsYmFja3Nba2V5cGF0aF0uaW5kZXhPZihjYWxsYmFjaykgPT09IC0xKSB7XG4gICAgICBjYWxsYmFja3Nba2V5cGF0aF0ucHVzaChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdGhpcy5vYnNlcnZlTXV0YXRpb25zKG9ialtrZXlwYXRoXSwgb2JqLl9fcnYsIGtleXBhdGgpO1xuICB9XG5cbiAgcHVibGljIHVub2JzZXJ2ZShvYmo6IGFueSwga2V5cGF0aDogc3RyaW5nLCBjYWxsYmFjazogSU9ic2VydmVyU3luY0NhbGxiYWNrKSB7XG4gICAgY29uc3QgbWFwID0gdGhpcy53ZWFrbWFwW29iai5fX3J2XTtcblxuICAgIGlmIChtYXApIHtcbiAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IG1hcC5jYWxsYmFja3Nba2V5cGF0aF07XG5cbiAgICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuXG4gICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaWR4LCAxKTtcblxuICAgICAgICAgIGlmICghY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIG1hcC5jYWxsYmFja3Nba2V5cGF0aF07XG4gICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZU11dGF0aW9ucyhvYmpba2V5cGF0aF0sIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNsZWFudXBXZWFrUmVmZXJlbmNlKG1hcCwgb2JqLl9fcnYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQob2JqOiBhbnksIGtleXBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBvYmpba2V5cGF0aF07XG4gIH1cblxuICBwdWJsaWMgc2V0KG9iajogYW55LCBrZXlwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBvYmpba2V5cGF0aF0gPSB2YWx1ZTtcbiAgfVxufVxuXG5jb25zdCBhZGFwdGVyID0gbmV3IEFkYXB0ZXIoKTtcbmV4cG9ydCB7IGFkYXB0ZXIgfTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9uZVdheUZvcm1hdHRlciB7XG4gICh2YWw6IGFueSwgLi4uYXJnczogYW55W10pOiBhbnk7XG4gIHJlYWQ/OiAocmVzdWx0OiBzdHJpbmcsIC4uLnByb2Nlc3NlZEFyZ3M6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElPbmVUd29Gb3JtYXR0ZXIge1xuICByZWFkOiAocmVzdWx0OiBzdHJpbmcsIC4uLnByb2Nlc3NlZEFyZ3M6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICBwdWJsaXNoOiAocmVzdWx0OiBzdHJpbmcsIC4uLnByb2Nlc3NlZEFyZ3M6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBJRm9ybWF0dGVyID0gSU9uZVdheUZvcm1hdHRlciB8IElPbmVUd29Gb3JtYXR0ZXI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUZvcm1hdHRlcnMge1xuICBbbmFtZTogc3RyaW5nXTogSUZvcm1hdHRlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEZvcm1hdHRlclNlcnZpY2Uge1xuICBwcml2YXRlIGZvcm1hdHRlcnM6IElGb3JtYXR0ZXJzO1xuICBwcml2YXRlIGRlYnVnID0gRGVidWcoJ2Zvcm1hdHRlcnM6Rm9ybWF0dGVyU2VydmljZScpO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoZm9ybWF0dGVyczogSUZvcm1hdHRlcnMpIHtcbiAgICB0aGlzLmZvcm1hdHRlcnMgPSBmb3JtYXR0ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIGZvcm1hdHRlciB3aXRoIGhpcyBuYW1lXG4gICAqIEBwYXJhbSBjb21wb25lbnRcbiAgICogQHBhcmFtIG5hbWVcbiAgICovXG4gIHB1YmxpYyByZWdpc3QoY29tcG9uZW50OiBJRm9ybWF0dGVyLCBuYW1lPzogc3RyaW5nKTogSUZvcm1hdHRlcnMge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgaWYgKGNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSkge1xuICAgICAgICBuYW1lID0gY29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb21wb25lbnQuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xuICAgICAgICBuYW1lID0gKGNvbXBvbmVudCBhcyBhbnkpLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1ZygnbmFtZScsIG5hbWUsIGNvbXBvbmVudCk7XG5cbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0Zvcm1hdHRlclNlcnZpY2VdIG5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICAvLyBpZiBCaW5kZXI8YW55PlxuICAgIHRoaXMuZm9ybWF0dGVyc1tuYW1lXSA9IGNvbXBvbmVudDtcbiAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdCBhIHNldCBvZiBmb3JtYXR0ZXJzXG4gICAqIEBwYXJhbSBmb3JtYXR0ZXJzXG4gICAqL1xuICBwdWJsaWMgcmVnaXN0cyhmb3JtYXR0ZXJzOiBJRm9ybWF0dGVycyk6IElGb3JtYXR0ZXJzIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZm9ybWF0dGVycykge1xuICAgICAgaWYgKGZvcm1hdHRlcnMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdGhpcy5yZWdpc3QoZm9ybWF0dGVyc1tuYW1lXSwgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcm1hdHRlcnM7XG4gIH1cbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vSGlzdG9yeU1hbmFnZXInO1xuZXhwb3J0ICogZnJvbSAnLi9Eb20nO1xuZXhwb3J0ICogZnJvbSAnLi9QcmVmZXRjaCc7XG5cbmltcG9ydCB7IEdsb2JhbEV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFsLWV2ZW50JztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgQmFzZUNhY2hlIH0gZnJvbSAnLi4vQ2FjaGUnO1xuaW1wb3J0IHsgSGlkZVNob3dUcmFuc2l0aW9uLCBJVHJhbnNpdGlvbiB9IGZyb20gJy4uL1RyYW5zaXRpb24vVHJhbnNpdGlvbic7XG5pbXBvcnQgeyBEb20gfSBmcm9tICcuL0RvbSc7XG5pbXBvcnQgeyBIaXN0b3J5TWFuYWdlciB9IGZyb20gJy4vSGlzdG9yeU1hbmFnZXInO1xuXG4vKipcbiAqIFBqYXggaXMgYSBzdGF0aWMgb2JqZWN0IHdpdGggbWFpbiBmdW5jdGlvblxuICpcbiAqIEBuYW1lc3BhY2UgQmFyYmEuUGpheFxuICogQGJvcnJvd3MgRG9tIGFzIERvbVxuICogQHR5cGUge29iamVjdH1cbiAqL1xuY2xhc3MgUGpheCB7XG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgdXNlZCB0byBpZ25vcmUgbGlua3NcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaWdub3JlQ2xhc3NMaW5rID0gJ25vLWJhcmJhJztcblxuICBwdWJsaWMgc3RhdGljIGNhY2hlID0gbmV3IEJhc2VDYWNoZSgpO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgaWYgdGhlIGxpbmsgc2hvdWxkIGJlIGZvbGxvd2VkXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICAqIEBwYXJhbSAge01vdXNlRXZlbnR9IGV2dFxuICAgKiBAcGFyYW0gIHtIVE1MQW5jaG9yRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBwcmV2ZW50Q2hlY2soZXZ0OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQsIG51bGw+LCBlbGVtZW50OiBIVE1MQW5jaG9yRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgaHJlZiA9IHRoaXMuZ2V0SHJlZihlbGVtZW50KTtcblxuICAgIC8vIFVzZXJcbiAgICBpZiAoIWVsZW1lbnQgfHwgIWhyZWYpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBNaWRkbGUgY2xpY2ssIGNtZCBjbGljaywgYW5kIGN0cmwgY2xpY2tcbiAgICBpZiAoZXZ0LndoaWNoID4gMSB8fCBldnQubWV0YUtleSB8fCBldnQuY3RybEtleSB8fCBldnQuc2hpZnRLZXkgfHwgZXZ0LmFsdEtleSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSB0YXJnZXQgd2l0aCBfYmxhbmsgdGFyZ2V0XG4gICAgaWYgKGVsZW1lbnQudGFyZ2V0ICYmIGVsZW1lbnQudGFyZ2V0ID09PSAnX2JsYW5rJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGl0J3MgdGhlIHNhbWUgZG9tYWluXG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gZWxlbWVudC5wcm90b2NvbCB8fCB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgIT09IGVsZW1lbnQuaG9zdG5hbWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgcG9ydCBpcyB0aGUgc2FtZVxuICAgIGlmIChVdGlscy5nZXRQb3J0KCkgIT09IFV0aWxzLmdldFBvcnQoZWxlbWVudC5wb3J0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSBjYXNlIHdoZW4gYSBoYXNoIGlzIGJlaW5nIHRhY2tlZCBvbiB0aGUgY3VycmVudCBVUkxcbiAgICBpZiAoaHJlZi5pbmRleE9mKCcjJykgPiAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElnbm9yZSBjYXNlIHdoZXJlIHRoZXJlIGlzIGRvd25sb2FkIGF0dHJpYnV0ZVxuICAgIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSAmJiB0eXBlb2YgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJykgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSW4gY2FzZSB5b3UncmUgdHJ5aW5nIHRvIGxvYWQgdGhlIHNhbWUgcGFnZVxuICAgIGlmIChVdGlscy5jbGVhbkxpbmsoaHJlZikgPT09IFV0aWxzLmNsZWFuTGluayhsb2NhdGlvbi5ocmVmKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmlnbm9yZUNsYXNzTGluaykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIC5ocmVmIHBhcmFtZXRlciBvdXQgb2YgYW4gZWxlbWVudFxuICAgKiBhbmQgaGFuZGxlIHNwZWNpYWwgY2FzZXMgKGxpa2UgeGxpbms6aHJlZilcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgICogQHBhcmFtICB7SFRNTEFuY2hvckVsZW1lbnR9IGVsXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaHJlZlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRIcmVmKGVsOiBIVE1MQW5jaG9yRWxlbWVudCB8IFNWR0FFbGVtZW50KTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoZWwuZ2V0QXR0cmlidXRlICYmIHR5cGVvZiBlbC5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKSB8fCB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZihlbC5ocmVmKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBlbC5ocmVmO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKiogc2luZ2xldG9uIGluc3RhbmNlICovXG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBQamF4O1xuXG4gIHB1YmxpYyBkb20/OiBEb207XG4gIHB1YmxpYyBoaXN0b3J5ID0gbmV3IEhpc3RvcnlNYW5hZ2VyKCk7XG5cbiAvKipcbiAgKiBJbmRpY2F0ZSB3ZXRoZXIgb3Igbm90IHVzZSB0aGUgY2FjaGVcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHRcbiAgKi9cbiAgcHVibGljIGNhY2hlRW5hYmxlZDogYm9vbGVhbiA9IHRydWU7XG5cbiAvKipcbiAgKiBJbmRpY2F0ZSBpZiB0aGVyZSBpcyBhbiBhbmltYXRpb24gaW4gcHJvZ3Jlc3NcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHJlYWRPbmx5XG4gICogQHR5cGUge2Jvb2xlYW59XG4gICovXG4gIHB1YmxpYyB0cmFuc2l0aW9uUHJvZ3Jlc3M6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgR2xvYmFsRXZlbnQoKTtcblxuICBwcml2YXRlIHRyYW5zaXRpb246IElUcmFuc2l0aW9uID0gbmV3IEhpZGVTaG93VHJhbnNpdGlvbigpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIHNpbmdsZXRvbiBpbnN0YW5jZSBvZiBQamF4LlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKFBqYXguaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBQamF4Lmluc3RhbmNlO1xuICAgIH1cblxuICAgIFBqYXguaW5zdGFuY2UgPSB0aGlzO1xuICB9XG5cbiAvKipcbiAgKiBGdW5jdGlvbiB0byBiZSBjYWxsZWQgdG8gc3RhcnQgUGpheFxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKi9cbiAgcHVibGljIHN0YXJ0KCR3cmFwcGVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCB0cmFuc2l0aW9uPzogSVRyYW5zaXRpb24pIHtcblxuICAgIHRoaXMuZG9tID0gbmV3IERvbSgkd3JhcHBlcik7XG5cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgdGhpcy50cmFuc2l0aW9uID0gdHJhbnNpdGlvbjtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQoJHdyYXBwZXIpO1xuICB9XG5cbiAvKipcbiAgKiBSZXR1cm4gdGhlIGN1cnJlbnRVUkwgY2xlYW5lZFxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcmV0dXJuIHtzdHJpbmd9IGN1cnJlbnRVcmxcbiAgKi9cbiAgcHVibGljIGdldEN1cnJlbnRVcmwoKSB7XG4gICAgcmV0dXJuIFV0aWxzLmNsZWFuTGluayhcbiAgICAgIFV0aWxzLmdldFVybCgpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBVUkwgd2l0aCBwdXNoc3RhdGUgYW5kIHRyaWdnZXIgdGhlIHN0YXRlIGNoYW5nZVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsXG4gICAqL1xuICBwdWJsaWMgZ29Ubyh1cmw6IHN0cmluZywgbmV3VGFiPzogYm9vbGVhbikge1xuICAgIGlmIChuZXdUYWIpIHtcbiAgICAgIGNvbnN0IHdpbiA9IHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xuICAgICAgaWYgKHdpbikge1xuICAgICAgICByZXR1cm4gd2luLmZvY3VzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHVybC5pbmRleE9mKCdodHRwJykgIT09IDApIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCB1bmRlZmluZWQsIHVybCk7XG4gICAgICByZXR1cm4gdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgLy8gZmFsbGJhY2tcbiAgICB0aGlzLmZvcmNlR29Ubyh1cmwpO1xuICB9XG5cbiAvKipcbiAgKiBSZXR1cm4gYSB0cmFuc2l0aW9uIG9iamVjdFxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcmV0dXJuIHtCYXJiYS5UcmFuc2l0aW9ufSBUcmFuc2l0aW9uIG9iamVjdFxuICAqL1xuICBwdWJsaWMgZ2V0VHJhbnNpdGlvbigpOiBJVHJhbnNpdGlvbiB7XG4gICAgLy8gVXNlciBjdXN0b21pemFibGVcbiAgICByZXR1cm4gdGhpcy50cmFuc2l0aW9uO1xuICB9XG5cbiAvKipcbiAgKiBBdHRhY2ggdGhlIGV2ZW50bGlzdGVuZXJzXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbiBwcm90ZWN0ZWQgYmluZEV2ZW50cygpIHtcbiAgICAvLyB3ZSB1c2UgdGhlIHJ2LXJvdXRlciBmb3IgdGhpc1xuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxcbiAgICAvLyAgIHRoaXMub25MaW5rQ2xpY2suYmluZCh0aGlzKSxcbiAgICAvLyApO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJyxcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cblxuIC8qKlxuICAqIEZvcmNlIHRoZSBicm93c2VyIHRvIGdvIHRvIGEgY2VydGFpbiB1cmxcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHBhcmFtIHtMb2NhdGlvbn0gdXJsXG4gICogQHByaXZhdGVcbiAgKi9cbiBwcm90ZWN0ZWQgZm9yY2VHb1RvKHVybDogTG9jYXRpb24gfCBzdHJpbmcpIHtcbiAgIGlmICh1cmwgaW5zdGFuY2VvZiBMb2NhdGlvbikge1xuICAgIHdpbmRvdy5sb2NhdGlvbiA9IHVybDtcbiAgIH1cbiAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgfVxuICB9XG5cbiAvKipcbiAgKiBMb2FkIGFuIHVybCwgd2lsbCBzdGFydCBhbiB4aHIgcmVxdWVzdCBvciBsb2FkIGZyb20gdGhlIGNhY2hlXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwcm90ZWN0ZWRcbiAgKiBAcGFyYW0gIHtzdHJpbmd9IHVybFxuICAqIEByZXR1cm4ge1Byb21pc2U8SlF1ZXJ5PEhUTUxFbGVtZW50Pj59XG4gICovXG4gcHJvdGVjdGVkIGxvYWQodXJsOiBzdHJpbmcpOiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+IHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFV0aWxzLmRlZmVycmVkKCk7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IHhocjtcblxuICAgIHhociA9IFBqYXguY2FjaGUuZ2V0KHVybCk7XG5cbiAgICBpZiAoIXhocikge1xuICAgICAgeGhyID0gVXRpbHMueGhyKHVybCk7XG4gICAgICBQamF4LmNhY2hlLnNldCh1cmwsIHhocik7XG4gICAgfVxuXG4gICAgeGhyLnRoZW4oKGRhdGE6IHN0cmluZykgPT4ge1xuXG4gICAgICAgIGlmICghc2VsZi5kb20pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tQamF4XSB5b3UgbmVlZCB0byBjYWxsIHRoZSBzdGFydCBtZXRob2QgZmlyc3QhJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCAkY29udGFpbmVyID0gc2VsZi5kb20ucGFyc2VSZXNwb25zZShkYXRhKTtcblxuICAgICAgICBzZWxmLmRvbS5wdXRDb250YWluZXIoJGNvbnRhaW5lcik7XG5cbiAgICAgICAgaWYgKCFzZWxmLmNhY2hlRW5hYmxlZCkge1xuICAgICAgICAgIFBqYXguY2FjaGUucmVzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoJGNvbnRhaW5lcik7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICAgIC8vIFNvbWV0aGluZyB3ZW50IHdyb25nICh0aW1lb3V0LCA0MDQsIDUwNS4uLilcbiAgICAgICAgc2VsZi5mb3JjZUdvVG8odXJsKTtcblxuICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAvKipcbiAgKiBDYWxsYmFjayBjYWxsZWQgZnJvbSBjbGljayBldmVudFxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldnRcbiAgKi9cbiBwcm90ZWN0ZWQgb25MaW5rQ2xpY2soZXZ0OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQsIG51bGw+KSB7XG4gICAgbGV0IGVsOiBIVE1MQW5jaG9yRWxlbWVudCA9IChldnQudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50ICk7XG5cbiAgICAvLyBHbyB1cCBpbiB0aGUgbm9kZWxpc3QgdW50aWwgd2VcbiAgICAvLyBmaW5kIHNvbWV0aGluZyB3aXRoIGFuIGhyZWZcbiAgICB3aGlsZSAoZWwgJiYgIVBqYXguZ2V0SHJlZihlbCkpIHtcbiAgICAgIGVsID0gKGVsLnBhcmVudE5vZGUgYXMgSFRNTEFuY2hvckVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmIChQamF4LnByZXZlbnRDaGVjayhldnQsIGVsKSkge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCdsaW5rQ2xpY2tlZCcsIGVsLCBldnQpO1xuXG4gICAgICBjb25zdCBocmVmID0gUGpheC5nZXRIcmVmKGVsKTtcbiAgICAgIGlmICghaHJlZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hyZWYgaXMgbnVsbCcpO1xuICAgICAgfVxuICAgICAgdGhpcy5nb1RvKGhyZWYpO1xuICAgIH1cbiAgfVxuXG4gLyoqXG4gICogTWV0aG9kIGNhbGxlZCBhZnRlciBhICdwb3BzdGF0ZScgb3IgZnJvbSAuZ29UbygpXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwcm90ZWN0ZWRcbiAgKi9cbiBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZSgpIHtcbiAgICBjb25zdCBuZXdVcmwgPSB0aGlzLmdldEN1cnJlbnRVcmwoKTtcblxuICAgIGlmICh0aGlzLnRyYW5zaXRpb25Qcm9ncmVzcykge1xuICAgICAgdGhpcy5mb3JjZUdvVG8obmV3VXJsKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKS51cmwgPT09IG5ld1VybCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaGlzdG9yeS5hZGQobmV3VXJsKTtcblxuICAgIGNvbnN0ICRuZXdDb250YWluZXIgPSB0aGlzLmxvYWQobmV3VXJsKTtcblxuICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0aGlzLmdldFRyYW5zaXRpb24oKTtcblxuICAgIHRoaXMudHJhbnNpdGlvblByb2dyZXNzID0gdHJ1ZTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCdpbml0U3RhdGVDaGFuZ2UnLFxuICAgICAgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSxcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmV2U3RhdHVzKCksXG4gICAgKTtcblxuICAgIGlmICghdGhpcy5kb20pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1BqYXhdIHlvdSBuZWVkIHRvIGNhbGwgdGhlIHN0YXJ0IG1ldGhvZCBmaXJzdCEnKTtcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc2l0aW9uSW5zdGFuY2UgPSB0cmFuc2l0aW9uLmluaXQoXG4gICAgICB0aGlzLmRvbS5nZXRDb250YWluZXIoKSxcbiAgICAgICRuZXdDb250YWluZXIsXG4gICAgKTtcblxuICAgICRuZXdDb250YWluZXIudGhlbihcbiAgICAgIHRoaXMub25OZXdDb250YWluZXJMb2FkZWQuYmluZCh0aGlzKSxcbiAgICApO1xuXG4gICAgdHJhbnNpdGlvbkluc3RhbmNlLnRoZW4oXG4gICAgICB0aGlzLm9uVHJhbnNpdGlvbkVuZC5iaW5kKHRoaXMpLFxuICAgICk7XG4gIH1cblxuIC8qKlxuICAqIEZ1bmN0aW9uIGNhbGxlZCBhcyBzb29uIHRoZSBuZXcgY29udGFpbmVyIGlzIHJlYWR5XG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwcm90ZWN0ZWRcbiAgKiBAcGFyYW0ge0pRdWVyeTxIVE1MRWxlbWVudD59ICRjb250YWluZXJcbiAgKi9cbiBwcm90ZWN0ZWQgb25OZXdDb250YWluZXJMb2FkZWQoJGNvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50Pikge1xuICAgIGNvbnN0IGN1cnJlbnRTdGF0dXMgPSB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpO1xuXG4gICAgaWYgKCF0aGlzLmRvbSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUGpheF0geW91IG5lZWQgdG8gY2FsbCB0aGUgc3RhcnQgbWV0aG9kIGZpcnN0IScpO1xuICAgIH1cblxuICAgIGN1cnJlbnRTdGF0dXMubmFtZXNwYWNlID0gdGhpcy5kb20uZ2V0TmFtZXNwYWNlKCRjb250YWluZXIpO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoJ25ld1BhZ2VSZWFkeScsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLFxuICAgICAgdGhpcy5oaXN0b3J5LnByZXZTdGF0dXMoKSxcbiAgICAgICRjb250YWluZXIsXG4gICAgICB0aGlzLmRvbS5jdXJyZW50SFRNTCxcbiAgICAgICRjb250YWluZXIuZGF0YSgpLFxuICAgICAgZmFsc2UsIC8vIHRydWUgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBuZXdQYWdlUmVhZHkgaXMgdGlnZ2VyZWQgLyB0cnVlIG9uIGluaXRpYWxpc2F0aW9uXG4gICAgKTtcbiAgfVxuXG4gLyoqXG4gICogRnVuY3Rpb24gY2FsbGVkIGFzIHNvb24gdGhlIHRyYW5zaXRpb24gaXMgZmluaXNoZWRcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHByb3RlY3RlZFxuICAqL1xuICBwcm90ZWN0ZWQgb25UcmFuc2l0aW9uRW5kKCkge1xuICAgIHRoaXMudHJhbnNpdGlvblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcigndHJhbnNpdGlvbkNvbXBsZXRlZCcsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLFxuICAgICAgdGhpcy5oaXN0b3J5LnByZXZTdGF0dXMoKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIGV2ZW50c1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgaW5pdCgkd3JhcHBlcjogSlF1ZXJ5PEhUTUxFbGVtZW50Pikge1xuICAgIGlmICghdGhpcy5kb20pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1BqYXhdIHlvdSBuZWVkIHRvIGNhbGwgdGhlIHN0YXJ0IG1ldGhvZCBmaXJzdCEnKTtcbiAgICB9XG4gICAgY29uc3QgJGNvbnRhaW5lciA9IHRoaXMuZG9tLmdldENvbnRhaW5lcigpO1xuICAgIC8vIGNvbnN0ICR3cmFwcGVyID0gdGhpcy5kb20uZ2V0V3JhcHBlcigpO1xuXG4gICAgJHdyYXBwZXIuYXR0cignYXJpYS1saXZlJywgJ3BvbGl0ZScpO1xuXG4gICAgdGhpcy5oaXN0b3J5LmFkZChcbiAgICAgIHRoaXMuZ2V0Q3VycmVudFVybCgpLFxuICAgICAgdGhpcy5kb20uZ2V0TmFtZXNwYWNlKCRjb250YWluZXIpLFxuICAgICk7XG5cbiAgICAvLyBGaXJlIGZvciB0aGUgY3VycmVudCB2aWV3LlxuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCdpbml0U3RhdGVDaGFuZ2UnLCB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpKTtcbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcignbmV3UGFnZVJlYWR5JyxcbiAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCksXG4gICAgICB7fSxcbiAgICAgICRjb250YWluZXIsXG4gICAgICB0aGlzLmRvbS5jdXJyZW50SFRNTCxcbiAgICAgICRjb250YWluZXIuZGF0YSgpLFxuICAgICAgdHJ1ZSwgLy8gdHJ1ZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIG5ld1BhZ2VSZWFkeSBpcyB0aWdnZXJlZCAvIHRydWUgb24gaW5pdGlhbGlzYXRpb25cbiAgICApO1xuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCd0cmFuc2l0aW9uQ29tcGxldGVkJywgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSk7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGpheCB9O1xuIiwiZXhwb3J0IHsgQ3VzdG9tVHJhbnNpdGlvbiB9IGZyb20gJy4vQ3VzdG9tVHJhbnNpdGlvbic7XG5leHBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgSVRyYW5zaXRpb24gfSBmcm9tICcuL0Jhc2VUcmFuc2l0aW9uJztcbmV4cG9ydCB7IEhpZGVTaG93VHJhbnNpdGlvbiB9IGZyb20gJy4vSGlkZVNob3dUcmFuc2l0aW9uJztcbiIsImltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIEJhc2VDYWNoZSBpdCdzIGEgc2ltcGxlIHN0YXRpYyBjYWNoZVxuICpcbiAqIEBuYW1lc3BhY2UgQmFyYmEuQmFzZUNhY2hlXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5jbGFzcyBCYXNlQ2FjaGUge1xuXG4gIC8qKlxuICAgKiBUaGUgT2JqZWN0IHRoYXQga2VlcHMgYWxsIHRoZSBrZXkgdmFsdWUgaW5mb3JtYXRpb25cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VDYWNoZVxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgcHVibGljIGRhdGE6IHtba2V5OiBzdHJpbmddOiBhbnl9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGF0YSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIGtleSBhbmQgdmFsdWUgZGF0YSwgbWFpbmx5IEJhcmJhIGlzIGdvaW5nIHRvIHNhdmUgcHJvbWlzZXNcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VDYWNoZVxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHB1YmxpYyBzZXQoa2V5OiBzdHJpbmcsIHZhbDogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSBkYXRhIHVzaW5nIHRoZSBrZXlcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VDYWNoZVxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgcHVibGljIGdldChrZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmRhdGFba2V5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbHVzaCB0aGUgY2FjaGVcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VDYWNoZVxuICAgKi9cbiAgcHVibGljIHJlc2V0KCkge1xuICAgIHRoaXMuZGF0YSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBleHRlbmQgdGhpcyBvYmplY3RcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VDYWNoZVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IG5ld09iamVjdFxuICAgKiBAcmV0dXJuIHtvYmplY3R9IG5ld0luaGVyaXRPYmplY3RcbiAgICovXG4gIHByaXZhdGUgZXh0ZW5kKG9iajogb2JqZWN0KSB7XG4gICAgcmV0dXJuIFV0aWxzLmV4dGVuZChmYWxzZSwgdGhpcywgb2JqKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCYXNlQ2FjaGUgfTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG4vKipcbiAqIEpRdWVyeSBFeHRlbnNpb24gZm9yIG1vYmlsZSBldmVudHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5tYWpvci9qUXVlcnktVG91Y2gtRXZlbnRzXG4gKi9cbmltcG9ydCB0b3VjaEV2ZW50cyBmcm9tICdqcXVlcnktdG91Y2gtZXZlbnRzJztcbmNvbnN0IGpRdWVyeTogSlF1ZXJ5U3RhdGljID0gdG91Y2hFdmVudHMoJCk7XG5leHBvcnQgZGVmYXVsdCBqUXVlcnk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJidW5kbGUuY3NzXCI7IiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElDb21wb25lbnRXcmFwcGVyUmVzdWx0LCBQamF4LCBQcmVmZXRjaCwgUmliYUNvbXBvbmVudCwgUmliYUNvbXBvbmVudENsYXNzLCBCaW5kaW5nIH0gZnJvbSAnLi4vLi4vdGlueWJpbmQnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vanF1ZXJ5JztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBzaG9waWZ5LXNlY3Rpb24tcHJvZHVjdC1zY3JvbGxiYXJcbiAqL1xuZXhwb3J0IGNvbnN0IHByb2R1Y3RTY3JvbGxiYXJDb21wb25lbnQgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50OnByb2R1Y3Qtc2Nyb2xsYmFyJyk7XG5cbiAgY29uc3QgcGpheCA9IG5ldyBQamF4KCk7XG4gIGNvbnN0IHByZWZldGNoID0gbmV3IFByZWZldGNoKCk7XG5cbiAgY29uc3QgY29tcG9uZW50OiBJQ29tcG9uZW50V3JhcHBlclJlc3VsdDxhbnk+ID0ge1xuICAgIG5hbWU6ICdwcm9kdWN0LXNjcm9sbGJhcicsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBpbml0aWFsaXplKGVsOiBIVE1MRWxlbWVudCwgZGF0YTogYW55KSB7XG4gICAgICB0aGlzLmN1c3RvbURhdGEgPSB7fTtcbiAgICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgICAgY29uc3QgJHByb2R1Y3RzID0gJGVsLmZpbmQoJy5jb250ZW50LWJveCcpO1xuICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgICAgZGVidWcoJ2luaXRpYWxpemUnLCBkYXRhKTtcblxuICAgICAgc2NvcGUudGl0bGUgPSAnUGxlYXNlIGNob29zZSBhIHByb2R1Y3QnO1xuXG4gICAgICAvKipcbiAgICAgICAqIEp1c3Qgb3BlbiB0aGUgcHJvZHVjdCB1cmxcbiAgICAgICAqL1xuICAgICAgc2NvcGUub25Qcm9kdWN0VGFwID0gKGV2ZW50OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQsIG51bGw+LCBjb250cm9sbGVyOiBhbnksIGV2ZW50RWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHVybCA9ICQoZXZlbnRFbCkuZGF0YSgndXJsJyk7XG4gICAgICAgIHBqYXguZ29Ubyh1cmwpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBQcmVsb2FkIHByb2R1Y3Qgb24gbW91c2Ugb3ZlclxuICAgICAgICovXG4gICAgICBzY29wZS5vblByb2R1Y3RNb3VzZWVudGVyID0gKGV2ZW50OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQ+LCBjb250cm9sbGVyOiBhbnksIGV2ZW50RWw6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHVybCA9ICQoZXZlbnRFbCkuZGF0YSgndXJsJyk7XG4gICAgICAgIHByZWZldGNoLm9uTGlua0VudGVyKGV2ZW50LCB1cmwpO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBnZXQgcHJvZHVjdCBpbiB0aGUgbWlkZGxlIG9mIHRoZSBzY3JvbGxiYXIgZWxlbWVudFxuICAgICAgICovXG4gICAgICBzY29wZS5vblNjcm9sbCA9IChldmVudDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50PiwgY29udHJvbGxlcjogYW55LCBldmVudEVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICAkcHJvZHVjdHMuZWFjaChmdW5jdGlvbih0aGlzOiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlcikge1xuICAgICAgICAgIGNvbnN0IHByb2R1Y3QgPSAkcHJvZHVjdHMuZ2V0KGluZGV4KTtcbiAgICAgICAgICBjb25zdCBwcm9kdWN0RGF0YSA9IHByb2R1Y3QuZGF0YXNldDtcbiAgICAgICAgICBjb25zdCBwYXJlbnRSZWN0ID0gZXZlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBjb25zdCBlbGVtZW50UmVjdCA9IHByb2R1Y3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY29uc3QgZWxlbWVudE1pZGRsZSA9IChlbGVtZW50UmVjdC53aWR0aCAvIDIpO1xuICAgICAgICAgIC8qKiBjZW50ZXJYIGlzIDAgaWYgdGhlIHByb2R1Y3QgaXMgaW4gdGhlIG1pZGRsZSAqL1xuICAgICAgICAgIGNvbnN0IGNlbnRlclggPSBlbGVtZW50UmVjdC5sZWZ0IC0gKChwYXJlbnRSZWN0LndpZHRoIC8gMikgLSBlbGVtZW50TWlkZGxlKTtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50TWlkZGxlO1xuXG4gICAgICAgICAgaWYgKGNlbnRlclggPiAob2Zmc2V0ICogLTEpICYmIGNlbnRlclggPCBvZmZzZXQpIHtcbiAgICAgICAgICAgIHNjb3BlLnRpdGxlID0gcHJvZHVjdERhdGEudGl0bGU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzY29wZTtcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBjb21wb25lbnQ7XG59O1xuXG5jbGFzcyBQcm9kdWN0U2Nyb2xsYmFyUmliYUNvbXBvbmVudCBleHRlbmRzIFJpYmFDb21wb25lbnQge1xuXG4gIHB1YmxpYyBzdGF0aWMgdGFnTmFtZTogc3RyaW5nID0gJ3J2LXByb2R1Y3Qtc2Nyb2xsYmFyJztcblxuICBwcm90ZWN0ZWQgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50OnJ2LXByb2R1Y3Qtc2Nyb2xsYmFyJyk7XG5cbiAgcHJvdGVjdGVkIHNjb3BlOiBhbnkgPSB7fTtcblxuICAvLyBwcml2YXRlIG1vZGVsOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBwamF4ID0gbmV3IFBqYXgoKTtcbiAgcHJpdmF0ZSBwcmVmZXRjaCA9IG5ldyBQcmVmZXRjaCgpO1xuICBwcml2YXRlICRwcm9kdWN0cz86IEpRdWVyeTxIVE1MRWxlbWVudD47XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudD86IEhUTUxFbGVtZW50KSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgY29uc3QgJGVsID0gJCh0aGlzLmVsKTtcbiAgICB0aGlzLiRwcm9kdWN0cyA9ICRlbC5maW5kKCcuY29udGVudC1ib3gnKTtcblxuICAgIHRoaXMuc2NvcGUub25TY3JvbGwgPSB0aGlzLm9uU2Nyb2xsO1xuICAgIHRoaXMuc2NvcGUub25Qcm9kdWN0VGFwID0gdGhpcy5vblByb2R1Y3RUYXA7XG4gICAgdGhpcy5zY29wZS5vblByb2R1Y3RNb3VzZWVudGVyID0gdGhpcy5vblByb2R1Y3RNb3VzZWVudGVyO1xuXG4gICAgdGhpcy5zY29wZS50aXRsZSA9ICdQbGVhc2UgY2hvb3NlIGEgcHJvZHVjdCc7XG5cbiAgICB0aGlzLmJpbmQoKTtcblxuICAgIHRoaXMuZGVidWcoJ2NvbnN0cnVjdG9yJywgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogSnVzdCBvcGVuIHRoZSBwcm9kdWN0IHVybFxuICAgKi9cbiAgcHVibGljIG9uUHJvZHVjdFRhcChldmVudDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50LCBudWxsPiwgc2NvcGU6IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQsIGNvbnRleHQ6IEJpbmRpbmcpIHtcbiAgICBjb25zdCB1cmwgPSAkKGV2ZW50RWwpLmRhdGEoJ3VybCcpO1xuICAgIHRoaXMucGpheC5nb1RvKHVybCk7XG4gIH1cblxuICAvKipcbiAgICogUHJlbG9hZCBwcm9kdWN0IG9uIG1vdXNlIG92ZXJcbiAgICovXG4gIHB1YmxpYyBvblByb2R1Y3RNb3VzZWVudGVyKGV2ZW50OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQ+LCBzY29wZTogYW55LCBldmVudEVsOiBIVE1MRWxlbWVudCwgY29udGV4dDogQmluZGluZykge1xuICAgIHRoaXMuZGVidWcoJ29uUHJvZHVjdE1vdXNlZW50ZXInKTtcbiAgICBjb25zdCB1cmwgPSAkKGV2ZW50RWwpLmRhdGEoJ3VybCcpO1xuICAgIHRoaXMucHJlZmV0Y2gub25MaW5rRW50ZXIoZXZlbnQsIHVybCk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IHByb2R1Y3QgaW4gdGhlIG1pZGRsZSBvZiB0aGUgc2Nyb2xsYmFyIGVsZW1lbnRcbiAgICovXG4gIHB1YmxpYyBvblNjcm9sbChldmVudDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50Piwgc2NvcGU6IGFueSwgZXZlbnRFbDogSFRNTEVsZW1lbnQsIGNvbnRleHQ6IEJpbmRpbmcpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLmRlYnVnKCdvblNjcm9sbCcsIHRoaXMuc2NvcGUpO1xuICAgIGlmICh0aGlzLiRwcm9kdWN0cykge1xuICAgICAgdGhpcy4kcHJvZHVjdHMuZWFjaCgoaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoc2VsZi4kcHJvZHVjdHMpIHtcbiAgICAgICAgICBjb25zdCBwcm9kdWN0ID0gc2VsZi4kcHJvZHVjdHMuZ2V0KGluZGV4KTtcbiAgICAgICAgICBjb25zdCBwcm9kdWN0RGF0YSA9IHByb2R1Y3QuZGF0YXNldDtcbiAgICAgICAgICBjb25zdCBwYXJlbnRSZWN0ID0gZXZlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBjb25zdCBlbGVtZW50UmVjdCA9IHByb2R1Y3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgY29uc3QgZWxlbWVudE1pZGRsZSA9IChlbGVtZW50UmVjdC53aWR0aCAvIDIpO1xuICAgICAgICAgIC8qKiBjZW50ZXJYIGlzIDAgaWYgdGhlIHByb2R1Y3QgaXMgaW4gdGhlIG1pZGRsZSAqL1xuICAgICAgICAgIGNvbnN0IGNlbnRlclggPSBlbGVtZW50UmVjdC5sZWZ0IC0gKChwYXJlbnRSZWN0LndpZHRoIC8gMikgLSBlbGVtZW50TWlkZGxlKTtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50TWlkZGxlO1xuXG4gICAgICAgICAgaWYgKGNlbnRlclggPiAob2Zmc2V0ICogLTEpICYmIGNlbnRlclggPCBvZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGUudGl0bGUgPSBwcm9kdWN0RGF0YS50aXRsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGN1c3RvbSBlbGVtZW50IGlzIGZpcnN0IGNvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy4kcHJvZHVjdHMgPSAkKCh0aGlzIGFzIGFueSkpLmZpbmQoJy5jb250ZW50LWJveCcpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8vIChQcm9kdWN0U2Nyb2xsYmFyUmliYUNvbXBvbmVudCBhcyBhbnkpLnByb3RvdHlwZS5fX3Byb3RvX18gPSBIVE1MRWxlbWVudC5wcm90b3R5cGU7XG4vLyAoUHJvZHVjdFNjcm9sbGJhclJpYmFDb21wb25lbnQgYXMgYW55KS5fX3Byb3RvX18gPSBIVE1MRWxlbWVudDtcblxuZXhwb3J0IHsgUHJvZHVjdFNjcm9sbGJhclJpYmFDb21wb25lbnQgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCIgPG5hdiBjbGFzcz1uYXYgcnYtYWRkLWNsYXNzPWxpbmtsaXN0LmhhbmRsZSBydi1jbGFzcy1uYXYtcGlsbHM9cGlsbHMgcnYtY2xhc3MtZmxleC1jb2x1bW49dmVydGljYWwgcnYtY2xhc3MtZmxleC1yb3c9XFxcInZlcnRpY2FsIHwgbm90XFxcIj4gPGRpdiBjbGFzcz1uYXYtaXRlbSBydi1lYWNoLWxpbms9bGlua2xpc3QubGlua3M+IDxhIGNsYXNzPW5hdi1saW5rIHJ2LWNsYXNzLWFjdGl2ZT1saW5rLmFjdGl2ZSBydi1yb3V0ZT1saW5rLmhyZWYgcnYtaHJlZj1saW5rLmhyZWY+e2xpbmsudGV4dH08L2E+IDwvZGl2PiA8L25hdj4gXCI7IiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElDb21wb25lbnRXcmFwcGVyUmVzdWx0IH0gZnJvbSAnLi4vLi4vdGlueWJpbmQnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vbmF2LWl0ZW1zLmNvbXBvbmVudC5odG1sJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBuYXYtaXRlbXNcbiAqL1xuZXhwb3J0IGNvbnN0IG5hdkl0ZW1zQ29tcG9uZW50ID0gKCkgPT4ge1xuXG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2NvbXBvbmVudDpuYXYtaXRlbXMnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4gPSB7XG4gICAgbmFtZTogJ25hdi1pdGVtcycsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgY29uc3Qgc2NvcGUgPSAodGhpcyBhcyBhbnkpO1xuICAgICAgZGVidWcoJ2luaXRpYWxpemUnLCBkYXRhLCB0ZW1wbGF0ZSk7XG5cbiAgICAgIHNjb3BlLmxpbmtsaXN0ID0gZGF0YS5saW5rbGlzdDtcbiAgICAgIHNjb3BlLnBpbGxzID0gZGF0YS5waWxscztcbiAgICAgIHNjb3BlLnZlcnRpY2FsID0gISFkYXRhLnZlcnRpY2FsO1xuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiIFwiOyIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSUNvbXBvbmVudFdyYXBwZXJSZXN1bHQgfSBmcm9tICcuLi8uLi90aW55YmluZCc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9pY29uc2V0LmNvbXBvbmVudC5odG1sJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBuYXYtaXRlbXNcbiAqL1xuZXhwb3J0IGNvbnN0IGljb25zZXRDb21wb25lbnQgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50Omljb25zZXQnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4gPSB7XG5cbiAgICBuYW1lOiAnaWNvbnNldCcsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzO1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBjb25zdCBzcmMgPSBkYXRhLnNyYyB8fCB3aW5kb3cubW9kZWwuc3lzdGVtLmFzc2V0c1BhdGggKyBkYXRhLm5hbWU7XG4gICAgICBjb25zdCBjb2xvciA9IGRhdGEuY29sb3IgfHwgbnVsbDtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbiA9IGRhdGEuZGlyZWN0aW9uIHx8ICd0b3AnO1xuICAgICAgY29uc3Qgc2l6ZSA9IGRhdGEuc2l6ZSB8fCAzMjtcbiAgICAgIGxldCBjbGFzc1N0cmluZyA9IGBpY29uc2V0IGRpcmVjdGlvbi0ke2RpcmVjdGlvbn0gc2l6ZS0ke3NpemV9IGNvbG9yLSR7Y29sb3J9YDtcbiAgICAgIGRlYnVnKCdpbml0aWFsaXplJywgZGF0YSwgdGVtcGxhdGUpO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcgKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9ICcgcm90YXRlLTI3MCc7XG4gICAgICB9IGVsc2UgaWYgKCBkaXJlY3Rpb24gPT09ICdsZWZ0LXRvcCcgfHwgZGlyZWN0aW9uID09PSAnbGVmdC11cCcgfHwgZGlyZWN0aW9uID09PSAndG9wLWxlZnQnIHx8IGRpcmVjdGlvbiA9PT0gJ3VwLWxlZnQnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0zMTUnIDtcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ3RvcCcgfHwgZGlyZWN0aW9uID09PSAndXAnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0wJztcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ3RvcC1yaWdodCcgfHwgZGlyZWN0aW9uID09PSAndXAtcmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ3JpZ2h0LXRvcCcgfHwgZGlyZWN0aW9uID09PSAncmlnaHQtdXAnKSB7XG4gICAgICAgIGNsYXNzU3RyaW5nICs9ICcgcm90YXRlLTQ1JztcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyApIHtcbiAgICAgICAgY2xhc3NTdHJpbmcgKz0gJyByb3RhdGUtOTAnO1xuICAgICAgfSBlbHNlIGlmICggZGlyZWN0aW9uID09PSAncmlnaHQtYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodC1kb3duJyB8fCBkaXJlY3Rpb24gPT09ICdib3R0b20tcmlnaHQnIHx8IGRpcmVjdGlvbiA9PT0gJ2Rvd24tcmlnaHQnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0xMzUnO1xuICAgICAgfSBlbHNlIGlmICggZGlyZWN0aW9uID09PSAnYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyApIHtcbiAgICAgICAgY2xhc3NTdHJpbmcgKz0gJyByb3RhdGUtMTgwJztcbiAgICAgIH0gZWxzZSBpZiAoIGRpcmVjdGlvbiA9PT0gJ2xlZnQtYm90dG9tJyB8fCBkaXJlY3Rpb24gPT09ICdsZWZ0LWRvd24nIHx8IGRpcmVjdGlvbiA9PT0gJ2JvdHRvbS1sZWZ0JyB8fCBkaXJlY3Rpb24gPT09ICdkb3duLWxlZnQnICkge1xuICAgICAgICBjbGFzc1N0cmluZyArPSAnIHJvdGF0ZS0yMjUnO1xuICAgICAgfVxuXG4gICAgICAkKGVsKVxuICAgICAgLmxvYWQoIHNyYyApXG4gICAgICAuY3NzKHtcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGhlaWdodDogc2l6ZSArICdweCcsXG4gICAgICAgIHdpZHRoOiBzaXplICsgJ3B4JyxcbiAgICAgIH0pXG4gICAgICAuYWRkQ2xhc3MoY2xhc3NTdHJpbmcpXG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAuYXR0cigncm9sZScsICdpbWcnKTtcblxuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGgxIGNsYXNzPWxlYWQ+c2NocmVpYiB1bnM8L2gxPiA8cD4gSGV5IEAgQXJ0K0NvZGUgU3R1ZGlvLDxici8+IGljaCBiaW4gPHNwYW4gY2xhc3M9dGV4dC1kYW5nZXIgY29udGVudGVkaXRhYmxlPXRydWUgcnYtdmFsdWU9XFxcIm5hbWUgfCBkZWZhdWx0ICdOYW1lJ1xcXCI+PC9zcGFuPiB1bmQgbcO2Y2h0ZSA8c3BhbiBjbGFzcz10ZXh0LWRhbmdlciBjb250ZW50ZWRpdGFibGU9dHJ1ZSBydi12YWx1ZT1cXFwibWVzc2FnZSB8IGRlZmF1bHQgJ05hY2hyaWNodCdcXFwiPjwvc3Bhbj4uPGJyLz4gPGJyPiBNZWxkZXQgZXVjaCwgPHNwYW4gY2xhc3M9dGV4dC1kYW5nZXIgY29udGVudGVkaXRhYmxlPXRydWUgcnYtdmFsdWU9XFxcInJlZ2FyZHMgfCBkZWZhdWx0ICdoYXN0YSBsYSB2aXN0YSdcXFwiPjwvc3Bhbj48YnIvPiA8c3BhbiBydi1odG1sPW5hbWU+PC9zcGFuPjxicj4gPGJyPiBQLlMuPGJyPiBTY2hyZWlidCBtaXIgYW4gPHNwYW4gY2xhc3M9dGV4dC1kYW5nZXIgY29udGVudGVkaXRhYmxlPXRydWUgcnYtdmFsdWU9XFxcIm1haWwgfCBkZWZhdWx0ICdFLU1haWwnXFxcIj48L3NwYW4+IG9kZXIgcnVmdCBtaWNoIHVudGVyIDxzcGFuIGNsYXNzPXRleHQtZGFuZ2VyIGNvbnRlbnRlZGl0YWJsZT10cnVlIHJ2LXZhbHVlPVxcXCJwaG9uZSB8IGRlZmF1bHQgJ1RlbGVmb24nXFxcIj48L3NwYW4+IGFuLiA8L3A+IDxhIGNsYXNzPXRleHQtbGlnaHQgaHJlZj0jIHJ2LW9uLWNsaWNrPXNlbmQ+QWJzZW5kZW48L2E+XCI7IiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJQ29tcG9uZW50V3JhcHBlclJlc3VsdCB9IGZyb20gJy4uLy4uL3RpbnliaW5kJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NvbnRhY3QuY29tcG9uZW50Lmh0bWwnO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIC8vIHRzbGludDpkaXNhYmxlOiBpbnRlcmZhY2UtbmFtZVxuICBpbnRlcmZhY2UgV2luZG93IHsgbW9kZWw6IGFueTsgfVxufVxuXG4vKipcbiAqIGNvbnRhY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRhY3RDb21wb25lbnQgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50OmNvbnRhY3QnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnRXcmFwcGVyUmVzdWx0PGFueT4gPSB7XG5cbiAgICBuYW1lOiAnY29udGFjdCcsXG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9LFxuXG4gICAgaW5pdGlhbGl6ZShlbDogSFRNTEVsZW1lbnQsIGRhdGE6IGFueSkge1xuICAgICAgY29uc3Qgc2NvcGUgPSAodGhpcyBhcyBhbnkpO1xuICAgICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgICBzY29wZS5uYW1lID0gJyc7XG4gICAgICBzY29wZS5tZXNzYWdlID0gJyc7XG4gICAgICBzY29wZS5yZWdhcmRzID0gJyc7XG4gICAgICBzY29wZS5tYWlsID0gJyc7XG4gICAgICBzY29wZS5waG9uZSA9ICcnO1xuXG4gICAgICBzY29wZS5zZW5kID0gKCkgPT4ge1xuICAgICAgICBkZWJ1Zygnc2VuZCcpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJleHBvcnQgeyBjb250YWN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb250YWN0L2NvbnRhY3QuY29tcG9uZW50JztcbmV4cG9ydCB7IGljb25zZXRDb21wb25lbnQgfSBmcm9tICcuL2ljb25zZXQvaWNvbnNldC5jb21wb25lbnQnO1xuZXhwb3J0IHsgbmF2SXRlbXNDb21wb25lbnQgfSBmcm9tICcuL25hdi1pdGVtcy9uYXYtaXRlbXMuY29tcG9uZW50JztcbmV4cG9ydCB7IHByb2R1Y3RTY3JvbGxiYXJDb21wb25lbnQsIFByb2R1Y3RTY3JvbGxiYXJSaWJhQ29tcG9uZW50IH0gZnJvbSAnLi9wcm9kdWN0LXNjcm9sbGJhci9wcm9kdWN0LXNjcm9sbGJhci5jb21wb25lbnQnO1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi8uLi90aW55YmluZCc7XG5cbi8qKlxuICogU2Nyb2xsIGFuIHNjcm9sbGFibGUgZWxlbWVudCBieSBkcmFnaW5nIGFuZCBtb3ZpbmcgeW91ciBtb3VzZS5cbiAqIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9hc3ZkL2RyYWdzY3JvbGxcbiAqL1xuZXhwb3J0IGNsYXNzIERyYWdzY3JvbGwge1xuICBwdWJsaWMgZGVidWcgPSBEZWJ1ZygnYmluZGVyczpzY3JvbGxiYXItZHJhZ2FibGUnKTtcbiAgcHJpdmF0ZSBsYXN0Q2xpZW50WCA9IDA7XG4gIHByaXZhdGUgbGFzdENsaWVudFkgPSAwO1xuICBwcml2YXRlIGVsOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBwdXNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihlbDogSFRNTEVsZW1lbnQsIGRldGVjdEdsb2JhbE1vdmUgPSB0cnVlKSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuXG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tZC5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5tZC5iaW5kKHRoaXMpLCBmYWxzZSk7XG5cbiAgICAvLyBVc2UgZ2xvYmFsIG1vdmUgaWYgeW91ciBlbGVtZW50IGRvZXMgbm90IHVzZSB0aGUgZnVsbCB3aWR0aCAvIGhlaWdodFxuICAgIGlmIChkZXRlY3RHbG9iYWxNb3ZlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubXUuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW0uYmluZCh0aGlzKSwgZmFsc2UpO1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubXUuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMubW0uYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5tdS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm1tLmJpbmQodGhpcyksIGZhbHNlKTtcblxuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMubXUuYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5tbS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBtZCA8RXZlbnRMaXN0ZW5lcj4oZTogTW91c2VFdmVudCkge1xuICAgIHRoaXMucHVzaGVkID0gdHJ1ZTtcbiAgICB0aGlzLmxhc3RDbGllbnRYID0gZS5jbGllbnRYO1xuICAgIHRoaXMubGFzdENsaWVudFkgPSBlLmNsaWVudFk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBtdSA8RXZlbnRMaXN0ZW5lcj4oZTogTW91c2VFdmVudCkge1xuICAgIHRoaXMucHVzaGVkID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIG1tIDxFdmVudExpc3RlbmVyPihlOiBNb3VzZUV2ZW50KSB7XG4gICAgbGV0IG5ld1Njcm9sbFggPSAwO1xuICAgIGxldCBuZXdTY3JvbGxZID0gMDtcbiAgICBpZiAodGhpcy5wdXNoZWQpIHtcbiAgICAgIHRoaXMuZWwuc2Nyb2xsTGVmdCAtPSBuZXdTY3JvbGxYID0gKC0gdGhpcy5sYXN0Q2xpZW50WCArICh0aGlzLmxhc3RDbGllbnRYID0gZS5jbGllbnRYKSk7XG4gICAgICB0aGlzLmVsLnNjcm9sbFRvcCAtPSBuZXdTY3JvbGxZID0gKC0gdGhpcy5sYXN0Q2xpZW50WSArICh0aGlzLmxhc3RDbGllbnRZID0gZS5jbGllbnRZKSk7XG4gICAgICBpZiAodGhpcy5lbCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICB0aGlzLmVsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB0aGlzLmVsLnNjcm9sbExlZnQgLT0gbmV3U2Nyb2xsWDtcbiAgICAgICAgdGhpcy5lbC5zY3JvbGxUb3AgLT0gbmV3U2Nyb2xsWTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBkcmFnc2Nyb2xsXG4gKi9cbmV4cG9ydCBjb25zdCBzY3JvbGxiYXJEcmFnYWJsZUJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgY29uc3QgbmFtZSA9ICdzY3JvbGxiYXItZHJhZ2FibGUnO1xuICBjb25zdCBiaW5kZXI6IElPbmVXYXlCaW5kZXI8c3RyaW5nPiA9IChlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnkpID0+IHtcbiAgICBjb25zdCBkcmFnc2Nyb2xsID0gbmV3IERyYWdzY3JvbGwoZWwsIHRydWUpO1xuICAgIGRyYWdzY3JvbGwuZGVidWcoJ3JlYWR5Jyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgYmluZGVyLFxuICAgIG5hbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJVHdvV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vdGlueWJpbmQnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9VdGlscyc7XG5cbi8qKlxuICogdmFsdWUgZm9yIGlucG91dHMsIHRleHRhcmVhcyBhbmQgY29udGVudGVkaXRhYmxlc1xuICogVE9ETyBzdXBwb3J0IHNlbGVjdFxuICovXG5leHBvcnQgY29uc3QgdmFsdWVCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2JpbmRlcjp2YWx1ZScpO1xuICBjb25zdCBuYW1lID0gJ3ZhbHVlJztcbiAgY29uc3QgdmFsdWU6IElUd29XYXlCaW5kZXI8c3RyaW5nPiA9IHtcbiAgICBiaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgZGVidWcoJ2JpbmQnLCB0aGlzKTtcbiAgICAgIHRoaXMuY3VzdG9tRGF0YSA9IHt9O1xuICAgICAgdGhpcy5jdXN0b21EYXRhLiRlbCA9ICQoZWwpO1xuICAgICAgdGhpcy5jdXN0b21EYXRhLnR5cGUgPSB0aGlzLmN1c3RvbURhdGEuJGVsLnByb3AoJ3R5cGUnKTtcbiAgICAgIHRoaXMuY3VzdG9tRGF0YS50YWdOYW1lID0gdGhpcy5jdXN0b21EYXRhLiRlbC5wcm9wKCd0YWdOYW1lJyk7XG4gICAgICB0aGlzLmN1c3RvbURhdGEuY29udGVudGVkaXRhYmxlID0gdGhpcy5jdXN0b21EYXRhLiRlbC5hdHRyKCdjb250ZW50ZWRpdGFibGUnKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIHRoaXMuY3VzdG9tRGF0YS4kZWwub24oJ2NoYW5nZSBpbnB1dCBrZXl1cCBwYXN0ZSBibHVyIGZvY3VzJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnB1Ymxpc2goKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICB1bmJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICB0aGlzLmN1c3RvbURhdGEuJGVsLm9mZignY2hhbmdlIGlucHV0IGtleXVwIHBhc3RlIGJsdXIgZm9jdXMnKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmN1c3RvbURhdGE7XG4gICAgfSxcblxuICAgIHJvdXRpbmUoZWw6IEhUTUxFbGVtZW50LCBuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgICBlbCA9IChlbCBhcyBIVE1MSW5wdXRFbGVtZW50ICk7XG4gICAgICBkZWJ1Zygncm91dGluZSBuZXdWYWx1ZScsIG5ld1ZhbHVlKTtcbiAgICAgIGlmIChVdGlscy5pc1N0cmluZyhuZXdWYWx1ZSkpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmdldFZhbHVlKChlbCBhcyBIVE1MSW5wdXRFbGVtZW50KSk7XG4gICAgICAgIGRlYnVnKCdyb3V0aW5lJywgb2xkVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgIHN3aXRjaCAodGhpcy5jdXN0b21EYXRhLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ0lOUFVUJzpcbiAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLiRlbC52YWwobmV3VmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ1RFWFRBUkVBJzpcbiAgICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLiRlbC52YWwobmV3VmFsdWUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIC8vIGUuZy4gb24gY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS4kZWwuaHRtbChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRWYWx1ZShlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgIGxldCB2YWw7XG4gICAgICBzd2l0Y2ggKHRoaXMuY3VzdG9tRGF0YS50YWdOYW1lKSB7XG4gICAgICAgIGNhc2UgJ0lOUFVUJzpcbiAgICAgICAgICBzd2l0Y2ggKHRoaXMuY3VzdG9tRGF0YS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh0aGlzLmN1c3RvbURhdGEuJGVsLnZhbCgpKSB8fCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YWwgPSB0aGlzLmN1c3RvbURhdGEuJGVsLnZhbCgpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxuICAgICAgICAgIHZhbCA9IHRoaXMuY3VzdG9tRGF0YS4kZWwudmFsKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBlLmcuIG9uIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAgIHZhbCA9IHRoaXMuY3VzdG9tRGF0YS4kZWwuaHRtbCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVidWcoJ2dldFZhbHVlJywgdmFsKTtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBwcmlvcml0eTogMzAwMCxcbiAgICBwdWJsaXNoZXM6IHRydWUsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IHZhbHVlLFxuICAgIG5hbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5cbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kSW1hZ2U6IElPbmVXYXlCaW5kZXI8c3RyaW5nPiA9IChlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgJGVsID0gJChlbCk7XG4gICRlbC5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKCcgKyB2YWx1ZSArICcpJyk7XG59O1xuXG4vKipcbiAqIGJhY2tncm91bmQtaW1hZ2VcbiAqL1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRJbWFnZUJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGJhY2tncm91bmRJbWFnZSxcbiAgICBuYW1lOiAnYmFja2dyb3VuZC1pbWFnZScsXG4gIH07XG59O1xuIiwiaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuZXhwb3J0IGNvbnN0IGltYWdlQm94OiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAkZWwuYWRkQ2xhc3MoJ2ltYWdlLWJveCcpO1xuICBpZiAodmFsdWUpIHtcbiAgICBjb25zdCByYXRpb1N0cmluZ3MgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IHJhdGlvcyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG4gICAgcmF0aW9zWzBdID0gTnVtYmVyKHJhdGlvU3RyaW5nc1swXSk7XG4gICAgcmF0aW9zWzFdID0gTnVtYmVyKHJhdGlvU3RyaW5nc1sxXSk7XG4gICAgY29uc3QgaGVpZ2h0SW5QZXJjZW50ID0gKHJhdGlvc1sxXSAvIHJhdGlvc1swXSAqIDEwMCk7XG4gICAgY29uc3QgcmF0aW9DbGFzcyA9ICdyYXRpby0nICsgcmF0aW9zWzBdICsgJy0nICsgcmF0aW9zWzFdO1xuICAgIGNvbnN0IHN0eWxlID0gJ3BhZGRpbmctdG9wOiAnICsgaGVpZ2h0SW5QZXJjZW50ICsgJyU7JztcbiAgICAkZWwuYWRkQ2xhc3MocmF0aW9DbGFzcyk7XG4gICAgJCgnaGVhZCcpLmFwcGVuZCgnPHN0eWxlPi5pbWFnZS1ib3guJyArIHJhdGlvQ2xhc3MgKyAnOmJlZm9yZXsnICsgc3R5bGUgKyAnfTwvc3R5bGU+Jyk7XG4gIH1cbn07XG5cbi8qKlxuICogbWFpbHRvXG4gKi9cbmV4cG9ydCBjb25zdCBpbWFnZUJveEJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGltYWdlQm94LFxuICAgIG5hbWU6ICdpbWFnZS1ib3gnLFxuICB9O1xufTtcbiIsImltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL3NlcnZpY2VzL1V0aWxzJztcblxuLyoqXG4gKiBtYWlsdG9cbiAqL1xuZXhwb3J0IGNvbnN0IGFwcGVuZEh0bWxCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSAnYXBwZW5kLWh0bWwnO1xuICBjb25zdCBhcHBlbmRIdG1sOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgaWYgKCFVdGlscy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gJGVsLmF0dHIoJ3J2LWFwcGVuZC1odG1sJykgfHwgJyc7XG4gICAgfVxuICAgIGNvbnN0IGh0bWxOb2RlcyA9ICQucGFyc2VIVE1MKHZhbHVlKTtcbiAgICAkKGVsKS5hcHBlbmQoaHRtbE5vZGVzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGFwcGVuZEh0bWwsXG4gICAgbmFtZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuZXhwb3J0IGNvbnN0IGNsYXNzQWRkUmVtb3ZlOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgY29uc3QgJGVsID0gJChlbCk7XG4gIGNvbnN0IGNsYXNzTmFtZSA9ICh0aGlzIGFzIGFueSkuYXJnc1swXTtcbiAgLy8gZGVidWcoJ2NsYXNzLSonLCBjbGFzc05hbWUsIHZhbHVlKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLyoqXG4gKiBjbGFzcy0qXG4gKiBjbGFzcy1bY2xhc3NuYW1lXVxuICpcbiAqIEN1c3RvbSB2ZXJzaW9uIG9mIGNsYXNzLVtjbGFzc25hbWVdXG4gKiBBZGRzIGEgY2xhc3MgKHdoYXRldmVyIHZhbHVlIGlzIGluIHBsYWNlIG9mIFtjbGFzc25hbWVdKSBvbiB0aGUgZWxlbWVudCB3aGVuIHRoZSB2YWx1ZSBldmFsdWF0ZXMgdG8gdHJ1ZSBhbmQgcmVtb3ZlcyB0aGF0IGNsYXNzIGlmIHRoZSB2YWx1ZSBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBAc2VlIGh0dHA6Ly9yaXZldHNqcy5jb20vZG9jcy9yZWZlcmVuY2UvI2NsYXNzLVtjbGFzc25hbWVdXG4gKi9cbmV4cG9ydCBjb25zdCBjbGFzc0FkZFJlbW92ZUJpbmRlcjogQmluZGVyV3JhcHBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGNsYXNzQWRkUmVtb3ZlLFxuICAgIG5hbWU6ICdjbGFzcy0qJyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuLyoqXG4gKiBhZGQtY2xhc3NcbiAqIEBwYXJhbSBlbFxuICogQHBhcmFtIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBhZGRDbGFzczogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLmFkZENsYXNzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkQ2xhc3NCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSAnbWFpbHRvJztcbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYW55KSA9PiB7XG4gICAgJChlbCkuYXR0cignaHJlZicsICdtYWlsdG86JyArIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXI6IGFkZENsYXNzLFxuICAgIG5hbWU6ICdhZGQtY2xhc3MnLFxuICB9O1xufTtcbiIsImltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzczogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIHJlbW92ZS1jbGFzc1xuICovXG5leHBvcnQgY29uc3QgcmVtb3ZlQ2xhc3NCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgYmluZGVyOiByZW1vdmVDbGFzcyxcbiAgICBuYW1lOiAncmVtb3ZlLWNsYXNzJyxcbiAgfTtcbn07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgQmluZGVyV3JhcHBlciB9IGZyb20gJy4uL3RpbnliaW5kJztcblxuLyoqXG4gKiBmb3ItKi0qXG4gKiBmb3ItZnJvbS10b1xuICovXG5leHBvcnQgY29uc3QgZm9yRnJvbVRvQmluZGVyOiBCaW5kZXJXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBuYW1lID0gJ2Zvci0qLSonO1xuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdiaW5kZXJzOicgKyBuYW1lKTtcbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBjb25zdCBzdGFydCA9IE51bWJlcigodGhpcyBhcyBhbnkpLmFyZ3NbMF0pO1xuICAgIGNvbnN0IGVuZCA9IE51bWJlcigodGhpcyBhcyBhbnkpLmFyZ3NbMV0pO1xuICAgIGRlYnVnKCdzdGFydCcsIHN0YXJ0LCAnZW5kJywgZW5kKTtcbiAgICBjb25zdCBodG1sU3RyaW5nID0gJGVsLmh0bWwoKTtcbiAgICBmb3IgKGxldCBpbmRleCA9IHN0YXJ0OyBpbmRleCA8IGVuZDsgaW5kZXgrKykge1xuICAgICAgLy8gJGVsLmNoaWxkcmVuKCkuY2xvbmUoKS5hcHBlbmRUbygkZWwpO1xuICAgICAgZGVidWcoJ2luZGV4JywgaW5kZXgpO1xuICAgICAgLy8gaHRtbCArPSBodG1sO1xuICAgIH1cbiAgICBkZWJ1ZygnaHRtbCcsIGh0bWxTdHJpbmcpO1xuICAgIC8vICRlbC5odG1sKCd0ZXN0Jyk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcbiIsImltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi90aW55YmluZCc7XG5cbi8qKlxuICogdGVsXG4gKi9cbmV4cG9ydCBjb25zdCB0ZWxCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSAndGVsJztcbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYW55KSA9PiB7XG4gICAgJChlbCkuYXR0cignaHJlZicsICd0ZWw6JyArIHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBiaW5kZXIsXG4gICAgbmFtZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgeyBJT25lV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vdGlueWJpbmQnO1xuXG4vKipcbiAqIG1haWx0b1xuICovXG5leHBvcnQgY29uc3QgbWFpbHRvQmluZGVyOiBCaW5kZXJXcmFwcGVyID0gKCkgPT4ge1xuICBjb25zdCBuYW1lID0gJ21haWx0byc7XG4gIGNvbnN0IGJpbmRlcjogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGFueSkgPT4ge1xuICAgICQoZWwpLmF0dHIoJ2hyZWYnLCAnbWFpbHRvOicgKyB2YWx1ZSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgYmluZGVyLFxuICAgIG5hbWUsXG4gIH07XG59O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBJT25lV2F5QmluZGVyLCBJVHdvV2F5QmluZGVyLCBCaW5kZXJXcmFwcGVyIH0gZnJvbSAnLi4vdGlueWJpbmQnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9zZXJ2aWNlcy9VdGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnMge1xuICBhbmdsZTogJ3ZlcnRpY2FsJyB8ICdob3Jpem9udGFsJztcbiAgZGlyZWN0aW9uOiAxIHwgLTE7XG4gIGp1bXBzOiBudW1iZXI7XG4gIGRlbGF5OiBudW1iZXI7XG4gIHdpZHRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNsaWRlb3V0IGNsaWNrIGV2ZW50IHRvIHRvZ2dsZSB0aGUgc2xpZGVvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IGF1dG9zY3JvbGxCaW5kZXI6IEJpbmRlcldyYXBwZXIgPSAoKSA9PiB7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnYmluZGVyOmF1dG9zY3JvbGwnKTtcblxuICBjb25zdCBuYW1lID0gJ2F1dG9zY3JvbGwnO1xuXG4gIGNvbnN0IGdldFdpZHRoID0gKCRlbDogSlF1ZXJ5PEhUTUxFbGVtZW50Piwgb3B0aW9uczogSU9wdGlvbnMpID0+IHtcbiAgICBsZXQgdztcbiAgICBpZiAob3B0aW9ucy53aWR0aCA9PT0gJzEwMHZ3Jykge1xuICAgICAgdyA9IFV0aWxzLmdldFZpZXdwb3J0RGltZW5zaW9ucygpLnc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRvZG8ganVzdCBkaWdpdHNcbiAgICAgIHcgPSAkZWwucHJvcCgnc2Nyb2xsV2lkdGgnKSAtICgkZWwub3V0ZXJXaWR0aCgpIHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gdztcbiAgfTtcblxuICAvLyBUT0RPIHRyeSBhbHRlcm5hdGl2ZSB2ZXJzaW9uIGZyb20gaHR0cHM6Ly93d3cuc2l0ZXBvaW50LmNvbS9jb21tdW5pdHkvdC9hdXRvLXNjcm9sbGluZy1hLWRpdi13aXRoLW92ZXJmbG93LXNjcm9sbC1hdXRvLzIyOTEvM1xuICBjb25zdCBpbml0QXV0b3Njcm9sbCA9ICgkZWw6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG9wdGlvbnM6IElPcHRpb25zKSA9PiB7XG4gICAgbGV0IGRpcmVjdGlvbiA9IG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIGNvbnN0IGp1bXBzID0gb3B0aW9ucy5qdW1wcztcbiAgICBjb25zdCBkZWxheSA9IG9wdGlvbnMuZGVsYXk7XG4gICAgbGV0IHN0b3AgPSBmYWxzZTtcbiAgICBsZXQgcG9zaXRpb24gPSBudWxsO1xuICAgIGxldCBtYXhTY3JvbGxXaWR0aCA9IGdldFdpZHRoKCRlbCwgb3B0aW9ucyk7XG5cbiAgICAkKCB3aW5kb3cgKS5yZXNpemUoKCkgPT4ge1xuICAgICAgbWF4U2Nyb2xsV2lkdGggPSBnZXRXaWR0aCgkZWwsIG9wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgaWYgKGRpcmVjdGlvbiA8IDApIHtcbiAgICAgIC8vIHN0YXJ0IHJpZ2h0XG4gICAgICAkZWwuc2Nyb2xsTGVmdChtYXhTY3JvbGxXaWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN0YXJ0IGxlZnRcbiAgICAgICRlbC5zY3JvbGxMZWZ0KDApO1xuICAgIH1cblxuICAgIGNvbnN0IHNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGlmIChzdG9wKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoc2Nyb2xsLCAyMDApO1xuICAgICAgfVxuXG4gICAgICBwb3NpdGlvbiA9ICRlbC5zY3JvbGxMZWZ0KCkgfHwgMDtcbiAgICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gKyBqdW1wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gLSBqdW1wcztcbiAgICAgIH1cblxuICAgICAgaWYgKCBwb3NpdGlvbiA8PSA1KSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IDE7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID49IG1heFNjcm9sbFdpZHRoKSB7XG4gICAgICAgIGRpcmVjdGlvbiA9IC0xO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJGVsLmFuaW1hdGUoe1xuICAgICAgICBzY3JvbGxMZWZ0OiBwb3NpdGlvbixcbiAgICAgIH0sIGRlbGF5LCAnbGluZWFyJywgc2Nyb2xsKTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VJbiA9ICgpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICgkZWwuZmlsdGVyKCc6aG92ZXInKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xuICAgICAgICAgICAgZGlyZWN0aW9uICo9IC0xO1xuICAgICAgICAgIH1cbiAgICAgIH0sIDEwKTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VPdXQgPSAoKSA9PiB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHN0b3AgJiYgISRlbC5maWx0ZXIoJzpob3ZlcicpLmxlbmd0aCkge1xuICAgICAgICAgIHN0b3AgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSwgNTAwKTtcbiAgICB9O1xuXG4gICAgJGVsLmhvdmVyKG1vdXNlSW4sIG1vdXNlT3V0KTtcblxuICAgIHJldHVybiBzZXRUaW1lb3V0KHNjcm9sbCwgMCk7XG4gIH07XG5cbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPElPcHRpb25zPiA9IChlbDogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IElPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgLy8gZGVidWcoJ2luaXQnLCBvcHRpb25zKTtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndpZHRoICYmIFV0aWxzLmlzU3RyaW5nKG9wdGlvbnMud2lkdGgpKSB7XG4gICAgICBpZiAob3B0aW9ucy53aWR0aCA9PT0gJzEwMHZ3Jykge1xuICAgICAgICAvLyBVdGlscy5nZXRWaWV3cG9ydERpbWVuc2lvbnMoKS53XG4gICAgICAgICRlbC5jc3MoJ3dpZHRoJywgb3B0aW9ucy53aWR0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZWwuY3NzKCd3aWR0aCcsIG9wdGlvbnMud2lkdGgpO1xuICAgICAgfVxuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhgcnYtYXV0b3Njcm9sbC0ke29wdGlvbnMuYW5nbGV9YCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGluaXRBdXRvc2Nyb2xsKCRlbCwgb3B0aW9ucyk7XG4gICAgfSwgMTAwMCk7XG5cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcbiIsIlxuLy8gYmluZGVyc1xuZXhwb3J0IHsgYXV0b3Njcm9sbEJpbmRlciB9IGZyb20gJy4vYXV0b3Njcm9sbC5iaW5kZXInO1xuZXhwb3J0IHsgbWFpbHRvQmluZGVyIH0gZnJvbSAnLi9tYWlsdG8uYmluZGVyJztcbmV4cG9ydCB7IHRlbEJpbmRlciB9IGZyb20gJy4vdGVsLmJpbmRlcic7XG5leHBvcnQgeyBmb3JGcm9tVG9CaW5kZXIgfSBmcm9tICcuL2Zvci1mcm9tLXRvLmJpbmRlcic7XG5leHBvcnQgeyByZW1vdmVDbGFzc0JpbmRlciB9IGZyb20gJy4vcmVtb3ZlLWNsYXNzLmJpbmRlcic7XG5leHBvcnQgeyBhZGRDbGFzc0JpbmRlciB9IGZyb20gJy4vYWRkLWNsYXNzLmJpbmRlcic7XG5leHBvcnQgeyBjbGFzc0FkZFJlbW92ZUJpbmRlciB9IGZyb20gJy4vY2xhc3MtYWRkLXJlbW92ZS5iaW5kZXInO1xuZXhwb3J0IHsgYXBwZW5kSHRtbEJpbmRlciB9IGZyb20gJy4vYXBwZW5kLWh0bWwuYmluZGVyJztcbmV4cG9ydCB7IGltYWdlQm94QmluZGVyIH0gZnJvbSAnLi9pbWFnZS1ib3guYmluZGVyJztcbmV4cG9ydCB7IGJhY2tncm91bmRJbWFnZUJpbmRlciB9IGZyb20gJy4vYmFja2dyb3VuZC1pbWFnZS5iaW5kZXInO1xuZXhwb3J0IHsgdmFsdWVCaW5kZXIgfSBmcm9tICcuL3ZhbHVlLmJpbmRlcic7XG5leHBvcnQgeyBzY3JvbGxiYXJEcmFnYWJsZUJpbmRlciB9IGZyb20gJy4vc2Nyb2xsYmFyL3Njcm9sbGJhci1kcmFnYWJsZS5iaW5kZXInO1xuIiwiLyogdHNsaW50OmRpc2FibGU6IG1heC1jbGFzc2VzLXBlci1maWxlICovXG4vKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gb2YgY29tcG9uZW50cyByZXBsYWNlcyB0aGUgb2xkIGNvbXBvbmVudHMgb2Ygcml2ZXRzIGZvbGxvd2luZyB0aGUgV2ViIENvbXBvbmVudHMgdjEgc3BlY3NcbiAqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL1dlYl9Db21wb25lbnRzL1VzaW5nX2N1c3RvbV9lbGVtZW50c1xuICovXG5cbmltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcbmltcG9ydCB7IFRpbnliaW5kLCBFdmVudEhhbmRsZXIgfSBmcm9tICcuL3RpbnliaW5kJztcbmltcG9ydCB7IEJpbmRpbmcgfSBmcm9tICcuL2JpbmRpbmcnO1xuXG5jbGFzcyBGYWtlSFRNTEVsZW1lbnQgLyppbXBsZW1lbnRzIEhUTUxFbGVtZW50Ki8ge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50PzogSFRNTEVsZW1lbnQpIHtcbiAgICBpZiAod2luZG93LmN1c3RvbUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5jb25zdHJ1Y3QoSFRNTEVsZW1lbnQsIFtdLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICB9XG4gIH1cbn1cblxuaWYgKHdpbmRvdy5jdXN0b21FbGVtZW50cykge1xuICBGYWtlSFRNTEVsZW1lbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShIVE1MRWxlbWVudC5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge3ZhbHVlOiBIVE1MRWxlbWVudCwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZX0sXG4gIH0pO1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoRmFrZUhUTUxFbGVtZW50LCBIVE1MRWxlbWVudCk7XG59XG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlRnVuY3Rpb24gPSAoKSA9PiBzdHJpbmcgfCBudWxsO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmliYUNvbXBvbmVudCBleHRlbmRzIEZha2VIVE1MRWxlbWVudCB7XG5cbiAgcHVibGljIHN0YXRpYyB0YWdOYW1lOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGRlYnVnOiBEZWJ1Zy5JRGVidWdnZXI7XG4gIHByb3RlY3RlZCB2aWV3PzogVmlldztcblxuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzY29wZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ/OiBIVE1MRWxlbWVudCkge1xuICAgIHN1cGVyKGVsZW1lbnQpO1xuICAgIHRoaXMuZGVidWcgPSBEZWJ1ZygnY29tcG9uZW50OnVua25vd24nKTtcbiAgICB0aGlzLmRlYnVnKCdjb25zdHJ1Y3RvciBjYWxsZWQnLCBlbGVtZW50LCB0aGlzKTtcblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLmVsID0gZWxlbWVudDtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5jdXN0b21FbGVtZW50cykge1xuICAgICAgdGhpcy5lbCA9ICgodGhpcyBhcyBhbnkpIGFzIEhUTUxFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBlbGVtZW50IGlzIHJlcXVpcmVkIG9uIGJyb3dzZXJzIHdpdGhvdXQgY3VzdG9tIGVsZW1lbnRzIHN1cHBvcnRgKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMudGVtcGxhdGUoKTtcbiAgICAvLyBpZiBpbm5lckhUTUwgaXMgbnVsbCB0aGlzIGNvbXBvbmVudCB1c2VzIHRoZSBpbm5lckhUTUwgd2hpY2ggaGUgYWxyZWFkeSBoYXMhXG4gICAgaWYgKHRlbXBsYXRlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRlbXBsYXRlO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBldmVudEhhbmRsZXIoc2VsZjogUmliYUNvbXBvbmVudCk6IEV2ZW50SGFuZGxlciB7XG4gICAgLy8gSU1QT1JUQU5UIHRoaXMgbXVzdCBiZSBhIGZ1bmN0aW9uIGFuZCBub3QgYSBBcnJvdyBGdW5jdGlvbnNcbiAgICByZXR1cm4gZnVuY3Rpb24odGhpczogRXZlbnRIYW5kbGVyLCBjb250ZXh0OiBCaW5kaW5nLCBldjogRXZlbnQsIGJpbmRpbmc6IEJpbmRpbmcsIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgdGhpcy5jYWxsKHNlbGYsIGV2LCBiaW5kaW5nLnZpZXcubW9kZWxzLCBlbCwgY29udGV4dCk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGN1c3RvbSBlbGVtZW50IGlzIGZpcnN0IGNvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5kZWJ1ZygnY29ubmVjdGVkQ2FsbGJhY2sgY2FsbGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjdXN0b20gZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5kZWJ1ZygnZGlzY29ubmVjdGVkQ2FsbGJhY2sgY2FsbGVkJyk7XG4gICAgaWYgKHRoaXMudmlldykge1xuICAgICAgdGhpcy52aWV3LnVuYmluZCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGN1c3RvbSBlbGVtZW50IGlzIG1vdmVkIHRvIGEgbmV3IGRvY3VtZW50LlxuICAgKiBAcGFyYW0gYXR0cmlidXRlTmFtZVxuICAgKiBAcGFyYW0gb2xkVmFsdWVcbiAgICogQHBhcmFtIG5ld1ZhbHVlXG4gICAqIEBwYXJhbSBuYW1lc3BhY2VcbiAgICovXG4gIHByb3RlY3RlZCBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0cmlidXRlTmFtZTogc3RyaW5nLCBvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55LCBuYW1lc3BhY2U6IHN0cmluZykge1xuICAgIHRoaXMuZGVidWcoJ2F0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayBjYWxsZWQnLCBhdHRyaWJ1dGVOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUsIG5hbWVzcGFjZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIG9uZSBvZiB0aGUgY3VzdG9tIGVsZW1lbnQncyBhdHRyaWJ1dGVzIGlzIGFkZGVkLCByZW1vdmVkLCBvciBjaGFuZ2VkLlxuICAgKiBOb3RlOiBOb3Qgc3VwcG9ydGVkIG9uIHBvbHlmaWxsOiBodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHMja25vd24tYnVncy1hbmQtbGltaXRhdGlvbnNcbiAgICogQHBhcmFtIG9sZERvY3VtZW50XG4gICAqIEBwYXJhbSBuZXdEb2N1bWVudFxuICAgKi9cbiAgcHJvdGVjdGVkIGFkb3B0ZWRDYWxsYmFjayhvbGREb2N1bWVudDogRG9jdW1lbnQsIG5ld0RvY3VtZW50OiBEb2N1bWVudCkge1xuICAgIHRoaXMuZGVidWcoJ2Fkb3B0ZWRDYWxsYmFjayBjYWxsZWQnLCBvbGREb2N1bWVudCwgbmV3RG9jdW1lbnQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRlbXBsYXRlKCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIGJpbmQoKSB7XG4gICAgY29uc3QgdGlueWJpbmQgPSBuZXcgVGlueWJpbmQoKTtcbiAgICBjb25zdCB2aWV3T3B0aW9ucyA9IHRpbnliaW5kLmdldFZpZXdPcHRpb25zKHtcbiAgICAgIGhhbmRsZXI6IHRoaXMuZXZlbnRIYW5kbGVyKHRoaXMpLFxuICAgIH0pO1xuXG4gICAgLy8gdGhpcy5kZWJ1ZygnYmluZCBzY29wZScsIHRoaXMuc2NvcGUpO1xuICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGlzLmVsIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdGhpcy52aWV3ID0gbmV3IFZpZXcoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5lbC5jaGlsZE5vZGVzKSwgdGhpcy5zY29wZSwgdmlld09wdGlvbnMpO1xuICAgIHRoaXMuc2NvcGUgPSB0aGlzLnZpZXcubW9kZWxzO1xuICAgIHRoaXMudmlldy5iaW5kKCk7XG5cbiAgICByZXR1cm4gdGhpcy52aWV3O1xuICB9XG59XG5cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJpYmFDb21wb25lbnRDbGFzcyBleHRlbmRzIFJpYmFDb21wb25lbnQgaW1wbGVtZW50cyBSaWJhQ29tcG9uZW50Q2xhc3Mge1xuICBwdWJsaWMgc3RhdGljIHRhZ05hbWU6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgZGVidWc6IERlYnVnLklEZWJ1Z2dlcjtcbiAgcHJvdGVjdGVkIHZpZXc/OiBWaWV3O1xuXG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG5cbiAgcHJvdGVjdGVkIHNjb3BlOiBhbnk7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ/OiBIVE1MRWxlbWVudCk7XG5cbiAgcHJvdGVjdGVkIGV2ZW50SGFuZGxlcihzZWxmOiBSaWJhQ29tcG9uZW50KTogRXZlbnRIYW5kbGVyO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGN1c3RvbSBlbGVtZW50IGlzIGZpcnN0IGNvbm5lY3RlZCB0byB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZDtcblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjdXN0b20gZWxlbWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZG9jdW1lbnQncyBET00uXG4gICAqL1xuICBwcm90ZWN0ZWQgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZDtcblxuICAvKipcbiAgICogRGVmYXVsdCBjdXN0b20gRWxlbWVudCBtZXRob2RcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjdXN0b20gZWxlbWVudCBpcyBtb3ZlZCB0byBhIG5ldyBkb2N1bWVudC5cbiAgICogQHBhcmFtIGF0dHJpYnV0ZU5hbWVcbiAgICogQHBhcmFtIG9sZFZhbHVlXG4gICAqIEBwYXJhbSBuZXdWYWx1ZVxuICAgKiBAcGFyYW0gbmFtZXNwYWNlXG4gICAqL1xuICBwcm90ZWN0ZWQgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgb2xkVmFsdWU6IGFueSwgbmV3VmFsdWU6IGFueSwgbmFtZXNwYWNlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGN1c3RvbSBFbGVtZW50IG1ldGhvZFxuICAgKiBJbnZva2VkIHdoZW4gb25lIG9mIHRoZSBjdXN0b20gZWxlbWVudCdzIGF0dHJpYnV0ZXMgaXMgYWRkZWQsIHJlbW92ZWQsIG9yIGNoYW5nZWQuXG4gICAqIE5vdGU6IE5vdCBzdXBwb3J0ZWQgb24gcG9seWZpbGw6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJjb21wb25lbnRzL2N1c3RvbS1lbGVtZW50cyNrbm93bi1idWdzLWFuZC1saW1pdGF0aW9uc1xuICAgKiBAcGFyYW0gb2xkRG9jdW1lbnRcbiAgICogQHBhcmFtIG5ld0RvY3VtZW50XG4gICAqL1xuICBwcm90ZWN0ZWQgYWRvcHRlZENhbGxiYWNrKG9sZERvY3VtZW50OiBEb2N1bWVudCwgbmV3RG9jdW1lbnQ6IERvY3VtZW50KTogdm9pZDtcblxuICBwcm90ZWN0ZWQgdGVtcGxhdGUoKTogc3RyaW5nIHwgbnVsbDtcblxuICBwcm90ZWN0ZWQgYmluZCgpOiBWaWV3O1xufVxuIiwiLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIHVwcGVyY2FzZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyN1cGNhc2VcbiAqL1xuZXhwb3J0IGNvbnN0IHVwY2FzZSA9IChzdHI6IHN0cmluZykgPT4gIHtcbiAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpO1xufTtcbiIsIi8qKlxuICogU3RyaXBzIHRhYnMsIHNwYWNlcywgYW5kIG5ld2xpbmVzIChhbGwgd2hpdGVzcGFjZSkgZnJvbSB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZSBvZiBhIHN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzdHJpcFxuICovXG5leHBvcnQgY29uc3Qgc3RyaXAgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0ci50cmltKCk7XG59O1xuIiwiLyoqXG4gKiBUaGUgYHNsaWNlYCBmaWx0ZXIgcmV0dXJucyBhIHN1YnN0cmluZywgc3RhcnRpbmcgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAqIEFuIG9wdGlvbmFsIHNlY29uZCBwYXJhbWV0ZXIgY2FuIGJlIHBhc3NlZCB0byBzcGVjaWZ5IHRoZSBsZW5ndGggb2YgdGhlIHN1YnN0cmluZy5cbiAqIElmIG5vIHNlY29uZCBwYXJhbWV0ZXIgaXMgZ2l2ZW4sIGEgc3Vic3RyaW5nIG9mIG9uZSBjaGFyYWN0ZXIgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzbGljZVxuICovXG5leHBvcnQgY29uc3Qgc2xpY2UgPSAodmFsdWU6IGFueSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHZhbHVlLnNsaWNlKHN0YXJ0LCBlbmQpO1xufTtcbiIsIi8qKlxuICogUHJlcGVuZHMgY2hhcmFjdGVycyB0byBhIHN0cmluZy5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNwcmVwZW5kXG4gKi9cbmV4cG9ydCBjb25zdCBwcmVwZW5kID0gKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBiICsgYTtcbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IHBsdXJhbGl6ZSA9IChpbnB1dDogYW55LCBzaW5ndWxhcjogc3RyaW5nLCBwbHVyYWw6IHN0cmluZykgPT4ge1xuICBpZiAocGx1cmFsID09PSBudWxsKSB7XG4gICAgcGx1cmFsID0gc2luZ3VsYXIgKyAncyc7XG4gIH1cbiAgaWYgKFV0aWxzLmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgaW5wdXQgPSBpbnB1dC5sZW5ndGg7XG4gIH1cbiAgaWYgKGlucHV0ID09PSAxKSB7XG4gICAgcmV0dXJuIHNpbmd1bGFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwbHVyYWw7XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIFV0aWxzLmlzU3RyaW5nKHN0cik7XG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4uL3Byb3BlcnR5L2VtcHR5LmZvcm1hdHRlcic7XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmcgYW5kIG5vdCBlbXB0eVxuICovXG5leHBvcnQgY29uc3QgZmlsbGVkID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBVdGlscy5pc1N0cmluZyhzdHIpICYmICFlbXB0eShzdHIucmVwbGFjZSgvXFxzL2csICcnKSk7XG59O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBpbnRvIGxvd2VyY2FzZS5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNkb3duY2FzZVxuICovXG5leHBvcnQgY29uc3QgZG93bmNhc2UgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xufTtcbiIsIi8qKlxuICogQXBwZW5kcyBjaGFyYWN0ZXJzIHRvIGEgc3RyaW5nLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI2FwcGVuZFxuICovXG5leHBvcnQgY29uc3QgYXBwZW5kID0gKGE6IHN0cmluZywgYjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBhICsgYjtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gc3RyaW5nIGZvcm1hdHRlcnNcbmltcG9ydCB7IGFwcGVuZCB9IGZyb20gJy4vYXBwZW5kLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBkb3duY2FzZSB9IGZyb20gJy4vZG93bmNhc2UuZm9ybWF0dGVyJztcbmltcG9ydCB7IGZpbGxlZCB9IGZyb20gJy4vZmlsbGVkLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4vaXNTdHJpbmcuZm9ybWF0dGVyJztcbmltcG9ydCB7IHBsdXJhbGl6ZSB9IGZyb20gJy4vcGx1cmFsaXplLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBwcmVwZW5kIH0gZnJvbSAnLi9wcmVwZW5kLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBzbGljZSB9IGZyb20gJy4vc2xpY2UuZm9ybWF0dGVyJztcbmltcG9ydCB7IHN0cmlwIH0gZnJvbSAnLi9zdHJpcC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgdXBjYXNlIH0gZnJvbSAnLi91cGNhc2UuZm9ybWF0dGVyJztcblxuZXhwb3J0IHsgYXBwZW5kLCBkb3duY2FzZSwgZmlsbGVkLCBpc1N0cmluZywgcGx1cmFsaXplLCBwcmVwZW5kLCBzbGljZSwgc3RyaXAsIHVwY2FzZSB9O1xuXG5leHBvcnQgY29uc3Qgc3RyaW5nRm9ybWF0dGVyczogSUZvcm1hdHRlcnMgPSB7XG4gIGFwcGVuZCwgZG93bmNhc2UsIGZpbGxlZCwgaXNTdHJpbmcsIHBsdXJhbGl6ZSwgcHJlcGVuZCwgc2xpY2UsIHN0cmlwLCB1cGNhc2UsXG59O1xuIiwiLyoqXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgY3VycmVuY3kgKGllICQxLDIzNC41NikuIFdoZW4gbm8gY3VycmVuY3kgc3ltYm9sIGlzIHByb3ZpZGVkLCBkZWZhdWx0IHN5bWJvbCBmb3IgY3VycmVudCBsb2NhbGUgaXMgdXNlZC5cbiAqIEBwYXJhbSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuIChvcHRpb25hbClcbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2ZpbHRlci9jdXJyZW5jeVxuICovXG5leHBvcnQgY29uc3QgY3VycmVuY3kgPSAoYW1vdW50OiBudW1iZXIsIHN5bWJvbDogc3RyaW5nKSA9PiB7XG4gIGxldCByZXN1bHQgPSBhbW91bnQudG9GaXhlZCgyKS50b1N0cmluZygpLnJlcGxhY2UoJy4nLCAnLCcpO1xuICBpZiAoc3ltYm9sKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0ICsgc3ltYm9sO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogU2V0IGRlZmF1bHQgdmFsdWVcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBkZWYgPSAodmFsdWU6IGFueSwgZGVmYXVsdFZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKFV0aWxzLmlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICBpZiAoVXRpbHMuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbn07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBjb25zb2xlRGVidWcgPSBEZWJ1ZygnZm9ybWF0dGVyJyk7XG5cbmV4cG9ydCBjb25zdCBkZWJ1ZyA9ICh0YXJnZXQ6IGFueSkgPT4ge1xuICBjb25zb2xlRGVidWcodGFyZ2V0KTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gc3BlY2lhbCBoZWxwZXIgZm9ybWF0dGVyc1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuL2RlYnVnLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBkZWYgfSBmcm9tICcuL2RlZi5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgY3VycmVuY3kgfSBmcm9tICcuL2N1cnJlbmN5LmZvcm1hdHRlcic7XG5cbi8vIEFkZCBTaG9waWZ5LXNwZWNpZmljIGZvcm1hdHRlcnMgZm9yIFJpdmV0cy5qcy5cbi8vIGV4cG9ydCBjb25zdCBtb25leSA9ICh2YWx1ZSwgY3VycmVuY3kpID0+IHtcbi8vICAgcmV0dXJuIFV0aWxzLmZvcm1hdE1vbmV5KHZhbHVlLCBQcm9kdWN0SlMuc2V0dGluZ3MubW9uZXlGb3JtYXQsICdtb25leV9mb3JtYXQnLCBjdXJyZW5jeSk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgbW9uZXlXaXRoQ3VycmVuY3kgPSAodmFsdWUsIGN1cnJlbmN5KSA9PiB7XG4vLyAgIHJldHVybiBVdGlscy5mb3JtYXRNb25leSh2YWx1ZSwgUHJvZHVjdEpTLnNldHRpbmdzLm1vbmV5V2l0aEN1cnJlbmN5Rm9ybWF0LCAnbW9uZXlfd2l0aF9jdXJyZW5jeV9mb3JtYXQnLCBjdXJyZW5jeSk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3Qgd2VpZ2h0ID0gKGdyYW1zKSA9PiB7XG4vLyAgIHN3aXRjaCAoQ2FydEpTLnNldHRpbmdzLndlaWdodFVuaXQpIHtcbi8vICAgICBjYXNlICdrZyc6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zIC8gMTAwMCkudG9GaXhlZChDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0UHJlY2lzaW9uKTtcbi8vICAgICBjYXNlICdveic6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zICogMC4wMzUyNzQpLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgICAgY2FzZSAnbGInOlxuLy8gICAgICAgcmV0dXJuIChncmFtcyAqIDAuMDAyMjA0NjIpLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgICAgZGVmYXVsdDpcbi8vICAgICAgIHJldHVybiBncmFtcy50b0ZpeGVkKENhcnRKUy5zZXR0aW5ncy53ZWlnaHRQcmVjaXNpb24pO1xuLy8gICB9XG4vLyB9O1xuXG4vKipcbiAqIEZvcm1hdHMgdGhlIHByb2R1Y3QgdmFyaWFudCdzIHdlaWdodC4gVGhlIHdlaWdodCB1bml0IGlzIHNldCBpbiBHZW5lcmFsIFNldHRpbmdzLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL2FkZGl0aW9uYWwtZmlsdGVycyN3ZWlnaHRXaXRoVW5pdFxuICovXG4vLyBleHBvcnQgY29uc3Qgd2VpZ2h0V2l0aFVuaXQgPSAoZ3JhbXMpID0+IHtcbi8vICAgcmV0dXJuIGV4cG9ydCBjb25zdCB3ZWlnaHQoZ3JhbXMpICsgQ2FydEpTLnNldHRpbmdzLndlaWdodFVuaXQ7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgcHJvZHVjdEltYWdlU2l6ZSA9IChzcmMsIHNpemUpID0+IHtcbi8vICAgcmV0dXJuIENhcnRKUy5VdGlscy5nZXRTaXplZEltYWdlVXJsKHNyYywgc2l6ZSk7XG4vLyB9O1xuXG5leHBvcnQgeyBkZWJ1ZywgZGVmLCBjdXJyZW5jeSB9O1xuXG5leHBvcnQgY29uc3Qgc3BlY2lhbEZvcm1hdHRlcnM6IElGb3JtYXR0ZXJzID0ge1xuICBkZWJ1ZywgZGVmLCBjdXJyZW5jeSxcbn07XG4iLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB2YWx1ZSBpbmRleCBpdCB0aGUgbGFzdCBpbmRleCBvZiB0aGUgYXJyYXkuIFJldHVybnMgZmFsc2UgaWYgaXQgaXMgbm90IHRoZSBsYXN0IGluZGV4LlxuICogYGBgXG4gKiAgPGRpdiBydi1lYWNoLWltYWdlPVwicHJvZHVjdC5pbWFnZXNcIiBydi1oaWRlPVwicHJvZHVjdC5pbWFnZXMgfCBsYXN0ICVpbWFnZSVcIj48L2Rpdj5cbiAqIGBgYFxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9vYmplY3RzL2Zvci1sb29wcyNmb3Jsb29wLWxhc3RcbiAqL1xuZXhwb3J0IGNvbnN0IGlzTGFzdCA9IChhcnJheTogYW55W10sIGk6IG51bWJlcikgPT4ge1xuICByZXR1cm4gKGFycmF5Lmxlbmd0aCA9PT0gaSArIDEpO1xufTtcbiIsImV4cG9ydCBjb25zdCBtYXRjaCA9IChhOiBzdHJpbmcsIHJlZ2V4cDogc3RyaW5nLCBmbGFncz86IHN0cmluZykgPT4ge1xuICByZXR1cm4gYS5tYXRjaChuZXcgUmVnRXhwKHJlZ2V4cCwgZmxhZ3MpKTtcbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBTZXQgcHJvcGVydHkgb2Ygb2JqZWN0XG4gKiBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2Rlci1Pbi9jZGFmZTkwODg0N2UyYjg4MjY5MVxuICovXG5leHBvcnQgY29uc3Qgc2V0ID0gKG9iajogYW55IHwgYW55W10sIGtleTogc3RyaW5nIHwgbnVtYmVyLCB2YWx1ZTogYW55KSA9PiB7XG4gIGlmIChVdGlscy5pc09iamVjdChvYmopIHx8IFV0aWxzLmlzQXJyYXkob2JqKSkge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbiIsImltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIFRydWUgaWYgYXJyYXkgLyBzdHJpbmcgY29udGFpbnMgcHJvcGVydHkgLyBzdWJzdHJpbmcgb3IgY29udGFpbnRzIHByb3BlcnR5IHdpdGggdmFsdWVcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBjb250YWlucyA9ICh2YWx1ZTogc3RyaW5nIHwgYW55IHwgYW55W10sIGF0dHI6IHN0cmluZywgc2VhcmNoOiBzdHJpbmcpID0+IHtcblxuICAvLyBjb25zb2xlLmxvZyhcImNvbnRhaW5zXCIsIHZhbHVlLCBhdHRyLCBzZWFyY2gpO1xuXG4gIGlmICghVXRpbHMuaXNBcnJheSh2YWx1ZSkgfHwgIVV0aWxzLmlzT2JqZWN0KHZhbHVlKSB8fCAhVXRpbHMuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFV0aWxzLmlzVW5kZWZpbmVkKHNlYXJjaCkpIHtcbiAgICBzZWFyY2ggPSBhdHRyO1xuICB9XG5cbiAgaWYgKFV0aWxzLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiAodmFsdWUuaW5kZXhPZihzZWFyY2gpICE9PSAtMSk7XG4gIH1cblxuICBpZiAoVXRpbHMuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgaWYgKCh2YWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpLmhhc093blByb3BlcnR5KGF0dHIpKSB8fCAoVXRpbHMuaXNEZWZpbmVkKHZhbHVlW2tleV0pICYmIFV0aWxzLmlzRGVmaW5lZCh2YWx1ZVtrZXldW2F0dHJdKSkpIHtcbiAgICAgICAgaWYgKHZhbHVlW2tleV1bYXR0cl0gPT09IHNlYXJjaCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiIsImltcG9ydCB7IGdldCB9IGZyb20gJy4vZ2V0LmZvcm1hdHRlcic7XG5cbi8qKlxuICogQXJyYXkgZm9ybWF0dGVyIHRvIGdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5XG4gKi9cbmV4cG9ydCBjb25zdCBsYXN0ID0gKGFycmF5OiBhbnlbXSkgPT4ge1xuICByZXR1cm4gZ2V0KGFycmF5LCBhcnJheS5sZW5ndGggLSAxKTtcbn07XG4iLCJpbXBvcnQgeyBnZXQgfSBmcm9tICcuL2dldC5mb3JtYXR0ZXInO1xuXG4vKipcbiAqIEFycmF5IGZvcm1hdHRlciB0byBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0ID0gKGFycjogYW55W10pID0+IHtcbiAgcmV0dXJuIGdldChhcnIsIDApO1xufTtcbiIsIi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBKU09OIGZvcm1hdC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9hZGRpdGlvbmFsLWZpbHRlcnMjanNvblxuICovXG5leHBvcnQgY29uc3QganNvbiA9IChvYmplY3Q6IGFueSkgPT4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0KTtcbn07XG4iLCJpbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL3V0aWxzJztcblxuLyoqXG4gKiBwYXJzZSBqc29uIHN0cmluZyB0byBvYmplY3RcbiAqIEBleGFtcGxlIDxkaXYgcnYtY2xhc3M9J1wiW1wiY29sLTJcIiwgXCJjb2wtM1wiLCBcImNvbC00XCIsIFwiY29sLTVcIiwgXCJjb2wtNlwiXVwiIHwgcGFyc2UgfCByYW5kb20nPlxuICovXG5leHBvcnQgY29uc3QgcGFyc2UgPSAoanNvblN0cmluZzogc3RyaW5nKSA9PiB7XG4gIGlmIChVdGlscy5pc1N0cmluZyhqc29uU3RyaW5nKSkge1xuICAgIGNvbnN0IG9iamVjdCA9IEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gcHJvcGVydHkgLyBvYmplY3QgLyBhcnJheSBmb3JtYXR0ZXJzXG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4vcGFyc2UuZm9ybWF0dGVyJztcbmltcG9ydCB7IGpzb24gfSBmcm9tICcuL2pzb24uZm9ybWF0dGVyJztcbmltcG9ydCB7IGZpcnN0IH0gZnJvbSAnLi9maXJzdC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgbGFzdCB9IGZyb20gJy4vbGFzdC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgY29udGFpbnMgfSBmcm9tICcuL2NvbnRhaW5zLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBnZXQgfSBmcm9tICcuL2dldC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi9zZXQuZm9ybWF0dGVyJztcbmltcG9ydCB7IG1hdGNoIH0gZnJvbSAnLi9tYXRjaC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgY291bnQgfSBmcm9tICcuL2NvdW50LmZvcm1hdHRlcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHkuZm9ybWF0dGVyJztcbmltcG9ydCB7IGlzTGFzdCB9IGZyb20gJy4vaXNMYXN0LmZvcm1hdHRlcic7XG5cbmV4cG9ydCB7IHBhcnNlLCBqc29uLCBmaXJzdCwgbGFzdCwgY29udGFpbnMsIGdldCwgc2V0LCBtYXRjaCwgY291bnQsIGVtcHR5LCBpc0xhc3QgfTtcblxuZXhwb3J0IGNvbnN0IHByb3BlcnR5Rm9ybWF0dGVyczogSUZvcm1hdHRlcnMgPSB7XG4gIHBhcnNlLCBqc29uLCBmaXJzdCwgbGFzdCwgY29udGFpbnMsIGdldCwgc2V0LCBtYXRjaCwgY291bnQsIGVtcHR5LCBpc0xhc3QsXG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogSnVzdCBnZXQgdGhlIGRpZ2l0cyBvZiBhIHN0cmluZywgdXNlZnVsIHRvIHJlbW92ZSBweCBmcm9tIGNzcyB2YWx1ZVxuICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMTAwNjUzLzE0NjU5MTlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpZ2l0cyA9IChzdHI6IHN0cmluZykgPT4ge1xuICBpZiAoVXRpbHMuaXNOdW1iZXIoc3RyKSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgY29uc3QgbnVtID0gc3RyLnJlcGxhY2UoL1teLVxcZFxcLl0vZywgJycpO1xuICBpZiAoaXNOYU4oTnVtYmVyKG51bSkpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE51bWJlcihudW0pO1xuICB9XG59O1xuIiwiZXhwb3J0IGNvbnN0IHVuZXZlbiA9IChudW06IG51bWJlcikgPT4ge1xuICByZXR1cm4gKG51bSAlIDIpICE9PSAwO1xufTtcbiIsIi8qKlxuICogUHLDvGZ0IG9iIGVpbmUgWmFobCBnZXJhZGUgaXN0IG9kZXIgbmljaHRcbiAqIENoZWNrIGlmIGEgbnVtYmVyIGlzIGV2ZW4gb3Igbm90XG4gKi9cbmV4cG9ydCBjb25zdCBldmVuID0gKG51bTogbnVtYmVyKSA9PiB7XG4gIHJldHVybiAobnVtICUgMikgPT09IDA7XG59O1xuIiwiLyoqXG4gKiBncmVhdGVzdCBjb21tb24gZGl2aXNvciAoR0NEKSB1c2VmdWwgdG8gY2FsY3VsYXRlIHRoZSByYXRpb1xuICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTE4NjQ2NS8xNDY1OTE5XG4gKi9cbmV4cG9ydCBjb25zdCBnY2QgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICByZXR1cm4gKGIgPT09IDApID8gYSA6IGdjZChiLCBhICUgYik7XG59O1xuIiwiLyoqXG4gKiBEaXZpZGVzIGFuIG91dHB1dCBieSBhIG51bWJlciBhbmQgcmV0dXJucyB0aGUgcmVtYWluZGVyLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNtb2R1bG9cbiAqL1xuZXhwb3J0IGNvbnN0IG1vZHVsbyA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpICUgTnVtYmVyKGIpO1xufTtcbiIsIi8qKlxuICogRGl2aWRlcyBhbiBvdXRwdXQgYnkgYSBudW1iZXIuIFRoZSBvdXRwdXQgaXMgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI2RpdmlkZWRfYnlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpdmlkZWRCeSA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpIC8gTnVtYmVyKGIpO1xufTtcbiIsIi8qKlxuICogTXVsdGlwbGllcyBhbiBvdXRwdXQgYnkgYSBudW1iZXIuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI3RpbWVzXG4gKi9cbmV4cG9ydCBjb25zdCB0aW1lcyA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpICogTnVtYmVyKGIpO1xufTtcbiIsIi8qKlxuICogU3VidHJhY3RzIGEgbnVtYmVyIGZyb20gYW4gb3V0cHV0LlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNtaW51c1xuICovXG5leHBvcnQgY29uc3QgbWludXMgPSAoYTogc3RyaW5nIHwgbnVtYmVyLCBiOiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgcmV0dXJuIE51bWJlcihhKSAtIE51bWJlcihiKTtcbn07XG4iLCIvKipcbiAqIEFkZHMgYSBudW1iZXIgdG8gYW4gb3V0cHV0LlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNwbHVzXG4gKi9cbmV4cG9ydCBjb25zdCBwbHVzID0gKGE6IHN0cmluZyB8IG51bWJlciwgYjogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gIHJldHVybiBOdW1iZXIoYSkgKyBOdW1iZXIoYik7XG59O1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5cbi8qKlxuICogR2V0IGEgYmFjayByYW5kb20gdmFsdWUgb2YgYXJyYXlcbiAqIEBleGFtcGxlIDxkaXYgcnYtY2xhc3M9J1wiW1wiY29sLTJcIiwgXCJjb2wtM1wiLCBcImNvbC00XCIsIFwiY29sLTVcIiwgXCJjb2wtNlwiXVwiIHwgcGFyc2UgfCByYW5kb20nPlxuICovXG5leHBvcnQgY29uc3QgcmFuZG9tID0gKGFycmF5OiBhbnlbXSkgPT4ge1xuICBpZiAoVXRpbHMuaXNBcnJheShhcnJheSkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGFycmF5W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFycmF5Lmxlbmd0aCldO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG4iLCJpbXBvcnQgeyBJRm9ybWF0dGVycyB9IGZyb20gJy4uLy4uL2Zvcm1hdHRlci5zZXJ2aWNlJztcblxuLy8gbWF0aCBmb3JtYXR0ZXJzXG5pbXBvcnQgeyByYW5kb20gfSBmcm9tICcuL3JhbmRvbS5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgcGx1cyB9IGZyb20gJy4vcGx1cy5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgbWludXMgfSBmcm9tICcuL21pbnVzLmZvcm1hdHRlcic7XG5pbXBvcnQgeyB0aW1lcyB9IGZyb20gJy4vdGltZXMuZm9ybWF0dGVyJztcbmltcG9ydCB7IGRpdmlkZWRCeSB9IGZyb20gJy4vZGl2aWRlZEJ5LmZvcm1hdHRlcic7XG5pbXBvcnQgeyBtb2R1bG8gfSBmcm9tICcuL21vZHVsby5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgZ2NkIH0gZnJvbSAnLi9nY2QuZm9ybWF0dGVyJztcbmltcG9ydCB7IGV2ZW4gfSBmcm9tICcuL2V2ZW4uZm9ybWF0dGVyJztcbmltcG9ydCB7IHVuZXZlbiB9IGZyb20gJy4vdW5ldmVuLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBkaWdpdHMgfSBmcm9tICcuL2RpZ2l0cy5mb3JtYXR0ZXInO1xuXG5leHBvcnQgeyByYW5kb20sIHBsdXMsIG1pbnVzLCB0aW1lcywgZGl2aWRlZEJ5LCBtb2R1bG8sIGdjZCwgZXZlbiwgdW5ldmVuLCBkaWdpdHMgfTtcblxuZXhwb3J0IGNvbnN0IG1hdGhGb3JtYXR0ZXJzOiBJRm9ybWF0dGVycyA9IHtcbiAgZGlnaXRzLCBkaXZpZGVkQnksIGV2ZW4sIGdjZCwgbWludXMsIG1vZHVsbywgcGx1cywgcmFuZG9tLCB0aW1lcywgdW5ldmVuLFxufTtcbiIsIi8qKlxuICogIWFcbiAqL1xuZXhwb3J0IGNvbnN0IG5vdCA9IChhOiBib29sZWFuKSA9PiB7XG4gIHJldHVybiAhYTtcbn07XG4iLCIvKipcbiAqIGEgfHwgYlxuICovXG5leHBvcnQgY29uc3Qgb3IgPSAoYTogYm9vbGVhbiwgYjogYm9vbGVhbikgPT4ge1xuICByZXR1cm4gYSB8fCBiO1xufTtcbiIsIi8qKlxuICogZXVxYWwgb3IgbG93ZXIgdGhhblxuICogYSA8PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBlbHQgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIGEgPD0gYjtcbn07XG4iLCIvKipcbiAqIGxvd2VyIHRoYW5cbiAqIGEgPCBiXG4gKi9cbmV4cG9ydCBjb25zdCBsdCA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4ge1xuICByZXR1cm4gYSA8IGI7XG59O1xuIiwiLyoqXG4gKiBhICE9PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBuZSA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICByZXR1cm4gYSAhPT0gYjtcbn07XG4iLCIvKipcbiAqIGEgPT09IGJcbiAqL1xuZXhwb3J0IGNvbnN0IGVxID0gKGE6IGFueSwgYjogYW55KSA9PiB7XG4gIHJldHVybiBhID09PSBiO1xufTtcbiIsIi8qKlxuICogYSAmJiBiXG4gKi9cbmV4cG9ydCBjb25zdCBhbmQgPSAoYTogYm9vbGVhbiwgYjogYm9vbGVhbikgPT4ge1xuICByZXR1cm4gYSAmJiBiO1xufTtcbiIsIi8qKlxuICogQWRkIHVzZWZ1bCBnZW5lcmFsLXB1cnBvc2UgZm9ybWF0dGVycyBmb3IgUml2ZXRzLmpzXG4gKiBTb21lIGZvcm1hdHRlcnMgZnJvbSBjYXJ0LmpzIGFuZCByaXZldHNqcy1zdGRsaWJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvbGFicy9jYXJ0anMvXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vSnVtcExpbmtOZXR3b3JrL3Nob3BpZnktcHJvZHVjdGpzXG4gKi9cblxuaW1wb3J0IHsgSUZvcm1hdHRlcnMgfSBmcm9tICcuLi8uLi9mb3JtYXR0ZXIuc2VydmljZSc7XG5cbi8vIGNvbXBhcmUgZnVuY3Rpb25zXG5pbXBvcnQgeyBhbmQgfSBmcm9tICcuL2FuZC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgZXEgfSBmcm9tICcuL2VxLmZvcm1hdHRlcic7XG5pbXBvcnQgeyBuZSB9IGZyb20gJy4vbmUuZm9ybWF0dGVyJztcbmltcG9ydCB7IGx0IH0gZnJvbSAnLi9sdC5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgZWx0IH0gZnJvbSAnLi9lbHQuZm9ybWF0dGVyJztcbmltcG9ydCB7IG9yIH0gZnJvbSAnLi9vci5mb3JtYXR0ZXInO1xuaW1wb3J0IHsgbm90IH0gZnJvbSAnLi9ub3QuZm9ybWF0dGVyJztcblxuZXhwb3J0IHsgYW5kLCBlcSwgbmUsIGx0LCBlbHQsIG9yLCBub3QgfTtcblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVGb3JtYXR0ZXJzOiBJRm9ybWF0dGVycyA9IHtcbiAgYW5kLCBlbHQsIGVxLCBsdCwgbmUsIG5vdCwgb3IsXG59O1xuIiwiZXhwb3J0IHsgY29tcGFyZUZvcm1hdHRlcnMgfSBmcm9tICcuL2NvbXBhcmUvaW5kZXgnO1xuZXhwb3J0IHsgbWF0aEZvcm1hdHRlcnMgfSBmcm9tICcuL21hdGgvaW5kZXgnO1xuZXhwb3J0IHsgcHJvcGVydHlGb3JtYXR0ZXJzIH0gZnJvbSAnLi9wcm9wZXJ0eS9pbmRleCc7XG5leHBvcnQgeyBzcGVjaWFsRm9ybWF0dGVycyB9IGZyb20gJy4vc3BlY2lhbC9pbmRleCc7XG5leHBvcnQgeyBzdHJpbmdGb3JtYXR0ZXJzIH0gZnJvbSAnLi9zdHJpbmcvaW5kZXgnO1xuXG4vLyBleHBvcnQgeyBkYXRlIH0gZnJvbSAnLi9kYXRlJztcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBCaW5kZXJXcmFwcGVyLCBJVHdvV2F5QmluZGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgZXZlbnRIYW5kbGVyRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9iaW5kaW5nJztcblxuLyoqXG4gKiBCaW5kcyBhbiBldmVudCBoYW5kbGVyIG9uIHRoZSBlbGVtZW50LlxuICovXG5leHBvcnQgY29uc3Qgb25TdGFyQmluZGVyV3JhcHBlcjogQmluZGVyV3JhcHBlciA9IChqUXVlcnk6IEpRdWVyeVN0YXRpYykgPT4ge1xuXG4gIGNvbnN0IG5hbWUgPSAnb24tKic7XG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2JpbmRlcnM6JyArIG5hbWUpO1xuXG4gIGNvbnN0IGJpbmRlcjogSVR3b1dheUJpbmRlcjxldmVudEhhbmRsZXJGdW5jdGlvbj4gPSB7XG4gICAgZnVuY3Rpb246IHRydWUsXG4gICAgcHJpb3JpdHk6IDEwMDAsXG5cbiAgICBiaW5kKGVsKSB7XG4gICAgICBpZiAoIXRoaXMuY3VzdG9tRGF0YSkge1xuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7XG4gICAgICAgICAgaGFuZGxlcjogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5iaW5kKGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuY3VzdG9tRGF0YS5oYW5kbGVyKSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3MgaXMgbnVsbCcpO1xuICAgICAgICB9XG4gICAgICAgIGpRdWVyeShlbCkub2ZmKHRoaXMuYXJnc1swXSwgdGhpcy5jdXN0b21EYXRhKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcm91dGluZShlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBldmVudEhhbmRsZXJGdW5jdGlvbikge1xuXG4gICAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXJncyBpcyBudWxsJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBldmVudE5hbWUgPSB0aGlzLmFyZ3NbMF07XG5cbiAgICAgIGlmICh0aGlzLmN1c3RvbURhdGEuaGFuZGxlcikge1xuICAgICAgICBqUXVlcnkoZWwpLm9mZihldmVudE5hbWUsIHRoaXMuY3VzdG9tRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3VzdG9tRGF0YS5oYW5kbGVyID0gdGhpcy5ldmVudEhhbmRsZXIodmFsdWUsIGVsKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgalF1ZXJ5KGVsKS5vbihldmVudE5hbWUsICh0aGlzLmN1c3RvbURhdGEuaGFuZGxlcikpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgalF1ZXJ5KGVsKS5vbihldmVudE5hbWUsIChldmVudDogSlF1ZXJ5LkV2ZW50KSA9PiB7XG4gICAgICAgICAgdGhpcy5jdXN0b21EYXRhLmhhbmRsZXIoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICByZXR1cm4geyBiaW5kZXIsIG5hbWUgfTtcbn07XG4iLCJpbXBvcnQgeyBJT25lV2F5QmluZGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuXG4vKipcbiAqIERpc2FibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZSAobmVnYXRlZCB2ZXJzaW9uIG9mIGBlbmFibGVkYCBiaW5kZXIpLlxuICovXG5leHBvcnQgY29uc3QgZGlzYWJsZWQ6IElPbmVXYXlCaW5kZXI8Ym9vbGVhbj4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAoZWwgYXMgSFRNTEJ1dHRvbkVsZW1lbnQpLmRpc2FibGVkID0gISF2YWx1ZTtcbn07XG4iLCJpbXBvcnQgeyBJT25lV2F5QmluZGVyIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuXG4vKipcbiAqIEVuYWJsZXMgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlLlxuICovXG5leHBvcnQgY29uc3QgZW5hYmxlZDogSU9uZVdheUJpbmRlcjxib29sZWFuPiA9IChlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBib29sZWFuKSA9PiB7XG4gIChlbCBhcyBIVE1MQnV0dG9uRWxlbWVudCkuZGlzYWJsZWQgPSAhdmFsdWU7XG59O1xuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4uLy4uL3ZpZXcnO1xuaW1wb3J0IHsgSUJpbmRhYmxlIH0gZnJvbSAnLi4vLi4vYmluZGluZyc7XG5pbXBvcnQgeyB0aW1lcywgZ2V0U3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgSUJpbmRlcnMsIElUd29XYXlCaW5kZXIsIElPbmVXYXlCaW5kZXIgfSBmcm9tICcuLi8uLi9iaW5kZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IGVuYWJsZWQgfSBmcm9tICcuL2VuYWJsZWQuYmluZGVyJztcbmltcG9ydCB7IGRpc2FibGVkIH0gZnJvbSAnLi9kaXNhYmxlZC5iaW5kZXInO1xuaW1wb3J0IHsgb25TdGFyQmluZGVyV3JhcHBlciB9IGZyb20gJy4vb24tc3Rhci5iaW5kZXInO1xuXG4vKipcbiAqIEdldHMgdGhlIGJhc2lpYyBiaW5kZXJzXG4gKiBAcGFyYW0galF1ZXJ5IFBhc3MgSlF1ZXJ5IHRvIGJhc2ljIGJpbmRlcnMgdG8gZ2V0IEpRdWVyeSBzdXBwb3J0XG4gKi9cbmV4cG9ydCBjb25zdCBiYXNpY0JpbmRlcnNXcmFwcGVyID0gKGpRdWVyeTogSlF1ZXJ5U3RhdGljKSA9PiB7XG5cbiAgY29uc3QgYmluZGVyczogSUJpbmRlcnM8YW55PiA9IHtcbiAgICAvKipcbiAgICAgKiBCaW5kcyBhbiBldmVudCBoYW5kbGVyIG9uIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgICdvbi0qJzogb25TdGFyQmluZGVyV3JhcHBlcihqUXVlcnkpLmJpbmRlcixcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgYm91bmQgaW5zdGFuY2VzIG9mIHRoZSBlbGVtZW50IGluIHBsYWNlIGZvciBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LlxuICAgICAqL1xuICAgICdlYWNoLSonOiA8SVR3b1dheUJpbmRlcjxhbnk+PiB7XG4gICAgICBibG9jazogdHJ1ZSxcblxuICAgICAgcHJpb3JpdHk6IDQwMDAsXG5cbiAgICAgIGJpbmQoZWw6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tYXJrZXIpIHtcbiAgICAgICAgICB0aGlzLm1hcmtlciA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoYCB0aW55YmluZDogJHt0aGlzLnR5cGV9IGApO1xuICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YSA9IHtcbiAgICAgICAgICAgIGl0ZXJhdGVkOiA8Vmlld1tdPiBbXSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICghZWwucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBwYXJlbnQgbm9kZSEnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5tYXJrZXIsIGVsKTtcbiAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQuZm9yRWFjaCgodmlldzogVmlldykgID0+IHtcbiAgICAgICAgICAgIHZpZXcuYmluZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB1bmJpbmQoZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZCkge1xuICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5mb3JFYWNoKCh2aWV3OiBWaWV3KSA9PiB7XG4gICAgICAgICAgICB2aWV3LnVuYmluZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByb3V0aW5lKGVsLCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLmFyZ3MgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3MgaXMgbnVsbCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1vZGVsTmFtZSA9IHRoaXMuYXJnc1swXTtcbiAgICAgICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24gfHwgW107XG5cbiAgICAgICAgLy8gVE9ETyBzdXBwb3J0IG9iamVjdCBrZXlzIHRvIGl0ZXJhdGUgb3ZlclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VhY2gtJyArIG1vZGVsTmFtZSArICcgbmVlZHMgYW4gYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLCBidXQgaXQgaXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIGluZGV4IG5hbWUgaXMgc2V0ZWQgYnkgYGluZGV4LXByb3BlcnR5YCB1c2UgdGhpcyBuYW1lLCBvdGhlcndpc2UgYCVbbW9kZWxOYW1lXSVgXG4gICAgICAgIGNvbnN0IGluZGV4UHJvcCA9IGVsLmdldEF0dHJpYnV0ZSgnaW5kZXgtcHJvcGVydHknKSB8fCB0aGlzLmdldEl0ZXJhdGlvbkFsaWFzKG1vZGVsTmFtZSk7XG5cbiAgICAgICAgY29sbGVjdGlvbi5mb3JFYWNoKChtb2RlbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCBzY29wZTogYW55ID0geyRwYXJlbnQ6IHRoaXMudmlldy5tb2RlbHN9O1xuICAgICAgICAgIHNjb3BlW2luZGV4UHJvcF0gPSBpbmRleDtcbiAgICAgICAgICBzY29wZVttb2RlbE5hbWVdID0gbW9kZWw7XG4gICAgICAgICAgbGV0IHZpZXcgPSB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWRbaW5kZXhdO1xuXG4gICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXM6IENvbW1lbnQgfCBIVE1MRWxlbWVudDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXMgPSB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWRbdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLmxlbmd0aCAtIDFdLmVsc1swXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXJrZXIpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXMgPSB0aGlzLm1hcmtlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJldmlvdXMgbm90IGRlZmluZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmlldyA9IFZpZXcuY3JlYXRlKHRoaXMsIHNjb3BlLCBwcmV2aW91cy5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQucHVzaCh2aWV3KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZpZXcubW9kZWxzW21vZGVsTmFtZV0gIT09IG1vZGVsKSB7XG4gICAgICAgICAgICAgIC8vIHNlYXJjaCBmb3IgYSB2aWV3IHRoYXQgbWF0Y2hlcyB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgbGV0IG1hdGNoSW5kZXg7XG4gICAgICAgICAgICAgIGxldCBuZXh0VmlldztcbiAgICAgICAgICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gaW5kZXggKyAxOyBuZXh0SW5kZXggPCB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQubGVuZ3RoOyBuZXh0SW5kZXgrKykge1xuICAgICAgICAgICAgICAgIG5leHRWaWV3ID0gdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkW25leHRJbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKG5leHRWaWV3Lm1vZGVsc1ttb2RlbE5hbWVdID09PSBtb2RlbCkge1xuICAgICAgICAgICAgICAgICAgbWF0Y2hJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobWF0Y2hJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9kZWwgaXMgaW4gb3RoZXIgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAvLyB0b2RvOiBjb25zaWRlciBhdm9pZGluZyB0aGUgc3BsaWNlIGhlcmUgYnkgc2V0dGluZyBhIGZsYWdcbiAgICAgICAgICAgICAgICAvLyBwcm9maWxlIHBlcmZvcm1hbmNlIGJlZm9yZSBpbXBsZW1lbnRpbmcgc3VjaCBjaGFuZ2VcbiAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQuc3BsaWNlKG1hdGNoSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXJrZXIgfHwgIXRoaXMubWFya2VyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFya2VyIGhhcyBubyBwYXJlbnQgbm9kZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXh0Vmlldy5lbHNbMF0sIHZpZXcuZWxzWzBdKTtcbiAgICAgICAgICAgICAgICBuZXh0Vmlldy5tb2RlbHNbaW5kZXhQcm9wXSA9IGluZGV4O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5ldyBtb2RlbFxuICAgICAgICAgICAgICAgIG5leHRWaWV3ID0gVmlldy5jcmVhdGUodGhpcywgc2NvcGUsIHZpZXcuZWxzWzBdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuaXRlcmF0ZWQuc3BsaWNlKGluZGV4LCAwLCBuZXh0Vmlldyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2aWV3Lm1vZGVsc1tpbmRleFByb3BdID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLmxlbmd0aCA+IGNvbGxlY3Rpb24ubGVuZ3RoKSB7XG4gICAgICAgICAgdGltZXModGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLmxlbmd0aCAtIGNvbGxlY3Rpb24ubGVuZ3RoLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5jdXN0b21EYXRhLml0ZXJhdGVkLnBvcCgpO1xuICAgICAgICAgICAgdmlldy51bmJpbmQoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5tYXJrZXIgfHwgIXRoaXMubWFya2VyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXJrZXIgaGFzIG5vIHBhcmVudCBub2RlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHZpZXcuZWxzWzBdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gJ09QVElPTicgJiYgdGhpcy52aWV3LmJpbmRpbmdzKSB7XG4gICAgICAgICAgdGhpcy52aWV3LmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmc6IElCaW5kYWJsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubWFya2VyICYmIChiaW5kaW5nLmVsID09PSB0aGlzLm1hcmtlci5wYXJlbnROb2RlKSAmJiAoYmluZGluZy50eXBlID09PSAndmFsdWUnKSAmJiBiaW5kaW5nLnN5bmMpIHtcbiAgICAgICAgICAgICAgYmluZGluZy5zeW5jKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHVwZGF0ZShtb2RlbHMpIHtcbiAgICAgICAgY29uc3QgZGF0YTogYW55ID0ge307XG4gICAgICAgIC8vIFRPRE86IGFkZCB0ZXN0IGFuZCBmaXggaWYgbmVjZXNzYXJ5XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZGVscykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuYXJncyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcmdzIGlzIG51bGwnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtleSAhPT0gdGhpcy5hcmdzWzBdKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSBtb2RlbHNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuY3VzdG9tRGF0YS5pdGVyYXRlZC5mb3JFYWNoKCh2aWV3OiBWaWV3KSA9PiB7XG4gICAgICAgICAgdmlldy51cGRhdGUoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBvciByZW1vdmVzIHRoZSBjbGFzcyBmcm9tIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZSBvciBmYWxzZS5cbiAgICAgKi9cbiAgICAnY2xhc3MtKic6IDxJT25lV2F5QmluZGVyPGJvb2xlYW4+PiBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBib29sZWFuKSB7XG4gICAgICBpZiAodGhpcy5hcmdzID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXJncyBpcyBudWxsJyk7XG4gICAgICB9XG4gICAgICBjb25zdCBjbGFzc0xpc3QgPSBlbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoKGVsZSkgPT4gZWxlICE9PSAnJyk7XG4gICAgICBjb25zdCBhcmcgPSB0aGlzLmFyZ3NbMF0udHJpbSgpO1xuICAgICAgY29uc3QgaWR4ID0gY2xhc3NMaXN0LmluZGV4T2YoYXJnKTtcbiAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGVsLmNsYXNzTmFtZSArPSBgICR7YXJnfWA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGNsYXNzTGlzdC5maWx0ZXIoKF8sIGkpID0+IGkgIT09IGlkeCkuam9pbignICcpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbGVtZW50J3MgdGV4dCB2YWx1ZS5cbiAgICAgKi9cbiAgICAndGV4dCcoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbGVtZW50J3MgSFRNTCBjb250ZW50LlxuICAgICAqL1xuICAgICdodG1sJyhlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgIGVsLmlubmVySFRNTCA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgZWxlbWVudCB3aGVuIHZhbHVlIGlzIHRydWUuXG4gICAgICovXG4gICAgJ3Nob3cnOiAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gJycgOiAnbm9uZSc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZSAobmVnYXRlZCB2ZXJzaW9uIG9mIGBzaG93YCBiaW5kZXIpLlxuICAgICAqL1xuICAgICdoaWRlJzogKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICdub25lJyA6ICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZS5cbiAgICAgKi9cbiAgICAnZW5hYmxlZCc6IGVuYWJsZWQsXG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgZWxlbWVudCB3aGVuIHZhbHVlIGlzIHRydWUgKG5lZ2F0ZWQgdmVyc2lvbiBvZiBgZW5hYmxlZGAgYmluZGVyKS5cbiAgICAgKi9cbiAgICAnZGlzYWJsZWQnOiBkaXNhYmxlZCxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBhIGNoZWNrYm94IG9yIHJhZGlvIGlucHV0IHdoZW4gdGhlIHZhbHVlIGlzIHRydWUuIEFsc28gc2V0cyB0aGUgbW9kZWxcbiAgICAgKiBwcm9wZXJ0eSB3aGVuIHRoZSBpbnB1dCBpcyBjaGVja2VkIG9yIHVuY2hlY2tlZCAodHdvLXdheSBiaW5kZXIpLlxuICAgICAqL1xuICAgICdjaGVja2VkJzogPElUd29XYXlCaW5kZXI8YW55Pj4ge1xuICAgICAgcHVibGlzaGVzOiB0cnVlLFxuICAgICAgcHJpb3JpdHk6IDIwMDAsXG5cbiAgICAgIGJpbmQoZWwpIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuY3VzdG9tRGF0YSA9IHt9O1xuICAgICAgICBpZiAoIXRoaXMuY3VzdG9tRGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5jYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIHNlbGYucHVibGlzaCgpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5jdXN0b21EYXRhLmNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIHVuYmluZChlbCkge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmN1c3RvbURhdGEuY2FsbGJhY2spO1xuICAgICAgfSxcblxuICAgICAgcm91dGluZShlbDogSFRNTFNlbGVjdEVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChlbC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgZWwuY2hlY2tlZCA9IGdldFN0cmluZyhlbC52YWx1ZSkgPT09IGdldFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwuY2hlY2tlZCA9ICEhdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGVsZW1lbnQncyB2YWx1ZS4gQWxzbyBzZXRzIHRoZSBtb2RlbCBwcm9wZXJ0eSB3aGVuIHRoZSBpbnB1dCBjaGFuZ2VzXG4gICAgICogKHR3by13YXkgYmluZGVyKS5cbiAgICAgKi9cbiAgICAndmFsdWUnOiA8SVR3b1dheUJpbmRlcjxhbnk+PiB7XG4gICAgICBwdWJsaXNoZXM6IHRydWUsXG4gICAgICBwcmlvcml0eTogMzAwMCxcblxuICAgICAgYmluZChlbDogSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhLmlzUmFkaW8gPSBlbC50YWdOYW1lID09PSAnSU5QVVQnICYmIGVsLnR5cGUgPT09ICdyYWRpbyc7XG4gICAgICAgIGlmICghdGhpcy5jdXN0b21EYXRhLmlzUmFkaW8pIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuZXZlbnQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2V2ZW50LW5hbWUnKSB8fCAoZWwudGFnTmFtZSA9PT0gJ1NFTEVDVCcgPyAnY2hhbmdlJyA6ICdpbnB1dCcpO1xuICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICAgIGlmICghdGhpcy5jdXN0b21EYXRhLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmN1c3RvbURhdGEuY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHNlbGYucHVibGlzaCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRoaXMuY3VzdG9tRGF0YS5ldmVudCwgdGhpcy5jdXN0b21EYXRhLmNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdW5iaW5kKGVsKSB7XG4gICAgICAgIGlmICghdGhpcy5jdXN0b21EYXRhLmlzUmFkaW8pIHtcbiAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuY3VzdG9tRGF0YS5ldmVudCwgdGhpcy5jdXN0b21EYXRhLmNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcm91dGluZShlbDogSFRNTElucHV0RWxlbWVudCB8IEhUTUxTZWxlY3RFbGVtZW50LCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jdXN0b21EYXRhICYmIHRoaXMuY3VzdG9tRGF0YS5pc1JhZGlvKSB7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZWwudHlwZSA9PT0gJ3NlbGVjdC1tdWx0aXBsZScgJiYgZWwgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGVsW2ldO1xuICAgICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2Yob3B0aW9uLnZhbHVlKSA+IC0xO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChnZXRTdHJpbmcodmFsdWUpICE9PSBnZXRTdHJpbmcoZWwudmFsdWUpKSB7XG4gICAgICAgICAgICBlbC52YWx1ZSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyBhbmQgYmluZHMgdGhlIGVsZW1lbnQgYW5kIGl0J3MgY2hpbGQgbm9kZXMgaW50byB0aGUgRE9NIHdoZW4gdHJ1ZS5cbiAgICAgKi9cbiAgICAnaWYnOiA8SVR3b1dheUJpbmRlcjxhbnk+PiB7XG4gICAgICBibG9jazogdHJ1ZSxcbiAgICAgIHByaW9yaXR5OiA0MDAwLFxuXG4gICAgICBiaW5kKGVsOiBIVE1MVW5rbm93bkVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhID0ge307XG4gICAgICAgIGlmICghdGhpcy5tYXJrZXIpIHtcbiAgICAgICAgICB0aGlzLm1hcmtlciA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyB0aW55YmluZDogJyArIHRoaXMudHlwZSArICcgJyArIHRoaXMua2V5cGF0aCArICcgJyk7XG4gICAgICAgICAgdGhpcy5jdXN0b21EYXRhLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgICAgaWYgKCFlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnQgaGFzIG5vIHBhcmVudCBub2RlJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubWFya2VyLCBlbCk7XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuY3VzdG9tRGF0YS5ib3VuZCA9PT0gZmFsc2UgJiYgIHRoaXMuY3VzdG9tRGF0YS5uZXN0ZWQpIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEubmVzdGVkLmJpbmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1c3RvbURhdGEuYm91bmQgPSB0cnVlO1xuICAgICAgfSxcblxuICAgICAgdW5iaW5kKCkge1xuICAgICAgICBpZiAoIHRoaXMuY3VzdG9tRGF0YS5uZXN0ZWQpIHtcbiAgICAgICAgICB0aGlzLmN1c3RvbURhdGEubmVzdGVkLnVuYmluZCgpO1xuICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5ib3VuZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByb3V0aW5lKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdmFsdWUgPSAhIXZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMuY3VzdG9tRGF0YS5hdHRhY2hlZCkge1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuXG4gICAgICAgICAgICBpZiAoISB0aGlzLmN1c3RvbURhdGEubmVzdGVkKSB7XG4gICAgICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5uZXN0ZWQgPSBuZXcgVmlldyhlbCwgdGhpcy52aWV3Lm1vZGVscywgdGhpcy52aWV3Lm9wdGlvbnMpO1xuICAgICAgICAgICAgICB0aGlzLmN1c3RvbURhdGEubmVzdGVkLmJpbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5tYXJrZXIgfHwgIXRoaXMubWFya2VyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXJrZXIgaGFzIG5vIHBhcmVudCBub2RlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgdGhpcy5tYXJrZXIubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRWxlbWVudCBoYXMgbm8gcGFyZW50IG5vZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgdGhpcy5jdXN0b21EYXRhLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGUobW9kZWxzKSB7XG4gICAgICAgIGlmICggdGhpcy5jdXN0b21EYXRhLm5lc3RlZCkge1xuICAgICAgICAgIHRoaXMuY3VzdG9tRGF0YS5uZXN0ZWQudXBkYXRlKG1vZGVscyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIGJpbmRlcnM7XG59O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBKUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi8uLi9iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQamF4LCBQcmVmZXRjaCwgR2xvYmFsRXZlbnQgfSBmcm9tICcuL2JhcmJhL2JhcmJhJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIE9wZW4gbGluayB3aXRoIHBhamF4IGlmIHRoZSByb3V0ZSBpcyBub3QgdGhlIGFjdGl2ZSByb3V0ZVxuICogU2V0cyBhbHNvIHRoZSBlbGVtZW50IGFjdGl2ZSBpZiBoaXMgdXJsIGlzIHRoZSBjdXJyZW50IHVybFxuICovXG5jb25zdCByb3V0ZUJpbmRlcjogQmluZGVyV3JhcHBlciA9IChkaXNwYXRjaGVyOiBHbG9iYWxFdmVudCwgcGpheDogUGpheCwgcHJlZmV0Y2g6IFByZWZldGNoKSA9PiB7XG5cbiAgY29uc3QgbmFtZSA9ICdyb3V0ZSc7XG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2JpbmRlcnM6cm91dGUnKTtcblxuICBjb25zdCBiaW5kZXI6IElPbmVXYXlCaW5kZXI8c3RyaW5nPiA9IGZ1bmN0aW9uKGVsOiBIVE1MRWxlbWVudCwgdXJsOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBjb25zdCAkZWwgPSBKUXVlcnkoZWwpO1xuICAgIGxldCBuZXdUYWIgPSBmYWxzZTtcbiAgICBjb25zdCB1c2VQYWpheCA9IHRydWU7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBkZWJ1ZygnZ2V0QmluZGVyJywgZWwsIHVybCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgdXJsID0gJGVsLmF0dHIoJ2hyZWYnKTtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmF0dHIoJ3RhcmdldCcpID09PSAnX2JsYW5rJykge1xuICAgICAgbmV3VGFiID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBsb2NhdGlvbiA9IFV0aWxzLmdldExvY2F0aW9uKCk7XG4gICAgY29uc3QgaG9zdCA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lO1xuXG4gICAgLy8gbnJvbWFsaXplIHVybFxuICAgIGlmICh1cmwgJiYgVXRpbHMuaXNBYnNvbHV0ZVVybCh1cmwpKSB7XG5cbiAgICAgIC8vIGlmIGlzIG5vdCBhbiBleHRlcm5hbCBsaW5rXG4gICAgICBpZiAodXJsLmluZGV4T2YoaG9zdCkgPT09IDApIHtcbiAgICAgICAgLy8gZ2V0IHJlbGF0aXZlIHVybFxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShob3N0LCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUYWIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFscmVhZHlPblVSTCA9IChjaGVja1VybD86IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGNoZWNrVXJsKSB7XG4gICAgICAgIGNvbnN0IHBhdGhuYW1lID0gVXRpbHMuZ2V0TG9jYXRpb24oKS5wYXRobmFtZTtcbiAgICAgICAgZGVidWcoJ2NoZWNrVVJMJywgcGF0aG5hbWUsIGNoZWNrVXJsKTtcbiAgICAgICAgaWYgKGNoZWNrVXJsID09PSBwYXRobmFtZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGNvbnN0IGNoZWNrVVJMID0gKHVybFRvQ2hlY2s/OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmICh1cmxUb0NoZWNrKSB7XG4gICAgICAgIGlmIChhbHJlYWR5T25VUkwodXJsVG9DaGVjaykpIHtcbiAgICAgICAgICAkZWwuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgICRlbC5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIGlmICh1c2VQYWpheCkge1xuICAgICAgZGlzcGF0Y2hlci5vbignbmV3UGFnZVJlYWR5JywgKCkgPT4gY2hlY2tVUkwodXJsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIEpRdWVyeSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgKCkgPT4gY2hlY2tVUkwodXJsKSk7XG4gICAgfVxuXG4gICAgJGVsLm9mZignY2xpY2snKS5vbignY2xpY2snLCAoZXZlbnQ6IEpRdWVyeS5FdmVudDxIVE1MRWxlbWVudCwgbnVsbD4pID0+IHtcbiAgICAgIGRlYnVnKCdnbyB0byAnLCB1cmwpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGlmIChhbHJlYWR5T25VUkwodXJsKSkge1xuICAgICAgICBkZWJ1ZygnYWxyZWFkeSBvbiB0aGlzIHNpdGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICBwamF4LmdvVG8odXJsLCBuZXdUYWIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodXNlUGFqYXggJiYgIW5ld1RhYiAmJiAhYWxyZWFkeU9uVVJMKHVybCkpIHtcbiAgICAgICRlbC5vZmYoJ21vdXNlZW50ZXIgdG91Y2hzdGFydCcpLm9uKCdtb3VzZWVudGVyIHRvdWNoc3RhcnQnLCAoZXZlbnQ6IEpRdWVyeS5FdmVudDxIVE1MRWxlbWVudCwgbnVsbD4pID0+IHtcbiAgICAgICAgcHJlZmV0Y2gub25MaW5rRW50ZXIoZXZlbnQsIHVybCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjaGVja1VSTCh1cmwpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmluZGVyLFxuICAgIG5hbWUsXG4gIH07XG59O1xuXG5leHBvcnQgeyByb3V0ZUJpbmRlciB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBKUXVlcnkgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIEJpbmRlcldyYXBwZXIgfSBmcm9tICcuLi8uLi9iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQamF4LCBQcmVmZXRjaCwgSVN0YXRlIH0gZnJvbSAnLi9iYXJiYS9iYXJiYSc7XG5pbXBvcnQgeyBHbG9iYWxFdmVudCB9IGZyb20gJy4uLy4uL2dsb2JhbC1ldmVudCc7XG5pbXBvcnQgeyBWaWV3IGFzIFJpdmV0c1ZpZXcgfSBmcm9tICcuLi8uLi92aWV3JztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG4vKipcbiAqIE9wZW4gbGluayB3aXRoIHBhamF4IGlmIHRoZSByb3V0ZSBpcyBub3QgdGhlIGFjdGl2ZSByb3V0ZVxuICogU2V0cyBhbHNvIHRoZSBlbGVtZW50IGFjdGl2ZSBpZiBoaXMgdXJsIGlzIHRoZSBjdXJyZW50IHVybFxuICovXG5jb25zdCB2aWV3QmluZGVyOiBCaW5kZXJXcmFwcGVyID0gKGRpc3BhdGNoZXI6IEdsb2JhbEV2ZW50LCBwamF4OiBQamF4LCBwcmVmZXRjaDogUHJlZmV0Y2gpID0+IHtcblxuICBjb25zdCBuYW1lID0gJ3ZpZXcnO1xuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdiaW5kZXJzOnZpZXcnKTtcblxuICBjb25zdCBiaW5kZXI6IElPbmVXYXlCaW5kZXI8c3RyaW5nPiA9IGZ1bmN0aW9uKGVsOiBIVE1MRWxlbWVudCwgb3B0aW9uczogYW55KSB7XG4gICAgY29uc3QgJHdyYXBwZXIgPSBKUXVlcnkoZWwpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgLypcbiAgICAgKiBNYWtlIHRoZSBkaXNwYXRjaGVyIGF2YWlsYWJsZSBpbiB0aGUgbW9kZWwgdG8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMuXG4gICAgICpcbiAgICAgKiBJLmUuLCBpZiB3ZSBoYXZlIGluaXRpYWxpemVkIHJpdmV0cy90aW55YmluZCB3aXRoOlxuICAgICAqXG4gICAgICogIGByaXZldHMuYmluZChkb2N1bWVudC5ib2R5LCBtb2RlbClgLFxuICAgICAqXG4gICAgICogdGhlbiB3ZSBjYW4gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBCYXJiYSByb3V0ZXIgZGlzcGF0Y2hlciBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiAgYG1vZGVsLnJvdXRlckRpc3BhdGNoZXIub24oJ25ld1BhZ2VSZWFkeScsIC4uLik7YFxuICAgICAqICBgbW9kZWwucm91dGVyRGlzcGF0Y2hlci5vbigndHJhbnNpdGlvbkNvbXBsZXRlZCcsIC4uLik7YFxuICAgICAqIC4uLmV0Yy5cbiAgICAgKlxuICAgICAqL1xuICAgIHNlbGYudmlldy5tb2RlbHMucm91dGVyRGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG5cbiAgICB0aGlzLmN1c3RvbURhdGEgPSB7XG4gICAgICBuZXN0ZWQ6IG51bGwsXG4gICAgfTtcblxuICAgIGRpc3BhdGNoZXIub24oJ25ld1BhZ2VSZWFkeScsIChjdXJyZW50U3RhdHVzOiBJU3RhdGUsIHByZXZTdGF0dXM6IElTdGF0ZSwgJGNvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgbmV3UGFnZVJhd0hUTUw6IHN0cmluZywgZGF0YXNldDogYW55LCBpc0luaXQ6IGJvb2xlYW4pID0+IHtcbiAgICAgIC8vIHVuYmluZCB0aGUgb2xkIHJpdmV0cyB2aWV3XG4gICAgICBpZiAoc2VsZi5jdXN0b21EYXRhLm5lc3RlZCAhPT0gbnVsbCkge1xuICAgICAgICBzZWxmLmN1c3RvbURhdGEubmVzdGVkLnVuYmluZCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgdGhlIGRhdGVzZXQgdG8gdGhlIG1vZGVsXG4gICAgICBpZiAoIVV0aWxzLmlzT2JqZWN0KHNlbGYudmlldy5tb2RlbHMpKSB7XG4gICAgICAgIHNlbGYudmlldy5tb2RlbHMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHNlbGYudmlldy5tb2RlbHMuZGF0YXNldCA9ICRjb250YWluZXIuZGF0YSgpO1xuXG4gICAgICBkZWJ1ZygnbmV3UGFnZVJlYWR5IGRhdGFzZXQ6JywgZGF0YXNldCk7XG5cbiAgICAgIC8vIGlmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHBhZ2Ugd2lsbCBiZSBsb2FkZWQgd2UgZG8gbm90IG5lZWQgdG8gcmViaW5kIHRoZSBjb250YWluZXJcbiAgICAgIC8vIGJlY2F1c2UgdGhleSBhcmUgYWxyZWFkeSBiaW5kIHdpdGggdGhlIHBhcmVudCB2aWV3ICggYmVjYXVzZSB0aGV5IGFyZSBub3QgbG9hZGVkIGJ5IHBhamF4KVxuICAgICAgaWYgKCFpc0luaXQpIHtcbiAgICAgICAgLy8gYmluZCB0aGUgbmV3IGNvbnRhaW5lclxuICAgICAgICBzZWxmLmN1c3RvbURhdGEubmVzdGVkID0gbmV3IFJpdmV0c1ZpZXcoJGNvbnRhaW5lclswXSwgc2VsZi52aWV3Lm1vZGVscywgc2VsZi52aWV3Lm9wdGlvbnMpO1xuICAgICAgICBzZWxmLmN1c3RvbURhdGEubmVzdGVkLmJpbmQoKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBwcmVmZXRjaC5pbml0KCk7XG4gICAgICBwamF4LnN0YXJ0KCR3cmFwcGVyKTtcbiAgICB9LCAwKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcblxuZXhwb3J0IHsgdmlld0JpbmRlciB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgUGpheCB9IGZyb20gJy4vUGpheCc7XG5cbi8qKlxuICogUHJlZmV0Y2hcbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLlByZWZldGNoXG4gKiBAdHlwZSB7b2JqZWN0fVxuICovXG5jbGFzcyBQcmVmZXRjaCB7XG5cbiAgLyoqIHNpbmdsZXRvbiBpbnN0YW5jZSAqL1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogUHJlZmV0Y2g7XG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgdXNlZCB0byBpZ25vcmUgcHJlZmV0Y2ggb24gbGlua3NcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlByZWZldGNoXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBwdWJsaWMgaWdub3JlQ2xhc3NMaW5rID0gJ25vLWJhcmJhLXByZWZldGNoJztcblxuICBwcml2YXRlIGRlYnVnID0gRGVidWcoJ1ByZWZldGNoJyk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gc2luZ2xldG9uIGluc3RhbmNlIG9mIFByZWZldGNoLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKFByZWZldGNoLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gUHJlZmV0Y2guaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgUHJlZmV0Y2guaW5zdGFuY2UgPSB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIGV2ZW50IGxpc3RlbmVyIG9uIG1vdXNlb3ZlciBhbmQgdG91Y2hzdGFydFxuICAgKiBmb3IgdGhlIHByZWZldGNoXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QcmVmZXRjaFxuICAgKi9cbiAgcHVibGljIGluaXQoYXV0b2JpbmRMaW5rcyA9IGZhbHNlKSB7XG4gICAgaWYgKCF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBXZSBkbyB0aGlzIHdpdGggcnYtcm91dGVcbiAgICBpZiAoYXV0b2JpbmRMaW5rcykge1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLm9uTGlua0VudGVyLmJpbmQodGhpcykpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkxpbmtFbnRlci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZm9yIHRoZSBtb3VzZWhvdmVyL3RvdWNoc3RhcnQsIHBsZWFzZSB1c2UgdGhlIHJ2LXJvdXRlIGJpbmRlciBpbnN0ZWFkXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QcmVmZXRjaFxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGV2dFxuICAgKi9cbiAgcHVibGljIG9uTGlua0VudGVyKGV2dDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50LCBudWxsPiwgdXJsPzogc3RyaW5nKSB7XG5cbiAgICBsZXQgZWwgPSAoZXZ0LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCk7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgd2hpbGUgKGVsICYmICFQamF4LmdldEhyZWYoZWwpKSB7XG4gICAgICAgIGVsID0gKGVsLnBhcmVudE5vZGUgYXMgSFRNTEFuY2hvckVsZW1lbnQpOyAvLyBUT0RPIHRlc3RtZVxuICAgICAgfVxuXG4gICAgICBpZiAoIWVsIHx8IGVsLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmlnbm9yZUNsYXNzTGluaykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSBQamF4LmdldEhyZWYoZWwpO1xuICAgIH1cblxuICAgIHRoaXMuZGVidWcoJ29uTGlua0VudGVyJywgdXJsKTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFVybCBpcyBub3QgZGVmaW5lZCwgeW91IGNhbid0IGNhY2hlIHRoZSBsaW5rIHdpdGhvdXQgdGhlIHVybC4gUGxlYXNlIG1ha2Ugc2h1cmUgeW91ciBlbGVtZW50IGhhcyB0aGUgaHJlZiBhdHRyaWJ1dGUgb3IgcGFzcyB0aGUgdXJsIGRpcmVjdGx5IHRvIHRoaXMgZnVuY3Rpb24uYCk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGxpbmsgaXMgZWxlZ2libGUgZm9yIFBqYXhcbiAgICBpZiAodXJsICYmIFBqYXgucHJldmVudENoZWNrKGV2dCwgZWwpICYmICFQamF4LmNhY2hlLmdldCh1cmwpKSB7XG4gICAgICBjb25zdCB4aHIgPSBVdGlscy54aHIodXJsKTtcbiAgICAgIFBqYXguY2FjaGUuc2V0KHVybCwgeGhyKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgUHJlZmV0Y2ggfTtcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbi8qKlxuICogT2JqZWN0IHRoYXQgaXMgZ29pbmcgdG8gZGVhbCB3aXRoIERPTSBwYXJzaW5nL21hbmlwdWxhdGlvblxuICpcbiAqIEBuYW1lc3BhY2UgQmFyYmEuUGpheC5Eb21cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNsYXNzIERvbSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgb24gdGhlIGNvbnRhaW5lclxuICAgKlxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIGRhdGFOYW1lc3BhY2UgPSAnbmFtZXNwYWNlJztcblxuICAvKipcbiAgICogQ2xhc3MgbmFtZSB1c2VkIHRvIGlkZW50aWZ5IHRoZSBjb250YWluZXJzXG4gICAqXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBwdWJsaWMgY29udGFpbmVyU2VsZWN0b3IgPSAnLnJ2LXZpZXctY29udGFpbmVyJztcblxuICAvKipcbiAgICogRnVsbCBIVE1MIFN0cmluZyBvZiB0aGUgY3VycmVudCBwYWdlLlxuICAgKiBCeSBkZWZhdWx0IGlzIHRoZSBpbm5lckhUTUwgb2YgdGhlIGluaXRpYWwgbG9hZGVkIHBhZ2UuXG4gICAqXG4gICAqIEVhY2ggdGltZSBhIG5ldyBwYWdlIGlzIGxvYWRlZCwgdGhlIHZhbHVlIGlzIHRoZSByZXNwb25zZSBvZiB0aGUgeGhyIGNhbGwuXG4gICAqXG4gICAqL1xuICBwdWJsaWMgY3VycmVudEhUTUw/OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfJHdyYXBwZXI6IEpRdWVyeTxIVE1MRWxlbWVudD47XG5cbiAgY29uc3RydWN0b3IoJHdyYXBwZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcbiAgICB0aGlzLl8kd3JhcHBlciA9ICR3cmFwcGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZXNwb25zZVRleHQgb2J0YWluZWQgZnJvbSB0aGUgeGhyIGNhbGxcbiAgICovXG4gIHB1YmxpYyBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlVGV4dDogc3RyaW5nKTogSlF1ZXJ5PEhUTUxFbGVtZW50PiB7XG4gICAgdGhpcy5jdXJyZW50SFRNTCA9IHJlc3BvbnNlVGV4dDtcbiAgICBjb25zdCAkbmV3UGFnZSA9ICQoICQucGFyc2VIVE1MKHJlc3BvbnNlVGV4dCkgKTtcbiAgICBjb25zdCAkdGl0bGUgPSAkbmV3UGFnZS5maWx0ZXIoJ3RpdGxlJyk7XG4gICAgaWYgKCR0aXRsZS5sZW5ndGgpIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gJHRpdGxlLnRleHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29udGFpbmVyKCgkbmV3UGFnZSBhcyBhbnkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1haW4gYmFyYmEgd3JhcHBlciBieSB0aGUgSUQgYHdyYXBwZXJJZGBcbiAgICovXG4gIHB1YmxpYyBnZXRXcmFwcGVyKCk6IEpRdWVyeTxIVE1MRWxlbWVudD4ge1xuICAgIHJldHVybiB0aGlzLl8kd3JhcHBlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbnRhaW5lciBvbiB0aGUgY3VycmVudCBET00sXG4gICAqIG9yIGZyb20gYW4gSFRNTEVsZW1lbnQgcGFzc2VkIHZpYSBhcmd1bWVudFxuICAgKi9cbiAgcHVibGljIGdldENvbnRhaW5lcigkbmV3UGFnZT86IEpRdWVyeTxIVE1MRWxlbWVudD4pOiBKUXVlcnk8SFRNTEVsZW1lbnQ+IHtcbiAgICBpZiAoISRuZXdQYWdlKSB7XG4gICAgICAkbmV3UGFnZSA9ICQoZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICAgIGlmICghJG5ld1BhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0RPTV0gRE9NIG5vdCByZWFkeSEnKTtcbiAgICB9XG4gICAgY29uc3QgJGNvbnRhaW5lciA9IHRoaXMucGFyc2VDb250YWluZXIoJG5ld1BhZ2UpO1xuICAgIGlmICghJGNvbnRhaW5lcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdbRE9NXSBObyBjb250YWluZXIgZm91bmQnKTtcbiAgICB9XG4gICAgcmV0dXJuICRjb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgcHVibGljIGdldE5hbWVzcGFjZSgkZWxlbWVudDogSlF1ZXJ5PEhUTUxFbGVtZW50Pik6IHN0cmluZyB7XG4gICAgaWYgKCRlbGVtZW50ICYmICRlbGVtZW50LmRhdGEoKSkge1xuICAgICAgcmV0dXJuICRlbGVtZW50LmRhdGEoJ25hbWVzcGFjZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tET01dIE1pc3NpbmcgZGF0YS1uYW1lc3BhY2UgYXR0cmlidXRlJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFB1dCB0aGUgY29udGFpbmVyIG9uIHRoZSBwYWdlXG4gICAqL1xuICBwdWJsaWMgcHV0Q29udGFpbmVyKCRlbGVtZW50OiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSB7XG4gICAgJGVsZW1lbnQuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgIGNvbnN0ICR3cmFwcGVyID0gdGhpcy5nZXRXcmFwcGVyKCk7XG4gICAgJHdyYXBwZXIuYXBwZW5kKCRlbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY29udGFpbmVyIHNlbGVjdG9yXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4LkRvbVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKi9cbiAgcHVibGljIHBhcnNlQ29udGFpbmVyKCRuZXdQYWdlOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KTogSlF1ZXJ5PEhUTUxFbGVtZW50PiB7XG4gICAgY29uc3QgJGNvbnRhaW5lciA9ICRuZXdQYWdlLmZpbmQodGhpcy5jb250YWluZXJTZWxlY3Rvcik7XG4gICAgaWYgKCEkY29udGFpbmVyLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBjb250YWluZXIgd2l0aCBzZWxlY3RvciBcIiR7dGhpcy5jb250YWluZXJTZWxlY3Rvcn1cIiBmb3VuZCFgKTtcbiAgICB9XG4gICAgcmV0dXJuICRjb250YWluZXI7XG4gIH1cbn1cblxuZXhwb3J0IHsgRG9tIH07XG4iLCJleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG4gIHVybDogc3RyaW5nO1xuICBuYW1lc3BhY2U/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogSGlzdG9yeU1hbmFnZXIgaGVscHMgdG8ga2VlcCB0cmFjayBvZiB0aGUgbmF2aWdhdGlvblxuICpcbiAqIEBuYW1lc3BhY2UgQmFyYmEuSGlzdG9yeU1hbmFnZXJcbiAqIEB0eXBlIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBjbGFzcyBIaXN0b3J5TWFuYWdlciB7XG5cbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEhpc3RvcnlNYW5hZ2VyO1xuXG4gIC8qKlxuICAgKiBLZWVwIHRyYWNrIG9mIHRoZSBzdGF0dXMgaW4gaGlzdG9yaWMgb3JkZXJcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkhpc3RvcnlNYW5hZ2VyXG4gICAqIEByZWFkT25seVxuICAgKiBAdHlwZSB7QXJyYXl9XG4gICAqL1xuICBwcml2YXRlIGhpc3Rvcnk6IElTdGF0ZVtdID0gbmV3IEFycmF5KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKEhpc3RvcnlNYW5hZ2VyLmluc3RhbmNlKSB7XG4gICAgICByZXR1cm4gSGlzdG9yeU1hbmFnZXIuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgSGlzdG9yeU1hbmFnZXIuaW5zdGFuY2UgPSB0aGlzO1xuICAgIHJldHVybiBIaXN0b3J5TWFuYWdlci5pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgc3RhdHVzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5IaXN0b3J5TWFuYWdlclxuICAgKiBAcmV0dXJuIHtJU3RhdGV9XG4gICAqL1xuICBwdWJsaWMgY3VycmVudFN0YXR1cygpOiBJU3RhdGUge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcHJldmlvdXMgc3RhdHVzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5IaXN0b3J5TWFuYWdlclxuICAgKiBAcmV0dXJuIHtJU3RhdGV9XG4gICAqL1xuICBwdWJsaWMgcHJldlN0YXR1cygpOiBJU3RhdGUgfCBudWxsIHtcbiAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5oaXN0b3J5O1xuXG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhpc3RvcnlbaGlzdG9yeS5sZW5ndGggLSAyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgc2V0IG9mIHVybCBhbmQgbmFtZXNwYWNlXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5IaXN0b3J5TWFuYWdlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAgICovXG4gIHB1YmxpYyBhZGQodXJsOiBzdHJpbmcsIG5hbWVzcGFjZT86IHN0cmluZykge1xuXG4gICAgaWYgKCFuYW1lc3BhY2UpIHtcbiAgICAgIG5hbWVzcGFjZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB0aGlzLmhpc3RvcnkucHVzaCh7XG4gICAgICBuYW1lc3BhY2UsXG4gICAgICB1cmwsXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdsb2JhbEV2ZW50IH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFsLWV2ZW50JztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgSVN0YXRlIH0gZnJvbSAnLi9QamF4L1BqYXgnO1xuXG4vKipcbiAqIEJhc2VWaWV3IHRvIGJlIGV4dGVuZGVkXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5CYXNlVmlld1xuICogQHR5cGUge09iamVjdH1cbiAqL1xuYWJzdHJhY3QgY2xhc3MgQmFzZVZpZXcge1xuICAvKipcbiAgICogTmFtZXNwYWNlIG9mIHRoZSB2aWV3LlxuICAgKiAobmVlZCB0byBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGEtbmFtZXNwYWNlIG9mIHRoZSBjb250YWluZXIpXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgcHJvdGVjdGVkIG5hbWVzcGFjZT86IHN0cmluZztcblxuICBwcm90ZWN0ZWQgJGNvbnRhaW5lcj86IEpRdWVyeTxIVE1MRWxlbWVudD47XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IEdsb2JhbEV2ZW50KCk7XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBleHRlbmQgdGhlIG9iamVjdFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVZpZXdcbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXdPYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fSBuZXdJbmhlcml0T2JqZWN0XG4gICAqL1xuICBwdWJsaWMgZXh0ZW5kKG9iajogb2JqZWN0KSB7XG4gICAgcmV0dXJuIFV0aWxzLmV4dGVuZChmYWxzZSwgdGhpcywgb2JqKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0IHRoZSB2aWV3LlxuICAgKiBQLlMuIElzIHN1Z2dlc3RlZCB0byBpbml0IHRoZSB2aWV3IGJlZm9yZSBzdGFydGluZyBCYXJiYS5QamF4LnN0YXJ0KCksXG4gICAqIGluIHRoaXMgd2F5IC5vbkVudGVyKCkgYW5kIC5vbkVudGVyQ29tcGxldGVkKCkgd2lsbCBiZSBmaXJlZCBmb3IgdGhlIGN1cnJlbnRcbiAgICogY29udGFpbmVyIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVZpZXdcbiAgICovXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLm9uKCdpbml0U3RhdGVDaGFuZ2UnLCAobmV3U3RhdHVzOiBJU3RhdGUsIG9sZFN0YXR1czogSVN0YXRlKSA9PiB7XG4gICAgICBpZiAob2xkU3RhdHVzICYmIG9sZFN0YXR1cy5uYW1lc3BhY2UgPT09IHNlbGYubmFtZXNwYWNlKSB7XG4gICAgICAgIHNlbGYub25MZWF2ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLm9uKCduZXdQYWdlUmVhZHknLCAobmV3U3RhdHVzOiBJU3RhdGUsIG9sZFN0YXR1czogSVN0YXRlLCAkY29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBodG1sOiBzdHJpbmcsIGlzSW5pdDogYm9vbGVhbikgPT4ge1xuICAgICAgc2VsZi4kY29udGFpbmVyID0gJGNvbnRhaW5lcjtcbiAgICAgIGlmIChuZXdTdGF0dXMubmFtZXNwYWNlID09PSBzZWxmLm5hbWVzcGFjZSkge1xuICAgICAgICBzZWxmLm9uRW50ZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbigndHJhbnNpdGlvbkNvbXBsZXRlZCcsIChuZXdTdGF0dXM6IElTdGF0ZSwgb2xkU3RhdHVzOiBJU3RhdGUpID0+IHtcbiAgICAgIGlmIChuZXdTdGF0dXMubmFtZXNwYWNlID09PSBzZWxmLm5hbWVzcGFjZSkge1xuICAgICAgICBzZWxmLm9uRW50ZXJDb21wbGV0ZWQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9sZFN0YXR1cyAmJiBvbGRTdGF0dXMubmFtZXNwYWNlID09PSBzZWxmLm5hbWVzcGFjZSkge1xuICAgICAgICBzZWxmLm9uTGVhdmVDb21wbGV0ZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gLyoqXG4gICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIGNvbnRhaW5lclxuICAqIGlzIHJlYWR5IGFuZCBhdHRhY2hlZCB0byB0aGUgRE9NLlxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICogQGFic3RyYWN0XG4gICovXG4gcHJvdGVjdGVkIGFic3RyYWN0IG9uRW50ZXIoKTogYW55O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvblxuICAgKiB0byB0aGlzIGNvbnRhaW5lciBoYXMganVzdCBmaW5pc2hlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG9uRW50ZXJDb21wbGV0ZWQoKTogYW55O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvblxuICAgKiB0byBhIG5ldyBjb250YWluZXIgaGFzIGp1c3Qgc3RhcnRlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgcHJvdGVjdGVkIGFic3RyYWN0IG9uTGVhdmUoKTogYW55O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgY29udGFpbmVyXG4gICAqIGhhcyBqdXN0IGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkxlYXZlQ29tcGxldGVkKCk6IGFueTtcbn1cblxuZXhwb3J0IHsgQmFzZVZpZXcgfTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgSVRyYW5zaXRpb24gfSBmcm9tICcuL0Jhc2VUcmFuc2l0aW9uJztcblxuLyoqXG4gKiBCYXNpYyBUcmFuc2l0aW9uIG9iamVjdCwgd2FpdCBmb3IgdGhlIG5ldyBDb250YWluZXIgdG8gYmUgcmVhZHksXG4gKiBzY3JvbGwgdG9wLCBhbmQgZmluaXNoIHRoZSB0cmFuc2l0aW9uIChyZW1vdmluZyB0aGUgb2xkIGNvbnRhaW5lciBhbmQgZGlzcGxheWluZyB0aGUgbmV3IG9uZSlcbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWVzcGFjZSBCYXJiYS5IaWRlU2hvd1RyYW5zaXRpb25cbiAqIEBhdWdtZW50cyBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICovXG5jbGFzcyBIaWRlU2hvd1RyYW5zaXRpb24gZXh0ZW5kcyBCYXNlVHJhbnNpdGlvbiBpbXBsZW1lbnRzIElUcmFuc2l0aW9uIHtcblxuICBwcm90ZWN0ZWQgZGVidWcgPSBEZWJ1ZygnYmFyYmE6SGlkZVNob3dUcmFuc2l0aW9uJyk7XG5cbiAgcHVibGljIHN0YXJ0KCkge1xuICAgIGlmICghdGhpcy5uZXdDb250YWluZXJMb2FkaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoaXMubmV3Q29udGFpbmVyTG9hZGluZyBpcyBub3Qgc2V0Jyk7XG4gICAgfVxuICAgIHRoaXMubmV3Q29udGFpbmVyTG9hZGluZy50aGVuKHRoaXMuZmluaXNoLmJpbmQodGhpcykpO1xuICB9XG5cbiAgcHVibGljIGZpbmlzaCgpIHtcbiAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgdGhpcy5kb25lKCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSGlkZVNob3dUcmFuc2l0aW9uIH07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscyc7XG5pbXBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgSVRyYW5zaXRpb24gfSBmcm9tICcuL0Jhc2VUcmFuc2l0aW9uJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBCYXNpYyBUcmFuc2l0aW9uIG9iamVjdCwgd2FpdCBmb3IgdGhlIG5ldyBDb250YWluZXIgdG8gYmUgcmVhZHksXG4gKiBzY3JvbGwgdG9wLCBhbmQgZmluaXNoIHRoZSB0cmFuc2l0aW9uIChyZW1vdmluZyB0aGUgb2xkIGNvbnRhaW5lciBhbmQgZGlzcGxheWluZyB0aGUgbmV3IG9uZSlcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBDdXN0b21UcmFuc2l0aW9uIGV4dGVuZHMgQmFzZVRyYW5zaXRpb24gaW1wbGVtZW50cyBJVHJhbnNpdGlvbiB7XG5cbiAgcHJvdGVjdGVkIGRlYnVnID0gRGVidWcoJ3JpdmV0czpDdXN0b21UcmFuc2l0aW9uJyk7XG5cbiAgcHVibGljIGluaXQoJG9sZENvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgbmV3Q29udGFpbmVyOiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICB0aGlzLiRvbGRDb250YWluZXIgPSAkb2xkQ29udGFpbmVyO1xuICAgIHRoaXMuZGVidWcoJ2luaXQnKTtcblxuICAgIHRoaXMuZGVmZXJyZWQgPSBVdGlscy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IG5ld0NvbnRhaW5lclJlYWR5ID0gVXRpbHMuZGVmZXJyZWQoKTtcbiAgICB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgPSBuZXdDb250YWluZXJSZWFkeS5wcm9taXNlO1xuXG4gICAgdGhpcy5zdGFydCgpO1xuXG4gICAgbmV3Q29udGFpbmVyLnRoZW4oKCRuZXdDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pID0+IHtcbiAgICAgIHNlbGYuJG5ld0NvbnRhaW5lciA9ICRuZXdDb250YWluZXI7XG4gICAgICBuZXdDb250YWluZXJSZWFkeS5yZXNvbHZlKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5kZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0KCkge1xuICAgIHRoaXMuZGVidWcoJ0N1c3RvbVRyYW5zaXRpb24gc3RhcnQnKTtcbiAgICBpZiAoIXRoaXMubmV3Q29udGFpbmVyTG9hZGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcgaXMgbm90IHNldCcpO1xuICAgIH1cbiAgICB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcudGhlbih0aGlzLmZpbmlzaC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBmaW5pc2goJGNvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50Pikge1xuICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gMDtcbiAgICAvLyB0aGlzLnZpZXcgPSBSaXZldHMuYmluZCh0aGlzLiRuZXdDb250YWluZXIsIHdpbmRvdy5tb2RlbCk7XG4gICAgdGhpcy5kZWJ1ZygnQ3VzdG9tVHJhbnNpdGlvbiBmaW5pc2gnKTtcbiAgICB0aGlzLmRvbmUoKTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEN1c3RvbVRyYW5zaXRpb24gfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vQ2FjaGUnO1xuZXhwb3J0ICogZnJvbSAnLi9UcmFuc2l0aW9uL1RyYW5zaXRpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9WaWV3JztcbmV4cG9ydCAqIGZyb20gJy4vUGpheC9QamF4JztcbmV4cG9ydCAqIGZyb20gJy4uLy4uLy4uL2dsb2JhbC1ldmVudCc7XG4iLCJpbXBvcnQgeyBQamF4LCBQcmVmZXRjaCwgR2xvYmFsRXZlbnQgfSBmcm9tICcuL2JhcmJhL2JhcmJhJztcbmltcG9ydCB7IElCaW5kZXJzIH0gZnJvbSAnLi4vLi4vYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgdmlld0JpbmRlciB9IGZyb20gJy4vdmlldy5iaW5kZXInO1xuaW1wb3J0IHsgcm91dGVCaW5kZXIgfSBmcm9tICcuL3JvdXRlLmJpbmRlcic7XG5cbi8vIFRPRE8gbWFrZSB0byBzaW5nbGV0b25cbmNvbnN0IGRpc3BhdGNoZXIgPSBuZXcgR2xvYmFsRXZlbnQoKTtcbmNvbnN0IHBqYXggPSBuZXcgUGpheCgpO1xuY29uc3QgcHJlZmV0Y2ggPSBuZXcgUHJlZmV0Y2goKTtcblxuY29uc3Qgcm91dGVyQmluZGVyczogSUJpbmRlcnM8YW55PiA9IHt9O1xuXG5jb25zdCB2aWV3QmluZGVyV3JhcHBlciA9IHZpZXdCaW5kZXIoZGlzcGF0Y2hlciwgcGpheCwgcHJlZmV0Y2gpO1xuY29uc3Qgcm91dGVCaW5kZXJXcmFwcGVyID0gcm91dGVCaW5kZXIoZGlzcGF0Y2hlciwgcGpheCwgcHJlZmV0Y2gpO1xuXG5yb3V0ZXJCaW5kZXJzW3ZpZXdCaW5kZXJXcmFwcGVyLm5hbWVdID0gdmlld0JpbmRlcldyYXBwZXIuYmluZGVyO1xucm91dGVyQmluZGVyc1tyb3V0ZUJpbmRlcldyYXBwZXIubmFtZV0gPSByb3V0ZUJpbmRlcldyYXBwZXIuYmluZGVyO1xuXG5leHBvcnQgeyBQamF4LCBQcmVmZXRjaCwgR2xvYmFsRXZlbnQsIHJvdXRlckJpbmRlcnMgfTtcbiIsImV4cG9ydCAqIGZyb20gJy4vYmluZGVycy9yb3V0ZXIvcm91dGVyLmJpbmRlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9iaW5kZXJzL2Jhc2ljL2Jhc2ljLmJpbmRlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi9mb3JtYXR0ZXJzL2luZGV4JztcbmV4cG9ydCAqIGZyb20gJy4vYWRhcHRlcic7XG5leHBvcnQgKiBmcm9tICcuL2JpbmRlci5zZXJ2aWNlJztcbmV4cG9ydCAqIGZyb20gJy4vYmluZGluZyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbXBvbmVudC1iaW5kaW5nJztcbmV4cG9ydCAqIGZyb20gJy4vY29tcG9uZW50LnNlcnZpY2UnO1xuZXhwb3J0ICogZnJvbSAnLi9mb3JtYXR0ZXIuc2VydmljZSc7XG5leHBvcnQgKiBmcm9tICcuL3BhcnNlcnMnO1xuZXhwb3J0ICogZnJvbSAnLi90aW55YmluZCc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vdmlldyc7XG5leHBvcnQgKiBmcm9tICcuL3dlYmNvbXBvbmVudCc7IC8vIGRpc2FibGVkIGFzIGxvbmcgYXMgdGhpcyBpcyBub3Qgd29ydGtpbmcgb24gSUUgMTFcbiIsIi8qIVxuICogalF1ZXJ5IE1vYmlsZSBFdmVudHNcbiAqIGJ5IEJlbiBNYWpvclxuICogaHR0cHM6Ly9naXRodWIuY29tL2Jlbm1ham9yL2pRdWVyeS1Ub3VjaC1FdmVudHNcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE3LCBCZW4gTWFqb3JcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZTpcbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqIFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgICQuYXR0ckZuID0gJC5hdHRyRm4gfHwge307XG5cbiAgICB2YXIgdG91Y2hDYXBhYmxlICA9ICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cpLFxuXHRcbiAgICAgICAgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICB0YXBfcGl4ZWxfcmFuZ2U6IDUsXG4gICAgICAgICAgICBzd2lwZV9oX3RocmVzaG9sZDogNTAsXG4gICAgICAgICAgICBzd2lwZV92X3RocmVzaG9sZDogNTAsXG4gICAgICAgICAgICB0YXBob2xkX3RocmVzaG9sZDogNzUwLFxuICAgICAgICAgICAgZG91YmxldGFwX2ludDogNTAwLFxuXHRcdFx0c2hha2VfdGhyZXNob2xkOiAxNSxcblxuICAgICAgICAgICAgdG91Y2hfY2FwYWJsZTogdG91Y2hDYXBhYmxlLFxuICAgICAgICAgICAgb3JpZW50YXRpb25fc3VwcG9ydDogKCdvcmllbnRhdGlvbicgaW4gd2luZG93ICYmICdvbm9yaWVudGF0aW9uY2hhbmdlJyBpbiB3aW5kb3cpLFxuXG4gICAgICAgICAgICBzdGFydGV2ZW50OiAgKHRvdWNoQ2FwYWJsZSkgPyAndG91Y2hzdGFydCcgOiAnbW91c2Vkb3duJyxcbiAgICAgICAgICAgIGVuZGV2ZW50OiAgICAodG91Y2hDYXBhYmxlKSA/ICd0b3VjaGVuZCcgOiAnbW91c2V1cCcsXG4gICAgICAgICAgICBtb3ZlZXZlbnQ6ICAgKHRvdWNoQ2FwYWJsZSkgPyAndG91Y2htb3ZlJyA6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdGFwZXZlbnQ6ICAgICh0b3VjaENhcGFibGUpID8gJ3RhcCcgOiAnY2xpY2snLFxuICAgICAgICAgICAgc2Nyb2xsZXZlbnQ6ICh0b3VjaENhcGFibGUpID8gJ3RvdWNobW92ZScgOiAnc2Nyb2xsJyxcblxuICAgICAgICAgICAgaG9sZF90aW1lcjogbnVsbCxcbiAgICAgICAgICAgIHRhcF90aW1lcjogbnVsbFxuICAgICAgICB9O1xuICAgIFxuXHQvLyBEZWNsYXJlIHRvdWNoIG5hbWVzcGFjZTpcblx0JC50b3VjaCA9IHsgfTtcblx0XG4gICAgLy8gQ29udmVuaWVuY2UgZnVuY3Rpb25zOlxuICAgICQuaXNUb3VjaENhcGFibGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNldHRpbmdzLnRvdWNoX2NhcGFibGU7IH07XG4gICAgJC5nZXRTdGFydEV2ZW50ICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dGluZ3Muc3RhcnRldmVudDsgICAgfTtcbiAgICAkLmdldEVuZEV2ZW50ICAgID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZXR0aW5ncy5lbmRldmVudDsgICAgICB9O1xuICAgICQuZ2V0TW92ZUV2ZW50ICAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNldHRpbmdzLm1vdmVldmVudDsgICAgIH07XG4gICAgJC5nZXRUYXBFdmVudCAgICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2V0dGluZ3MudGFwZXZlbnQ7ICAgICAgfTtcbiAgICAkLmdldFNjcm9sbEV2ZW50ID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZXR0aW5ncy5zY3JvbGxldmVudDsgICB9O1xuICAgIFxuXHQvLyBTRVRURVJTOlxuXHQvLyBTZXQgdGhlIFggdGhyZXNob2xkIG9mIHN3aXBlIGV2ZW50czpcblx0JC50b3VjaC5zZXRTd2lwZVRocmVzaG9sZFggPSBmdW5jdGlvbiggdGhyZXNob2xkICkge1xuXHRcdGlmKCB0eXBlb2YgdGhyZXNob2xkICE9PSAnbnVtYmVyJyApIHsgdGhyb3cgbmV3IEVycm9yKCdUaHJlc2hvbGQgcGFyYW1ldGVyIG11c3QgYmUgYSB0eXBlIG9mIG51bWJlcicpOyB9XG5cdFx0c2V0dGluZ3Muc3dpcGVfaF90aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG5cdH07XG5cdFxuXHQvLyBTZXQgdGhlIFkgdGhyZXNob2xkIG9mIHN3aXBlIGV2ZW50czpcblx0JC50b3VjaC5zZXRTd2lwZVRocmVzaG9sZFkgPSBmdW5jdGlvbiggdGhyZXNob2xkICkge1xuXHRcdGlmKCB0eXBlb2YgdGhyZXNob2xkICE9PSAnbnVtYmVyJyApIHsgdGhyb3cgbmV3IEVycm9yKCdUaHJlc2hvbGQgcGFyYW1ldGVyIG11c3QgYmUgYSB0eXBlIG9mIG51bWJlcicpOyB9XG5cdFx0c2V0dGluZ3Muc3dpcGVfdl90aHJlc2hvbGQgPSB0aHJlc2hvbGQ7XG5cdH07XG5cdFxuXHQvLyBTZXQgdGhlIGRvdWJsZSB0YXAgaW50ZXJ2YWw6XG5cdCQudG91Y2guc2V0RG91YmxlVGFwSW50ICAgID0gZnVuY3Rpb24oIGludGVydmFsICkge1xuXHRcdGlmKCB0eXBlb2YgaW50ZXJ2YWwgIT09ICdudW1iZXInICkgeyB0aHJvdyBuZXcgRXJyb3IoJ0ludGVydmFsIHBhcmFtZXRlciBtdXN0IGJlIGEgdHlwZSBvZiBudW1iZXInKTsgfVxuXHRcdHNldHRpbmdzLmRvdWJsZXRhcF9pbnQgPSBpbnRlcnZhbDtcblx0fTtcblx0XG5cdC8vIFNldCB0aGUgdGFwaG9sZCB0aHJlc2hvbGQ6XG5cdCQudG91Y2guc2V0VGFwSG9sZFRocmVzaG9sZCA9IGZ1bmN0aW9uKCB0aHJlc2hvbGQgKSB7XG5cdFx0aWYoIHR5cGVvZiB0aHJlc2hvbGQgIT09ICdudW1iZXInICkgeyB0aHJvdyBuZXcgRXJyb3IoJ1RocmVzaG9sZCBwYXJhbWV0ZXIgbXVzdCBiZSBhIHR5cGUgb2YgbnVtYmVyJyk7IH1cblx0XHRzZXR0aW5ncy50YXBob2xkX3RocmVzaG9sZCA9IHRocmVzaG9sZDtcblx0fTtcblx0XG5cdC8vIFNldCB0aGUgcGl4ZWwgcmFuZ2UgZm9yIHRhcGFzOlxuXHQkLnRvdWNoLnNldFRhcFJhbmdlID0gZnVuY3Rpb24oIHJhbmdlICkge1xuXHRcdGlmKCB0eXBlb2YgcmFuZ2UgIT09ICdudW1iZXInICkgeyB0aHJvdyBuZXcgRXJyb3IoJ1JhbmdlciBwYXJhbWV0ZXIgbXVzdCBiZSBhIHR5cGUgb2YgbnVtYmVyJyk7IH1cblx0XHRzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UgPSB0aHJlc2hvbGQ7XG5cdH07XG5cdFxuICAgIC8vIEFkZCBFdmVudCBzaG9ydGN1dHM6XG4gICAgJC5lYWNoKFsndGFwc3RhcnQnLCAndGFwZW5kJywgJ3RhcG1vdmUnLCAndGFwJywgJ3NpbmdsZXRhcCcsICdkb3VibGV0YXAnLCAndGFwaG9sZCcsICdzd2lwZScsICdzd2lwZXVwJywgJ3N3aXBlcmlnaHQnLCAnc3dpcGVkb3duJywgJ3N3aXBlbGVmdCcsICdzd2lwZWVuZCcsICdzY3JvbGxzdGFydCcsICdzY3JvbGxlbmQnLCAnb3JpZW50YXRpb25jaGFuZ2UnLCAndGFwMicsICd0YXBob2xkMiddLCBmdW5jdGlvbiAoaSwgbmFtZSkge1xuICAgICAgICAkLmZuW25hbWVdID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4gPyB0aGlzLm9uKG5hbWUsIGZuKSA6IHRoaXMudHJpZ2dlcihuYW1lKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkLmF0dHJGbltuYW1lXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyB0YXBzdGFydCBFdmVudDpcbiAgICAkLmV2ZW50LnNwZWNpYWwudGFwc3RhcnQgPSB7XG4gICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFxuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KTtcbiAgICAgICAgXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5zdGFydGV2ZW50LCBmdW5jdGlvbiB0YXBTdGFydEZ1bmMoZSkge1xuICAgICAgICBcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUnLCB0YXBTdGFydEZ1bmMpO1xuICAgICAgICAgICAgICAgIGlmIChlLndoaWNoICYmIGUud2hpY2ggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHRvdWNoRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6ICgoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQodGhpc09iamVjdCwgJ3RhcHN0YXJ0JywgZSwgdG91Y2hEYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gdGFwbW92ZSBFdmVudDpcbiAgICAkLmV2ZW50LnNwZWNpYWwudGFwbW92ZSA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5tb3ZlZXZlbnQsIGZ1bmN0aW9uIHRhcE1vdmVGdW5jKGUpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUnLCB0YXBNb3ZlRnVuYyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50LFxuICAgICAgICAgICAgICAgICAgICB0b3VjaERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAndGFwbW92ZScsIGUsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLm1vdmVldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gdGFwZW5kIEV2ZW50OlxuICAgICQuZXZlbnQuc3BlY2lhbC50YXBlbmQgPSB7XG4gICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpO1xuXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5lbmRldmVudCwgZnVuY3Rpb24gdGFwRW5kRnVuYyhlKSB7XG4gICAgICAgICAgICAgICAgLy8gVG91Y2ggZXZlbnQgZGF0YTpcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUnLCB0YXBFbmRGdW5jKTtcblxuICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICd0aW1lJzogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQodGhpc09iamVjdCwgJ3RhcGVuZCcsIGUsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gdGFwaG9sZCBFdmVudDpcbiAgICAkLmV2ZW50LnNwZWNpYWwudGFwaG9sZCA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCksXG4gICAgICAgICAgICAgICAgb3JpZ1RhcmdldCxcbiAgICAgICAgICAgICAgICBzdGFydF9wb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuZF94ID0gMCxcbiAgICAgICAgICAgICAgICBlbmRfeSA9IDA7XG5cbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHRhcEhvbGRGdW5jMShlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUud2hpY2ggJiYgZS53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgndGFwaGVsZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydF90aW1lID0gRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE9mZnNldCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VYIC0gb3JpZ0V2ZW50LnRvdWNoZXNbMF0udGFyZ2V0Lm9mZnNldExlZnQgOiBlLm9mZnNldFgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWSAtIG9yaWdFdmVudC50b3VjaGVzWzBdLnRhcmdldC5vZmZzZXRUb3AgOiBlLm9mZnNldFlcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnRfcG9zLnggPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICBzdGFydF9wb3MueSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICAgICAgICAgICAgICAgICAgZW5kX3ggPSBzdGFydF9wb3MueDtcbiAgICAgICAgICAgICAgICAgICAgZW5kX3kgPSBzdGFydF9wb3MueTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgZWxlbWVudCdzIHRocmVzaG9sZDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZV90aHJlc2hvbGQgPSAoJHRoaXMucGFyZW50KCkuZGF0YSgndGhyZXNob2xkJykpID8gJHRoaXMucGFyZW50KCkuZGF0YSgndGhyZXNob2xkJykgOiAkdGhpcy5kYXRhKCd0aHJlc2hvbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9ICh0eXBlb2YgZWxlX3RocmVzaG9sZCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlX3RocmVzaG9sZCAhPT0gZmFsc2UgJiYgcGFyc2VJbnQoZWxlX3RocmVzaG9sZCkpID8gcGFyc2VJbnQoZWxlX3RocmVzaG9sZCkgOiBzZXR0aW5ncy50YXBob2xkX3RocmVzaG9sZDsgXG5cbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuaG9sZF90aW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpZmZfeCA9IChzdGFydF9wb3MueCAtIGVuZF94KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmX3kgPSAoc3RhcnRfcG9zLnkgLSBlbmRfeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PSBvcmlnVGFyZ2V0ICYmICgoc3RhcnRfcG9zLnggPT0gZW5kX3ggJiYgc3RhcnRfcG9zLnkgPT0gZW5kX3kpIHx8IChkaWZmX3ggPj0gLShzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpICYmIGRpZmZfeCA8PSBzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UgJiYgZGlmZl95ID49IC0oc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSAmJiBkaWZmX3kgPD0gc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCd0YXBoZWxkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kX3RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiAgPSBlbmRfdGltZSAtIHN0YXJ0X3RpbWUsXG4gICAgICAgICAgICAgICAgdG91Y2hlcyAgID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzIDogWyBlIF0sXG4gICAgICAgICAgICAgICAgdG91Y2hEYXRhID0gWyBdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciggdmFyIGkgPSAwOyBpIDwgdG91Y2hlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIHRvdWNoID0ge1xuICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVkgOiBlLnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogZHVyYXRpb25cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRvdWNoRGF0YS5wdXNoKCB0b3VjaCApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgZXZ0X25hbWUgPSAoIHRvdWNoZXMubGVuZ3RoID09IDIgKSA/ICd0YXBob2xkMicgOiAndGFwaG9sZCc7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMScsIHRhcEhvbGRGdW5jMSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsIGV2dF9uYW1lLCBlLCB0b3VjaERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCB0aHJlc2hvbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiB0YXBIb2xkRnVuYzIoKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIHRhcEhvbGRGdW5jMik7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgndGFwaGVsZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHNldHRpbmdzLmhvbGRfdGltZXIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbihzZXR0aW5ncy5tb3ZlZXZlbnQsIGZ1bmN0aW9uIHRhcEhvbGRGdW5jMyhlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMycsIHRhcEhvbGRGdW5jMyk7XG4gICAgICAgIFxuICAgICAgICAgICAgICAgIGVuZF94ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgICAgICAgICBlbmRfeSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLnN0YXJ0ZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUxKS5vZmYoc2V0dGluZ3MuZW5kZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUyKS5vZmYoc2V0dGluZ3MubW92ZWV2ZW50LCAkKHRoaXMpLmRhdGEuY2FsbGVlMyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZG91YmxldGFwIEV2ZW50OlxuICAgICQuZXZlbnQuc3BlY2lhbC5kb3VibGV0YXAgPSB7XG4gICAgICAgIHNldHVwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhpc09iamVjdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgJHRoaXMgPSAkKHRoaXNPYmplY3QpLFxuICAgICAgICAgICAgICAgIG9yaWdUYXJnZXQsXG4gICAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICAgIGZpcnN0VGFwID0gbnVsbCxcbiAgICAgICAgICAgICAgICBvcmlnRXZlbnQsXG4gICAgICAgIGNvb2xvZmYsXG4gICAgICAgIGNvb2xpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc3RhcnRldmVudCwgZnVuY3Rpb24gZG91YmxlVGFwRnVuYzEoZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLndoaWNoICYmIGUud2hpY2ggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkb3VibGV0YXBwZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgb3JpZ1RhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCBkb3VibGVUYXBGdW5jMSk7XG5cbiAgICAgICAgICAgICAgICBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdFRhcCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdFRhcCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZWxlbWVudCc6IGUub3JpZ2luYWxFdmVudC5zcmNFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2luZGV4JzogICAkKGUudGFyZ2V0KS5pbmRleCgpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9KS5vbihzZXR0aW5ncy5lbmRldmVudCwgZnVuY3Rpb24gZG91YmxlVGFwRnVuYzIoZSkge1xuICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFRvdWNoID0gJHRoaXMuZGF0YSgnbGFzdFRvdWNoJykgfHwgbm93ICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgZGVsdGEgPSBub3cgLSBsYXN0VG91Y2g7XG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChhY3Rpb24pO1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTInLCBkb3VibGVUYXBGdW5jMik7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGVsdGEgPCBzZXR0aW5ncy5kb3VibGV0YXBfaW50ICYmICgkKGUudGFyZ2V0KS5pbmRleCgpID09IGZpcnN0VGFwLmluZGV4KSAmJiBkZWx0YSA+IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdkb3VibGV0YXBwZWQnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChzZXR0aW5ncy50YXBfdGltZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdyBnZXQgdGhlIGN1cnJlbnQgZXZlbnQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0VGFwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VsZW1lbnQnOiBlLm9yaWdpbmFsRXZlbnQuc3JjRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbmRleCc6ICQoZS50YXJnZXQpLmluZGV4KClcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0VGFwJzogZmlyc3RUYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Vjb25kVGFwJzogbGFzdFRhcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlcnZhbCc6IGxhc3RUYXAudGltZSAtIGZpcnN0VGFwLnRpbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvb2xpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJDdXN0b21FdmVudCh0aGlzT2JqZWN0LCAnZG91YmxldGFwJywgZSwgdG91Y2hEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29vbGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb29sb2ZmID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29vbGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5kb3VibGV0YXBfaW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2xhc3RUb3VjaCcsIG5vdyk7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0VGFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoYWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgc2V0dGluZ3MuZG91YmxldGFwX2ludCwgW2VdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnbGFzdFRvdWNoJywgbm93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLnN0YXJ0ZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUxKS5vZmYoc2V0dGluZ3MuZW5kZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzaW5nbGV0YXAgRXZlbnQ6XG4gICAgLy8gVGhpcyBpcyB1c2VkIGluIGNvbmp1Y3Rpb24gd2l0aCBkb3VibGV0YXAgd2hlbiBib3RoIGV2ZW50cyBhcmUgbmVlZGVkIG9uIHRoZSBzYW1lIGVsZW1lbnRcbiAgICAkLmV2ZW50LnNwZWNpYWwuc2luZ2xldGFwID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcbiAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0ID0gbnVsbCxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3BvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICR0aGlzLm9uKHNldHRpbmdzLnN0YXJ0ZXZlbnQsIGZ1bmN0aW9uIHNpbmdsZVRhcEZ1bmMxKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZS53aGljaCAmJiBlLndoaWNoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCBzaW5nbGVUYXBGdW5jMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBzdGFydCB4IGFuZCB5IHBvc2l0aW9uOlxuICAgICAgICAgICAgICAgICAgICBzdGFydF9wb3MueCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X3Bvcy55ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm9uKHNldHRpbmdzLmVuZGV2ZW50LCBmdW5jdGlvbiBzaW5nbGVUYXBGdW5jMihlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMicsIHNpbmdsZVRhcEZ1bmMyKTtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT0gb3JpZ1RhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBlbmQgcG9pbnQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRfcG9zX3ggPSAoZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRfcG9zX3kgPSAoZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIGl0IHdhcyBhIHRhcGhvbGQ6XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MudGFwX3RpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlmZl94ID0gKHN0YXJ0X3Bvcy54IC0gZW5kX3Bvc194KSwgZGlmZl95ID0gKHN0YXJ0X3Bvcy55IC0gZW5kX3Bvc195KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoISR0aGlzLmRhdGEoJ2RvdWJsZXRhcHBlZCcpICYmICEkdGhpcy5kYXRhKCd0YXBoZWxkJykgJiYgKCgoc3RhcnRfcG9zLnggPT0gZW5kX3Bvc194KSAmJiAoc3RhcnRfcG9zLnkgPT0gZW5kX3Bvc195KSkgfHwgKGRpZmZfeCA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl94IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSAmJiBkaWZmX3kgPj0gLShzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpICYmIGRpZmZfeSA8PSBzZXR0aW5ncy50YXBfcGl4ZWxfcmFuZ2UpKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdFdmVudCA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncG9zaXRpb24nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKSA6IE1hdGgucm91bmQoZS5wYWdlWSAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLnRvcCA6IDApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0YXJnZXQnOiBlLnRhcmdldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2FzIGl0IGEgdGFwaG9sZD9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigodG91Y2hEYXRhLnRpbWUgLSBzdGFydFRpbWUpIDwgc2V0dGluZ3MudGFwaG9sZF90aHJlc2hvbGQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQodGhpc09iamVjdCwgJ3NpbmdsZXRhcCcsIGUsIHRvdWNoRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBzZXR0aW5ncy5kb3VibGV0YXBfaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub2ZmKHNldHRpbmdzLnN0YXJ0ZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUxKS5vZmYoc2V0dGluZ3MuZW5kZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUyKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyB0YXAgRXZlbnQ6XG4gICAgJC5ldmVudC5zcGVjaWFsLnRhcCA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCksXG4gICAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9yaWdUYXJnZXQgPSBudWxsLFxuICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWUsXG4gICAgICAgICAgICAgICAgc3RhcnRfcG9zID0ge1xuICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzO1xuXG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5zdGFydGV2ZW50LCBmdW5jdGlvbiB0YXBGdW5jMShlKSB7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMScsIHRhcEZ1bmMxKTtcblxuICAgICAgICAgICAgICAgIGlmKCBlLndoaWNoICYmIGUud2hpY2ggIT09IDEgKVxuICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRfcG9zLnggPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICBzdGFydF9wb3MueSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X3RpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICBvcmlnVGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hlcyA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcyA6IFsgZSBdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS5vbihzZXR0aW5ncy5lbmRldmVudCwgZnVuY3Rpb24gdGFwRnVuYzIoZSkge1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTInLCB0YXBGdW5jMik7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IHRyaWdnZXIgaWYgdGhleSd2ZSBzdGFydGVkLCBhbmQgdGhlIHRhcmdldCBtYXRjaGVzOlxuICAgICAgICAgICAgICAgIHZhciBlbmRfeCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICBlbmRfeSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZLFxuICAgICAgICAgICAgICAgICAgICBkaWZmX3ggPSAoc3RhcnRfcG9zLnggLSBlbmRfeCksXG4gICAgICAgICAgICAgICAgICAgIGRpZmZfeSA9IChzdGFydF9wb3MueSAtIGVuZF95KSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnROYW1lO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKG9yaWdUYXJnZXQgPT0gZS50YXJnZXQgJiYgc3RhcnRlZCAmJiAoKERhdGUubm93KCkgLSBzdGFydF90aW1lKSA8IHNldHRpbmdzLnRhcGhvbGRfdGhyZXNob2xkKSAmJiAoKHN0YXJ0X3Bvcy54ID09IGVuZF94ICYmIHN0YXJ0X3Bvcy55ID09IGVuZF95KSB8fCAoZGlmZl94ID49IC0oc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlKSAmJiBkaWZmX3ggPD0gc2V0dGluZ3MudGFwX3BpeGVsX3JhbmdlICYmIGRpZmZfeSA+PSAtKHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkgJiYgZGlmZl95IDw9IHNldHRpbmdzLnRhcF9waXhlbF9yYW5nZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSBbIF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaSA9IDA7IGkgPCB0b3VjaGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2ggPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWCA6IGUucGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzW2ldLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaERhdGEucHVzaCggdG91Y2ggKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBldnRfbmFtZSA9ICggdG91Y2hlcy5sZW5ndGggPT0gMiApID8gJ3RhcDInIDogJ3RhcCc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsIGV2dF9uYW1lLCBlLCB0b3VjaERhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5lbmRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIHN3aXBlIEV2ZW50IChhbHNvIGhhbmRsZXMgc3dpcGV1cCwgc3dpcGVyaWdodCwgc3dpcGVkb3duIGFuZCBzd2lwZWxlZnQpOlxuICAgICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGlzT2JqZWN0ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkdGhpcyA9ICQodGhpc09iamVjdCksXG4gICAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIGhhc1N3aXBlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsQ29vcmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpbmFsQ29vcmQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0YXJ0RXZudDtcblxuICAgICAgICAgICAgLy8gU2NyZWVuIHRvdWNoZWQsIHN0b3JlIHRoZSBvcmlnaW5hbCBjb29yZGluYXRlXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvdWNoU3RhcnQoZSkge1xuICAgICAgICAgICAgICAgICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTEnLCB0b3VjaFN0YXJ0KTtcbiAgICAgICAgICAgICAgICBvcmlnaW5hbENvb3JkLnggPSAoZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXMpID8gZS5vcmlnaW5hbEV2ZW50LnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsQ29vcmQueSA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICAgICAgICAgICAgZmluYWxDb29yZC54ID0gb3JpZ2luYWxDb29yZC54O1xuICAgICAgICAgICAgICAgIGZpbmFsQ29vcmQueSA9IG9yaWdpbmFsQ29vcmQueTtcbiAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xuICAgICAgICAgICAgICAgIC8vIFJlYWQgZXZlbnQgZGF0YSBpbnRvIG91ciBzdGFydEV2dDpcbiAgICAgICAgICAgICAgICBzdGFydEV2bnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3knOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBvcmlnRXZlbnQudG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ29mZnNldCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdG9yZSBjb29yZGluYXRlcyBhcyBmaW5nZXIgaXMgc3dpcGluZ1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB0b3VjaE1vdmUoZSkge1xuICAgICAgICAgICAgICAgICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2NhbGxlZTInLCB0b3VjaE1vdmUpO1xuICAgICAgICAgICAgICAgIGZpbmFsQ29vcmQueCA9IChlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlcykgPyBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgZmluYWxDb29yZC55ID0gKGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzKSA/IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcblxuICAgICAgICAgICAgICAgIHZhciBzd2lwZWRpcjtcblxuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGVsZW1lbnQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBib3VuZCBjb250YWlucyBhIGRhdGEteHRocmVzaG9sZCB8IGRhdGEtdnRocmVzaG9sZDpcbiAgICAgICAgICAgICAgICB2YXIgZWxlX3hfdGhyZXNob2xkID0gKCR0aGlzLnBhcmVudCgpLmRhdGEoJ3h0aHJlc2hvbGQnKSkgPyAkdGhpcy5wYXJlbnQoKS5kYXRhKCd4dGhyZXNob2xkJykgOiAkdGhpcy5kYXRhKCd4dGhyZXNob2xkJyksXG4gICAgICAgICAgICAgICAgICAgIGVsZV95X3RocmVzaG9sZCA9ICgkdGhpcy5wYXJlbnQoKS5kYXRhKCd5dGhyZXNob2xkJykpID8gJHRoaXMucGFyZW50KCkuZGF0YSgneXRocmVzaG9sZCcpIDogJHRoaXMuZGF0YSgneXRocmVzaG9sZCcpLFxuICAgICAgICAgICAgICAgICAgICBoX3RocmVzaG9sZCA9ICh0eXBlb2YgZWxlX3hfdGhyZXNob2xkICE9PSAndW5kZWZpbmVkJyAmJiBlbGVfeF90aHJlc2hvbGQgIT09IGZhbHNlICYmIHBhcnNlSW50KGVsZV94X3RocmVzaG9sZCkpID8gcGFyc2VJbnQoZWxlX3hfdGhyZXNob2xkKSA6IHNldHRpbmdzLnN3aXBlX2hfdGhyZXNob2xkLFxuICAgICAgICAgICAgICAgICAgICB2X3RocmVzaG9sZCA9ICh0eXBlb2YgZWxlX3lfdGhyZXNob2xkICE9PSAndW5kZWZpbmVkJyAmJiBlbGVfeV90aHJlc2hvbGQgIT09IGZhbHNlICYmIHBhcnNlSW50KGVsZV95X3RocmVzaG9sZCkpID8gcGFyc2VJbnQoZWxlX3lfdGhyZXNob2xkKSA6IHNldHRpbmdzLnN3aXBlX3ZfdGhyZXNob2xkOyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxDb29yZC55ID4gZmluYWxDb29yZC55ICYmIChvcmlnaW5hbENvb3JkLnkgLSBmaW5hbENvb3JkLnkgPiB2X3RocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGV1cCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbENvb3JkLnggPCBmaW5hbENvb3JkLnggJiYgKGZpbmFsQ29vcmQueCAtIG9yaWdpbmFsQ29vcmQueCA+IGhfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRpciA9ICdzd2lwZXJpZ2h0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsQ29vcmQueSA8IGZpbmFsQ29vcmQueSAmJiAoZmluYWxDb29yZC55IC0gb3JpZ2luYWxDb29yZC55ID4gdl90aHJlc2hvbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBlZG93bic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbENvb3JkLnggPiBmaW5hbENvb3JkLnggJiYgKG9yaWdpbmFsQ29vcmQueCAtIGZpbmFsQ29vcmQueCA+IGhfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRpciA9ICdzd2lwZWxlZnQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3dpcGVkaXIgIT0gdW5kZWZpbmVkICYmIHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxDb29yZC54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxDb29yZC55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxDb29yZC54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxDb29yZC55ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlYWQgZXZlbnQgZGF0YSBpbnRvIG91ciBlbmRFdm50OlxuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ0V2ZW50ID0gZS5vcmlnaW5hbEV2ZW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kRXZudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC50b3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gnOiAoc2V0dGluZ3MudG91Y2hfY2FwYWJsZSkgPyBNYXRoLnJvdW5kKG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtICgkdGhpcy5vZmZzZXQoKSA/ICR0aGlzLm9mZnNldCgpLmxlZnQgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd5JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSkgOiBNYXRoLnJvdW5kKGUucGFnZVkgLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS50b3AgOiAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFyZ2V0JzogZS50YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIHN3aXBlIGFtb3VudCAobm9ybWFsaXplZCk6XG4gICAgICAgICAgICAgICAgICAgIHZhciB4QW1vdW50ID0gTWF0aC5hYnMoc3RhcnRFdm50LnBvc2l0aW9uLnggLSBlbmRFdm50LnBvc2l0aW9uLngpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeUFtb3VudCA9IE1hdGguYWJzKHN0YXJ0RXZudC5wb3NpdGlvbi55IC0gZW5kRXZudC5wb3NpdGlvbi55KTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdG91Y2hEYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0RXZudCc6IHN0YXJ0RXZudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbmRFdm50JzogZW5kRXZudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkaXJlY3Rpb24nOiBzd2lwZWRpci5yZXBsYWNlKCdzd2lwZScsICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICd4QW1vdW50JzogeEFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICd5QW1vdW50JzogeUFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkdXJhdGlvbic6IGVuZEV2bnQudGltZSAtIHN0YXJ0RXZudC50aW1lXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGhhc1N3aXBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICR0aGlzLnRyaWdnZXIoJ3N3aXBlJywgdG91Y2hEYXRhKS50cmlnZ2VyKHN3aXBlZGlyLCB0b3VjaERhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdG91Y2hFbmQoZSkge1xuICAgICAgICAgICAgICAgICR0aGlzID0gJChlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgIHZhciBzd2lwZWRpciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgJHRoaXMuZGF0YSgnY2FsbGVlMycsIHRvdWNoRW5kKTtcbiAgICAgICAgICAgICAgICBpZiAoaGFzU3dpcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGVsZW1lbnQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBib3VuZCBjb250YWlucyBhIGRhdGEteHRocmVzaG9sZCB8IGRhdGEtdnRocmVzaG9sZDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZV94X3RocmVzaG9sZCA9ICR0aGlzLmRhdGEoJ3h0aHJlc2hvbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZV95X3RocmVzaG9sZCA9ICR0aGlzLmRhdGEoJ3l0aHJlc2hvbGQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhfdGhyZXNob2xkID0gKHR5cGVvZiBlbGVfeF90aHJlc2hvbGQgIT09ICd1bmRlZmluZWQnICYmIGVsZV94X3RocmVzaG9sZCAhPT0gZmFsc2UgJiYgcGFyc2VJbnQoZWxlX3hfdGhyZXNob2xkKSkgPyBwYXJzZUludChlbGVfeF90aHJlc2hvbGQpIDogc2V0dGluZ3Muc3dpcGVfaF90aHJlc2hvbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2X3RocmVzaG9sZCA9ICh0eXBlb2YgZWxlX3lfdGhyZXNob2xkICE9PSAndW5kZWZpbmVkJyAmJiBlbGVfeV90aHJlc2hvbGQgIT09IGZhbHNlICYmIHBhcnNlSW50KGVsZV95X3RocmVzaG9sZCkpID8gcGFyc2VJbnQoZWxlX3lfdGhyZXNob2xkKSA6IHNldHRpbmdzLnN3aXBlX3ZfdGhyZXNob2xkO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnRXZlbnQgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmRFdm50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gb3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IG9yaWdFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4JzogKHNldHRpbmdzLnRvdWNoX2NhcGFibGUpID8gTWF0aC5yb3VuZChvcmlnRXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggLSAoJHRoaXMub2Zmc2V0KCkgPyAkdGhpcy5vZmZzZXQoKS5sZWZ0IDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VYIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkubGVmdCA6IDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAneSc6IChzZXR0aW5ncy50b3VjaF9jYXBhYmxlKSA/IE1hdGgucm91bmQob3JpZ0V2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpIDogTWF0aC5yb3VuZChlLnBhZ2VZIC0gKCR0aGlzLm9mZnNldCgpID8gJHRoaXMub2Zmc2V0KCkudG9wIDogMCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3RhcmdldCc6IGUudGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVhZCBldmVudCBkYXRhIGludG8gb3VyIGVuZEV2bnQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydEV2bnQucG9zaXRpb24ueSA+IGVuZEV2bnQucG9zaXRpb24ueSAmJiAoc3RhcnRFdm50LnBvc2l0aW9uLnkgLSBlbmRFdm50LnBvc2l0aW9uLnkgPiB2X3RocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBldXAnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydEV2bnQucG9zaXRpb24ueCA8IGVuZEV2bnQucG9zaXRpb24ueCAmJiAoZW5kRXZudC5wb3NpdGlvbi54IC0gc3RhcnRFdm50LnBvc2l0aW9uLnggPiBoX3RocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBlcmlnaHQnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydEV2bnQucG9zaXRpb24ueSA8IGVuZEV2bnQucG9zaXRpb24ueSAmJiAoZW5kRXZudC5wb3NpdGlvbi55IC0gc3RhcnRFdm50LnBvc2l0aW9uLnkgPiB2X3RocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXBlZGlyID0gJ3N3aXBlZG93bic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0RXZudC5wb3NpdGlvbi54ID4gZW5kRXZudC5wb3NpdGlvbi54ICYmIChzdGFydEV2bnQucG9zaXRpb24ueCAtIGVuZEV2bnQucG9zaXRpb24ueCA+IGhfdGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpcGVkaXIgPSAnc3dpcGVsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgc3dpcGUgYW1vdW50IChub3JtYWxpemVkKTpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHhBbW91bnQgPSBNYXRoLmFicyhzdGFydEV2bnQucG9zaXRpb24ueCAtIGVuZEV2bnQucG9zaXRpb24ueCksXG4gICAgICAgICAgICAgICAgICAgICAgICB5QW1vdW50ID0gTWF0aC5hYnMoc3RhcnRFdm50LnBvc2l0aW9uLnkgLSBlbmRFdm50LnBvc2l0aW9uLnkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3VjaERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhcnRFdm50Jzogc3RhcnRFdm50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZEV2bnQnOiBlbmRFdm50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RpcmVjdGlvbic6IHN3aXBlZGlyLnJlcGxhY2UoJ3N3aXBlJywgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3hBbW91bnQnOiB4QW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3lBbW91bnQnOiB5QW1vdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2R1cmF0aW9uJzogZW5kRXZudC50aW1lIC0gc3RhcnRFdm50LnRpbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcignc3dpcGVlbmQnLCB0b3VjaERhdGEpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTd2lwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc3RhcnRldmVudCwgdG91Y2hTdGFydCk7XG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5tb3ZlZXZlbnQsIHRvdWNoTW92ZSk7XG4gICAgICAgICAgICAkdGhpcy5vbihzZXR0aW5ncy5lbmRldmVudCwgdG91Y2hFbmQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc3RhcnRldmVudCwgJCh0aGlzKS5kYXRhLmNhbGxlZTEpLm9mZihzZXR0aW5ncy5tb3ZlZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUyKS5vZmYoc2V0dGluZ3MuZW5kZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBzY3JvbGxzdGFydCBFdmVudCAoYWxzbyBoYW5kbGVzIHNjcm9sbGVuZCk6XG4gICAgJC5ldmVudC5zcGVjaWFsLnNjcm9sbHN0YXJ0ID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoaXNPYmplY3QgPSB0aGlzLFxuICAgICAgICAgICAgICAgICR0aGlzID0gJCh0aGlzT2JqZWN0KSxcbiAgICAgICAgICAgICAgICBzY3JvbGxpbmcsXG4gICAgICAgICAgICAgICAgdGltZXI7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyaWdnZXIoZXZlbnQsIHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckN1c3RvbUV2ZW50KHRoaXNPYmplY3QsIHNjcm9sbGluZyA/ICdzY3JvbGxzdGFydCcgOiAnc2Nyb2xsZW5kJywgZXZlbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpUGhvbmUgdHJpZ2dlcnMgc2Nyb2xsIGFmdGVyIGEgc21hbGwgZGVsYXk7IHVzZSB0b3VjaG1vdmUgaW5zdGVhZFxuICAgICAgICAgICAgJHRoaXMub24oc2V0dGluZ3Muc2Nyb2xsZXZlbnQsIGZ1bmN0aW9uIHNjcm9sbEZ1bmMoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdjYWxsZWUnLCBzY3JvbGxGdW5jKTtcblxuICAgICAgICAgICAgICAgIGlmICghc2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXIoZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihldmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoc2V0dGluZ3Muc2Nyb2xsZXZlbnQsICQodGhpcykuZGF0YS5jYWxsZWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRoaXMgaXMgdGhlIG9yaWVudGF0aW9uIGNoYW5nZSAobGFyZ2VseSBib3Jyb3dlZCBmcm9tIGpRdWVyeSBNb2JpbGUpOlxuICAgIHZhciB3aW4gPSAkKHdpbmRvdyksXG4gICAgICAgIHNwZWNpYWxfZXZlbnQsXG4gICAgICAgIGdldF9vcmllbnRhdGlvbixcbiAgICAgICAgbGFzdF9vcmllbnRhdGlvbixcbiAgICAgICAgaW5pdGlhbF9vcmllbnRhdGlvbl9pc19sYW5kc2NhcGUsXG4gICAgICAgIGluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCxcbiAgICAgICAgcG9ydHJhaXRfbWFwID0ge1xuICAgICAgICAgICAgJzAnOiB0cnVlLFxuICAgICAgICAgICAgJzE4MCc6IHRydWVcbiAgICAgICAgfTtcblxuICAgIGlmIChzZXR0aW5ncy5vcmllbnRhdGlvbl9zdXBwb3J0KSB7XG4gICAgICAgIHZhciB3dyA9IHdpbmRvdy5pbm5lcldpZHRoIHx8IHdpbi53aWR0aCgpLFxuICAgICAgICAgICAgd2ggPSB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgd2luLmhlaWdodCgpLFxuICAgICAgICAgICAgbGFuZHNjYXBlX3RocmVzaG9sZCA9IDUwO1xuXG4gICAgICAgIGluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlID0gd3cgPiB3aCAmJiAod3cgLSB3aCkgPiBsYW5kc2NhcGVfdGhyZXNob2xkO1xuICAgICAgICBpbml0aWFsX29yaWVudGF0aW9uX2lzX2RlZmF1bHQgPSBwb3J0cmFpdF9tYXBbd2luZG93Lm9yaWVudGF0aW9uXTtcblxuICAgICAgICBpZiAoKGluaXRpYWxfb3JpZW50YXRpb25faXNfbGFuZHNjYXBlICYmIGluaXRpYWxfb3JpZW50YXRpb25faXNfZGVmYXVsdCkgfHwgKCFpbml0aWFsX29yaWVudGF0aW9uX2lzX2xhbmRzY2FwZSAmJiAhaW5pdGlhbF9vcmllbnRhdGlvbl9pc19kZWZhdWx0KSkge1xuICAgICAgICAgICAgcG9ydHJhaXRfbWFwID0ge1xuICAgICAgICAgICAgICAgICctOTAnOiB0cnVlLFxuICAgICAgICAgICAgICAgICc5MCc6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkLmV2ZW50LnNwZWNpYWwub3JpZW50YXRpb25jaGFuZ2UgPSBzcGVjaWFsX2V2ZW50ID0ge1xuICAgICAgICBzZXR1cDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGlzIHN1cHBvcnRlZCBuYXRpdmVseSwgcmV0dXJuIGZhbHNlIHNvIHRoYXQgalF1ZXJ5XG4gICAgICAgICAgICAvLyB3aWxsIG9uIHRvIHRoZSBldmVudCB1c2luZyBET00gbWV0aG9kcy5cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5vcmllbnRhdGlvbl9zdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24gdG8gYXZvaWQgaW5pdGlhbCBkb3VibGUtdHJpZ2dlcmluZy5cbiAgICAgICAgICAgIGxhc3Rfb3JpZW50YXRpb24gPSBnZXRfb3JpZW50YXRpb24oKTtcblxuICAgICAgICAgICAgd2luLm9uKCd0aHJvdHRsZWRyZXNpemUnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLm9yaWVudGF0aW9uX3N1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdpbi5vZmYoJ3Rocm90dGxlZHJlc2l6ZScsIGhhbmRsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKGhhbmRsZU9iaikge1xuICAgICAgICAgICAgLy8gU2F2ZSBhIHJlZmVyZW5jZSB0byB0aGUgYm91bmQgZXZlbnQgaGFuZGxlci5cbiAgICAgICAgICAgIHZhciBvbGRfaGFuZGxlciA9IGhhbmRsZU9iai5oYW5kbGVyO1xuXG4gICAgICAgICAgICBoYW5kbGVPYmouaGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50Lm9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9sZF9oYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIElmIHRoZSBldmVudCBpcyBub3Qgc3VwcG9ydGVkIG5hdGl2ZWx5LCB0aGlzIGhhbmRsZXIgd2lsbCBiZSBib3VuZCB0b1xuICAgIC8vIHRoZSB3aW5kb3cgcmVzaXplIGV2ZW50IHRvIHNpbXVsYXRlIHRoZSBvcmllbnRhdGlvbmNoYW5nZSBldmVudC5cblxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBvcmllbnRhdGlvbi5cbiAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gZ2V0X29yaWVudGF0aW9uKCk7XG5cbiAgICAgICAgaWYgKG9yaWVudGF0aW9uICE9PSBsYXN0X29yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAvLyBUaGUgb3JpZW50YXRpb24gaGFzIGNoYW5nZWQsIHNvIHRyaWdnZXIgdGhlIG9yaWVudGF0aW9uY2hhbmdlIGV2ZW50LlxuICAgICAgICAgICAgbGFzdF9vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xuICAgICAgICAgICAgd2luLnRyaWdnZXIoXCJvcmllbnRhdGlvbmNoYW5nZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgICQuZXZlbnQuc3BlY2lhbC5vcmllbnRhdGlvbmNoYW5nZS5vcmllbnRhdGlvbiA9IGdldF9vcmllbnRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzUG9ydHJhaXQgPSB0cnVlLFxuICAgICAgICAgICAgZWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuICAgICAgICBpZiAoc2V0dGluZ3Mub3JpZW50YXRpb25fc3VwcG9ydCkge1xuICAgICAgICAgICAgaXNQb3J0cmFpdCA9IHBvcnRyYWl0X21hcFt3aW5kb3cub3JpZW50YXRpb25dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNQb3J0cmFpdCA9IGVsZW0gJiYgZWxlbS5jbGllbnRXaWR0aCAvIGVsZW0uY2xpZW50SGVpZ2h0IDwgMS4xO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzUG9ydHJhaXQgPyAncG9ydHJhaXQnIDogJ2xhbmRzY2FwZSc7XG4gICAgfTtcblxuICAgIC8vIHRocm90dGxlIEhhbmRsZXI6XG4gICAgJC5ldmVudC5zcGVjaWFsLnRocm90dGxlZHJlc2l6ZSA9IHtcbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykub24oJ3Jlc2l6ZScsIHRocm90dGxlX2hhbmRsZXIpO1xuICAgICAgICB9LFxuICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5vZmYoJ3Jlc2l6ZScsIHRocm90dGxlX2hhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB0aHJvdHRsZSA9IDI1MCxcbiAgICAgICAgdGhyb3R0bGVfaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGN1cnIgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgZGlmZiA9IGN1cnIgLSBsYXN0Q2FsbDtcblxuICAgICAgICAgICAgaWYgKGRpZmYgPj0gdGhyb3R0bGUpIHtcbiAgICAgICAgICAgICAgICBsYXN0Q2FsbCA9IGN1cnI7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS50cmlnZ2VyKCd0aHJvdHRsZWRyZXNpemUnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVsZENhbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoZWxkQ2FsbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUHJvbWlzZSBhIGhlbGQgY2FsbCB3aWxsIHN0aWxsIGV4ZWN1dGVcbiAgICAgICAgICAgICAgICBoZWxkQ2FsbCA9IHdpbmRvdy5zZXRUaW1lb3V0KGhhbmRsZXIsIHRocm90dGxlIC0gZGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxhc3RDYWxsID0gMCxcbiAgICAgICAgaGVsZENhbGwsXG4gICAgICAgIGN1cnIsXG4gICAgICAgIGRpZmY7XG5cbiAgICAvLyBUcmlnZ2VyIGEgY3VzdG9tIGV2ZW50OlxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KG9iaiwgZXZlbnRUeXBlLCBldmVudCwgdG91Y2hEYXRhKSB7XG4gICAgICAgIHZhciBvcmlnaW5hbFR5cGUgPSBldmVudC50eXBlO1xuICAgICAgICBldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXG4gICAgICAgICQuZXZlbnQuZGlzcGF0Y2guY2FsbChvYmosIGV2ZW50LCB0b3VjaERhdGEpO1xuICAgICAgICBldmVudC50eXBlID0gb3JpZ2luYWxUeXBlO1xuICAgIH1cblxuICAgIC8vIENvcnJlY3RseSBvbiBhbnl0aGluZyB3ZSd2ZSBvdmVybG9hZGVkOlxuICAgICQuZWFjaCh7XG4gICAgICAgIHNjcm9sbGVuZDogJ3Njcm9sbHN0YXJ0JyxcbiAgICAgICAgc3dpcGV1cDogJ3N3aXBlJyxcbiAgICAgICAgc3dpcGVyaWdodDogJ3N3aXBlJyxcbiAgICAgICAgc3dpcGVkb3duOiAnc3dpcGUnLFxuICAgICAgICBzd2lwZWxlZnQ6ICdzd2lwZScsXG4gICAgICAgIHN3aXBlZW5kOiAnc3dpcGUnLFxuICAgIHRhcDI6ICAgICAndGFwJyxcbiAgICB0YXBob2xkMjogJ3RhcGhvbGQnXG4gICAgfSwgZnVuY3Rpb24gKGUsIHNyY0UpIHtcbiAgICAgICAgJC5ldmVudC5zcGVjaWFsW2VdID0ge1xuICAgICAgICAgICAgc2V0dXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLm9uKHNyY0UsICQubm9vcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gJDtcbn0iLCIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBKUXVlcnkgZnJvbSAnLi9qcXVlcnknO1xuXG4vLyAod2luZG93IGFzIGFueSkuJCA9IEpRdWVyeTtcblxuLy8gaW1wb3J0IHsgVGV0cmlzIH0gZnJvbSAnLi9zZXJ2aWNlcy90ZXRyaXMnO1xuaW1wb3J0IHtcbiAgVGlueWJpbmQsXG4gIFZpZXcsXG4gIEdsb2JhbEV2ZW50LFxuXG4gIC8vIGJpbmRlcnNcbiAgcm91dGVyQmluZGVycyxcbiAgYmFzaWNCaW5kZXJzV3JhcHBlcixcblxuICAvLyBmb3JtYXR0ZXJzXG4gIGNvbXBhcmVGb3JtYXR0ZXJzLFxuICBtYXRoRm9ybWF0dGVycyxcbiAgcHJvcGVydHlGb3JtYXR0ZXJzLFxuICBzcGVjaWFsRm9ybWF0dGVycyxcbiAgc3RyaW5nRm9ybWF0dGVycyxcbn0gZnJvbSAnLi90aW55YmluZCc7XG5cbmltcG9ydCB7XG4gIGFkZENsYXNzQmluZGVyLFxuICBhdXRvc2Nyb2xsQmluZGVyLFxuICByZW1vdmVDbGFzc0JpbmRlcixcbiAgdmFsdWVCaW5kZXIsXG4gIHNjcm9sbGJhckRyYWdhYmxlQmluZGVyLFxufSBmcm9tICcuL2JpbmRlcnMvaW5kZXgnO1xuaW1wb3J0IHtcbiAgY29udGFjdENvbXBvbmVudCxcbiAgaWNvbnNldENvbXBvbmVudCxcbiAgbmF2SXRlbXNDb21wb25lbnQsXG4gIHByb2R1Y3RTY3JvbGxiYXJDb21wb25lbnQsXG4gIFByb2R1Y3RTY3JvbGxiYXJSaWJhQ29tcG9uZW50LFxufSBmcm9tICcuL2NvbXBvbmVudHMvaW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgTWFpbiB7XG5cbiAgLy8gcHJpdmF0ZSBwcmVmZXRjaCA9IG5ldyBQcmVmZXRjaCgpO1xuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgR2xvYmFsRXZlbnQoKTtcbiAgLy8gIHByaXZhdGUgcGpheCA9IG5ldyBQamF4KG5ldyBDdXN0b21UcmFuc2l0aW9uKCkpO1xuICBwcml2YXRlIHZpZXc6IFZpZXc7XG4gIHByaXZhdGUgZGVidWcgPSBEZWJ1ZygnbWFpbicpO1xuICBwcml2YXRlIHRpbnliaW5kID0gbmV3IFRpbnliaW5kKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLmRlYnVnKCdpbml0IHRoZSBtYWluIGFwcGxpY2F0aW9uJyk7XG5cbiAgICAvLyBSZWdpc3QgY29tcG9uZW50c1xuICAgIHRoaXMudGlueWJpbmQuY29tcG9uZW50U2VydmljZS5yZWdpc3QoY29udGFjdENvbXBvbmVudCgpKTtcbiAgICB0aGlzLnRpbnliaW5kLmNvbXBvbmVudFNlcnZpY2UucmVnaXN0KG5hdkl0ZW1zQ29tcG9uZW50KCkpO1xuICAgIHRoaXMudGlueWJpbmQuY29tcG9uZW50U2VydmljZS5yZWdpc3QoaWNvbnNldENvbXBvbmVudCgpKTtcbiAgICAvLyB0aGlzLnRpbnliaW5kLmNvbXBvbmVudFNlcnZpY2UucmVnaXN0KHByb2R1Y3RTY3JvbGxiYXJDb21wb25lbnQoKSk7XG4gICAgdGhpcy50aW55YmluZC5jb21wb25lbnRTZXJ2aWNlLnJlZ2lzdChQcm9kdWN0U2Nyb2xsYmFyUmliYUNvbXBvbmVudCwgUHJvZHVjdFNjcm9sbGJhclJpYmFDb21wb25lbnQudGFnTmFtZSk7XG5cbiAgICAvLyBSZWdpc3QgYmluZGVyc1xuICAgIGNvbnN0IGJhc2ljQmluZGVycyA9IGJhc2ljQmluZGVyc1dyYXBwZXIoSlF1ZXJ5KTtcbiAgICAvLyBjb25zb2xlLmVycm9yKCdiYXNpY0JpbmRlcnMnLCBiYXNpY0JpbmRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RzKHJvdXRlckJpbmRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RzKGJhc2ljQmluZGVycyk7XG4gICAgdGhpcy50aW55YmluZC5iaW5kZXJTZXJ2aWNlLnJlZ2lzdChzY3JvbGxiYXJEcmFnYWJsZUJpbmRlcigpKTtcbiAgICB0aGlzLnRpbnliaW5kLmJpbmRlclNlcnZpY2UucmVnaXN0V3JhcHBlcihhdXRvc2Nyb2xsQmluZGVyKCkpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RXcmFwcGVyKHJlbW92ZUNsYXNzQmluZGVyKCkpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RXcmFwcGVyKGFkZENsYXNzQmluZGVyKCkpO1xuICAgIHRoaXMudGlueWJpbmQuYmluZGVyU2VydmljZS5yZWdpc3RXcmFwcGVyKHZhbHVlQmluZGVyKCkpO1xuXG4gICAgLy8gUmVnaXN0IGZvcm1hdHRlcnNcbiAgICB0aGlzLnRpbnliaW5kLmZvcm1hdHRlclNlcnZpY2UucmVnaXN0cyhjb21wYXJlRm9ybWF0dGVycyk7XG4gICAgdGhpcy50aW55YmluZC5mb3JtYXR0ZXJTZXJ2aWNlLnJlZ2lzdHMobWF0aEZvcm1hdHRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuZm9ybWF0dGVyU2VydmljZS5yZWdpc3RzKHByb3BlcnR5Rm9ybWF0dGVycyk7XG4gICAgdGhpcy50aW55YmluZC5mb3JtYXR0ZXJTZXJ2aWNlLnJlZ2lzdHMoc3BlY2lhbEZvcm1hdHRlcnMpO1xuICAgIHRoaXMudGlueWJpbmQuZm9ybWF0dGVyU2VydmljZS5yZWdpc3RzKHN0cmluZ0Zvcm1hdHRlcnMpO1xuXG4gICAgdGhpcy52aWV3ID0gdGhpcy50aW55YmluZC5iaW5kKEpRdWVyeSgnYm9keScpWzBdLCB3aW5kb3cubW9kZWwpO1xuXG4gICAgLy8gRGVmaW5lIGN1c3RvbSBFbGVtZW50cyBhbHdheXMgYWZ0ZXIgdGlueWJpbmQuYmluZFxuICAgIC8vIGN1c3RvbUVsZW1lbnRzLmRlZmluZShQcm9kdWN0U2Nyb2xsYmFyUmliYUNvbXBvbmVudC50YWdOYW1lLCBQcm9kdWN0U2Nyb2xsYmFyUmliYUNvbXBvbmVudCk7XG5cbiAgfVxufVxuXG5KUXVlcnkoKCQ6IEpRdWVyeVN0YXRpYykgPT4ge1xuICBjb25zdCBtYWluID0gbmV3IE1haW4oKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==