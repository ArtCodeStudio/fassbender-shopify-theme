!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=35)}([function(e,t,n){(function(i){function r(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==i&&"env"in i&&(e=i.env.DEBUG),e}(t=e.exports=n(33)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},t.formatArgs=function(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),!n)return;var i="color: "+this.color;e.splice(1,0,i,"color: inherit");var r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(o=++r)}),e.splice(o,0,i)},t.save=function(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}},t.load=r,t.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(r())}).call(this,n(34))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;var i,r=(i=n(2))&&i.__esModule?i:{default:i};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,i;return t=e,i=[{key:"isUndefined",value:function(e){return void 0===e}},{key:"isDefined",value:function(e){return!this.isUndefined(e)}},{key:"isFunction",value:function(e){return"function"==typeof e}},{key:"isArray",value:function(e){return"[object Array]"===Object.prototype.toString.call(e)}},{key:"isNumber",value:function(e){return!isNaN(parseFloat(e))&&!isNaN(e-0)}},{key:"isObject",value:function(e){return this.isDefined(e)&&"object"===o(e)}},{key:"isBoolean",value:function(e){return o(e)===o(!0)}},{key:"isString",value:function(e){return this.isDefined(e)&&"string"==typeof e}},{key:"stringHasNumber",value:function(e){return this.isString(e)&&/\d/.test(e)}},{key:"stringHasOnlyNumber",value:function(e){return/^\d+$/.test(e)}},{key:"stringIsPhoneNumber",value:function(e){return/^[0-9 ()+-]+$/.test(e)}},{key:"justDigits",value:function(t){var n=t.replace(/[^-\d\.]/g,"");return e.isNumber(n)?Number(n):0}},{key:"extend",value:function(e,t,n,i){return e?r.default.extend(!0,t,n,i):r.default.extend(t,n,i)}},{key:"concat",value:function(e,t,n){return this.extend(e,{},t,n)}},{key:"xhr",value:function(e){var t=this.deferred(),n=new XMLHttpRequest;return n.onreadystatechange=function(){if(4===n.readyState)return 200===n.status?t.resolve(n.responseText):t.reject(new Error("xhr: HTTP code is not 200"))},n.ontimeout=function(){return t.reject(new Error("xhr: Timeout exceeded"))},n.open("GET",e),n.timeout=this.xhrTimeout,n.setRequestHeader("x-barba","yes"),n.send(),t.promise}},{key:"deferred",value:function(){var e={},t=new Promise(function(t,n){e.resolve=t,e.reject=n});return e.promise=t,e}},{key:"getLocation",value:function(e){return e?(0,r.default)('<a href="'.concat(e,'"></a>'))[0]:window.location}},{key:"getUrl",value:function(t){var n=e.getLocation(t);return n.protocol+"//"+n.host+n.pathname+n.search}},{key:"cleanLink",value:function(e){return e.replace(/#.*/,"")}},{key:"getPort",value:function(t,n){var i=e.getLocation(n),r=void 0!==t?t:i.port,o=i.protocol;return""!==r?Number(r):"http:"===o?80:"https:"===o?443:void 0}},{key:"isAbsoluteUrl",value:function(e){return/^https?:\/\//i.test(e)}},{key:"getUrlParameter",value:function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},{key:"getHash",value:function(t){return e.getLocation(t).hash}},{key:"updateHash",value:function(e){return window.location.hash=e}},{key:"removeHash",value:function(){return history.pushState("",document.title,window.location.pathname+window.location.search)}},{key:"getViewportDimensions",value:function(){var e=Math.max(document.documentElement.clientWidth,window.innerWidth||0);return{h:Math.max(document.documentElement.clientHeight,window.innerHeight||0),w:e}}}],(n=null)&&s(t.prototype,n),i&&s(t,i),e}();t.Utils=a,function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n}(a,"xhrTimeout",void 0)},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,u=o.slice,c=o.concat,l=o.push,f=o.indexOf,h={},d=h.toString,p=h.hasOwnProperty,v=p.toString,y=v.call(Object),m={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function x(e,t,n){var i,r=(t=t||s).createElement("script");if(r.text=e,n)for(i in w)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function k(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[d.call(e)]||"object":typeof e}var C=function(e,t){return new C.fn.init(e,t)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function j(e){var t=!!e&&"length"in e&&e.length,n=k(e);return!g(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}C.fn=C.prototype={jquery:"3.3.1",constructor:C,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=C.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return C.each(this,e)},map:function(e){return this.pushStack(C.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},C.extend=C.fn.extend=function(){var e,t,n,i,r,o,s=arguments[0]||{},a=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||g(s)||(s={}),a===u&&(s=this,a--);a<u;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],s!==(i=e[t])&&(c&&i&&(C.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,o=n&&Array.isArray(n)?n:[]):o=n&&C.isPlainObject(n)?n:{},s[t]=C.extend(c,o,i)):void 0!==i&&(s[t]=i));return s},C.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=a(e))||"function"==typeof(n=p.call(t,"constructor")&&t.constructor)&&v.call(n)===y)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){x(e)},each:function(e,t){var n,i=0;if(j(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?C.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,s=!n;r<o;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,s=[];if(j(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&s.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&s.push(r);return c.apply([],s)},guid:1,support:m}),"function"==typeof Symbol&&(C.fn[Symbol.iterator]=o[Symbol.iterator]),C.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){h["[object "+t+"]"]=t.toLowerCase()});var E=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,i,r,o,s,a,u,c,l,f,h,d,p,v,y,m,g,b,w="sizzle"+1*new Date,x=e.document,k=0,C=0,T=se(),j=se(),E=se(),O=function(e,t){return e===t&&(f=!0),0},S={}.hasOwnProperty,_=[],P=_.pop,N=_.push,A=_.push,L=_.slice,D=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+F+"*("+H+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+F+"*\\]",B=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",q=new RegExp(F+"+","g"),$=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),I=new RegExp("^"+F+"*,"+F+"*"),W=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),U=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),z=new RegExp(B),X=new RegExp("^"+H+"$"),V={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+B),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},G=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Y=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Q=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){h()},re=ge(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{A.apply(_=L.call(x.childNodes),x.childNodes),_[x.childNodes.length].nodeType}catch(e){A={apply:_.length?function(e,t){N.apply(e,L.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var o,a,c,l,f,p,m,g=t&&t.ownerDocument,k=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==k&&9!==k&&11!==k)return i;if(!r&&((t?t.ownerDocument||t:x)!==d&&h(t),t=t||d,v)){if(11!==k&&(f=K.exec(e)))if(o=f[1]){if(9===k){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(g&&(c=g.getElementById(o))&&b(t,c)&&c.id===o)return i.push(c),i}else{if(f[2])return A.apply(i,t.getElementsByTagName(e)),i;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return A.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!E[e+" "]&&(!y||!y.test(e))){if(1!==k)g=t,m=e;else if("object"!==t.nodeName.toLowerCase()){for((l=t.getAttribute("id"))?l=l.replace(te,ne):t.setAttribute("id",l=w),a=(p=s(e)).length;a--;)p[a]="#"+l+" "+me(p[a]);m=p.join(","),g=Q.test(e)&&ve(t.parentNode)||t}if(m)try{return A.apply(i,g.querySelectorAll(m)),i}catch(e){}finally{l===w&&t.removeAttribute("id")}}}return u(e.replace($,"$1"),t,i,r)}function se(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[w]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function le(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,o=e([],n.length,t),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},h=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:x;return s!==d&&9===s.nodeType&&s.documentElement?(p=(d=s).documentElement,v=!o(d),x!==d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Y.test(d.getElementsByClassName),n.getById=ue(function(e){return p.appendChild(e).id=w,!d.getElementsByName||!d.getElementsByName(w).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},m=[],y=[],(n.qsa=Y.test(d.querySelectorAll))&&(ue(function(e){p.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+F+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\["+F+"*(?:value|"+M+")"),e.querySelectorAll("[id~="+w+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+F+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Y.test(g=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),m.push("!=",B)}),y=y.length&&new RegExp(y.join("|")),m=m.length&&new RegExp(m.join("|")),t=Y.test(p.compareDocumentPosition),b=t||Y.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===d||e.ownerDocument===x&&b(x,e)?-1:t===d||t.ownerDocument===x&&b(x,t)?1:l?D(l,e)-D(l,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!r||!o)return e===d?-1:t===d?1:r?-1:o?1:l?D(l,e)-D(l,t):0;if(r===o)return le(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?le(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&h(e),t=t.replace(U,"='$1']"),n.matchesSelector&&v&&!E[t+" "]&&(!m||!m.test(t))&&(!y||!y.test(t)))try{var i=g.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&h(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&h(e);var r=i.attrHandle[t.toLowerCase()],o=r&&S.call(i.attrHandle,t.toLowerCase())?r(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(O),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return l=null,e},r=oe.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:ae,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+F+")"+e+"("+F+"|$)"))&&T(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,h,d,p,v=o!==s?"nextSibling":"previousSibling",y=t.parentNode,m=a&&t.nodeName.toLowerCase(),g=!u&&!a,b=!1;if(y){if(o){for(;v;){for(h=t;h=h[v];)if(a?h.nodeName.toLowerCase()===m:1===h.nodeType)return!1;p=v="only"===e&&!p&&"nextSibling"}return!0}if(p=[s?y.firstChild:y.lastChild],s&&g){for(b=(d=(c=(l=(f=(h=y)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===k&&c[1])&&c[2],h=d&&y.childNodes[d];h=++d&&h&&h[v]||(b=d=0)||p.pop();)if(1===h.nodeType&&++b&&h===t){l[e]=[k,d,b];break}}else if(g&&(b=d=(c=(l=(f=(h=t)[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]||[])[0]===k&&c[1]),!1===b)for(;(h=++d&&h&&h[v]||(b=d=0)||p.pop())&&((a?h.nodeName.toLowerCase()!==m:1!==h.nodeType)||!++b||(g&&((l=(f=h[w]||(h[w]={}))[h.uniqueID]||(f[h.uniqueID]={}))[e]=[k,b]),h!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[w]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,o=r(e,t),s=o.length;s--;)e[i=D(e,o[s])]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=a(e.replace($,"$1"));return i[w]?ae(function(e,t,n,r){for(var o,s=i(e,null,r,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return oe(e,t).length>0}}),contains:ae(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return X.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe(function(){return[0]}),last:pe(function(e,t){return[t-1]}),eq:pe(function(e,t,n){return[n<0?n+t:n]}),even:pe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:pe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:pe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:pe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function ye(){}function me(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ge(e,t,n){var i=t.dir,r=t.next,o=r||i,s=n&&"parentNode"===o,a=C++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,u){var c,l,f,h=[k,a];if(u){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,u))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(l=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=l[o])&&c[0]===k&&c[1]===a)return h[2]=c[2];if(l[o]=h,h[2]=e(t,n,u))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var o,s=[],a=0,u=e.length,c=null!=t;a<u;a++)(o=e[a])&&(n&&!n(o,i,r)||(s.push(o),c&&t.push(a)));return s}function xe(e,t,n,i,r,o){return i&&!i[w]&&(i=xe(i)),r&&!r[w]&&(r=xe(r,o)),ae(function(o,s,a,u){var c,l,f,h=[],d=[],p=s.length,v=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),y=!e||!o&&t?v:we(v,h,e,a,u),m=n?r||(o?e:p||i)?[]:s:y;if(n&&n(y,m,a,u),i)for(c=we(m,d),i(c,[],a,u),l=c.length;l--;)(f=c[l])&&(m[d[l]]=!(y[d[l]]=f));if(o){if(r||e){if(r){for(c=[],l=m.length;l--;)(f=m[l])&&c.push(y[l]=f);r(null,m=[],c,u)}for(l=m.length;l--;)(f=m[l])&&(c=r?D(o,f):h[l])>-1&&(o[c]=!(s[c]=f))}}else m=we(m===s?m.splice(p,m.length):m),r?r(null,s,m,u):A.apply(s,m)})}function ke(e){for(var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[" "],u=s?1:0,l=ge(function(e){return e===t},a,!0),f=ge(function(e){return D(t,e)>-1},a,!0),h=[function(e,n,i){var r=!s&&(i||n!==c)||((t=n).nodeType?l(e,n,i):f(e,n,i));return t=null,r}];u<o;u++)if(n=i.relative[e[u].type])h=[ge(be(h),n)];else{if((n=i.filter[e[u].type].apply(null,e[u].matches))[w]){for(r=++u;r<o&&!i.relative[e[r].type];r++);return xe(u>1&&be(h),u>1&&me(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace($,"$1"),n,u<r&&ke(e.slice(u,r)),r<o&&ke(e=e.slice(r)),r<o&&me(e))}h.push(n)}return be(h)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=oe.tokenize=function(e,t){var n,r,o,s,a,u,c,l=j[e+" "];if(l)return t?0:l.slice(0);for(a=e,u=[],c=i.preFilter;a;){for(s in n&&!(r=I.exec(a))||(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=W.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace($," ")}),a=a.slice(n.length)),i.filter)!(r=V[s].exec(a))||c[s]&&!(r=c[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?oe.error(e):j(e,u).slice(0)},a=oe.compile=function(e,t){var n,r=[],o=[],a=E[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=ke(t[n]))[w]?r.push(a):o.push(a);(a=E(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,s,a,u,l){var f,p,y,m=0,g="0",b=o&&[],w=[],x=c,C=o||r&&i.find.TAG("*",l),T=k+=null==x?1:Math.random()||.1,j=C.length;for(l&&(c=s===d||s||l);g!==j&&null!=(f=C[g]);g++){if(r&&f){for(p=0,s||f.ownerDocument===d||(h(f),a=!v);y=e[p++];)if(y(f,s||d,a)){u.push(f);break}l&&(k=T)}n&&((f=!y&&f)&&m--,o&&b.push(f))}if(m+=g,n&&g!==m){for(p=0;y=t[p++];)y(b,w,s,a);if(o){if(m>0)for(;g--;)b[g]||w[g]||(w[g]=P.call(u));w=we(w)}A.apply(u,w),l&&!o&&w.length>0&&m+t.length>1&&oe.uniqueSort(u)}return l&&(k=T,c=x),b};return n?ae(o):o}(o,r))).selector=e}return a},u=oe.select=function(e,t,n,r){var o,u,c,l,f,h="function"==typeof e&&e,d=!r&&s(e=h.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(c=u[0]).type&&9===t.nodeType&&v&&i.relative[u[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(Z,ee),t)||[])[0]))return n;h&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(o=V.needsContext.test(e)?0:u.length;o--&&(c=u[o],!i.relative[l=c.type]);)if((f=i.find[l])&&(r=f(c.matches[0].replace(Z,ee),Q.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(o,1),!(e=r.length&&me(u)))return A.apply(n,r),n;break}}return(h||a(e,d))(r,t,!v,n,!t||Q.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(O).join("")===w,n.detectDuplicates=!!f,h(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(M,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(n);C.find=E,C.expr=E.selectors,C.expr[":"]=C.expr.pseudos,C.uniqueSort=C.unique=E.uniqueSort,C.text=E.getText,C.isXMLDoc=E.isXML,C.contains=E.contains,C.escapeSelector=E.escape;var O=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&C(e).is(n))break;i.push(e)}return i},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},_=C.expr.match.needsContext;function P(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return g(t)?C.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?C.grep(e,function(e){return e===t!==n}):"string"!=typeof t?C.grep(e,function(e){return f.call(t,e)>-1!==n}):C.filter(t,e,n)}C.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?C.find.matchesSelector(i,e)?[i]:[]:C.find.matches(e,C.grep(t,function(e){return 1===e.nodeType}))},C.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(C(e).filter(function(){for(t=0;t<i;t++)if(C.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)C.find(e,r[t],n);return i>1?C.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&_.test(e)?C(e):e||[],!1).length}});var L,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(C.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||L,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:D.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof C?t[0]:t,C.merge(this,C.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),N.test(i[1])&&C.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(C):C.makeArray(e,this)}).prototype=C.fn,L=C(s);var M=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}C.fn.extend({has:function(e){var t=C(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(C.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,o=[],s="string"!=typeof e&&C(e);if(!_.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&C.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?C.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(C(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(C.uniqueSort(C.merge(this.get(),C(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),C.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return O(e,"parentNode")},parentsUntil:function(e,t,n){return O(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return O(e,"nextSibling")},prevAll:function(e){return O(e,"previousSibling")},nextUntil:function(e,t,n){return O(e,"nextSibling",n)},prevUntil:function(e,t,n){return O(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return P(e,"iframe")?e.contentDocument:(P(e,"template")&&(e=e.content||e),C.merge([],e.childNodes))}},function(e,t){C.fn[e]=function(n,i){var r=C.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=C.filter(i,r)),this.length>1&&(F[e]||C.uniqueSort(r),M.test(e)&&r.reverse()),this.pushStack(r)}});var R=/[^\x20\t\r\n\f]+/g;function B(e){return e}function q(e){throw e}function $(e,t,n,i){var r;try{e&&g(r=e.promise)?r.call(e).done(t).fail(n):e&&g(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}C.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return C.each(e.match(R)||[],function(e,n){t[n]=!0}),t}(e):C.extend({},e);var t,n,i,r,o=[],s=[],a=-1,u=function(){for(r=r||e.once,i=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){C.each(n,function(n,i){g(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==k(i)&&t(i)})}(arguments),n&&!t&&u()),this},remove:function(){return C.each(arguments,function(e,t){for(var n;(n=C.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(e){return e?C.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},C.extend({Deferred:function(e){var t=[["notify","progress",C.Callbacks("memory"),C.Callbacks("memory"),2],["resolve","done",C.Callbacks("once memory"),C.Callbacks("once memory"),0,"resolved"],["reject","fail",C.Callbacks("once memory"),C.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return C.Deferred(function(n){C.each(t,function(t,i){var r=g(e[i[4]])&&e[i[4]];o[i[1]](function(){var e=r&&r.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var o=0;function s(e,t,i,r){return function(){var a=this,u=arguments,c=function(){var n,c;if(!(e<o)){if((n=i.apply(a,u))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(c)?r?c.call(n,s(o,t,B,r),s(o,t,q,r)):(o++,c.call(n,s(o,t,B,r),s(o,t,q,r),s(o,t,B,t.notifyWith))):(i!==B&&(a=void 0,u=[n]),(r||t.resolveWith)(a,u))}},l=r?c:function(){try{c()}catch(n){C.Deferred.exceptionHook&&C.Deferred.exceptionHook(n,l.stackTrace),e+1>=o&&(i!==q&&(a=void 0,u=[n]),t.rejectWith(a,u))}};e?l():(C.Deferred.getStackHook&&(l.stackTrace=C.Deferred.getStackHook()),n.setTimeout(l))}}return C.Deferred(function(n){t[0][3].add(s(0,n,g(r)?r:B,n.notifyWith)),t[1][3].add(s(0,n,g(e)?e:B)),t[2][3].add(s(0,n,g(i)?i:q))}).promise()},promise:function(e){return null!=e?C.extend(e,r):r}},o={};return C.each(t,function(e,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=u.call(arguments),o=C.Deferred(),s=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?u.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&($(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||g(r[n]&&r[n].then)))return o.then();for(;n--;)$(r[n],s(n),o.reject);return o.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;C.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&I.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},C.readyException=function(e){n.setTimeout(function(){throw e})};var W=C.Deferred();function U(){s.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),C.ready()}C.fn.ready=function(e){return W.then(e).catch(function(e){C.readyException(e)}),this},C.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--C.readyWait:C.isReady)||(C.isReady=!0,!0!==e&&--C.readyWait>0||W.resolveWith(s,[C]))}}),C.ready.then=W.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(C.ready):(s.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var z=function(e,t,n,i,r,o,s){var a=0,u=e.length,c=null==n;if("object"===k(n))for(a in r=!0,n)z(e,t,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,g(i)||(s=!0),c&&(s?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(C(e),n)})),t))for(;a<u;a++)t(e[a],n,s?i:i.call(e[a],a,t(e[a],n)));return r?e:c?t.call(e):u?t(e[0],n):o},X=/^-ms-/,V=/-([a-z])/g;function G(e,t){return t.toUpperCase()}function J(e){return e.replace(X,"ms-").replace(V,G)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=C.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[J(t)]=n;else for(i in t)r[J(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][J(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(J):(t=J(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||C.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!C.isEmptyObject(t)}};var Q=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}C.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),C.fn.extend({data:function(e,t){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(r=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=J(i.slice(5)),ne(o,i,r[i]));Q.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){Z.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))?n:void 0!==(n=ne(o,e))?n:void 0;this.each(function(){Z.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Z.remove(this,e)})}}),C.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Q.get(e,t),n&&(!i||Array.isArray(n)?i=Q.access(e,t,C.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=C.queue(e,t),i=n.length,r=n.shift(),o=C._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,function(){C.dequeue(e,t)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:C.Callbacks("once memory").add(function(){Q.remove(e,[t+"queue",n])})})}}),C.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?C.queue(this[0],e):void 0===t?this:this.each(function(){var n=C.queue(this,e,t);C._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&C.dequeue(this,e)})},dequeue:function(e){return this.each(function(){C.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=C.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(o[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&C.contains(e.ownerDocument,e)&&"none"===C.css(e,"display")},ae=function(e,t,n,i){var r,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in r=n.apply(e,i||[]),t)e.style[o]=s[o];return r};function ue(e,t,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return C.css(e,t,"")},u=a(),c=n&&n[3]||(C.cssNumber[t]?"":"px"),l=(C.cssNumber[t]||"px"!==c&&+u)&&re.exec(C.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;s--;)C.style(e,t,l+c),(1-o)*(1-(o=a()/u||.5))<=0&&(s=0),l/=o;l*=2,C.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=l,i.end=r)),r}var ce={};function le(e){var t,n=e.ownerDocument,i=e.nodeName,r=ce[i];return r||(t=n.body.appendChild(n.createElement(i)),r=C.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),ce[i]=r,r)}function fe(e,t){for(var n,i,r=[],o=0,s=e.length;o<s;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=Q.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&se(i)&&(r[o]=le(i))):"none"!==n&&(r[o]="none",Q.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}C.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?C(this).show():C(this).hide()})}});var he=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pe=/^$|^module$|\/(?:java|ecma)script/i,ve={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ye(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&P(e,t)?C.merge([e],n):n}function me(e,t){for(var n=0,i=e.length;n<i;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ve.optgroup=ve.option,ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td;var ge,be,we=/<|&#?\w+;/;function xe(e,t,n,i,r){for(var o,s,a,u,c,l,f=t.createDocumentFragment(),h=[],d=0,p=e.length;d<p;d++)if((o=e[d])||0===o)if("object"===k(o))C.merge(h,o.nodeType?[o]:o);else if(we.test(o)){for(s=s||f.appendChild(t.createElement("div")),a=(de.exec(o)||["",""])[1].toLowerCase(),u=ve[a]||ve._default,s.innerHTML=u[1]+C.htmlPrefilter(o)+u[2],l=u[0];l--;)s=s.lastChild;C.merge(h,s.childNodes),(s=f.firstChild).textContent=""}else h.push(t.createTextNode(o));for(f.textContent="",d=0;o=h[d++];)if(i&&C.inArray(o,i)>-1)r&&r.push(o);else if(c=C.contains(o.ownerDocument,o),s=ye(f.appendChild(o),"script"),c&&me(s),n)for(l=0;o=s[l++];)pe.test(o.type||"")&&n.push(o);return f}ge=s.createDocumentFragment().appendChild(s.createElement("div")),(be=s.createElement("input")).setAttribute("type","radio"),be.setAttribute("checked","checked"),be.setAttribute("name","t"),ge.appendChild(be),m.checkClone=ge.cloneNode(!0).cloneNode(!0).lastChild.checked,ge.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!ge.cloneNode(!0).lastChild.defaultValue;var ke=s.documentElement,Ce=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,je=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Oe(){return!1}function Se(){try{return s.activeElement}catch(e){}}function _e(e,t,n,i,r,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)_e(e,a,n,i,t[a],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Oe;else if(!r)return e;return 1===o&&(s=r,(r=function(e){return C().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=C.guid++)),e.each(function(){C.event.add(this,t,r,i,n)})}C.event={global:{},add:function(e,t,n,i,r){var o,s,a,u,c,l,f,h,d,p,v,y=Q.get(e);if(y)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&C.find.matchesSelector(ke,r),n.guid||(n.guid=C.guid++),(u=y.events)||(u=y.events={}),(s=y.handle)||(s=y.handle=function(t){return void 0!==C&&C.event.triggered!==t.type?C.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)d=v=(a=je.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),d&&(f=C.event.special[d]||{},d=(r?f.delegateType:f.bindType)||d,f=C.event.special[d]||{},l=C.extend({type:d,origType:v,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&C.expr.match.needsContext.test(r),namespace:p.join(".")},o),(h=u[d])||((h=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,p,s)||e.addEventListener&&e.addEventListener(d,s)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,l):h.push(l),C.event.global[d]=!0)},remove:function(e,t,n,i,r){var o,s,a,u,c,l,f,h,d,p,v,y=Q.hasData(e)&&Q.get(e);if(y&&(u=y.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(d=v=(a=je.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),d){for(f=C.event.special[d]||{},h=u[d=(i?f.delegateType:f.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=h.length;o--;)l=h[o],!r&&v!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(h.splice(o,1),l.selector&&h.delegateCount--,f.remove&&f.remove.call(e,l));s&&!h.length&&(f.teardown&&!1!==f.teardown.call(e,p,y.handle)||C.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)C.event.remove(e,d+t[c],n,i,!0);C.isEmptyObject(u)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,s,a=C.event.fix(e),u=new Array(arguments.length),c=(Q.get(this,"events")||{})[a.type]||[],l=C.event.special[a.type]||{};for(u[0]=a,t=1;t<arguments.length;t++)u[t]=arguments[t];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=C.event.handlers.call(this,a,c),t=0;(r=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((C.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,u))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,o,s,a=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<u;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?C(r,this).index(c)>-1:C.find(r,this,null,[c]).length),s[r]&&o.push(i);o.length&&a.push({elem:c,handlers:o})}return c=this,u<t.length&&a.push({elem:c,handlers:t.slice(u)}),a},addProp:function(e,t){Object.defineProperty(C.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[C.expando]?e:new C.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&P(this,"input"))return this.click(),!1},_default:function(e){return P(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},C.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},C.Event=function(e,t){if(!(this instanceof C.Event))return new C.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&C.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[C.expando]=!0},C.Event.prototype={constructor:C.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},C.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ce.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},C.event.addProp),C.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){C.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||C.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),C.fn.extend({on:function(e,t,n,i){return _e(this,e,t,n,i)},one:function(e,t,n,i){return _e(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,C(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Oe),this.each(function(){C.event.remove(this,e,n,t)})}});var Pe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ne=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return P(e,"table")&&P(11!==t.nodeType?t:t.firstChild,"tr")&&C(e).children("tbody")[0]||e}function Me(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function He(e,t){var n,i,r,o,s,a,u,c;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),s=Q.set(t,o),c=o.events))for(r in delete s.handle,s.events={},c)for(n=0,i=c[r].length;n<i;n++)C.event.add(t,r,c[r][n]);Z.hasData(e)&&(a=Z.access(e),u=C.extend({},a),Z.set(t,u))}}function Re(e,t,n,i){t=c.apply([],t);var r,o,s,a,u,l,f=0,h=e.length,d=h-1,p=t[0],v=g(p);if(v||h>1&&"string"==typeof p&&!m.checkClone&&Ae.test(p))return e.each(function(r){var o=e.eq(r);v&&(t[0]=p.call(this,r,o.html())),Re(o,t,n,i)});if(h&&(o=(r=xe(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=C.map(ye(r,"script"),Me)).length;f<h;f++)u=r,f!==d&&(u=C.clone(u,!0,!0),a&&C.merge(s,ye(u,"script"))),n.call(e[f],u,f);if(a)for(l=s[s.length-1].ownerDocument,C.map(s,Fe),f=0;f<a;f++)u=s[f],pe.test(u.type||"")&&!Q.access(u,"globalEval")&&C.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?C._evalUrl&&C._evalUrl(u.src):x(u.textContent.replace(Le,""),l,u))}return e}function Be(e,t,n){for(var i,r=t?C.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||C.cleanData(ye(i)),i.parentNode&&(n&&C.contains(i.ownerDocument,i)&&me(ye(i,"script")),i.parentNode.removeChild(i));return e}C.extend({htmlPrefilter:function(e){return e.replace(Pe,"<$1></$2>")},clone:function(e,t,n){var i,r,o,s,a,u,c,l=e.cloneNode(!0),f=C.contains(e.ownerDocument,e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||C.isXMLDoc(e)))for(s=ye(l),i=0,r=(o=ye(e)).length;i<r;i++)a=o[i],u=s[i],void 0,"input"===(c=u.nodeName.toLowerCase())&&he.test(a.type)?u.checked=a.checked:"input"!==c&&"textarea"!==c||(u.defaultValue=a.defaultValue);if(t)if(n)for(o=o||ye(e),s=s||ye(l),i=0,r=o.length;i<r;i++)He(o[i],s[i]);else He(e,l);return(s=ye(l,"script")).length>0&&me(s,!f&&ye(e,"script")),l},cleanData:function(e){for(var t,n,i,r=C.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[Q.expando]){if(t.events)for(i in t.events)r[i]?C.event.remove(n,i):C.removeEvent(n,i,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),C.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return z(this,function(e){return void 0===e?C.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=De(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(C.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return C.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ve[(de.exec(e)||["",""])[1].toLowerCase()]){e=C.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(C.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;C.inArray(this,e)<0&&(C.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),C.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){C.fn[e]=function(e){for(var n,i=[],r=C(e),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),C(r[s])[t](n),l.apply(i,n.get());return this.pushStack(i)}});var qe=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),$e=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Ie=new RegExp(oe.join("|"),"i");function We(e,t,n){var i,r,o,s,a=e.style;return(n=n||$e(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||C.contains(e.ownerDocument,e)||(s=C.style(e,t)),!m.pixelBoxStyles()&&qe.test(s)&&Ie.test(t)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Ue(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ke.appendChild(c).appendChild(l);var e=n.getComputedStyle(l);i="1%"!==e.top,u=12===t(e.marginLeft),l.style.right="60%",a=36===t(e.right),r=36===t(e.width),l.style.position="absolute",o=36===l.offsetWidth||"absolute",ke.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var i,r,o,a,u,c=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,C.extend(m,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),o}}))}();var ze=/^(none|table(?!-c[ea]).+)/,Xe=/^--/,Ve={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Je=["Webkit","Moz","ms"],Ye=s.createElement("div").style;function Ke(e){var t=C.cssProps[e];return t||(t=C.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in Ye)return e}(e)||e),t}function Qe(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ze(e,t,n,i,r,o){var s="width"===t?1:0,a=0,u=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(u+=C.css(e,n+oe[s],!0,r)),i?("content"===n&&(u-=C.css(e,"padding"+oe[s],!0,r)),"margin"!==n&&(u-=C.css(e,"border"+oe[s]+"Width",!0,r))):(u+=C.css(e,"padding"+oe[s],!0,r),"padding"!==n?u+=C.css(e,"border"+oe[s]+"Width",!0,r):a+=C.css(e,"border"+oe[s]+"Width",!0,r));return!i&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-a-.5))),u}function et(e,t,n){var i=$e(e),r=We(e,t,i),o="border-box"===C.css(e,"boxSizing",!1,i),s=o;if(qe.test(r)){if(!n)return r;r="auto"}return s=s&&(m.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===C.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],s=!0),(r=parseFloat(r)||0)+Ze(e,t,n||(o?"border":"content"),s,i,r)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}C.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,s,a=J(t),u=Xe.test(t),c=e.style;if(u||(t=Ke(a)),s=C.cssHooks[t]||C.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:c[t];"string"===(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),o="number"),null!=n&&n==n&&("number"===o&&(n+=r&&r[3]||(C.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,s,a=J(t);return Xe.test(t)||(t=Ke(a)),(s=C.cssHooks[t]||C.cssHooks[a])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=We(e,t,i)),"normal"===r&&t in Ge&&(r=Ge[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),C.each(["height","width"],function(e,t){C.cssHooks[t]={get:function(e,n,i){if(n)return!ze.test(C.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):ae(e,Ve,function(){return et(e,t,i)})},set:function(e,n,i){var r,o=$e(e),s="border-box"===C.css(e,"boxSizing",!1,o),a=i&&Ze(e,t,i,s,o);return s&&m.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),a&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=C.css(e,t)),Qe(0,n,a)}}}),C.cssHooks.marginLeft=Ue(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),C.each({margin:"",padding:"",border:"Width"},function(e,t){C.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(C.cssHooks[e+t].set=Qe)}),C.fn.extend({css:function(e,t){return z(this,function(e,t,n){var i,r,o={},s=0;if(Array.isArray(t)){for(i=$e(e),r=t.length;s<r;s++)o[t[s]]=C.css(e,t[s],!1,i);return o}return void 0!==n?C.style(e,t,n):C.css(e,t)},e,t,arguments.length>1)}}),C.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||C.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(C.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=C.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=C.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){C.fx.step[e.prop]?C.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[C.cssProps[e.prop]]&&!C.cssHooks[e.prop]?e.elem[e.prop]=e.now:C.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},C.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},C.fx=tt.prototype.init,C.fx.step={};var nt,it,rt=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function st(){it&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,C.fx.interval),C.fx.tick())}function at(){return n.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ct(e,t,n){for(var i,r=(lt.tweeners[t]||[]).concat(lt.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,t,e))return i}function lt(e,t,n){var i,r,o=0,s=lt.prefilters.length,a=C.Deferred().always(function(){delete u.elem}),u=function(){if(r)return!1;for(var t=nt||at(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(i);return a.notifyWith(e,[c,i,n]),i<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:C.extend({},t),opts:C.extend(!0,{specialEasing:{},easing:C.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||at(),duration:n.duration,tweens:[],createTween:function(t,n){var i=C.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,i,r,o,s;for(n in e)if(r=t[i=J(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(s=C.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(l,c.opts.specialEasing);o<s;o++)if(i=lt.prefilters[o].call(c,e,l,c.opts))return g(i.stop)&&(C._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return C.map(l,ct,c),g(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),C.fx.timer(C.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}C.Animation=C.extend(lt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],lt.tweeners[n]=lt.tweeners[n]||[],lt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,s,a,u,c,l,f="width"in t||"height"in t,h=this,d={},p=e.style,v=e.nodeType&&se(e),y=Q.get(e,"fxshow");for(i in n.queue||(null==(s=C._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,C.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],rt.test(r)){if(delete t[i],o=o||"toggle"===r,r===(v?"hide":"show")){if("show"!==r||!y||void 0===y[i])continue;v=!0}d[i]=y&&y[i]||C.style(e,i)}if((u=!C.isEmptyObject(t))||!C.isEmptyObject(d))for(i in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=y&&y.display)&&(c=Q.get(e,"display")),"none"===(l=C.css(e,"display"))&&(c?l=c:(fe([e],!0),c=e.style.display||c,l=C.css(e,"display"),fe([e]))),("inline"===l||"inline-block"===l&&null!=c)&&"none"===C.css(e,"float")&&(u||(h.done(function(){p.display=c}),null==c&&(l=p.display,c="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),u=!1,d)u||(y?"hidden"in y&&(v=y.hidden):y=Q.access(e,"fxshow",{display:c}),o&&(y.hidden=!v),v&&fe([e],!0),h.done(function(){for(i in v||fe([e]),Q.remove(e,"fxshow"),d)C.style(e,i,d[i])})),u=ct(v?y[i]:0,i,h),i in y||(y[i]=u.start,v&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?lt.prefilters.unshift(e):lt.prefilters.push(e)}}),C.speed=function(e,t,n){var i=e&&"object"==typeof e?C.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return C.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in C.fx.speeds?i.duration=C.fx.speeds[i.duration]:i.duration=C.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){g(i.old)&&i.old.call(this),i.queue&&C.dequeue(this,i.queue)},i},C.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=C.isEmptyObject(e),o=C.speed(t,n,i),s=function(){var t=lt(this,C.extend({},e),o);(r||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",o=C.timers,s=Q.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ot.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||C.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Q.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=C.timers,s=i?i.length:0;for(n.finish=!0,C.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),C.each(["toggle","show","hide"],function(e,t){var n=C.fn[t];C.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,i,r)}}),C.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){C.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),C.timers=[],C.fx.tick=function(){var e,t=0,n=C.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||C.fx.stop(),nt=void 0},C.fx.timer=function(e){C.timers.push(e),C.fx.start()},C.fx.interval=13,C.fx.start=function(){it||(it=!0,st())},C.fx.stop=function(){it=null},C.fx.speeds={slow:600,fast:200,_default:400},C.fn.delay=function(e,t){return e=C.fx&&C.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var ft,ht=C.expr.attrHandle;C.fn.extend({attr:function(e,t){return z(this,C.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){C.removeAttr(this,e)})}}),C.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?C.prop(e,t,n):(1===o&&C.isXMLDoc(e)||(r=C.attrHooks[t.toLowerCase()]||(C.expr.match.bool.test(t)?ft:void 0)),void 0!==n?null===n?void C.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=C.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&P(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ft={set:function(e,t,n){return!1===t?C.removeAttr(e,n):e.setAttribute(n,n),n}},C.each(C.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ht[t]||C.find.attr;ht[t]=function(e,t,i){var r,o,s=t.toLowerCase();return i||(o=ht[s],ht[s]=r,r=null!=n(e,t,i)?s:null,ht[s]=o),r}});var dt=/^(?:input|select|textarea|button)$/i,pt=/^(?:a|area)$/i;function vt(e){return(e.match(R)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}C.fn.extend({prop:function(e,t){return z(this,C.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[C.propFix[e]||e]})}}),C.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&C.isXMLDoc(e)||(t=C.propFix[t]||t,r=C.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=C.find.attr(e,"tabindex");return t?parseInt(t,10):dt.test(e.nodeName)||pt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(C.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),C.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){C.propFix[this.toLowerCase()]=this}),C.fn.extend({addClass:function(e){var t,n,i,r,o,s,a,u=0;if(g(e))return this.each(function(t){C(this).addClass(e.call(this,t,yt(this)))});if((t=mt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+vt(r)+" "){for(s=0;o=t[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=vt(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,o,s,a,u=0;if(g(e))return this.each(function(t){C(this).removeClass(e.call(this,t,yt(this)))});if(!arguments.length)return this.attr("class","");if((t=mt(e)).length)for(;n=this[u++];)if(r=yt(n),i=1===n.nodeType&&" "+vt(r)+" "){for(s=0;o=t[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=vt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){C(this).toggleClass(e.call(this,n,yt(this),t),t)}):this.each(function(){var t,r,o,s;if(i)for(r=0,o=C(this),s=mt(e);t=s[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=yt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+vt(yt(n))+" ").indexOf(t)>-1)return!0;return!1}});var gt=/\r/g;C.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=g(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,C(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=C.map(r,function(e){return null==e?"":e+""})),(t=C.valHooks[this.type]||C.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=C.valHooks[r.type]||C.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(gt,""):null==n?"":n:void 0}}),C.extend({valHooks:{option:{get:function(e){var t=C.find.attr(e,"value");return null!=t?t:vt(C.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],u=s?o+1:r.length;for(i=o<0?u:s?o:0;i<u;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(t=C(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,o=C.makeArray(t),s=r.length;s--;)((i=r[s]).selected=C.inArray(C.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),C.each(["radio","checkbox"],function(){C.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=C.inArray(C(e).val(),t)>-1}},m.checkOn||(C.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in n;var bt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};C.extend(C.event,{trigger:function(e,t,i,r){var o,a,u,c,l,f,h,d,v=[i||s],y=p.call(e,"type")?e.type:e,m=p.call(e,"namespace")?e.namespace.split("."):[];if(a=d=u=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!bt.test(y+C.event.triggered)&&(y.indexOf(".")>-1&&(y=(m=y.split(".")).shift(),m.sort()),l=y.indexOf(":")<0&&"on"+y,(e=e[C.expando]?e:new C.Event(y,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:C.makeArray(t,[e]),h=C.event.special[y]||{},r||!h.trigger||!1!==h.trigger.apply(i,t))){if(!r&&!h.noBubble&&!b(i)){for(c=h.delegateType||y,bt.test(c+y)||(a=a.parentNode);a;a=a.parentNode)v.push(a),u=a;u===(i.ownerDocument||s)&&v.push(u.defaultView||u.parentWindow||n)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?c:h.bindType||y,(f=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&f.apply(a,t),(f=l&&a[l])&&f.apply&&Y(a)&&(e.result=f.apply(a,t),!1===e.result&&e.preventDefault());return e.type=y,r||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(v.pop(),t)||!Y(i)||l&&g(i[y])&&!b(i)&&((u=i[l])&&(i[l]=null),C.event.triggered=y,e.isPropagationStopped()&&d.addEventListener(y,wt),i[y](),e.isPropagationStopped()&&d.removeEventListener(y,wt),C.event.triggered=void 0,u&&(i[l]=u)),e.result}},simulate:function(e,t,n){var i=C.extend(new C.Event,n,{type:e,isSimulated:!0});C.event.trigger(i,null,t)}}),C.fn.extend({trigger:function(e,t){return this.each(function(){C.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return C.event.trigger(e,t,n,!0)}}),m.focusin||C.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){C.event.simulate(t,e.target,C.event.fix(e))};C.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Q.access(i,t);r||i.addEventListener(e,n,!0),Q.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Q.access(i,t)-1;r?Q.access(i,t,r):(i.removeEventListener(e,n,!0),Q.remove(i,t))}}});var xt=n.location,kt=Date.now(),Ct=/\?/;C.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||C.error("Invalid XML: "+e),t};var Tt=/\[\]$/,jt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function St(e,t,n,i){var r;if(Array.isArray(t))C.each(t,function(t,r){n||Tt.test(e)?i(e,r):St(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==k(t))i(e,t);else for(r in t)St(e+"["+r+"]",t[r],n,i)}C.param=function(e,t){var n,i=[],r=function(e,t){var n=g(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!C.isPlainObject(e))C.each(e,function(){r(this.name,this.value)});else for(n in e)St(n,e[n],t,r);return i.join("&")},C.fn.extend({serialize:function(){return C.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=C.prop(this,"elements");return e?C.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!C(this).is(":disabled")&&Ot.test(this.nodeName)&&!Et.test(e)&&(this.checked||!he.test(e))}).map(function(e,t){var n=C(this).val();return null==n?null:Array.isArray(n)?C.map(n,function(e){return{name:t.name,value:e.replace(jt,"\r\n")}}):{name:t.name,value:n.replace(jt,"\r\n")}}).get()}});var _t=/%20/g,Pt=/#.*$/,Nt=/([?&])_=[^&]*/,At=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:GET|HEAD)$/,Dt=/^\/\//,Mt={},Ft={},Ht="*/".concat("*"),Rt=s.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(R)||[];if(g(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function qt(e,t,n,i){var r={},o=e===Ft;function s(a){var u;return r[a]=!0,C.each(e[a]||[],function(e,a){var c=a(t,n,i);return"string"!=typeof c||o||r[c]?o?!(u=c):void 0:(t.dataTypes.unshift(c),s(c),!1)}),u}return s(t.dataTypes[0])||!r["*"]&&s("*")}function $t(e,t){var n,i,r=C.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&C.extend(!0,e,i),e}Rt.href=xt.href,C.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":C.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?$t($t(e,C.ajaxSettings),t):$t(C.ajaxSettings,e)},ajaxPrefilter:Bt(Mt),ajaxTransport:Bt(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,o,a,u,c,l,f,h,d,p=C.ajaxSetup({},t),v=p.context||p,y=p.context&&(v.nodeType||v.jquery)?C(v):C.event,m=C.Deferred(),g=C.Callbacks("once memory"),b=p.statusCode||{},w={},x={},k="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(l){if(!a)for(a={};t=At.exec(o);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(e,t){return null==l&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==l&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(l)T.always(e[T.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||k;return i&&i.abort(t),j(0,t),this}};if(m.promise(T),p.url=((e||p.url||xt.href)+"").replace(Dt,xt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){c=s.createElement("a");try{c.href=p.url,c.href=c.href,p.crossDomain=Rt.protocol+"//"+Rt.host!=c.protocol+"//"+c.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=C.param(p.data,p.traditional)),qt(Mt,p,t,T),l)return T;for(h in(f=C.event&&p.global)&&0==C.active++&&C.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Lt.test(p.type),r=p.url.replace(Pt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(_t,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Ct.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Nt,"$1"),d=(Ct.test(r)?"&":"?")+"_="+kt+++d),p.url=r+d),p.ifModified&&(C.lastModified[r]&&T.setRequestHeader("If-Modified-Since",C.lastModified[r]),C.etag[r]&&T.setRequestHeader("If-None-Match",C.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ht+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(v,T,p)||l))return T.abort();if(k="abort",g.add(p.complete),T.done(p.success),T.fail(p.error),i=qt(Ft,p,t,T)){if(T.readyState=1,f&&y.trigger("ajaxSend",[T,p]),l)return T;p.async&&p.timeout>0&&(u=n.setTimeout(function(){T.abort("timeout")},p.timeout));try{l=!1,i.send(w,j)}catch(e){if(l)throw e;j(-1,e)}}else j(-1,"No Transport");function j(e,t,s,a){var c,h,d,w,x,k=t;l||(l=!0,u&&n.clearTimeout(u),i=void 0,o=a||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(w=function(e,t,n){for(var i,r,o,s,a=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){u.unshift(r);break}if(u[0]in n)o=u[0];else{for(r in n){if(!u[0]||e.converters[r+" "+u[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,T,s)),w=function(e,t,n,i){var r,o,s,a,u,c={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=l.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=l.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(s=c[u+" "+o]||c["* "+o]))for(r in c)if((a=r.split(" "))[1]===o&&(s=c[u+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[r]:!0!==c[r]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}(p,w,T,c),c?(p.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(C.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(C.etag[r]=x)),204===e||"HEAD"===p.type?k="nocontent":304===e?k="notmodified":(k=w.state,h=w.data,c=!(d=w.error))):(d=k,!e&&k||(k="error",e<0&&(e=0))),T.status=e,T.statusText=(t||k)+"",c?m.resolveWith(v,[h,k,T]):m.rejectWith(v,[T,k,d]),T.statusCode(b),b=void 0,f&&y.trigger(c?"ajaxSuccess":"ajaxError",[T,p,c?h:d]),g.fireWith(v,[T,k]),f&&(y.trigger("ajaxComplete",[T,p]),--C.active||C.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return C.get(e,t,n,"json")},getScript:function(e,t){return C.get(e,void 0,t,"script")}}),C.each(["get","post"],function(e,t){C[t]=function(e,n,i,r){return g(n)&&(r=r||i,i=n,n=void 0),C.ajax(C.extend({url:e,type:t,dataType:r,data:n,success:i},C.isPlainObject(e)&&e))}}),C._evalUrl=function(e){return C.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},C.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=C(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){C(this).wrapInner(e.call(this,t))}):this.each(function(){var t=C(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){C(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){C(this).replaceWith(this.childNodes)}),this}}),C.expr.pseudos.hidden=function(e){return!C.expr.pseudos.visible(e)},C.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},C.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var It={0:200,1223:204},Wt=C.ajaxSettings.xhr();m.cors=!!Wt&&"withCredentials"in Wt,m.ajax=Wt=!!Wt,C.ajaxTransport(function(e){var t,i;if(m.cors||Wt&&!e.crossDomain)return{send:function(r,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(It[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),C.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),C.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return C.globalEval(e),e}}}),C.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),C.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=C("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}});var Ut,zt=[],Xt=/(=)\?(?=&|$)|\?\?/;C.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=zt.pop()||C.expando+"_"+kt++;return this[e]=!0,e}}),C.ajaxPrefilter("json jsonp",function(e,t,i){var r,o,s,a=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||C.error(r+" was not called"),s[0]},e.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?C(n).removeProp(r):n[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,zt.push(r)),s&&g(o)&&o(s[0]),s=o=void 0}),"script"}),m.createHTMLDocument=((Ut=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),C.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(i)):t=s),r=N.exec(e),o=!n&&[],r?[t.createElement(r[1])]:(r=xe([e],t,o),o&&o.length&&C(o).remove(),C.merge([],r.childNodes)));var i,r,o},C.fn.load=function(e,t,n){var i,r,o,s=this,a=e.indexOf(" ");return a>-1&&(i=vt(e.slice(a)),e=e.slice(0,a)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),s.length>0&&C.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){o=arguments,s.html(i?C("<div>").append(C.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},C.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){C.fn[t]=function(e){return this.on(t,e)}}),C.expr.pseudos.animated=function(e){return C.grep(C.timers,function(t){return e===t.elem}).length},C.offset={setOffset:function(e,t,n){var i,r,o,s,a,u,c=C.css(e,"position"),l=C(e),f={};"static"===c&&(e.style.position="relative"),a=l.offset(),o=C.css(e,"top"),u=C.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1?(s=(i=l.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(u)||0),g(t)&&(t=t.call(e,n,C.extend({},a))),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+r),"using"in t?t.using.call(e,f):l.css(f)}},C.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){C.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===C.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===C.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=C(e).offset()).top+=C.css(e,"borderTopWidth",!0),r.left+=C.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-C.css(i,"marginTop",!0),left:t.left-r.left-C.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===C.css(e,"position");)e=e.offsetParent;return e||ke})}}),C.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;C.fn[e]=function(i){return z(this,function(e,i,r){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r},e,i,arguments.length)}}),C.each(["top","left"],function(e,t){C.cssHooks[t]=Ue(m.pixelPosition,function(e,n){if(n)return n=We(e,t),qe.test(n)?C(e).position()[t]+"px":n})}),C.each({Height:"height",Width:"width"},function(e,t){C.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){C.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return z(this,function(t,n,r){var o;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?C.css(t,n,a):C.style(t,n,r,a)},t,s?r:void 0,s)}})}),C.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){C.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),C.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),C.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),C.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return i=u.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(u.call(arguments)))}).guid=e.guid=e.guid||C.guid++,r},C.holdReady=function(e){e?C.readyWait++:C.ready(!0)},C.isArray=Array.isArray,C.parseJSON=JSON.parse,C.nodeName=P,C.isFunction=g,C.isWindow=b,C.camelCase=J,C.type=k,C.now=Date.now,C.isNumeric=function(e){var t=C.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return C}.apply(t,[]))||(e.exports=i);var Vt=n.jQuery,Gt=n.$;return C.noConflict=function(e){return n.$===C&&(n.$=Gt),e&&n.jQuery===C&&(n.jQuery=Vt),C},r||(n.jQuery=n.$=C),C})},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.Dispatcher=void 0;var o=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"events",{}),e.instance)return e.instance;e.instance=this}var t,n,o;return t=e,(n=[{key:"on",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"off",value:function(e,t){e in this.events!=!1&&this.events[e].splice(this.events[e].indexOf(t),1)}},{key:"trigger",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];if(e in this.events!=!1)for(var r in this.events[e])this.events[e][r]&&this.events[e][r].apply(this,Array.prototype.slice.call(arguments,1))}}])&&i(t.prototype,n),o&&i(t,o),e}();t.Dispatcher=o,r(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransition=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1);function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"$oldContainer",void 0),a(this,"$newContainer",void 0),a(this,"newContainerLoading",void 0),a(this,"deferred",void 0),a(this,"debug",(0,r.default)("barba:BaseTransition"))}var t,n,i;return t=e,(n=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.deferred=o.Utils.deferred();var i=o.Utils.deferred();return this.newContainerLoading=i.promise,this.start(),t.then(function(e){n.$newContainer=e,i.resolve()}),this.deferred.promise}},{key:"done",value:function(){this.debug("done"),this.$oldContainer.remove(),this.$newContainer.css("visibility","visible"),this.deferred.resolve()}}])&&s(t.prototype,n),i&&s(t,i),e}();t.BaseTransition=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pjax=void 0;var i=n(3),r=n(1),o=n(9),s=n(8),a=n(6),u=n(7);function c(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function l(e,t,n){return t&&c(e.prototype,t),n&&c(e,n),e}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,"dom",new a.Dom),f(this,"history",new u.HistoryManager),f(this,"cacheEnabled",void 0),f(this,"transitionProgress",!1),f(this,"dispatcher",new i.Dispatcher),f(this,"transition",void 0),this.transition=t||new s.HideShowTransition}return l(e,null,[{key:"preventCheck",value:function(e,t){if(!window.history.pushState)return!1;var n=this.getHref(t);return!(!t||!n)&&(!(e.which>1||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey)&&((!t.target||"_blank"!==t.target)&&(window.location.protocol===t.protocol&&window.location.hostname===t.hostname&&(r.Utils.getPort()===r.Utils.getPort(t.port)&&(!(n.indexOf("#")>-1)&&((!t.getAttribute||"string"!=typeof t.getAttribute("download"))&&(r.Utils.cleanLink(n)!==r.Utils.cleanLink(location.href)&&!t.classList.contains(this.ignoreClassLink))))))))}},{key:"getHref",value:function(e){if(e)return e.getAttribute&&"string"==typeof e.getAttribute("xlink:href")?e.getAttribute("xlink:href"):"string"==typeof e.href?e.href:void 0}}]),l(e,[{key:"start",value:function(){this.init()}},{key:"getCurrentUrl",value:function(){return r.Utils.cleanLink(r.Utils.getUrl())}},{key:"goTo",value:function(e,t){return t?window.open(e,"_blank").focus():0!==e.indexOf("http")?(window.history.pushState(null,null,e),this.onStateChange()):void this.forceGoTo(e)}},{key:"getTransition",value:function(){return this.transition}},{key:"bindEvents",value:function(){window.addEventListener("popstate",this.onStateChange.bind(this))}},{key:"forceGoTo",value:function(e){e instanceof Location&&(window.location=e),"string"==typeof e&&(window.location.href=e)}},{key:"load",value:function(t){var n,i=r.Utils.deferred(),o=this;return(n=e.cache.get(t))||(n=r.Utils.xhr(t),e.cache.set(t,n)),n.then(function(t){var n=o.dom.parseResponse(t);o.dom.putContainer(n),o.cacheEnabled||e.cache.reset(),i.resolve(n)},function(){o.forceGoTo(t),i.reject()}),i.promise}},{key:"onLinkClick",value:function(t){for(var n=t.target;n&&!e.getHref(n);)n=n.parentNode;if(e.preventCheck(t,n)){t.stopPropagation(),t.preventDefault(),this.dispatcher.trigger("linkClicked",n,t);var i=e.getHref(n);this.goTo(i)}}},{key:"onStateChange",value:function(){var e=this.getCurrentUrl();if(this.transitionProgress&&this.forceGoTo(e),this.history.currentStatus().url===e)return!1;this.history.add(e);var t=this.load(e),n=this.getTransition();this.transitionProgress=!0,this.dispatcher.trigger("initStateChange",this.history.currentStatus(),this.history.prevStatus());var i=n.init(this.dom.getContainer(),t);t.then(this.onNewContainerLoaded.bind(this)),i.then(this.onTransitionEnd.bind(this))}},{key:"onNewContainerLoaded",value:function(e){this.history.currentStatus().namespace=this.dom.getNamespace(e),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),this.history.prevStatus(),e,this.dom.currentHTML,!1)}},{key:"onTransitionEnd",value:function(){this.transitionProgress=!1,this.dispatcher.trigger("transitionCompleted",this.history.currentStatus(),this.history.prevStatus())}},{key:"init",value:function(){var e=this.dom.getContainer();this.dom.getWrapper().attr("aria-live","polite"),this.history.add(this.getCurrentUrl(),this.dom.getNamespace(e)),this.dispatcher.trigger("initStateChange",this.history.currentStatus()),this.dispatcher.trigger("newPageReady",this.history.currentStatus(),{},e,this.dom.currentHTML,!0),this.dispatcher.trigger("transitionCompleted",this.history.currentStatus()),this.bindEvents()}}]),e}();t.Pjax=h,f(h,"ignoreClassLink","no-barba"),f(h,"cache",new o.BaseCache)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dom=void 0;var i,r=(i=n(2))&&i.__esModule?i:{default:i};function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"dataNamespace","namespace"),s(this,"wrapperId","barba-wrapper"),s(this,"containerClass","barba-container"),s(this,"currentHTML",void 0)}var t,n,i;return t=e,(n=[{key:"parseResponse",value:function(e){this.currentHTML=e;var t=(0,r.default)(r.default.parseHTML(e)),n=t.filter("title");return n.length&&(document.title=n.text()),this.getContainer(t)}},{key:"getWrapper",value:function(){var e=(0,r.default)("#"+this.wrapperId);if(!e)throw new Error("Barba.js: wrapper not found!");return e}},{key:"getContainer",value:function(e){if(e||(e=(0,r.default)(document.body)),!e)throw new Error("Barba.js: DOM not ready!");var t=this.parseContainer(e);if(!t)throw new Error("Barba.js: no container found");return t}},{key:"getNamespace",value:function(e){return e&&e.data()?e.data("namespace"):null}},{key:"putContainer",value:function(e){e.css("visibility","hidden"),this.getWrapper().append(e)}},{key:"parseContainer",value:function(e){return e.find("."+this.containerClass)}}])&&o(t.prototype,n),i&&o(t,i),e}();t.Dom=a},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.HistoryManager=void 0;var o=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"history",new Array),e.instance?e.instance:(e.instance=this,e.instance)}var t,n,o;return t=e,(n=[{key:"currentStatus",value:function(){return this.history[this.history.length-1]}},{key:"prevStatus",value:function(){var e=this.history;return e.length<2?null:e[e.length-2]}},{key:"add",value:function(e,t){t||(t=void 0),this.history.push({namespace:t,url:e})}}])&&i(t.prototype,n),o&&i(t,o),e}();t.HistoryManager=o,r(o,"instance",void 0)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return i.CustomTransition}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return r.BaseTransition}}),Object.defineProperty(t,"ITransition",{enumerable:!0,get:function(){return r.ITransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return o.HideShowTransition}});var i=n(30),r=n(4),o=n(29)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseCache=void 0;var i=n(1);function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(){var t,n,i;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),i=void 0,(n="data")in(t=this)?Object.defineProperty(t,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[n]=i,this.data={}}var t,n,o;return t=e,(n=[{key:"set",value:function(e,t){return this.data[e]=t}},{key:"get",value:function(e){return this.data[e]}},{key:"reset",value:function(){this.data={}}},{key:"extend",value:function(e){return i.Utils.extend(!1,this,e)}}])&&r(t.prototype,n),o&&r(t,o),e}();t.BaseCache=o},function(e,t,n){e.exports=function(){"use strict";var e=["prefix","templateDelimiters","rootInterface","preloadData","handler"],t=["binders","formatters","components","adapters"],n=0,i=1,r=0,o=1,s=/^'.*'$|^".*"$/;function a(e){var t=n,r=e;return s.test(e)?r=e.slice(1,-1):"true"===e?r=!0:"true"===e?r=!0:"false"===e?r=!1:"null"===e?r=null:"undefined"===e?r=void 0:isNaN(e)?function(e){try{var t=JSON.parse(e);return t instanceof Array||t instanceof Object}catch(e){return!1}}(e)?r=JSON.parse(e):t=i:r=Number(e),{type:t,value:r}}function u(e,t){for(var n,i=e.length,s=0,a=0,u=t[0],c=t[1];a<i;){if((s=e.indexOf(u,a))<0){n&&n.push({type:r,value:e.slice(a)});break}if(n=n||[],s>0&&a<s&&n.push({type:r,value:e.slice(a,s)}),a=s+u.length,(s=e.indexOf(c,a))<0){var l=e.slice(a-c.length),f=n[n.length-1];f&&f.type===r?f.value+=l:n.push({type:r,value:l});break}var h=e.slice(a,s).trim();n.push({type:o,value:h}),a=s+c.length}return n}var c,l,f,h={binders:{},components:{},formatters:{},adapters:{},_prefix:"rv",_fullPrefix:"rv-",get prefix(){return this._prefix},set prefix(e){this._prefix=e,this._fullPrefix=e+"-"},parseTemplate:u,parseType:a,templateDelimiters:["{","}"],rootInterface:".",preloadData:!0,handler:function(e,t,n){this.call(e,t,n.view.models)},fallbackBinder:function(e,t){null!=t?e.setAttribute(this.type,t):e.removeAttribute(this.type)},configure:function(e){var n=this;e&&Object.keys(e).forEach(function(i){var r=e[i];t.indexOf(i)>-1?Object.keys(r).forEach(function(e){n[i][e]=r[e]}):n[i]=r})}};function d(e){return"object"==typeof e&&null!==e}function p(e,t,n){this.keypath=t,this.callback=n,this.objectPath=[],this.parse(),this.obj=this.getRootObject(e),d(this.target=this.realize())&&this.set(!0,this.key,this.target,this.callback)}p.updateOptions=function(e){c=e.adapters,l=Object.keys(c),f=e.rootInterface},p.tokenize=function(e,t){var n,i,r=[],o={i:t,path:""};for(n=0;n<e.length;n++)i=e.charAt(n),~l.indexOf(i)?(r.push(o),o={i:i,path:""}):o.path+=i;return r.push(o),r},p.prototype.parse=function(){var e,t;l.length||function(e){throw new Error("[Observer] "+e)}("Must define at least one adapter interface."),~l.indexOf(this.keypath[0])?(t=this.keypath[0],e=this.keypath.substr(1)):(t=f,e=this.keypath),this.tokens=p.tokenize(e,t),this.key=this.tokens.pop()},p.prototype.realize=function(){for(var e,t,n=this.obj,i=-1,r=0;r<this.tokens.length;r++)t=this.tokens[r],d(n)?(void 0!==this.objectPath[r]?n!==(e=this.objectPath[r])&&(this.set(!1,t,e,this),this.set(!0,t,n,this),this.objectPath[r]=n):(this.set(!0,t,n,this),this.objectPath[r]=n),n=this.get(t,n)):(-1===i&&(i=r),(e=this.objectPath[r])&&this.set(!1,t,e,this));return-1!==i&&this.objectPath.splice(i),n},p.prototype.sync=function(){var e,t,n;(e=this.realize())!==this.target?(d(this.target)&&this.set(!1,this.key,this.target,this.callback),d(e)&&this.set(!0,this.key,e,this.callback),t=this.value(),this.target=e,((n=this.value())!==t||n instanceof Function)&&this.callback.sync()):e instanceof Array&&this.callback.sync()},p.prototype.value=function(){if(d(this.target))return this.get(this.key,this.target)},p.prototype.setValue=function(e){d(this.target)&&c[this.key.i].set(this.target,this.key.path,e)},p.prototype.get=function(e,t){return c[e.i].get(t,e.path)},p.prototype.set=function(e,t,n,i){var r=e?"observe":"unobserve";c[t.i][r](n,t.path,i)},p.prototype.unobserve=function(){for(var e,t,n=0;n<this.tokens.length;n++)t=this.tokens[n],(e=this.objectPath[n])&&this.set(!1,t,e,this);d(this.target)&&this.set(!1,this.key,this.target,this.callback)},p.prototype.getRootObject=function(e){var t,n;if(!e.$parent)return e;for(t=this.tokens.length?this.tokens[0].path:this.key.path,n=e;n.$parent&&void 0===n[t];)n=n.$parent;return n};var v=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},m=/[^\s']+|'([^']|'[^\s])*'|"([^"]|"[^\s])*"/g,g=/\s+/,b=function(){function e(t,n,i,r,o,s,a){v(this,e),this.view=t,this.el=n,this.type=i,this.keypath=r,this.binder=o,this.arg=s,this.formatters=a,this.formatterObservers={},this.model=void 0}return e.prototype.observe=function(e,t){return new p(e,t,this)},e.prototype.parseTarget=function(){if(this.keypath){var e=a(this.keypath);0===e.type?this.value=e.value:(this.observer=this.observe(this.view.models,this.keypath),this.model=this.observer.target)}else this.value=void 0},e.prototype.parseFormatterArguments=function(e,t){var n=this;return e.map(a).map(function(e,i){var r=e.type,o=e.value;if(0===r)return o;n.formatterObservers[t]||(n.formatterObservers[t]={});var s=n.formatterObservers[t][i];return s||(s=n.observe(n.view.models,o),n.formatterObservers[t][i]=s),s.value()})},e.prototype.formattedValue=function(e){var t=this;return this.formatters.reduce(function(e,n,i){var r=n.match(m),o=r.shift(),s=t.view.options.formatters[o],a=t.parseFormatterArguments(r,i);return s&&s.read instanceof Function?e=s.read.apply(s,[e].concat(a)):s instanceof Function&&(e=s.apply(void 0,[e].concat(a))),e},e)},e.prototype.eventHandler=function(e){var t=this,n=t.view.options.handler;return function(i){n.call(e,this,i,t)}},e.prototype.set=function(e){e=e instanceof Function&&!this.binder.function?this.formattedValue(e.call(this.model)):this.formattedValue(e);var t=this.binder.routine||this.binder;t instanceof Function&&t.call(this,this.el,e)},e.prototype.sync=function(){this.observer?(this.model=this.observer.target,this.set(this.observer.value())):this.set(this.value)},e.prototype.publish=function(){var e=this;if(this.observer){var t=this.formatters.reduceRight(function(t,n,i){var r=n.split(g),o=r.shift(),s=e.view.options.formatters[o],a=e.parseFormatterArguments(r,i);return s&&s.publish&&(t=s.publish.apply(s,[t].concat(a))),t},this.getValue(this.el));this.observer.setValue(t)}},e.prototype.bind=function(){this.parseTarget(),this.binder.hasOwnProperty("bind")&&this.binder.bind.call(this,this.el),this.view.options.preloadData&&this.sync()},e.prototype.unbind=function(){var e=this;this.binder.unbind&&this.binder.unbind.call(this,this.el),this.observer&&this.observer.unobserve(),Object.keys(this.formatterObservers).forEach(function(t){var n=e.formatterObservers[t];Object.keys(n).forEach(function(e){n[e].unobserve()})}),this.formatterObservers={}},e.prototype.update=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.observer&&(this.model=this.observer.target),this.binder.update&&this.binder.update.call(this,e)},e.prototype.getValue=function(e){return this.binder&&this.binder.getValue?this.binder.getValue.call(this,e):function(e){var t=[];return"checkbox"===e.type?e.checked:"select-multiple"===e.type?(e.options.forEach(function(e){e.selected&&t.push(e.value)}),t):e.value}(e)},e}(),w=function(n){function i(e,t,r){v(this,i);var o=y(this,n.call(this,e,t,r,null,null,null,null));o.view=e,o.el=t,o.type=r,o.component=e.options.components[o.type],o.static={},o.observers={},o.upstreamObservers={};for(var s=h._fullPrefix,a=0,u=t.attributes.length;a<u;a++){var c=t.attributes[a];if(0!==c.name.indexOf(s)){var l=o.camelCase(c.name),f=o.component.static;f&&f.indexOf(l)>-1?o.static[l]=c.value:o.observers[l]=c.value}}return o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.sync=function(){},i.prototype.update=function(){},i.prototype.publish=function(){},i.prototype.locals=function(){var e=this,t={};return Object.keys(this.static).forEach(function(n){t[n]=e.static[n]}),Object.keys(this.observers).forEach(function(n){t[n]=e.observers[n].value()}),t},i.prototype.camelCase=function(e){return e.replace(/-([a-z])/g,function(e){e[1].toUpperCase()})},i.prototype.bind=function(){var n=this,i={};if(this.bound||(Object.keys(this.observers).forEach(function(e){var t=n.observers[e];n.observers[e]=n.observe(n.view.models,t,function(e){return function(){n.componentView.models[e]=n.observers[e].value()}}.call(n,e))}),this.bound=!0),this.componentView)this.componentView.bind();else{this.el.innerHTML=this.component.template.call(this);var r=this.component.initialize.call(this,this.el,this.locals());this.el._bound=!0,t.forEach(function(e){i[e]={},n.component[e]&&Object.keys(n.component[e]).forEach(function(t){i[e][t]=n.component[e][t]}),Object.keys(n.view.options[e]).forEach(function(t){i[e][t]&&(i[e][t]=n.view[e][t])})}),e.forEach(function(e){null!=n.component[e]?i[e]=n.component[e]:i[e]=n.view[e]}),this.componentView=h.bind(Array.prototype.slice.call(this.el.childNodes),r,i),Object.keys(this.observers).forEach(function(e){var t=n.observers[e],i=n.componentView.models,r=n.observe(i,e,function(e,t){return function(){t.setValue(n.componentView.models[e])}}.call(n,e,t));n.upstreamObservers[e]=r})}},i.prototype.unbind=function(){var e=this;Object.keys(this.upstreamObservers).forEach(function(t){e.upstreamObservers[t].unobserve()}),Object.keys(this.observers).forEach(function(t){e.observers[t].unobserve()}),this.componentView&&this.componentView.unbind.call(this)},i}(b),x={routine:function(e,t){e.data=null!=t?t:""}},k=/((?:'[^']*')*(?:(?:[^\|']*(?:'[^']*')+[^\|']*)+|[^\|]+))|^$/g,C=function e(t,n){var i=!1;if(3===n.nodeType){var r=u(n.data,h.templateDelimiters);if(r){for(var o=0;o<r.length;o++){var s=r[o],a=document.createTextNode(s.value);n.parentNode.insertBefore(a,n),1===s.type&&t.buildBinding(a,null,s.value,x,null)}n.parentNode.removeChild(n)}i=!0}else 1===n.nodeType&&(i=t.traverse(n));if(!i)for(var c=0;c<n.childNodes.length;c++)e(t,n.childNodes[c])},T=function(e,t){var n=e.binder&&e.binder.priority||0,i=t.binder&&t.binder.priority||0;return i-n},j=function(e){return e.trim()},E=function(){function e(t,n,i){v(this,e),t.jquery||t instanceof Array?this.els=t:this.els=[t],this.models=n,this.options=i,this.build()}return e.prototype.buildBinding=function(e,t,n,i,r){var o=n.match(k).map(j),s=o.shift();this.bindings.push(new b(this,e,t,s,i,r,o))},e.prototype.build=function(){this.bindings=[];var e=this.els,t=void 0,n=void 0;for(t=0,n=e.length;t<n;t++)C(this,e[t]);this.bindings.sort(T)},e.prototype.traverse=function(e){for(var t,n,i,r,o=h._fullPrefix,s="SCRIPT"===e.nodeName||"STYLE"===e.nodeName,a=e.attributes,u=[],c=this.options.starBinders,l=0,f=a.length;l<f;l++){var d=a[l];if(0===d.name.indexOf(o)){if(t=d.name.slice(o.length),n=this.options.binders[t],r=void 0,!n)for(var p=0;p<c.length;p++)if(i=c[p],t.slice(0,i.length-1)===i.slice(0,-1)){n=this.options.binders[i],r=t.slice(i.length-1);break}if(n||(n=h.fallbackBinder),n.block)return this.buildBinding(e,t,d.value,n,r),e.removeAttribute(d.name),!0;u.push({attr:d,binder:n,type:t,arg:r})}}for(var v=0;v<u.length;v++){var y=u[v];this.buildBinding(e,y.type,y.attr.value,y.binder,y.arg),e.removeAttribute(y.attr.name)}return s||(t=e.nodeName.toLowerCase(),this.options.components[t]&&!e._bound&&(this.bindings.push(new w(this,e,t)),s=!0)),s},e.prototype.bind=function(){this.bindings.forEach(function(e){e.bind()})},e.prototype.unbind=function(){this.bindings.forEach(function(e){e.unbind()})},e.prototype.sync=function(){this.bindings.forEach(function(e){e.sync()})},e.prototype.publish=function(){this.bindings.forEach(function(e){e.binder&&e.binder.publishes&&e.publish()})},e.prototype.update=function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Object.keys(t).forEach(function(n){e.models[n]=t[n]}),this.bindings.forEach(function(e){e.update&&e.update(t)})},e}(),O=["push","pop","shift","unshift","sort","reverse","splice"],S={counter:0,weakmap:{},weakReference:function(e){if(!e.hasOwnProperty("__rv")){var t=this.counter++;Object.defineProperty(e,"__rv",{value:t})}return this.weakmap[e.__rv]||(this.weakmap[e.__rv]={callbacks:{}}),this.weakmap[e.__rv]},cleanupWeakReference:function(e,t){Object.keys(e.callbacks).length||e.pointers&&Object.keys(e.pointers).length||delete this.weakmap[t]},stubFunction:function(e,t){var n=e[t],i=this.weakReference(e),r=this.weakmap;e[t]=function(){for(var t=arguments.length,o=Array(t),s=0;s<t;s++)o[s]=arguments[s];var a=n.apply(e,o);return Object.keys(i.pointers).forEach(function(e){var t=i.pointers[e];r[e]&&r[e].callbacks[t]instanceof Array&&r[e].callbacks[t].forEach(function(e){e.sync()})}),a}},observeMutations:function(e,t,n){var i=this;if(e instanceof Array){var r=this.weakReference(e);r.pointers||(r.pointers={},O.forEach(function(t){i.stubFunction(e,t)})),r.pointers[t]||(r.pointers[t]=[]),-1===r.pointers[t].indexOf(n)&&r.pointers[t].push(n)}},unobserveMutations:function(e,t,n){if(e instanceof Array&&null!=e.__rv){var i=this.weakmap[e.__rv];if(i){var r=i.pointers[t];if(r){var o=r.indexOf(n);o>-1&&r.splice(o,1),r.length||delete i.pointers[t],this.cleanupWeakReference(i,e.__rv)}}}},observe:function(e,t,n){var i,r=this,o=this.weakReference(e).callbacks;if(!o[t]){o[t]=[];var s=Object.getOwnPropertyDescriptor(e,t);s&&(s.get||s.set||!s.configurable)||(i=e[t],Object.defineProperty(e,t,{enumerable:!0,get:function(){return i},set:function(n){if(n!==i){r.unobserveMutations(i,e.__rv,t),i=n;var o=r.weakmap[e.__rv];if(o){var s=o.callbacks[t];s&&s.forEach(function(e){e.sync()}),r.observeMutations(n,e.__rv,t)}}}}))}-1===o[t].indexOf(n)&&o[t].push(n),this.observeMutations(e[t],e.__rv,t)},unobserve:function(e,t,n){var i=this.weakmap[e.__rv];if(i){var r=i.callbacks[t];if(r){var o=r.indexOf(n);o>-1&&(r.splice(o,1),r.length||(delete i.callbacks[t],this.unobserveMutations(e[t],e.__rv,t))),this.cleanupWeakReference(i,e.__rv)}}},get:function(e,t){return e[t]},set:function(e,t,n){e[t]=n}},_=function(e){return null!=e?e.toString():void 0};function P(e,t,n){var i=e.el.cloneNode(!0),r=new E(i,t,e.view.options);return r.bind(),e.marker.parentNode.insertBefore(i,n),r}var N={"on-*":{function:!0,priority:1e3,unbind:function(e){this.handler&&e.removeEventListener(this.arg,this.handler)},routine:function(e,t){this.handler&&e.removeEventListener(this.arg,this.handler),this.handler=this.eventHandler(t),e.addEventListener(this.arg,this.handler)}},"each-*":{block:!0,priority:4e3,bind:function(e){this.marker?this.iterated.forEach(function(e){e.bind()}):(this.marker=document.createComment(" tinybind: "+this.type+" "),this.iterated=[],e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e))},unbind:function(e){this.iterated&&this.iterated.forEach(function(e){e.unbind()})},routine:function(e,t){var n=this,i=this.arg;t=t||[];var r=e.getAttribute("index-property")||"$index";t.forEach(function(e,t){var o={$parent:n.view.models};o[r]=t,o[i]=e;var s=n.iterated[t];if(s)if(s.models[i]!==e){for(var a=void 0,u=void 0,c=t+1;c<n.iterated.length;c++)if((u=n.iterated[c]).models[i]===e){a=c;break}void 0!==a?(n.iterated.splice(a,1),n.marker.parentNode.insertBefore(u.els[0],s.els[0]),u.models[r]=t):u=P(n,o,s.els[0]),n.iterated.splice(t,0,u)}else s.models[r]=t;else{var l=n.marker;n.iterated.length&&(l=n.iterated[n.iterated.length-1].els[0]),s=P(n,o,l.nextSibling),n.iterated.push(s)}}),this.iterated.length>t.length&&function(e,t){for(var n=0;n<e;n++)t()}(this.iterated.length-t.length,function(){var e=n.iterated.pop();e.unbind(),n.marker.parentNode.removeChild(e.els[0])}),"OPTION"===e.nodeName&&this.view.bindings.forEach(function(e){e.el===n.marker.parentNode&&"value"===e.type&&e.sync()})},update:function(e){var t=this,n={};Object.keys(e).forEach(function(i){i!==t.arg&&(n[i]=e[i])}),this.iterated.forEach(function(e){e.update(n)})}},"class-*":function(e,t){var n=" "+e.className+" ";t!==n.indexOf(" "+this.arg+" ")>-1&&(e.className=t?e.className+" "+this.arg:n.replace(" "+this.arg+" "," ").trim())},text:function(e,t){e.textContent=null!=t?t:""},html:function(e,t){e.innerHTML=null!=t?t:""},show:function(e,t){e.style.display=t?"":"none"},hide:function(e,t){e.style.display=t?"none":""},enabled:function(e,t){e.disabled=!t},disabled:function(e,t){e.disabled=!!t},checked:{publishes:!0,priority:2e3,bind:function(e){var t=this;this.callback||(this.callback=function(){t.publish()}),e.addEventListener("change",this.callback)},unbind:function(e){e.removeEventListener("change",this.callback)},routine:function(e,t){"radio"===e.type?e.checked=_(e.value)===_(t):e.checked=!!t}},value:{publishes:!0,priority:3e3,bind:function(e){if(this.isRadio="INPUT"===e.tagName&&"radio"===e.type,!this.isRadio){this.event=e.getAttribute("event-name")||("SELECT"===e.tagName?"change":"input");var t=this;this.callback||(this.callback=function(){t.publish()}),e.addEventListener(this.event,this.callback)}},unbind:function(e){this.isRadio||e.removeEventListener(this.event,this.callback)},routine:function(e,t){if(this.isRadio)e.setAttribute("value",t);else if("select-multiple"===e.type){if(t instanceof Array)for(var n=0;n<e.length;n++){var i=e[n];i.selected=t.indexOf(i.value)>-1}}else _(t)!==_(e.value)&&(e.value=null!=t?t:"")}},if:{block:!0,priority:4e3,bind:function(e){this.marker?!1===this.bound&&this.nested&&this.nested.bind():(this.marker=document.createComment(" tinybind: "+this.type+" "+this.keypath+" "),this.attached=!1,e.parentNode.insertBefore(this.marker,e),e.parentNode.removeChild(e)),this.bound=!0},unbind:function(){this.nested&&(this.nested.unbind(),this.bound=!1)},routine:function(e,t){(t=!!t)!==this.attached&&(t?(this.nested||(this.nested=new E(e,this.view.models,this.view.options),this.nested.bind()),this.marker.parentNode.insertBefore(e,this.marker.nextSibling),this.attached=!0):(e.parentNode.removeChild(e),this.attached=!1))},update:function(e){this.nested&&this.nested.update(e)}}};return h.binders=N,h.adapters["."]=S,h.bind=function(n,i,r){var o={};i=i||{},r=r||{},t.forEach(function(e){o[e]=Object.create(null),r[e]&&Object.keys(r[e]).forEach(function(t){o[e][t]=r[e][t]}),Object.keys(h[e]).forEach(function(t){o[e][t]||(o[e][t]=h[e][t])})}),e.forEach(function(e){var t=r[e];o[e]=null!=t?t:h[e]}),o.starBinders=Object.keys(o.binders).filter(function(e){return e.indexOf("*")>0}),p.updateOptions(o);var s=new E(n,i,o);return s.bind(),s},h.init=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};t||(t=document.createElement("div")),e=h.components[e],t.innerHTML=e.template.call(h,t);var i=e.initialize.call(h,t,n),r=h.bind(t,i);return r.bind(),r},h.formatters.negate=h.formatters.not=function(e){return!e},h}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tetris=void 0;var i,r,o,s=(i=n(2))&&i.__esModule?i:{default:i};function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e[e.UP=0]="UP",e[e.RIGHT=1]="RIGHT",e[e.DOWN=2]="DOWN",e[e.LEFT=3]="LEFT",e[e.MIN=0]="MIN",e[e.MAX=3]="MAX"}(r||(r={})),function(e){e[e.ESC=27]="ESC",e[e.SPACE=32]="SPACE",e[e.LEFT=37]="LEFT",e[e.UP=38]="UP",e[e.RIGHT=39]="RIGHT",e[e.DOWN=40]="DOWN"}(o||(o={}));var c=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"$canvas",void 0),u(this,"$playBtn",void 0),u(this,"$rows",void 0),u(this,"$score",void 0),u(this,"ctx",void 0),u(this,"$ucanvas",void 0),u(this,"$menu",void 0),u(this,"uctx",void 0),u(this,"speed",{start:.6,decrement:.005,min:.1}),u(this,"nu",5),u(this,"vw",void 0),u(this,"vh",void 0),u(this,"aspectRatio",void 0),u(this,"orientation",void 0),u(this,"nx",void 0),u(this,"ny",void 0),u(this,"lineWidthXl",void 0),u(this,"dx",void 0),u(this,"dy",void 0),u(this,"dnextx",void 0),u(this,"dnexty",void 0),u(this,"blocks",void 0),u(this,"actions",void 0),u(this,"playing",void 0),u(this,"dt",void 0),u(this,"current",void 0),u(this,"next",void 0),u(this,"score",void 0),u(this,"vscore",void 0),u(this,"rows",void 0),u(this,"step",void 0),u(this,"i",{name:"i",size:4,blocks:[3840,8738,240,17476],color:"#0A9177"}),u(this,"j",{name:"j",size:3,blocks:[17600,36352,25664,3616],color:"#AB1A62"}),u(this,"l",{name:"l",size:3,blocks:[17504,3712,50240,11776],color:"#050506"}),u(this,"o",{name:"o",size:2,blocks:[52224,52224,52224,52224],color:"#0A9177"}),u(this,"s",{name:"s",size:3,blocks:[1728,35904,27648,17952],color:"#AB1A62"}),u(this,"t",{name:"t",size:3,blocks:[3648,19520,19968,17984],color:"#050506"}),u(this,"z",{name:"z",size:3,blocks:[3168,19584,50688,9792],color:"#0A9177"}),u(this,"pieces",new Array),u(this,"invalid",{court:!1,next:!1,rows:!1,score:!1}),this.$canvas=(0,s.default)("#canvas"),this.$playBtn=(0,s.default)("#start"),this.$rows=(0,s.default)("#rows"),this.$score=(0,s.default)("#score"),this.$ucanvas=(0,s.default)("#upcoming"),this.$menu=(0,s.default)("#menu"),!this.$canvas.length)throw new Error("$canvas not set");if(this.ctx=this.$canvas.get(0).getContext("2d"),null===this.ctx)throw new Error("ctx not set");this.uctx=this.$ucanvas.get(0).getContext("2d"),this.speed={start:.6,decrement:.005,min:.1},this.nu=5,this.vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0),this.vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0),this.aspectRatio=this.vh<this.vw?[1,2]:[2,1],this.orientation=this.aspectRatio[0]<this.aspectRatio[1]?"landscape":"portrait",this.nx=10*this.aspectRatio[1],this.ny=10*this.aspectRatio[0],this.lineWidthXl=3,this.$menu.hide(),this.resize(),this.reset()}var t,n,i;return t=e,(n=[{key:"run",value:function(){var e=this;this.addEvents();var t=this.timestamp(),n=t;this.resize(),this.reset(),function i(){t=e.timestamp(),e.update(Math.min(1,(t-n)/1e3)),e.draw(),n=t,window.requestAnimationFrame(i)}()}},{key:"get",value:function(e){return document.getElementById(e)}},{key:"timestamp",value:function(){return(new Date).getTime()}},{key:"random",value:function(e,t){return e+Math.random()*(t-e)}},{key:"eachblock",value:function(e,t,n,i,r){var o,s=0,a=0,u=e.blocks[i];for(o=32768;o>0;o>>=1)u&o&&r(t+a,n+s),4==++a&&(a=0,++s)}},{key:"occupied",value:function(e,t,n,i){var r=this,o=!1;return this.eachblock(e,t,n,i,function(e,t){(e<0||e>=r.nx||t<0||t>=r.ny||r.getBlock(e,t))&&(o=!0)}),o}},{key:"unoccupied",value:function(e,t,n,i){return!this.occupied(e,t,n,i)}},{key:"randomPiece",value:function(){0===this.pieces.length&&(this.pieces=[this.i,this.i,this.i,this.i,this.j,this.j,this.j,this.j,this.l,this.l,this.l,this.l,this.o,this.o,this.o,this.o,this.s,this.s,this.s,this.s,this.t,this.t,this.t,this.t,this.z,this.z,this.z,this.z]);var e=this.pieces.splice(this.random(0,this.pieces.length-1),1)[0];return{type:e,dir:r.UP,x:Math.round(this.random(0,this.nx-e.size)),y:0}}},{key:"addEvents",value:function(){var e=this;document.addEventListener("keydown",function(t){e.keydown(t)},!1),window.addEventListener("resize",function(t){e.resize(t)},!1),this.$playBtn.click(function(){e.playing?e.lose():e.play()})}},{key:"resize",value:function(e){this.vw=Math.max(document.documentElement.clientWidth,window.innerWidth||0),this.vh=Math.max(document.documentElement.clientHeight,window.innerHeight||0),this.aspectRatio=this.vh<this.vw?[1,2]:[2,1],this.orientation=this.aspectRatio[0]<this.aspectRatio[1]?"landscape":"portrait",this.nx=10*this.aspectRatio[1],this.ny=10*this.aspectRatio[0],"landscape"===this.orientation?this.$canvas.height(this.$canvas.width()/this.aspectRatio[1]):this.$canvas.height(this.$canvas.width()*this.aspectRatio[0]),this.$canvas.attr("width",this.$canvas.width()),this.$canvas.attr("height",this.$canvas.height()),this.$ucanvas.attr("width",this.$ucanvas.width()),this.$ucanvas.attr("height",this.$ucanvas.height()),this.$ucanvas.height(this.$ucanvas.width()),this.dx=this.$canvas.width()/this.nx,this.dy=this.$canvas.height()/this.ny,this.dnextx=this.$ucanvas.width()/this.nu,this.dnexty=this.$ucanvas.height()/this.nu,this.invalidate(),this.invalidateNext()}},{key:"keydown",value:function(e){var t=!1;if(this.playing)switch(e.keyCode){case o.LEFT:this.actions.push(r.LEFT),t=!0;break;case o.RIGHT:this.actions.push(r.RIGHT),t=!0;break;case o.UP:this.actions.push(r.UP),t=!0;break;case o.DOWN:this.actions.push(r.DOWN),t=!0;break;case o.ESC:this.lose(),t=!0}else e.keyCode===o.SPACE&&(this.play(),t=!0);t&&e.preventDefault()}},{key:"swipe",value:function(e,t){if(this.playing)switch(t.direction){case"left":this.actions.push(r.LEFT),!0;break;case"right":this.actions.push(r.RIGHT),!0;break;case"up":this.actions.push(r.UP),!0;break;case"down":this.actions.push(r.DOWN),!0}}},{key:"tab",value:function(e,t){this.playing&&this.actions.push(r.UP)}},{key:"play",value:function(){this.$menu.show(),this.$playBtn.text("Give Up"),this.reset(),this.playing=!0}},{key:"lose",value:function(){this.$playBtn.text("Play"),this.setVisualScore(),this.playing=!1}},{key:"setVisualScore",value:function(e){this.vscore=e||this.score,this.invalidateScore()}},{key:"setScore",value:function(e){this.score=e,this.setVisualScore(e)}},{key:"addScore",value:function(e){this.score=this.score+e}},{key:"clearScore",value:function(){this.setScore(0)}},{key:"clearRows",value:function(){this.setRows(0)}},{key:"setRows",value:function(e){this.rows=e,this.step=Math.max(this.speed.min,this.speed.start-this.speed.decrement*this.rows),this.invalidateRows()}},{key:"addRows",value:function(e){this.setRows(this.rows+e)}},{key:"getBlock",value:function(e,t){return this.blocks&&this.blocks[e]?this.blocks[e][t]:null}},{key:"setBlock",value:function(e,t,n){this.blocks[e]=this.blocks[e]||[],this.blocks[e][t]=n,this.invalidate()}},{key:"clearBlocks",value:function(){this.blocks=[],this.invalidate()}},{key:"clearActions",value:function(){this.actions=new Array}},{key:"setCurrentPiece",value:function(e){this.current=e||this.randomPiece(),this.invalidate()}},{key:"setNextPiece",value:function(e){this.next=e||this.randomPiece(),this.invalidateNext()}},{key:"reset",value:function(){this.dt=0,this.clearActions(),this.clearBlocks(),this.clearRows(),this.clearScore(),this.setCurrentPiece(this.next),this.setNextPiece()}},{key:"update",value:function(e){this.playing&&(this.vscore<this.score&&this.setVisualScore(this.vscore+1),this.handle(this.actions.shift()),this.dt=this.dt+e,this.dt>this.step&&(this.dt=this.dt-this.step,this.drop()))}},{key:"handle",value:function(e){switch(e){case r.LEFT:this.move(r.LEFT);break;case r.RIGHT:this.move(r.RIGHT);break;case r.UP:this.rotate();break;case r.DOWN:this.drop()}}},{key:"move",value:function(e){var t=this.current.x,n=this.current.y;switch(e){case r.RIGHT:t+=1;break;case r.LEFT:t-=1;break;case r.DOWN:n+=1}return!!this.unoccupied(this.current.type,t,n,this.current.dir)&&(this.current.x=t,this.current.y=n,this.invalidate(),!0)}},{key:"rotate",value:function(){var e=this.current.dir===r.MAX?r.MIN:this.current.dir+1;this.unoccupied(this.current.type,this.current.x,this.current.y,e)&&(this.current.dir=e,this.invalidate())}},{key:"drop",value:function(){this.move(r.DOWN)||(this.addScore(10),this.dropPiece(),this.removeLines(),this.setCurrentPiece(this.next),this.setNextPiece(this.randomPiece()),this.clearActions(),this.occupied(this.current.type,this.current.x,this.current.y,this.current.dir)&&this.lose())}},{key:"dropPiece",value:function(){var e=this;this.eachblock(this.current.type,this.current.x,this.current.y,this.current.dir,function(t,n){e.setBlock(t,n,e.current.type)})}},{key:"removeLines",value:function(){var e,t,n,i=0;for(t=this.ny;t>0;--t){for(n=!0,e=0;e<this.nx;++e)this.getBlock(e,t)||(n=!1);n&&(this.removeLine(t),t+=1,i++)}i>0&&(this.addRows(i),this.addScore(100*Math.pow(2,i-1)))}},{key:"removeLine",value:function(e){var t,n;for(n=e;n>=0;--n)for(t=0;t<this.nx;++t)this.setBlock(t,n,0===n?null:this.getBlock(t,n-1))}},{key:"invalidate",value:function(){this.invalid.court=!0}},{key:"invalidateNext",value:function(){this.invalid.next=!0}},{key:"invalidateScore",value:function(){this.invalid.score=!0}},{key:"invalidateRows",value:function(){this.invalid.rows=!0}},{key:"draw",value:function(){this.ctx.save(),this.ctx.lineWidth=this.lineWidthXl,this.ctx.translate(this.lineWidthXl/2,this.lineWidthXl/2),this.drawCourt(),this.drawNext(),this.drawScore(),this.drawRows(),this.ctx.restore()}},{key:"drawCourt",value:function(){if(this.invalid.court){var e,t,n;for(this.ctx.clearRect(0,0,this.$canvas.width()||0,this.$canvas.height()||0),this.playing&&this.drawPiece(this.ctx,this.current.type,this.current.x,this.current.y,this.current.dir,this.dx,this.dy),t=0;t<this.ny;t++)for(e=0;e<this.nx;e++)(n=this.getBlock(e,t))&&this.drawBlock(this.ctx,e,t,n.color,this.dx,this.dy);this.ctx.strokeStyle="black",this.ctx.lineWidth=this.lineWidthXl,this.ctx.strokeRect(0,0,this.nx*this.dx-this.lineWidthXl,this.ny*this.dy-this.lineWidthXl),this.invalid.court=!1}}},{key:"drawNext",value:function(){if(this.invalid.next){var e=(this.nu-this.next.type.size)/2;this.uctx.save(),this.uctx.translate(this.lineWidthXl/2,this.lineWidthXl/2),this.uctx.clearRect(0,0,this.$ucanvas.width(),this.$ucanvas.height()),this.drawPiece(this.uctx,this.next.type,e,e,this.next.dir,this.dnextx,this.dnexty),this.uctx.strokeStyle="black",this.ctx.lineWidth=this.lineWidthXl,this.uctx.strokeRect(0,0,this.nu*this.dnextx-this.lineWidthXl,this.nu*this.dnexty-this.lineWidthXl),this.uctx.restore(),this.invalid.next=!1}}},{key:"drawScore",value:function(){this.invalid.score&&(this.$score.text(("00000"+Math.floor(this.vscore)).slice(-5)),this.invalid.score=!1)}},{key:"drawRows",value:function(){this.invalid.rows&&(this.$rows.text(this.rows),this.invalid.rows=!1)}},{key:"drawPiece",value:function(e,t,n,i,r,o,s){var a=this;this.eachblock(t,n,i,r,function(n,i){a.drawBlock(e,n,i,t.color,o,s)})}},{key:"drawBlock",value:function(e,t,n,i,r,o){e.fillStyle="transparent",e.lineWidth=this.lineWidthXl,e.strokeStyle=i,e.fillRect(t*r,n*o,r,o),e.strokeRect(t*r,n*o,r,o)}}])&&a(t.prototype,n),i&&a(t,i),e}();t.Tetris=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.gcd=t.filledString=t.isString=t.uneven=t.even=t.justDigits=t.contains=t.json=t.defaultValue=t.handleize=t.downcase=t.upcase=t.strip=t.count=t.currency=t.isLast=t.last=t.first=t.set=t.get=t.pluralize=t.slice=t.append=t.prepend=t.modulo=t.dividedBy=t.times=t.minus=t.plus=t.random=t.parse=t.or=t.and=t.empty=t.not=t.egt=t.gt=t.elt=t.lt=t.match=t.includes=t.ueq=t.eq=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1);var s=(0,r.default)("rivets:formatters");t.eq=function(e,t){return e===t};t.ueq=function(e,t){return e!==t};t.includes=function(e,t){return e.indexOf(t)>=0};t.match=function(e,t,n){return e.match(new RegExp(t,n))};t.lt=function(e,t){return s("[lt]",e,t),e<t};t.elt=function(e,t){return s("[elt]",e,t),e<=t};t.gt=function(e,t){return s("[gt]",e,t),e>t};t.egt=function(e,t){return s("[egt]",e,t),e>=t};t.not=function(e){return!e};var a=function(e){return!c(e)};t.empty=a;t.and=function(e,t){return e&&t};t.or=function(e,t){return e||t};t.parse=function(e){return o.Utils.isString(e)?JSON.parse(e):null};t.random=function(e){return o.Utils.isArray(e)?e[Math.floor(Math.random()*e.length)]:null};t.plus=function(e,t){return Number(e)+Number(t)};t.minus=function(e,t){return Number(e)-Number(t)};t.times=function(e,t){return Number(e)*Number(t)};t.dividedBy=function(e,t){return Number(e)/Number(t)};t.modulo=function(e,t){return Number(e)%Number(t)};t.prepend=function(e,t){return t+e};t.append=function(e,t){return e+t};t.slice=function(e,t,n){return e.slice(t,n)};t.pluralize=function(e,t,n){return null===n&&(n=t+"s"),o.Utils.isArray(e)&&(e=e.length),1===e?t:n};var u=function(e,t){return o.Utils.isObject(e)||o.Utils.isArray(e)?e[t]:null};t.get=u;t.set=function(e,t,n){return(o.Utils.isObject(e)||o.Utils.isArray(e))&&(e[t]=n),e};t.first=function(e){return u(e,0)};t.last=function(e){return u(e,e.length-1)};t.isLast=function(e,t){return e.length===t+1};t.currency=function(e,t){var n=e.toFixed(2).toString().replace(".",",");return t&&(n+=t),n};var c=function(e){return e&&e.length?e.length:0};t.count=c;var l=function(e){return $.trim(e)};t.strip=l;t.upcase=function(e){return e.toUpperCase()};var f=function(e){return e.toLowerCase()};t.downcase=f;t.handleize=function(e){return e=(e=l(e)).replace(/[^\w\s]/gi,""),(e=f(e)).replace(/ /g,"-")};t.defaultValue=function(e,t){return o.Utils.isDefined(e)?e:t};t.json=function(e){return JSON.stringify(e)};t.contains=function(e,t,n){if(!o.Utils.isArray(e)||!o.Utils.isObject(e)||!o.Utils.isString(e))return!1;if(o.Utils.isUndefined(n)&&(n=t),o.Utils.isString(e))return-1!==e.indexOf(n);if(o.Utils.isArray(e))for(var i in e)if((e.hasOwnProperty(i).hasOwnProperty(t)||o.Utils.isDefined(e[i])&&o.Utils.isDefined(e[i][t]))&&e[i][t]===n)return!0;return!1};t.justDigits=function(e){if(o.Utils.isNumber(e))return e;var t=e.replace(/[^-\d\.]/g,"");return isNaN(Number(t))?0:Number(t)};t.even=function(e){return e%2==0};t.uneven=function(e){return e%2!=0};t.isString=function(e){return o.Utils.isString(e)};t.filledString=function(e){return o.Utils.isString(e)&&!a(e.replace(/\s/g,""))};t.gcd=function e(t,n){return 0===n?t:e(n,t%n)}},function(e,t){e.exports='<nav-items linklist=linklist pills=false vertical=true></nav-items> <footer class=footer> <div rv-autoscroll=\'{"angle": "horizontal", "jumps": 10, "delay": 200, "width":"100vw"}\'> <div rv-each-index=[0,1,2,3,4,5,6,7,8,9,10] class="brand-light px-3" style=pointer-events:all> <div class="font-weight-bold brand-text">Art</div> <img class=brand-image rv-src="system.assets | get \'icon_heart_px.png\'" alt="Art + Code Studio"> <div class="font-weight-bold brand-text">Code</div> <div class="font-weight-normal brand-text hidden-xs-down">&nbsp;Studio</div> </div> </div> <div rv-autoscroll=\'{"angle": "horizontal", "direction":-1, "jumps": 10, "delay": 300, "width":"100vw" }\'> <nav-items linklist=system.linklists.footer pills=false vertical=false></nav-items> <nav-items linklist=system.linklists.footer pills=false vertical=false></nav-items> </div> </footer>'},function(e,t,n){"use strict";var i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")};t.__esModule=!0;var r=function(){function e(){i(this,e)}return e.prototype.on=function(e,t){return this._eventCollection=this._eventCollection||{},this._eventCollection[e]=this._eventCollection[e]||[],this._eventCollection[e].push(t),this},e.prototype.once=function(e,t){var n=this;function i(){n.off(e,i),t.apply(this,arguments)}return i.listener=t,this.on(e,i),this},e.prototype.off=function(e,t){var n=void 0;return this._eventCollection&&(n=this._eventCollection[e])?(n.forEach(function(e,i){e!==t&&e.listener!==t||n.splice(i,1)}),0===n.length&&delete this._eventCollection[e],this):this},e.prototype.emit=function(e){for(var t=this,n=arguments.length,i=Array(n>1?n-1:0),r=1;r<n;r++)i[r-1]=arguments[r];var o=void 0;return this._eventCollection&&(o=this._eventCollection[e])?((o=o.slice(0)).forEach(function(e){return e.apply(t,i)}),this):this},e}();t.default=r,e.exports=t.default},function(e,t,n){"use strict";var i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)};e.exports=function(e,t,n){var r,o=!1;function s(e){r=e,o||(i(a),o=!0)}function a(){n.call(e,r),o=!1}return e.addEventListener(t,s,!1),s}},function(e,t,n){"use strict";var i,r,o,s=n(15),a=n(14),u=!1,c=window.document,l=c.documentElement,f=window.navigator.msPointerEnabled,h={start:f?"MSPointerDown":"touchstart",move:f?"MSPointerMove":"touchmove",end:f?"MSPointerUp":"touchend"},d=function(){var e=/^(Webkit|Khtml|Moz|ms|O)(?=[A-Z])/,t=c.getElementsByTagName("script")[0].style;for(var n in t)if(e.test(n))return"-"+n.match(e)[0].toLowerCase()+"-";return"WebkitOpacity"in t?"-webkit-":"KhtmlOpacity"in t?"-khtml-":""}();function p(e){e=e||{},this._startOffsetX=0,this._currentOffsetX=0,this._opening=!1,this._moved=!1,this._opened=!1,this._preventOpen=!1,this._touch=void 0===e.touch||e.touch&&!0,this._side=e.side||"left",this.panel=e.panel,this.menu=e.menu,this.panel.classList.contains("slideout-panel")||this.panel.classList.add("slideout-panel"),this.panel.classList.contains("slideout-panel-"+this._side)||this.panel.classList.add("slideout-panel-"+this._side),this.menu.classList.contains("slideout-menu")||this.menu.classList.add("slideout-menu"),this.menu.classList.contains("slideout-menu-"+this._side)||this.menu.classList.add("slideout-menu-"+this._side),this._fx=e.fx||"ease",this._duration=parseInt(e.duration,10)||300,this._tolerance=parseInt(e.tolerance,10)||70,this._padding=this._translateTo=parseInt(e.padding,10)||256,this._orientation="right"===this._side?-1:1,this._translateTo*=this._orientation,this._touch&&this._initTouchEvents()}o=a,(r=p).prototype=function(e,t){for(var n in t)t[n]&&(e[n]=t[n]);return e}(r.prototype||{},o.prototype),p.prototype.open=function(){var e=this;return this.emit("beforeopen"),l.classList.contains("slideout-open")||l.classList.add("slideout-open"),this._setTransition(),this._translateXTo(this._translateTo),this._opened=!0,setTimeout(function(){e.panel.style.transition=e.panel.style["-webkit-transition"]="",e.emit("open")},this._duration+50),this},p.prototype.close=function(){var e=this;return this.isOpen()||this._opening?(this.emit("beforeclose"),this._setTransition(),this._translateXTo(0),this._opened=!1,setTimeout(function(){l.classList.remove("slideout-open"),e.panel.style.transition=e.panel.style["-webkit-transition"]=e.panel.style[d+"transform"]=e.panel.style.transform="",e.emit("close")},this._duration+50),this):this},p.prototype.toggle=function(){return this.isOpen()?this.close():this.open()},p.prototype.isOpen=function(){return this._opened},p.prototype._translateXTo=function(e){return this._currentOffsetX=e,this.panel.style[d+"transform"]=this.panel.style.transform="translateX("+e+"px)",this},p.prototype._setTransition=function(){return this.panel.style[d+"transition"]=this.panel.style.transition=d+"transform "+this._duration+"ms "+this._fx,this},p.prototype._initTouchEvents=function(){var e=this;return this._onScrollFn=s(c,"scroll",function(){e._moved||(clearTimeout(i),u=!0,i=setTimeout(function(){u=!1},250))}),this._preventMove=function(t){e._moved&&t.preventDefault()},c.addEventListener(h.move,this._preventMove),this._resetTouchFn=function(t){void 0!==t.touches&&(e._moved=!1,e._opening=!1,e._startOffsetX=t.touches[0].pageX,e._preventOpen=!e._touch||!e.isOpen()&&0!==e.menu.clientWidth)},this.panel.addEventListener(h.start,this._resetTouchFn),this._onTouchCancelFn=function(){e._moved=!1,e._opening=!1},this.panel.addEventListener("touchcancel",this._onTouchCancelFn),this._onTouchEndFn=function(){e._moved&&(e.emit("translateend"),e._opening&&Math.abs(e._currentOffsetX)>e._tolerance?e.open():e.close()),e._moved=!1},this.panel.addEventListener(h.end,this._onTouchEndFn),this._onTouchMoveFn=function(t){if(!(u||e._preventOpen||void 0===t.touches||function(e){for(;e.parentNode;){if(null!==e.getAttribute("data-slideout-ignore"))return e;e=e.parentNode}return null}(t.target))){var n=t.touches[0].clientX-e._startOffsetX,i=e._currentOffsetX=n;if(!(Math.abs(i)>e._padding)&&Math.abs(n)>20){e._opening=!0;var r=n*e._orientation;if(e._opened&&r>0||!e._opened&&r<0)return;e._moved||e.emit("translatestart"),r<=0&&(i=n+e._padding*e._orientation,e._opening=!1),e._moved&&l.classList.contains("slideout-open")||l.classList.add("slideout-open"),e.panel.style[d+"transform"]=e.panel.style.transform="translateX("+i+"px)",e.emit("translate",i),e._moved=!0}}},this.panel.addEventListener(h.move,this._onTouchMoveFn),this},p.prototype.enableTouch=function(){return this._touch=!0,this},p.prototype.disableTouch=function(){return this._touch=!1,this},p.prototype.destroy=function(){return this.close(),c.removeEventListener(h.move,this._preventMove),this.panel.removeEventListener(h.start,this._resetTouchFn),this.panel.removeEventListener("touchcancel",this._onTouchCancelFn),this.panel.removeEventListener(h.end,this._onTouchEndFn),this.panel.removeEventListener(h.move,this._onTouchMoveFn),c.removeEventListener("scroll",this._onScrollFn),this.open=this.close=function(){},this},e.exports=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slideoutComponent=void 0;var i=u(n(0)),r=u(n(2)),o=u(n(16)),s=n(1),a=u(n(13));function u(e){return e&&e.__esModule?e:{default:e}}t.slideoutComponent=function(e){var t=(0,i.default)("rivets:slideout");return{template:function(){return a.default},initialize:function(n,i){return this.linklist=window.model.system.linklists["main-menu"],this.system=window.model.system,t("initialize",this),setTimeout(function(){var i={duration:800,menu:n,padding:s.Utils.getViewportDimensions().w,panel:document.getElementById("slideout-panel"),side:"right",tolerance:70},a=new o.default(i);e.trigger("slideout.component:initialize",a),(0,r.default)(window).resize(function(){a._opened||(a.destroy(),i.padding=s.Utils.getViewportDimensions().w,a=new o.default(i),e.trigger("slideout.component:initialize",a)),t("resize",a)}),e.on("initStateChange",function(){a.close()}),a.on("open",function(){t("open")})},0),this}}}},function(e,t){e.exports=" <nav class=nav rv-add-class=linklist.handle rv-class-nav-pills=pills rv-class-flex-column=vertical> <div class=nav-item rv-each-link=linklist.links> <a class=nav-link rv-class-active=link.active rv-route=link.href rv-href=link.href>{link.text}</a> </div> </nav> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.navItems=void 0;var i=o(n(0)),r=o(n(18));function o(e){return e&&e.__esModule?e:{default:e}}t.navItems=function(){var e=(0,i.default)("rivets:slideout");return{template:function(){return r.default},initialize:function(t,n){return e("initialize",n,r.default),this.linklist=n.linklist,this.pills=n.pills,this.vertical=n.vertical,this}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"navItems",{enumerable:!0,get:function(){return i.navItems}}),Object.defineProperty(t,"slideoutComponent",{enumerable:!0,get:function(){return r.slideoutComponent}});var i=n(19),r=n(17)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.autoscrollBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}t.autoscrollBinder=function(){var e=(0,i.default)("binders:autoscroll");return{binder:function(t,n){var i=(0,r.default)(t);e("init",n),o.Utils.isString(n.width)&&i.css("width",n.width),i.addClass("rv-autoscroll-".concat(n.angle)),setTimeout(function(){!function(e,t){var n=t.direction,i=t.jumps,r=t.delay,o=!1,s=null,a=e.prop("scrollWidth")-e.outerWidth();n<0?e.scrollLeft(a):e.scrollLeft(0),e.hover(function(){setTimeout(function(){e.filter(":hover").length&&(o=!0,n*=-1)},10)},function(){setTimeout(function(){o&&!e.filter(":hover").length&&(o=!1)},500)}),setTimeout(function t(){return o?setTimeout(t,200):(s=e.scrollLeft(),n>0?s+=i:s-=i,s<=5?n=1:s>=a&&(n=-1),e.animate({scrollLeft:s},r,"linear",t))},0)}(i,n)},1e3)},name:"autoscroll"}}},function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.TypingTextService=void 0;var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r(this,"toRotate",void 0),r(this,"el",void 0),r(this,"loopNum",0),r(this,"period",void 0),r(this,"txt",""),r(this,"isDeleting",!1),r(this,"fullTxt",void 0),this.el=t,this.loopNum=0,this.txt="",this.period=n||2e3}var t,n,o;return t=e,(n=[{key:"auto",value:function(e){this.toRotate=e,this.loopNum=0,this.txt="",this.tick(),this.isDeleting=!1}},{key:"delete",value:function(e){this.isDeleting=!0,this.fullTxt=this.el.innerHTML,this.txt=this.fullTxt,this.deleteTick(e),this.isDeleting=!1}},{key:"write",value:function(e,t){this.fullTxt=e,this.txt="",this.isDeleting=!1,this.writeTick(t)}},{key:"tick",value:function(){var e=this.loopNum%this.toRotate.length;this.fullTxt=this.toRotate[e],this.isDeleting?this.txt=this.fullTxt.substring(0,this.txt.length-1):this.txt=this.fullTxt.substring(0,this.txt.length+1),this.el.innerHTML=this.txt;var t=this,n=300-100*Math.random();this.isDeleting&&(n/=2),this.isDeleting||this.txt!==this.fullTxt?this.isDeleting&&""===this.txt&&(this.isDeleting=!1,this.loopNum++,n=500):(n=this.period,this.isDeleting=!0),setTimeout(function(){t.tick()},n)}},{key:"deleteTick",value:function(e){var t=this,n=300-100*Math.random();return n/=2,this.txt=this.fullTxt.substring(0,this.txt.length-1),this.el.innerHTML=this.txt,""===this.txt?(this.isDeleting=!1,this.loopNum++,n=500,setTimeout(function(){if(e)return e()},n)):setTimeout(function(){t.deleteTick(e)},n)}},{key:"writeTick",value:function(e){var t=this;this.txt=this.fullTxt.substring(0,this.txt.length+1),this.el.innerHTML=this.txt;var n=300-100*Math.random();return this.txt===this.fullTxt?(n=this.period,this.isDeleting=!0,setTimeout(function(){if(e)return e()},n)):setTimeout(function(){t.writeTick(e)},n)}}])&&i(t.prototype,n),o&&i(t,o),e}();t.TypingTextService=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.slideoutTogglerBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(22);function s(e){return e&&e.__esModule?e:{default:e}}t.slideoutTogglerBinder=function(e){var t=(0,i.default)("binders:slideout-toggler");return{binder:function(n,i){var s=(0,r.default)(n);t("init",n,i);var a=null,u=s.html(),c=new o.TypingTextService(s[0],2e3);e.on("slideout.component:initialize",function(e){t("slideout.component:initialize",e),null!==a&&s.off("click"),a=e,s.on("click",function(){a.toggle()}),a.on("beforeopen",function(){u=s.html(),s.css("color","white"),s.css("min-height",s.outerHeight()),c.delete(function(){t("delete Close done"),c.write("Close")})}),a.on("beforeclose",function(){s.css("min-height",s.outerHeight()),c.delete(function(){t("delete ".concat(u," done")),s.css("color","black"),c.write(u)})})})},name:"slideout-toggler"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.routeBinder=void 0;var i=s(n(0)),r=s(n(2)),o=n(1);function s(e){return e&&e.__esModule?e:{default:e}}t.routeBinder=function(e,t,n){var s=(0,i.default)("binders:route");return{binder:function(i,a){var u=(0,r.default)(i),c=!1;s("getBinder",i,a),a||(a=u.attr("href")),"_blank"===u.attr("target")&&(c=!0);var l=o.Utils.getLocation(),f=l.protocol+"//"+l.hostname;o.Utils.isAbsoluteUrl(a)&&(0===a.indexOf(f)?a=a.replace(f,""):c=!0);var h=function(e){var t=o.Utils.getLocation().pathname;return s("checkURL",t,e),e===t},d=function(e){return h(e)?(u.addClass("active"),!0):(u.removeClass("active"),!1)};e.on("newPageReady",function(){return d(a)}),u.off("click").on("click",function(e){e.preventDefault(),h(a)?s("already on this site"):t.goTo(a,c)}),c||h(a)||u.off("mouseenter touchstart").on("mouseenter touchstart",function(e){n.onLinkEnter(e,a)}),d(a)},name:"route"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"routeBinder",{enumerable:!0,get:function(){return s.routeBinder}}),Object.defineProperty(t,"slideoutTogglerBinder",{enumerable:!0,get:function(){return a.slideoutTogglerBinder}}),Object.defineProperty(t,"autoscrollBinder",{enumerable:!0,get:function(){return u.autoscrollBinder}}),t.forFromTo=t.removeClass=t.addClass=t.classAny=t.imageBox=t.backgroundImage=t.tel=t.mailto=t.appendHtml=t.html=void 0;var i=c(n(0)),r=c(n(2)),o=n(1),s=n(24),a=n(23),u=n(21);function c(e){return e&&e.__esModule?e:{default:e}}var l=(0,i.default)("rivets:binders");t.html=function(e,t){var n=(0,r.default)(e);o.Utils.isString(t)||(t=n.attr("rv-html")),l("rv-html",n,t),(0,r.default)(e).html(t)};t.appendHtml=function(e,t){var n=(0,r.default)(e);o.Utils.isString(t)||(t=n.attr("rv-append-html")),l("rv-append-html",n,t);var i=r.default.parseHTML(t);(0,r.default)(e).append(i)};t.mailto=function(e,t){(0,r.default)(e).attr("href","mailto:"+t)};t.tel=function(e,t){(0,r.default)(e).attr("href","tel:"+t)};t.backgroundImage=function(e,t){(0,r.default)(e).css("background-image","url("+t+")")};t.imageBox=function(e,t){var n=(0,r.default)(e);if(n.addClass("image-box"),t){var i=t.split(":"),o=new Array;o[0]=Number(i[0]),o[1]=Number(i[1]);var s=o[1]/o[0]*100,a="ratio-"+o[0]+"-"+o[1],u="padding-top: "+s+"%;";n.addClass(a),(0,r.default)("head").append("<style>.image-box."+a+":before{"+u+"}</style>"),l("ratio",t,u)}};t.classAny=function(e,t){var n=(0,r.default)(e);l(this.arg);var i=this.arg[0];return t?n.addClass(i):n.removeClass(i),t};t.addClass=function(e,t){var n=(0,r.default)(e);return t&&n.addClass(t),t};t.removeClass=function(e,t){var n=(0,r.default)(e);return t&&n.removeClass(t),t};t.forFromTo=function(e,t){var n=(0,r.default)(e),i=Number(this.arg[0]),o=Number(this.arg[1]);l("start",i,"end",o);for(var s=n.html(),a=i;a<o;a++)l("index",a);return l("html",s),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Prefetch=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1),s=n(5);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),u(this,"ignoreClassLink","no-barba-prefetch"),u(this,"debug",(0,r.default)("Prefetch"))}var t,n,i;return t=e,(n=[{key:"init",value:function(){if(!window.history.pushState)return!1}},{key:"onLinkEnter",value:function(e,t){var n=e.target;if(!t){for(;n&&!s.Pjax.getHref(n);)n=n.parentNode;if(!n||n.classList.contains(this.ignoreClassLink))return;t=s.Pjax.getHref(n)}if(this.debug("onLinkEnter",t),s.Pjax.preventCheck(e,n)&&!s.Pjax.cache.get(t)){var i=o.Utils.xhr(t);s.Pjax.cache.set(t,i)}}}])&&a(t.prototype,n),i&&a(t,i),e}();t.Prefetch=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"HistoryManager",{enumerable:!0,get:function(){return i.HistoryManager}}),Object.defineProperty(t,"IState",{enumerable:!0,get:function(){return i.IState}}),Object.defineProperty(t,"Dom",{enumerable:!0,get:function(){return r.Dom}}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return o.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return s.Prefetch}});var i=n(7),r=n(6),o=n(5),s=n(26)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseView=void 0;var i=n(3),r=n(1);function o(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s(this,"namespace",void 0),s(this,"container",void 0),s(this,"dispatcher",new i.Dispatcher)}var t,n,a;return t=e,(n=[{key:"extend",value:function(e){return r.Utils.extend(!1,this,e)}},{key:"init",value:function(){var e=this;this.dispatcher.on("initStateChange",function(t,n){n&&n.namespace===e.namespace&&e.onLeave()}),this.dispatcher.on("newPageReady",function(t,n,i){e.container=i,t.namespace===e.namespace&&e.onEnter()}),this.dispatcher.on("transitionCompleted",function(t,n){t.namespace===e.namespace&&e.onEnterCompleted(),n&&n.namespace===e.namespace&&e.onLeaveCompleted()})}}])&&o(t.prototype,n),a&&o(t,a),e}();t.BaseView=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HideShowTransition=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(4);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e){return(u=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=function(e){function t(){var e,n,i,o,a,c,f;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var h=arguments.length,d=new Array(h),p=0;p<h;p++)d[p]=arguments[p];return i=this,n=!(o=(e=u(t)).call.apply(e,[this].concat(d)))||"object"!==s(o)&&"function"!=typeof o?l(i):o,a=l(l(n)),c="debug",f=(0,r.default)("barba:HideShowTransition"),c in a?Object.defineProperty(a,c,{value:f,enumerable:!0,configurable:!0,writable:!0}):a[c]=f,n}var n,i,f;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}(t,o.BaseTransition),n=t,(i=[{key:"start",value:function(){this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(){document.body.scrollTop=0,this.done()}}])&&a(n.prototype,i),f&&a(n,f),t}();t.HideShowTransition=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CustomTransition=void 0;var i,r=(i=n(0))&&i.__esModule?i:{default:i},o=n(1),s=n(4);function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var h=function(e){function t(){var e,n,i,o,s,u,l;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var h=arguments.length,d=new Array(h),p=0;p<h;p++)d[p]=arguments[p];return i=this,n=!(o=(e=c(t)).call.apply(e,[this].concat(d)))||"object"!==a(o)&&"function"!=typeof o?f(i):o,s=f(f(n)),u="debug",l=(0,r.default)("rivets:CustomTransition"),u in s?Object.defineProperty(s,u,{value:l,enumerable:!0,configurable:!0,writable:!0}):s[u]=l,n}var n,i,h;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(t,s.BaseTransition),n=t,(i=[{key:"init",value:function(e,t){var n=this;this.$oldContainer=e,this.debug("init"),this.deferred=o.Utils.deferred();var i=o.Utils.deferred();return this.newContainerLoading=i.promise,this.start(),t.then(function(e){n.$newContainer=e,i.resolve()}),this.deferred.promise}},{key:"start",value:function(){this.debug("CustomTransition start"),this.newContainerLoading.then(this.finish.bind(this))}},{key:"finish",value:function(e){document.body.scrollTop=0,this.debug("CustomTransition finish"),this.done()}}])&&u(n.prototype,i),h&&u(n,h),t}();t.CustomTransition=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"BaseCache",{enumerable:!0,get:function(){return i.BaseCache}}),Object.defineProperty(t,"BaseTransition",{enumerable:!0,get:function(){return r.BaseTransition}}),Object.defineProperty(t,"CustomTransition",{enumerable:!0,get:function(){return r.CustomTransition}}),Object.defineProperty(t,"HideShowTransition",{enumerable:!0,get:function(){return r.HideShowTransition}}),Object.defineProperty(t,"BaseView",{enumerable:!0,get:function(){return o.BaseView}}),Object.defineProperty(t,"HistoryManager",{enumerable:!0,get:function(){return s.HistoryManager}}),Object.defineProperty(t,"IState",{enumerable:!0,get:function(){return s.IState}}),Object.defineProperty(t,"Pjax",{enumerable:!0,get:function(){return s.Pjax}}),Object.defineProperty(t,"Prefetch",{enumerable:!0,get:function(){return s.Prefetch}});var i=n(9),r=n(8),o=n(28),s=n(27)},function(e,t){var n=1e3,i=60*n,r=60*i,o=24*r,s=365.25*o;function a(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}e.exports=function(e,t){t=t||{};var u,c=typeof e;if("string"===c&&e.length>0)return function(e){if((e=String(e)).length>100)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var a=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*i;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(e);if("number"===c&&!1===isNaN(e))return t.long?a(u=e,o,"day")||a(u,r,"hour")||a(u,i,"minute")||a(u,n,"second")||u+" ms":function(e){if(e>=o)return Math.round(e/o)+"d";if(e>=r)return Math.round(e/r)+"h";if(e>=i)return Math.round(e/i)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t,n){function i(e){var n;function i(){if(i.enabled){var e=i,r=+new Date,o=r-(n||r);e.diff=o,e.prev=n,e.curr=r,n=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=t.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,i){if("%%"===n)return n;u++;var r=t.formatters[i];if("function"==typeof r){var o=s[u];n=r.call(e,o),s.splice(u,1),u--}return n}),t.formatArgs.call(e,s),(i.log||t.log||console.log.bind(console)).apply(e,s)}}return i.namespace=e,i.enabled=t.enabled(e),i.useColors=t.useColors(),i.color=function(e){var n,i=0;for(n in e)i=(i<<5)-i+e.charCodeAt(n),i|=0;return t.colors[Math.abs(i)%t.colors.length]}(e),i.destroy=r,"function"==typeof t.init&&t.init(i),t.instances.push(i),i}function r(){var e=t.instances.indexOf(this);return-1!==e&&(t.instances.splice(e,1),!0)}(t=e.exports=i.debug=i.default=i).coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){t.enable("")},t.enable=function(e){var n;t.save(e),t.names=[],t.skips=[];var i=("string"==typeof e?e:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(e=i[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")));for(n=0;n<t.instances.length;n++){var o=t.instances[n];o.enabled=t.enabled(o.namespace)}},t.enabled=function(e){if("*"===e[e.length-1])return!0;var n,i;for(n=0,i=t.skips.length;n<i;n++)if(t.skips[n].test(e))return!1;for(n=0,i=t.names.length;n<i;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(32),t.instances=[],t.names=[],t.skips=[],t.formatters={}},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(e){i=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&d())}function d(){if(!l){var e=a(h);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new p(e,t)),1!==c.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Main=void 0;var i=h(n(0)),r=h(n(2)),o=h(n(10)),s=n(31),a=n(25),u=n(20),c=n(3),l=n(12),f=n(11);function h(e){return e&&e.__esModule?e:{default:e}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var p=function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),d(this,"prefetch",new s.Prefetch),d(this,"dispatcher",new c.Dispatcher),d(this,"pjax",new s.Pjax(new s.CustomTransition)),d(this,"views",{dynamic:null,static:null}),d(this,"insite",null),d(this,"debug",(0,i.default)("View")),o.default.components["nav-items"]=(0,u.navItems)(),o.default.components.slideout=(0,u.slideoutComponent)(this.dispatcher),o.default.formatters.get=l.get,o.default.binders.route=(0,a.routeBinder)(this.dispatcher,this.pjax,this.prefetch).binder,o.default.binders["slideout-toggler"]=(0,a.slideoutTogglerBinder)(this.dispatcher).binder,o.default.binders.autoscroll=(0,a.autoscrollBinder)().binder,this.views.static=o.default.bind((0,r.default)("body").get(),window.model),this.dispatcher.on("newPageReady",function(e,n,i,r,s){(t.debug("newPageReady"),s||null===t.views.dynamic||t.views.dynamic.unbind(),t.views.dynamic=o.default.bind(i.get(),window.model),"page.tetris"===i.data().template)&&(new f.Tetris).run()}),this.prefetch.init(),this.pjax.start()};t.Main=p,(0,r.default)(function(){new p})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYnVnL3NyYy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL3NyYy90cy9VdGlscy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy90cy9kaXNwYXRjaGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iYXJiYS9UcmFuc2l0aW9uL0Jhc2VUcmFuc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iYXJiYS9QamF4L1BqYXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JhcmJhL1BqYXgvRG9tLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iYXJiYS9QamF4L0hpc3RvcnlNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iYXJiYS9UcmFuc2l0aW9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iYXJiYS9DYWNoZS50cyIsIndlYnBhY2s6Ly8vLi4vdGlueWJpbmQvZGlzdC90aW55YmluZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdGV0cmlzLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9mb3JtYXR0ZXJzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb21wb25lbnRzL3NsaWRlb3V0L3NsaWRlb3V0LmNvbXBvbmVudC5odG1sIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbWl0dGVyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlY291cGxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbGlkZW91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9zbGlkZW91dC9zbGlkZW91dC5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbXBvbmVudHMvbmF2LWl0ZW1zL25hdi1pdGVtcy5jb21wb25lbnQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9uYXYtaXRlbXMvbmF2LWl0ZW1zLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29tcG9uZW50cy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9hdXRvc2Nyb2xsLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdHlwaW5nLXRleHQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9zbGlkZW91dC10b2dnbGVyLmJpbmRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvYmluZGVycy9yb3V0ZS5iaW5kZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JpbmRlcnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JhcmJhL1BqYXgvUHJlZmV0Y2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JhcmJhL1BqYXgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JhcmJhL1ZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JhcmJhL1RyYW5zaXRpb24vSGlkZVNob3dUcmFuc2l0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9iYXJiYS9UcmFuc2l0aW9uL0N1c3RvbVRyYW5zaXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2JhcmJhL2luZGV4LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL21haW4udHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJwcm9jZXNzIiwibG9hZCIsInN0b3JhZ2UiLCJkZWJ1ZyIsImUiLCJlbnYiLCJERUJVRyIsImxvZyIsImNvbnNvbGUiLCJGdW5jdGlvbiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZm9ybWF0QXJncyIsImFyZ3MiLCJ1c2VDb2xvcnMiLCJ0aGlzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJzcGxpY2UiLCJpbmRleCIsImxhc3RDIiwicmVwbGFjZSIsIm1hdGNoIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJyZW1vdmVJdGVtIiwid2luZG93IiwidHlwZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJwYXJzZUludCIsIlJlZ0V4cCIsIiQxIiwiY2hyb21lIiwibG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJjb2xvcnMiLCJmb3JtYXR0ZXJzIiwiaiIsInYiLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyIiwibWVzc2FnZSIsImVuYWJsZSIsIl9qcXVlcnkiLCJVdGlscyIsImlzVW5kZWZpbmVkIiwidG9TdHJpbmciLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0RlZmluZWQiLCJfdHlwZW9mIiwiaXNTdHJpbmciLCJ0ZXN0Iiwic3RyIiwibnVtIiwiaXNOdW1iZXIiLCJOdW1iZXIiLCJkZWVwIiwidGFyZ2V0Iiwib2JqZWN0MSIsIm9iamVjdE4iLCIkIiwiZXh0ZW5kIiwib2JqZWN0MiIsInVybCIsImRlZmVycmVkIiwicmVxIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzb2x2ZSIsInJlc3BvbnNlVGV4dCIsInJlamVjdCIsIkVycm9yIiwib250aW1lb3V0Iiwib3BlbiIsInRpbWVvdXQiLCJ4aHJUaW1lb3V0Iiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJwcm9taXNlIiwib2JqIiwicHJvbSIsIlByb21pc2UiLCJkZWZhdWx0IiwiY29uY2F0IiwibG9jYXRpb24iLCJnZXRMb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsInBhdGhuYW1lIiwic2VhcmNoIiwicG9ydCIsImhyZWYiLCJyZXN1bHRzIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsImhhc2giLCJoaXN0b3J5IiwicHVzaFN0YXRlIiwidGl0bGUiLCJ3IiwiTWF0aCIsIm1heCIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsImgiLCJjbGllbnRIZWlnaHQiLCJpbm5lckhlaWdodCIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiZ2xvYmFsIiwiZmFjdG9yeSIsIm5vR2xvYmFsIiwiYXJyIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInNsaWNlIiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInNyYyIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJub2RlIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJlbmQiLCJzb3J0Iiwib3B0aW9ucyIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJyYW5kb20iLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJ0cmltIiwibWFrZUFycmF5IiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiaXRlcmF0b3IiLCJzcGxpdCIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInZhbCIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4Iiwic3RhcnQiLCJwYXJlbnQiLCJ1c2VDYWNoZSIsImxhc3RDaGlsZCIsInVuaXF1ZUlEIiwicHNldWRvIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwiaW5uZXJUZXh0IiwibGFuZyIsImVsZW1MYW5nIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJub1ZhbHVlIiwibWV0aG9kIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJjYXRjaCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93IiwiVHlwZUVycm9yIiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwid2FybiIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWR5V2FpdCIsIndhaXQiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsInBhcnNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsInN0b3AiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJib2R5Iiwic2hvd0hpZGUiLCJzaG93IiwidmFsdWVzIiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2Iiwicmh0bWwiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ3cmFwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwibm9kZXMiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJya2V5RXZlbnQiLCJybW91c2VFdmVudCIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJkZWxlZ2F0ZVR5cGUiLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJob29rIiwiRXZlbnQiLCJvcmlnaW5hbEV2ZW50Iiwid3JpdGFibGUiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94Iiwic3R5bGVzIiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImRlbHRhIiwiY2VpbCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JkZXIiLCJvcnBoYW5zIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImhlaWdodCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYXR0ck5hbWVzIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsInJlc3BvbnNlVHlwZSIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIm5vQ29uZmxpY3QiLCJEaXNwYXRjaGVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiX2RlZmluZVByb3BlcnR5IiwiaW5zdGFuY2UiLCJmIiwiX2xlbiIsIl9rZXkiLCJfZGVidWciLCJfVXRpbHMiLCJCYXNlVHJhbnNpdGlvbiIsIiRvbGRDb250YWluZXIiLCJuZXdDb250YWluZXIiLCJuZXdDb250YWluZXJSZWFkeSIsIm5ld0NvbnRhaW5lckxvYWRpbmciLCIkbmV3Q29udGFpbmVyIiwiX2Rpc3BhdGNoZXIiLCJfQ2FjaGUiLCJfVHJhbnNpdGlvbiIsIl9Eb20iLCJfSGlzdG9yeU1hbmFnZXIiLCJQamF4IiwidHJhbnNpdGlvbiIsIkRvbSIsIkhpc3RvcnlNYW5hZ2VyIiwiSGlkZVNob3dUcmFuc2l0aW9uIiwiZWxlbWVudCIsImdldEhyZWYiLCJob3N0bmFtZSIsImdldFBvcnQiLCJjbGVhbkxpbmsiLCJjbGFzc0xpc3QiLCJpZ25vcmVDbGFzc0xpbmsiLCJnZXRVcmwiLCJuZXdUYWIiLCJvblN0YXRlQ2hhbmdlIiwiZm9yY2VHb1RvIiwiTG9jYXRpb24iLCIkY29udGFpbmVyIiwiZG9tIiwicGFyc2VSZXNwb25zZSIsInB1dENvbnRhaW5lciIsImNhY2hlRW5hYmxlZCIsInByZXZlbnRDaGVjayIsImRpc3BhdGNoZXIiLCJnb1RvIiwibmV3VXJsIiwiZ2V0Q3VycmVudFVybCIsInRyYW5zaXRpb25Qcm9ncmVzcyIsImN1cnJlbnRTdGF0dXMiLCJnZXRUcmFuc2l0aW9uIiwicHJldlN0YXR1cyIsInRyYW5zaXRpb25JbnN0YW5jZSIsImdldENvbnRhaW5lciIsIm9uTmV3Q29udGFpbmVyTG9hZGVkIiwib25UcmFuc2l0aW9uRW5kIiwiZ2V0TmFtZXNwYWNlIiwiY3VycmVudEhUTUwiLCJnZXRXcmFwcGVyIiwiYmluZEV2ZW50cyIsIkJhc2VDYWNoZSIsIiR3cmFwcGVyIiwiJHRpdGxlIiwid3JhcHBlcklkIiwiJGVsZW1lbnQiLCJwYXJzZUNvbnRhaW5lciIsImNvbnRhaW5lckNsYXNzIiwiX0N1c3RvbVRyYW5zaXRpb24iLCJfQmFzZVRyYW5zaXRpb24iLCJfSGlkZVNob3dUcmFuc2l0aW9uIiwiT1BUSU9OUyIsIkVYVEVOU0lPTlMiLCJQUklNSVRJVkUiLCJLRVlQQVRIIiwiVEVYVCIsIkJJTkRJTkciLCJRVU9URURfU1RSIiwicGFyc2VUeXBlIiwiaXNKc29uIiwicGFyc2VUZW1wbGF0ZSIsInRlbXBsYXRlIiwiZGVsaW1pdGVycyIsImxhc3RJbmRleCIsImNsb3NlIiwic3Vic3RyaW5nIiwibGFzdFRva2VuIiwiYWRhcHRlcnMiLCJpbnRlcmZhY2VzIiwicm9vdEludGVyZmFjZSIsInRpbnliaW5kIiwiYmluZGVycyIsImNvbXBvbmVudHMiLCJfcHJlZml4IiwiX2Z1bGxQcmVmaXgiLCJ0ZW1wbGF0ZURlbGltaXRlcnMiLCJwcmVsb2FkRGF0YSIsImV2IiwiYmluZGluZyIsIm1vZGVscyIsImZhbGxiYWNrQmluZGVyIiwiY29uZmlndXJlIiwiX3RoaXMiLCJmb3JFYWNoIiwiaXNPYmplY3QiLCJPYnNlcnZlciIsImtleXBhdGgiLCJvYmplY3RQYXRoIiwiZ2V0Um9vdE9iamVjdCIsInJlYWxpemUiLCJ1cGRhdGVPcHRpb25zIiwiY2hyIiwicGF0aCIsImNoYXJBdCIsInN1YnN0ciIsInVucmVhY2hlZCIsInN5bmMiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwic2V0VmFsdWUiLCJhY3Rpb24iLCJ1bm9ic2VydmUiLCJyb290UHJvcCIsIiRwYXJlbnQiLCJjbGFzc0NhbGxDaGVjayIsIkNvbnN0cnVjdG9yIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiRk9STUFUVEVSX0FSR1MiLCJGT1JNQVRURVJfU1BMSVQiLCJCaW5kaW5nIiwiYmluZGVyIiwiZm9ybWF0dGVyT2JzZXJ2ZXJzIiwibW9kZWwiLCJvYnNlcnZlIiwicGFyc2VUYXJnZXQiLCJvYnNlcnZlciIsInBhcnNlRm9ybWF0dGVyQXJndW1lbnRzIiwiZm9ybWF0dGVySW5kZXgiLCJfcmVmIiwiYWkiLCJmb3JtYXR0ZWRWYWx1ZSIsIl90aGlzMiIsInJlZHVjZSIsImRlY2xhcmF0aW9uIiwiZm9ybWF0dGVyIiwicHJvY2Vzc2VkQXJncyIsInJlYWQiLCJldmVudEhhbmRsZXIiLCJmdW5jdGlvbiIsInJvdXRpbmVGbiIsInJvdXRpbmUiLCJwdWJsaXNoIiwiX3RoaXMzIiwicmVkdWNlUmlnaHQiLCJnZXRWYWx1ZSIsIl90aGlzNCIsImZpIiwidXBkYXRlIiwiZ2V0SW5wdXRWYWx1ZSIsIkNvbXBvbmVudEJpbmRpbmciLCJfQmluZGluZyIsImNvbXBvbmVudCIsInN0YXRpYyIsIm9ic2VydmVycyIsInVwc3RyZWFtT2JzZXJ2ZXJzIiwiYmluZGluZ1ByZWZpeCIsImF0dHJpYnV0ZSIsInByb3BlcnR5TmFtZSIsInN0YXQiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImluaGVyaXRzIiwibG9jYWxzIiwiZ3JvdXBlZCIsImJvdW5kIiwiY29tcG9uZW50VmlldyIsInNjb3BlIiwiaW5pdGlhbGl6ZSIsIl9ib3VuZCIsImV4dGVuc2lvblR5cGUiLCJ1cHN0cmVhbSIsInRleHRCaW5kZXIiLCJERUNMQVJBVElPTl9TUExJVCIsInBhcnNlTm9kZSIsImJsb2NrIiwiYnVpbGRCaW5kaW5nIiwidHJhdmVyc2UiLCJfaSIsImJpbmRpbmdDb21wYXJhdG9yIiwiYVByaW9yaXR5IiwicHJpb3JpdHkiLCJiUHJpb3JpdHkiLCJ0cmltU3RyIiwiVmlldyIsImJ1aWxkIiwicGlwZXMiLCJiaW5kaW5ncyIsImJpbmRJbmZvcyIsInN0YXJCaW5kZXJzIiwiayIsIl9pMiIsImJpbmRJbmZvIiwicHVibGlzaGVzIiwiQVJSQVlfTUVUSE9EUyIsImFkYXB0ZXIiLCJjb3VudGVyIiwid2Vha21hcCIsIndlYWtSZWZlcmVuY2UiLCJfX3J2IiwiY2FsbGJhY2tzIiwiY2xlYW51cFdlYWtSZWZlcmVuY2UiLCJyZWYiLCJwb2ludGVycyIsInN0dWJGdW5jdGlvbiIsIm9ic2VydmVNdXRhdGlvbnMiLCJ1bm9ic2VydmVNdXRhdGlvbnMiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2NhbGxiYWNrcyIsImNiIiwiZ2V0U3RyaW5nIiwiY3JlYXRlVmlldyIsImFuY2hvckVsIiwibWFya2VyIiwib24tKiIsImVhY2gtKiIsIml0ZXJhdGVkIiwibW9kZWxOYW1lIiwiaW5kZXhQcm9wIiwibWF0Y2hJbmRleCIsIm5leHRWaWV3IiwibmV4dEluZGV4IiwicHJldmlvdXMiLCJ0aW1lcyIsImNsYXNzLSoiLCJlbENsYXNzIiwiaXNSYWRpbyIsInRhZ05hbWUiLCJpZiIsIm5lc3RlZCIsImF0dGFjaGVkIiwidmlld09wdGlvbnMiLCJuZWdhdGUiLCJEaXJlY3Rpb24iLCJLZXkiLCJUZXRyaXMiLCJkZWNyZW1lbnQiLCJtaW4iLCJzaXplIiwiYmxvY2tzIiwiY291cnQiLCJyb3dzIiwic2NvcmUiLCIkY2FudmFzIiwiJHBsYXlCdG4iLCIkcm93cyIsIiRzY29yZSIsIiR1Y2FudmFzIiwiJG1lbnUiLCJjdHgiLCJnZXRDb250ZXh0IiwidWN0eCIsIm51IiwidnciLCJ2aCIsImFzcGVjdFJhdGlvIiwib3JpZW50YXRpb24iLCJueCIsIm55IiwibGluZVdpZHRoWGwiLCJyZXNpemUiLCJhZGRFdmVudHMiLCJ0aW1lc3RhbXAiLCJmcmFtZSIsImRyYXciLCJnZXRUaW1lIiwieCIsInkiLCJiaXQiLCJyb3ciLCJlYWNoYmxvY2siLCJjdXJyWCIsImN1cnJZIiwiZ2V0QmxvY2siLCJvY2N1cGllZCIsInBpZWNlcyIsInoiLCJVUCIsImtleWRvd24iLCJwbGF5aW5nIiwibG9zZSIsInBsYXkiLCJkeCIsImR5IiwiZG5leHR4IiwiZG5leHR5IiwiaW52YWxpZGF0ZSIsImludmFsaWRhdGVOZXh0IiwiaGFuZGxlZCIsIkxFRlQiLCJhY3Rpb25zIiwiUklHSFQiLCJET1dOIiwiRVNDIiwiU1BBQ0UiLCJ0b3VjaCIsImRpcmVjdGlvbiIsInNldFZpc3VhbFNjb3JlIiwidnNjb3JlIiwiaW52YWxpZGF0ZVNjb3JlIiwic2V0U2NvcmUiLCJzZXRSb3dzIiwiaW52YWxpZGF0ZVJvd3MiLCJwaWVjZSIsInJhbmRvbVBpZWNlIiwiZHQiLCJjbGVhckFjdGlvbnMiLCJjbGVhckJsb2NrcyIsImNsZWFyUm93cyIsImNsZWFyU2NvcmUiLCJzZXRDdXJyZW50UGllY2UiLCJzZXROZXh0UGllY2UiLCJpZHQiLCJkcm9wIiwibW92ZSIsInJvdGF0ZSIsInVub2NjdXBpZWQiLCJuZXdkaXIiLCJNQVgiLCJNSU4iLCJhZGRTY29yZSIsImRyb3BQaWVjZSIsInJlbW92ZUxpbmVzIiwic2V0QmxvY2siLCJyZW1vdmVMaW5lIiwiYWRkUm93cyIsInBvdyIsImludmFsaWQiLCJsaW5lV2lkdGgiLCJ0cmFuc2xhdGUiLCJkcmF3Q291cnQiLCJkcmF3TmV4dCIsImRyYXdTY29yZSIsImRyYXdSb3dzIiwicmVzdG9yZSIsImNsZWFyUmVjdCIsImRyYXdQaWVjZSIsImRyYXdCbG9jayIsInN0cm9rZVN0eWxlIiwic3Ryb2tlUmVjdCIsImZsb29yIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJyZWdleHAiLCJmbGFncyIsImpzb25TdHJpbmciLCJhcnJheSIsInNpbmd1bGFyIiwicGx1cmFsIiwiYW1vdW50Iiwic3ltYm9sIiwidG9GaXhlZCIsInN0cmlwIiwiZG93bmNhc2UiLCJnY2QiLCJFbWl0dGVyIiwibGlzdGVuZXIiLCJfZXZlbnRDb2xsZWN0aW9uIiwibGlzdGVuZXJzIiwiZW1pdCIsInJlcXVlc3RBbmltRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJldmUiLCJ0cmFja2luZyIsImNhcHR1cmVFdmVudCIsInNjcm9sbFRpbWVvdXQiLCJjaGlsZCIsInViZXIiLCJkZWNvdXBsZSIsInNjcm9sbGluZyIsIm1zUG9pbnRlclN1cHBvcnRlZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJyZWdleCIsInN0eWxlRGVjbGFyYXRpb24iLCJTbGlkZW91dCIsIl9zdGFydE9mZnNldFgiLCJfY3VycmVudE9mZnNldFgiLCJfb3BlbmluZyIsIl9tb3ZlZCIsIl9vcGVuZWQiLCJfcHJldmVudE9wZW4iLCJfdG91Y2giLCJfc2lkZSIsInNpZGUiLCJwYW5lbCIsIm1lbnUiLCJfZngiLCJfZHVyYXRpb24iLCJfdG9sZXJhbmNlIiwidG9sZXJhbmNlIiwiX3BhZGRpbmciLCJfdHJhbnNsYXRlVG8iLCJfb3JpZW50YXRpb24iLCJfaW5pdFRvdWNoRXZlbnRzIiwiZGVzdGluYXRpb24iLCJmcm9tIiwiX3NldFRyYW5zaXRpb24iLCJfdHJhbnNsYXRlWFRvIiwiaXNPcGVuIiwidHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsIl9vblNjcm9sbEZuIiwiX3ByZXZlbnRNb3ZlIiwiX3Jlc2V0VG91Y2hGbiIsIl9vblRvdWNoQ2FuY2VsRm4iLCJfb25Ub3VjaEVuZEZuIiwiYWJzIiwiX29uVG91Y2hNb3ZlRm4iLCJoYXNJZ25vcmVkRWxlbWVudHMiLCJkaWZfeCIsIm9yaWVudGVkX2RpZl94IiwiZW5hYmxlVG91Y2giLCJkaXNhYmxlVG91Y2giLCJkZXN0cm95IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zbGlkZW91dCIsIl9zbGlkZW91dENvbXBvbmVudCIsImxpbmtsaXN0Iiwic3lzdGVtIiwibGlua2xpc3RzIiwiZ2V0Vmlld3BvcnREaW1lbnNpb25zIiwic2xpZGVvdXQiLCJfbmF2SXRlbXNDb21wb25lbnQiLCJwaWxscyIsInZlcnRpY2FsIiwiX25hdkl0ZW1zIiwiJGVsIiwiYW5nbGUiLCJqdW1wcyIsIm1heFNjcm9sbFdpZHRoIiwib3V0ZXJXaWR0aCIsInNjcm9sbCIsImluaXRBdXRvc2Nyb2xsIiwiVHlwaW5nVGV4dFNlcnZpY2UiLCJwZXJpb2QiLCJsb29wTnVtIiwidHh0IiwidG9Sb3RhdGUiLCJpc0RlbGV0aW5nIiwiZnVsbFR4dCIsImRlbGV0ZVRpY2siLCJ3cml0ZVRpY2siLCJfdHlwaW5nVGV4dCIsInR5cGV0ZXh0IiwibmV3U2xpZGVvdXQiLCJvdXRlckhlaWdodCIsImRlbGV0ZSIsIndyaXRlIiwicGpheCIsInByZWZldGNoIiwiaXNBYnNvbHV0ZVVybCIsImFscmVhZHlPblVSTCIsImNoZWNrVXJsIiwiY2hlY2tVUkwiLCJ1cmxUb0NoZWNrIiwib25MaW5rRW50ZXIiLCJfcm91dGUiLCJfc2xpZGVvdXRUb2dnbGVyIiwiX2F1dG9zY3JvbGwiLCJodG1sTm9kZXMiLCJyYXRpb1N0cmluZ3MiLCJyYXRpb3MiLCJoZWlnaHRJblBlcmNlbnQiLCJyYXRpb0NsYXNzIiwiaHRtbFN0cmluZyIsIl9QamF4IiwiUHJlZmV0Y2giLCJfUHJlZmV0Y2giLCJCYXNlVmlldyIsIm5ld1N0YXR1cyIsIm9sZFN0YXR1cyIsIm9uTGVhdmUiLCJvbkVudGVyIiwib25FbnRlckNvbXBsZXRlZCIsIm9uTGVhdmVDb21wbGV0ZWQiLCJfQmFzZVRyYW5zaXRpb24yIiwiQ3VzdG9tVHJhbnNpdGlvbiIsIl9WaWV3IiwibXMiLCJsb25nIiwiZm10U2hvcnQiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiY3VyciIsImNvZXJjZSIsImZvcm1hdCIsInNlbGVjdENvbG9yIiwiaW5zdGFuY2VzIiwibmFtZXMiLCJza2lwcyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5leHRUaWNrIiwiYnJvd3NlciIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJfdGlueWJpbmQiLCJfYmFyYmEiLCJfYmluZGVycyIsIl9jb21wb25lbnRzIiwiX2Zvcm1hdHRlcnMiLCJfdGV0cmlzIiwiTWFpbiIsImR5bmFtaWMiLCJuYXZJdGVtcyIsInNsaWRlb3V0Q29tcG9uZW50Iiwicm91dGUiLCJyb3V0ZUJpbmRlciIsInNsaWRlb3V0VG9nZ2xlckJpbmRlciIsImF1dG9zY3JvbGwiLCJhdXRvc2Nyb2xsQmluZGVyIiwidmlld3MiLCJuZXdQYWdlUmF3SFRNTCIsImlzSW5pdCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVB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XHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzUpO1xuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbi8vIFRPRE9cbmV4cG9ydCBpbnRlcmZhY2UgSURlZmVycmVkIHtcbiAgcmVzb2x2ZTogYW55O1xuICByZWplY3Q6IGFueTtcbn1cblxuLyoqXG4gKiBKdXN0IGFuIENsYXNzIHdpdGggc29tZSBoZWxwZnVsIGZ1bmN0aW9uc1xuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBVdGlsc1xuICovXG5leHBvcnQgY2xhc3MgVXRpbHMge1xuXG4gIC8qKlxuICAgKiBUaW1lIGluIG1pbGxpc2Vjb25kIGFmdGVyIHRoZSB4aHIgcmVxdWVzdCBnb2VzIGluIHRpbWVvdXRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHhoclRpbWVvdXQ6IDUwMDA7XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhbHVlIGlzIHVuZGVmaW5lZFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1VuZGVmaW5lZCh2YWx1ZT86IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWx1ZSBpcyB1bmRlZmluZWRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNEZWZpbmVkKHZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuICF0aGlzLmlzVW5kZWZpbmVkKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzRnVuY3Rpb24odmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhcmlhYmxlIGlzIGFuIEFycmF5XG4gICAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3NzU3MzcvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0FycmF5KHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCB2YWx1ZSApID09PSAnW29iamVjdCBBcnJheV0nO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdmFyaWFibGUgaXMgbnVtYmVyIG9yIHN0cmluZyBpbiBKYXZhU2NyaXB0XG4gICAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE0MjE5ODgvMTQ2NTkxOVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc051bWJlcih2YWx1ZT86IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICYmICFpc05hTih2YWx1ZSAtIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIGhlY2sgaWYgdHlwZSBpcyBPYmplY3RcbiAgICogQHNlZSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDc3NTczNy8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzT2JqZWN0KHZhbHVlPzogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNEZWZpbmVkKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHR5cGUgaXMgQm9vbGVhblxuICAgKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODgxNDYxNS8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzQm9vbGVhbih2YWx1ZT86IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YodmFsdWUpID09PSB0eXBlb2YodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaXNTdHJpbmcodmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5pc0RlZmluZWQodmFsdWUpICYmIHR5cGVvZih2YWx1ZSkgPT09ICdzdHJpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHN0cmluZyBjb250YWlucyBhIG51bWJlclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBzdHJpbmdIYXNOdW1iZXIodmFsdWU6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmlzU3RyaW5nKHZhbHVlKSAmJiAvXFxkLy50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBzdHJpbmcgY29udGFpbnMgb25seSBudW1iZXJzXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHN0cmluZ0hhc09ubHlOdW1iZXIodmFsdWU/OiBhbnkpIHtcbiAgICByZXR1cm4gL15cXGQrJC8udGVzdCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgc3RyaW5nIGNvbnRhaW5zIG9ubHkgbnVtYmVycywgKywgLSBhbmQgKClcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgc3RyaW5nSXNQaG9uZU51bWJlcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIC9eWzAtOSAoKSstXSskLy50ZXN0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBKdXN0IGdldCB0aGUgZGlnaXRzIG9mIGEgc3RyaW5nLCB1c2VmdWwgdG8gcmVtb3ZlIHB4IHBpeGVsIGZyb20gY3NzIHZhbHVlXG4gICAqXG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTEwMDY1My8xNDY1OTE5XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGp1c3REaWdpdHMoc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBudW0gPSBzdHIucmVwbGFjZSgvW14tXFxkXFwuXS9nLCAnJyk7XG4gICAgaWYgKCFVdGlscy5pc051bWJlcihudW0pKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE51bWJlcihudW0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0aGUgY29udGVudHMgb2YgdHdvIG9yIG1vcmUgb2JqZWN0cyB0b2dldGhlciBpbnRvIHRoZSBmaXJzdCBvYmplY3QuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVlcCBJZiB0cnVlLCB0aGUgbWVyZ2UgYmVjb21lcyByZWN1cnNpdmUgKGFrYS4gZGVlcCBjb3B5KS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHRhcmdldCBBbiBvYmplY3QgdGhhdCB3aWxsIHJlY2VpdmUgdGhlIG5ldyBwcm9wZXJ0aWVzIGlmIGFkZGl0aW9uYWwgb2JqZWN0cyBhcmUgcGFzc2VkIGluIG9yIHRoYXQgd2lsbCBleHRlbmQgdGhlIGpRdWVyeSBuYW1lc3BhY2UgaWYgaXQgaXMgdGhlIHNvbGUgYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QxIEFuIG9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBtZXJnZSBpbi5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvYmplY3ROXSBBZGRpdGlvbmFsIG9iamVjdHMgY29udGFpbmluZyBwcm9wZXJ0aWVzIHRvIG1lcmdlIGluLlxuICAgKiBAcmV0dXJuc1xuICAgKiBAbWVtYmVyb2YgVXRpbHNcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZXh0ZW5kKGRlZXA6IGJvb2xlYW4sIHRhcmdldDogb2JqZWN0LCBvYmplY3QxOiBvYmplY3QsIG9iamVjdE4/OiBvYmplY3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmIChkZWVwKSB7XG4gICAgICByZXN1bHQgPSAkLmV4dGVuZCh0cnVlLCB0YXJnZXQsIG9iamVjdDEsIG9iamVjdE4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQYXNzaW5nIGZhbHNlIGZvciBkZWVwIGFyZ3VtZW50IGlzIG5vdCBzdXBwb3J0ZWQuXG4gICAgICByZXN1bHQgPSAkLmV4dGVuZCh0YXJnZXQsIG9iamVjdDEsIG9iamVjdE4pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmNhdCB0aGUgY29udGVudHMgb2YgdHdvIG9iamVjdHMgdG9nZXRoZXIgaW50byB0aGUgZmlyc3Qgb2JqZWN0LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZXAgSWYgdHJ1ZSwgdGhlIG1lcmdlIGJlY29tZXMgcmVjdXJzaXZlIChha2EuIGRlZXAgY29weSkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvYmplY3QxIEFuIGZpcnN0IG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gY29uY2F0LlxuICAgKiBAcGFyYW0ge29iamVjdH0gb2JqZWN0MiBUaGUgc2Vjb25kIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gY29uY2F0LlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjb25jYXQoZGVlcDogYm9vbGVhbiwgb2JqZWN0MTogb2JqZWN0LCBvYmplY3QyOiBvYmplY3QpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoZGVlcCwge30sIG9iamVjdDEsIG9iamVjdDIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGFuIFhNTEh0dHBSZXF1ZXN0KCkgYW5kIHJldHVybiBhIFByb21pc2VcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdXJsXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHhocih1cmw6IHN0cmluZykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAocmVxLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlamVjdChuZXcgRXJyb3IoJ3hocjogSFRUUCBjb2RlIGlzIG5vdCAyMDAnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVxLm9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKCd4aHI6IFRpbWVvdXQgZXhjZWVkZWQnKSk7XG4gICAgfTtcblxuICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwpO1xuICAgIHJlcS50aW1lb3V0ID0gdGhpcy54aHJUaW1lb3V0O1xuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCd4LWJhcmJhJywgJ3llcycpO1xuICAgIHJlcS5zZW5kKCk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBuZXcgXCJEZWZlcnJlZFwiIG9iamVjdFxuICAgKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL01vemlsbGEvSmF2YVNjcmlwdF9jb2RlX21vZHVsZXMvUHJvbWlzZS5qc20vRGVmZXJyZWRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEByZXR1cm4ge0lEZWZlcnJlZH1cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZGVmZXJyZWQoKTogYW55IHtcbiAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xuICAgIGNvbnN0IHByb20gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT4ge1xuICAgICAgb2JqLnJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgb2JqLnJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcbiAgICBvYmoucHJvbWlzZSA9IHByb207XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgaG9zdG5hbWUgYW4gcGF0aCBvZiBhZGRyZXNzIGJhclxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzczNjk3MC8xNDY1OTE5XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBsID0gZ2V0TG9jYXRpb24oXCJodHRwOi8vZXhhbXBsZS5jb20vcGF0aFwiKTtcbiAgICogY29uc29sZS5kZWJ1ZyhsLmhvc3RuYW1lKVxuICAgKiA+PiBcImV4YW1wbGUuY29tXCJcbiAgICogY29uc29sZS5kZWJ1ZyhsLnBhdGhuYW1lKVxuICAgKiA+PiBcIi9wYXRoXCJcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0TG9jYXRpb24odXJsPzogc3RyaW5nKTogTG9jYXRpb24ge1xuICAgIGlmICghdXJsKSB7XG4gICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICAvLyBsLmhyZWYgPSBocmVmO1xuICAgIGNvbnN0IGwgPSAoJChgPGEgaHJlZj1cIiR7dXJsfVwiPjwvYT5gKVswXSBhcyBIVE1MQW5jaG9yRWxlbWVudCBhcyBIVE1MSHlwZXJsaW5rRWxlbWVudFV0aWxzIGFzIExvY2F0aW9uKTtcbiAgICByZXR1cm4gbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGN1cnJlbnQgdXJsXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5VdGlsc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGN1cnJlbnRVcmxcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0VXJsKHVybD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgbG9jYXRpb24gPSBVdGlscy5nZXRMb2NhdGlvbih1cmwpO1xuICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgK1xuICAgICAgbG9jYXRpb24uaG9zdCArXG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSArXG4gICAgICBsb2NhdGlvbi5zZWFyY2g7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYW4gdXJsLCByZXR1cm4gaXQgd2l0aG91dCB0aGUgaGFzaFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuVXRpbHNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7c3RyaW5nfSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfSBuZXdDbGVhblVybFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjbGVhbkxpbmsodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB1cmwucmVwbGFjZSgvIy4qLywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgcG9ydCBudW1iZXIgbm9ybWFsaXplZCwgZXZlbnR1YWxseSB5b3UgY2FuIHBhc3MgYSBzdHJpbmcgdG8gYmUgbm9ybWFsaXplZC5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlV0aWxzXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge1N0cmluZ30gcFxuICAgKiBAcmV0dXJuIHtJbnR9IHBvcnRcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0UG9ydChwPzogc3RyaW5nLCB1cmw/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBsb2NhdGlvbiA9IFV0aWxzLmdldExvY2F0aW9uKHVybCk7XG4gICAgY29uc3QgcG9ydCA9IHR5cGVvZiBwICE9PSAndW5kZWZpbmVkJyA/IHAgOiBsb2NhdGlvbi5wb3J0O1xuICAgIGNvbnN0IHByb3RvY29sID0gbG9jYXRpb24ucHJvdG9jb2w7XG5cbiAgICBpZiAocG9ydCAhPT0gJycpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocG9ydCk7XG4gICAgfVxuICAgIGlmIChwcm90b2NvbCA9PT0gJ2h0dHA6Jykge1xuICAgICAgcmV0dXJuIDgwO1xuICAgIH1cblxuICAgIGlmIChwcm90b2NvbCA9PT0gJ2h0dHBzOicpIHtcbiAgICAgIHJldHVybiA0NDM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRlc3QgaWYgdXJsIGlzIGFic29sdXRlIG9yIHJlbGF0aXZlXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGlzQWJzb2x1dGVVcmwodXJsOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXQgPSAvXmh0dHBzPzpcXC9cXC8vaTtcbiAgICByZXR1cm4gcGF0LnRlc3QodXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgcGFyYW0gZnJvbSBoYXNoXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldFVybFBhcmFtZXRlcihuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH1cbiAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXFxdXS9nLCAnXFxcXCQmJyk7XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKCdbPyZdJyArIG5hbWUgKyAnKD0oW14mI10qKXwmfCN8JCknKTtcbiAgICBjb25zdCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICAgIGlmICghcmVzdWx0cykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghcmVzdWx0c1syXSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMl0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBoYXNoIGZyb20gYWRkcmVzcyBiYXIgb3IgdXJsIGlmIHNldFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRIYXNoKHVybD86IHN0cmluZykge1xuICAgIHJldHVybiBVdGlscy5nZXRMb2NhdGlvbih1cmwpLmhhc2g7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIGhhc2ggZnJvbSBhZGRyZXNzIGJhclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyB1cGRhdGVIYXNoKGhhc2g6IHN0cmluZykge1xuICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGhhc2ggZnJvbSBhZGRyZXNzIGJhclxuICAgKi9cbiAgcHVibGljIHN0YXRpYyByZW1vdmVIYXNoKCkge1xuICAgIHJldHVybiBoaXN0b3J5LnB1c2hTdGF0ZSgnJywgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXRWaWV3cG9ydERpbWVuc2lvbnMoKSAge1xuICAgIGNvbnN0IHcgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHdpbmRvdy5pbm5lcldpZHRoIHx8IDApO1xuICAgIGNvbnN0IGggPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LCB3aW5kb3cuaW5uZXJIZWlnaHQgfHwgMCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGgsXG4gICAgICB3LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IGEgbW9uZXRhcnkgYW1vdW50IHVzaW5nIFNob3BpZnkncyBmb3JtYXRNb25leSBpZiBhdmFpbGFibGUuXG4gICAqIElmIGl0J3Mgbm90IGF2YWlsYWJsZSwganVzdCByZXR1cm4gdGhlIHZhbHVlLlxuICAgKiBAc291cmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9kaXNjb2xhYnMvY2FydGpzL2Jsb2IvbWFzdGVyL3NyYy91dGlscy5jb2ZmZWVcbiAgICogQHNvdXJjZSBodHRwczovL2dpdGh1Yi5jb20vSnVtcExpbmtOZXR3b3JrL3Nob3BpZnktcHJvZHVjdGpzL2Jsb2IvbWFzdGVyL3NyYy91dGlsaXRpZXMuanNcbiAgICovXG4gIC8vIHB1YmxpYyBzdGF0aWMgZm9ybWF0TW9uZXkodmFsdWUsIGZvcm1hdCwgZm9ybWF0TmFtZSwgY3VycmVuY3kpIHtcbiAgLy8gICB2YXIgX3JlZiwgX3JlZjE7XG4gIC8vICAgaWYgKGN1cnJlbmN5ID09IG51bGwpIHtcbiAgLy8gICAgIGN1cnJlbmN5ID0gJyc7XG4gIC8vICAgfVxuICAvLyAgIGlmICghY3VycmVuY3kpIHtcbiAgLy8gICAgIGN1cnJlbmN5ID0gUHJvZHVjdEpTLnNldHRpbmdzLmN1cnJlbmN5O1xuICAvLyAgIH1cbiAgLy8gICBpZiAoKHdpbmRvdy5DdXJyZW5jeSAhPSBudWxsKSAmJiBjdXJyZW5jeSAhPT0gUHJvZHVjdEpTLnNldHRpbmdzLmN1cnJlbmN5KSB7XG4gIC8vICAgICB2YWx1ZSA9IEN1cnJlbmN5LmNvbnZlcnQodmFsdWUsIFByb2R1Y3RKUy5zZXR0aW5ncy5jdXJyZW5jeSwgY3VycmVuY3kpO1xuICAvLyAgICAgaWYgKCgoKF9yZWYgPSB3aW5kb3cuQ3VycmVuY3kpICE9IG51bGwgPyBfcmVmLm1vbmV5Rm9ybWF0cyA6IHZvaWQgMCkgIT0gbnVsbCkgJiYgKGN1cnJlbmN5IGluIHdpbmRvdy5DdXJyZW5jeS5tb25leUZvcm1hdHMpKSB7XG4gIC8vICAgICAgIGZvcm1hdCA9IHdpbmRvdy5DdXJyZW5jeS5tb25leUZvcm1hdHNbY3VycmVuY3ldW2Zvcm1hdE5hbWVdO1xuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICBpZiAoKChfcmVmMSA9IHdpbmRvdy5TaG9waWZ5KSAhPSBudWxsID8gX3JlZjEuZm9ybWF0TW9uZXkgOiB2b2lkIDApICE9IG51bGwpIHtcbiAgLy8gICAgIHJldHVybiBTaG9waWZ5LmZvcm1hdE1vbmV5KHZhbHVlLCBmb3JtYXQpO1xuICAvLyAgIH0gZWxzZSB7XG4gIC8vICAgICByZXR1cm4gdmFsdWU7XG4gIC8vICAgfVxuICAvLyB9XG5cbn1cbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My4zLjFcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE4LTAxLTIwVDE3OjI0WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MsIG5vZGUgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblx0XHRcdFx0aWYgKCBub2RlWyBpIF0gKSB7XG5cdFx0XHRcdFx0c2NyaXB0WyBpIF0gPSBub2RlWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjMuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSApIHtcblx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBBcnJheS5pc0FycmF5KCBzcmMgKSA/IHNyYyA6IFtdO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSA/IHNyYyA6IHt9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy82MTI1XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGNvbmNhdC5hcHBseSggW10sIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy4zXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNi0wOC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV0gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRkaXNhYmxlZEFuY2VzdG9yID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIChcImZvcm1cIiBpbiBlbGVtIHx8IFwibGFiZWxcIiBpbiBlbGVtKTtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbaV0gPSBcIiNcIiArIG5pZCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGRpc2FibGVkQW5jZXN0b3IoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0aWYgKCBwcmVmZXJyZWREb2MgIT09IGRvY3VtZW50ICYmXG5cdFx0KHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3KSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKTtcblx0fSk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudChcIlwiKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtc1tpKytdKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIltuYW1lPWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIik7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaChcIiwuKjpcIik7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIChzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikgKSkgKSB7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGIgPSBiLnBhcmVudE5vZGUpICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUpICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdGlmICggYSA9PT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBhKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBiID09PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5wYXJlbnROb2RlKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFtpXSA9PT0gYnBbaV0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwW2ldLCBicFtpXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHRhcFtpXSA9PT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbaV0gPT09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IWNvbXBpbGVyQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGVsZW0uaW5uZXJUZXh0IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrLCBhcmdzICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suYXBwbHkoIGVsZW0sIGFyZ3MgfHwgW10gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cblx0XHRcdC8vIEZpcmUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyAhPT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmZvY3VzICkge1xuXHRcdFx0XHRcdHRoaXMuZm9jdXMoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNpblwiXG5cdFx0fSxcblx0XHRibHVyOiB7XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuYmx1ciApIHtcblx0XHRcdFx0XHR0aGlzLmJsdXIoKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWxlZ2F0ZVR5cGU6IFwiZm9jdXNvdXRcIlxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiICYmIHRoaXMuY2xpY2sgJiYgbm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIG5vZGVOYW1lKCBldmVudC50YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jLCBub2RlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IGRpdi5vZmZzZXRXaWR0aCA9PT0gMzYgfHwgXCJhYnNvbHV0ZVwiO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlO1xuXG4vLyBSZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBTaG9ydGN1dCBmb3IgbmFtZXMgdGhhdCBhcmUgbm90IHZlbmRvciBwcmVmaXhlZFxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwcm9wZXJ0eSBtYXBwZWQgYWxvbmcgd2hhdCBqUXVlcnkuY3NzUHJvcHMgc3VnZ2VzdHMgb3IgdG9cbi8vIGEgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5LlxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIHJldCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdO1xuXHRpZiAoICFyZXQgKSB7XG5cdFx0cmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblx0XHQpICk7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3g7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0Ly8gZm9yIGdldENvbXB1dGVkU3R5bGUgc2lsZW50bHkgZmFsbHMgYmFjayB0byB0aGUgcmVsaWFibGUgZWxlbS5zdHlsZVxuXHR2YWx1ZUlzQm9yZGVyQm94ID0gdmFsdWVJc0JvcmRlckJveCAmJlxuXHRcdCggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0aWYgKCB2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSB7XG5cblx0XHR2YWwgPSBlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF07XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgcHJvdmlkZSBib3JkZXItYm94IHZhbHVlc1xuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlO1xuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgPT09IHN0eWxlcy5wb3NpdGlvbiApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IERhdGUubm93KCk7XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9IClcblx0XHQuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApXG5cdFx0Lm1hcCggZnVuY3Rpb24oIGksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlKysgKSArIHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwidHlwZSBFdmVudENhbGxiYWNrID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk7XG5cbmludGVyZmFjZSBJRXZlbnRzIHtcbiAgW2V2ZW50TmFtZTogc3RyaW5nXTogRXZlbnRDYWxsYmFja1tdO1xufVxuXG4vKipcbiAqIExpdHRsZSBEaXNwYXRjaGVyIGluc3BpcmVkIGJ5IE1pY3JvRXZlbnQuanNcbiAqXG4gKiBAdHlwZSB7b2JqZWN0fVxuICovXG5jbGFzcyBEaXNwYXRjaGVyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IERpc3BhdGNoZXI7XG4gIC8qKlxuICAgKiBPYmplY3QgdGhhdCBrZWVwcyBhbGwgdGhlIGV2ZW50c1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuRGlzcGF0Y2hlclxuICAgKiBAcmVhZE9ubHlcbiAgICogQHR5cGUge29iamVjdH1cbiAgICovXG4gIHByaXZhdGUgZXZlbnRzOiBJRXZlbnRzID0ge307XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gc2luZ2xldG9uIGluc3RhbmNlIG9mIERpc3BhdGNoZXIuXG4gICAqIEBtZW1iZXJvZiBEaXNwYXRjaGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoRGlzcGF0Y2hlci5pbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIERpc3BhdGNoZXIuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgRGlzcGF0Y2hlci5pbnN0YW5jZSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQmluZCBhIGNhbGxiYWNrIHRvIGFuIGV2ZW50XG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5EaXNwYXRjaGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtFdmVudENhbGxiYWNrfSBmdW5jdGlvblxuICAgKi9cbiAgcHVibGljIG9uKGU6IHN0cmluZywgZjogRXZlbnRDYWxsYmFjaykge1xuICAgIHRoaXMuZXZlbnRzW2VdID0gdGhpcy5ldmVudHNbZV0gfHwgW107XG4gICAgdGhpcy5ldmVudHNbZV0ucHVzaChmKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbmJpbmQgZXZlbnRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkRpc3BhdGNoZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge0V2ZW50Q2FsbGJhY2t9IGZ1bmN0aW9uXG4gICAqL1xuICBwdWJsaWMgb2ZmKGU6IHN0cmluZywgZjogRXZlbnRDYWxsYmFjaykge1xuICAgIGlmIChlIGluIHRoaXMuZXZlbnRzID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZXZlbnRzW2VdLnNwbGljZSh0aGlzLmV2ZW50c1tlXS5pbmRleE9mKGYpLCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJlIHRoZSBldmVudCBydW5uaW5nIGFsbCB0aGUgZXZlbnQgYXNzb2NpYXRlZCB0byBpdFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuRGlzcGF0Y2hlclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0gIHthbnlbXX0gYXJnc1xuICAgKi9cbiAgcHVibGljIHRyaWdnZXIoZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgeyAvLyBlLCAuLi5hcmdzXG4gICAgaWYgKGUgaW4gdGhpcy5ldmVudHMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBpIGluIHRoaXMuZXZlbnRzW2VdKSB7XG4gICAgICBpZiAodGhpcy5ldmVudHNbZV1baV0pIHtcbiAgICAgICAgdGhpcy5ldmVudHNbZV1baV0uYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ldmVudHNbZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAvLyAgIHRoaXMuZXZlbnRzW2VdW2ldLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIC8vIH1cbiAgfVxufVxuXG5leHBvcnQgeyBEaXNwYXRjaGVyIH07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9VdGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zaXRpb24ge1xuICAvLyAkb2xkQ29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICAvLyAkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICAvLyBuZXdDb250YWluZXJMb2FkaW5nOiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+O1xuICAvLyBleHRlbmQob2JqOiBvYmplY3QpOiBvYmplY3Q7XG4gIGluaXQoJG9sZENvbnRhaW5lcjogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgbmV3Q29udGFpbmVyOiBQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+KTogUHJvbWlzZTx2b2lkPjtcbiAgZG9uZSgpOiB2b2lkO1xuICBzdGFydCgpOiBhbnk7XG59XG5cbi8qKlxuICogQmFzZVRyYW5zaXRpb24gdG8gZXh0ZW5kXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICogQHR5cGUge09iamVjdH1cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VUcmFuc2l0aW9uIGltcGxlbWVudHMgSVRyYW5zaXRpb24ge1xuICAvKipcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqIEB0eXBlIHtKUXVlcnk8SFRNTEVsZW1lbnQ+fVxuICAgKi9cbiAgcHJvdGVjdGVkICRvbGRDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD47XG5cbiAgLyoqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKiBAdHlwZSB7SlF1ZXJ5PEhUTUxFbGVtZW50Pn1cbiAgICovXG4gIHByb3RlY3RlZCAkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQHR5cGUge1Byb21pc2V9XG4gICAqL1xuICBwcm90ZWN0ZWQgbmV3Q29udGFpbmVyTG9hZGluZzogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+PjtcblxuICBwcm90ZWN0ZWQgZGVmZXJyZWQ6IGFueTsgLy8gVE9ETyB0eXBlXG5cbiAgcHJvdGVjdGVkIGRlYnVnID0gRGVidWcoJ2JhcmJhOkJhc2VUcmFuc2l0aW9uJyk7XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byBleHRlbmQgdGhlIG9iamVjdFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAgICogQHBhcmFtICB7T2JqZWN0fSBuZXdPYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fSBuZXdJbmhlcml0T2JqZWN0XG4gICAqL1xuICAvLyBwdWJsaWMgZXh0ZW5kKG9iajogb2JqZWN0KSB7XG4gIC8vICAgcmV0dXJuIFV0aWxzLmV4dGVuZCh0aGlzLCBvYmopO1xuICAvLyB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGZyb20gUGpheCBtb2R1bGUgdG8gaW5pdGlhbGl6ZVxuICAgKiB0aGUgdHJhbnNpdGlvbi5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VUcmFuc2l0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBvbGRDb250YWluZXJcbiAgICogQHBhcmFtICB7UHJvbWlzZX0gbmV3Q29udGFpbmVyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBwdWJsaWMgaW5pdCgkb2xkQ29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBuZXdDb250YWluZXI6IFByb21pc2U8SlF1ZXJ5PEhUTUxFbGVtZW50Pj4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuJG9sZENvbnRhaW5lciA9ICRvbGRDb250YWluZXI7XG5cbiAgICB0aGlzLmRlZmVycmVkID0gVXRpbHMuZGVmZXJyZWQoKTtcbiAgICBjb25zdCBuZXdDb250YWluZXJSZWFkeSA9IFV0aWxzLmRlZmVycmVkKCk7XG4gICAgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nID0gbmV3Q29udGFpbmVyUmVhZHkucHJvbWlzZTtcblxuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIG5ld0NvbnRhaW5lci50aGVuKCgkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICBzZWxmLiRuZXdDb250YWluZXIgPSAkbmV3Q29udGFpbmVyO1xuICAgICAgbmV3Q29udGFpbmVyUmVhZHkucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGNhbGxlZCBhcyBzb29uIHRoZSBUcmFuc2l0aW9uIGlzIGZpbmlzaGVkXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKi9cbiAgcHVibGljIGRvbmUoKSB7XG4gICAgdGhpcy5kZWJ1ZygnZG9uZScpO1xuICAgIC8vIHRoaXMuJG9sZENvbnRhaW5lclswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJG9sZENvbnRhaW5lcltdKTtcbiAgICB0aGlzLiRvbGRDb250YWluZXIucmVtb3ZlKCk7XG4gICAgLy8gdGhpcy5uZXdDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICd2aXNpYmxlJztcbiAgICB0aGlzLiRuZXdDb250YWluZXIuY3NzKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKTtcbiAgICB0aGlzLmRlZmVycmVkLnJlc29sdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmb3IgeW91ciBUcmFuc2l0aW9uXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVHJhbnNpdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHB1YmxpYyBhYnN0cmFjdCBzdGFydCgpOiBhbnk7XG59XG4iLCJpbXBvcnQgeyBEaXNwYXRjaGVyIH0gZnJvbSAnLi4vLi4vZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL1V0aWxzJztcbmltcG9ydCB7IEJhc2VDYWNoZSB9IGZyb20gJy4uL0NhY2hlJztcbmltcG9ydCB7IEhpZGVTaG93VHJhbnNpdGlvbiwgSVRyYW5zaXRpb24gfSBmcm9tICcuLi9UcmFuc2l0aW9uJztcbmltcG9ydCB7IERvbSB9IGZyb20gJy4vRG9tJztcbmltcG9ydCB7IEhpc3RvcnlNYW5hZ2VyIH0gZnJvbSAnLi9IaXN0b3J5TWFuYWdlcic7XG5cbi8qKlxuICogUGpheCBpcyBhIHN0YXRpYyBvYmplY3Qgd2l0aCBtYWluIGZ1bmN0aW9uXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5QamF4XG4gKiBAYm9ycm93cyBEb20gYXMgRG9tXG4gKiBAdHlwZSB7b2JqZWN0fVxuICovXG5jbGFzcyBQamF4IHtcblxuICAvKipcbiAgICogQ2xhc3MgbmFtZSB1c2VkIHRvIGlnbm9yZSBsaW5rc1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpZ25vcmVDbGFzc0xpbmsgPSAnbm8tYmFyYmEnO1xuXG4gIHB1YmxpYyBzdGF0aWMgY2FjaGUgPSBuZXcgQmFzZUNhY2hlKCk7XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBpZiB0aGUgbGluayBzaG91bGQgYmUgZm9sbG93ZWRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgICogQHBhcmFtICB7TW91c2VFdmVudH0gZXZ0XG4gICAqIEBwYXJhbSAge0hUTUxBbmNob3JFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHByZXZlbnRDaGVjayhldnQ6IEpRdWVyeS5FdmVudDxIVE1MRWxlbWVudCwgbnVsbD4sIGVsZW1lbnQ6IEhUTUxBbmNob3JFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgaWYgKCF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBocmVmID0gdGhpcy5nZXRIcmVmKGVsZW1lbnQpO1xuXG4gICAgLy8gVXNlclxuICAgIGlmICghZWxlbWVudCB8fCAhaHJlZikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIE1pZGRsZSBjbGljaywgY21kIGNsaWNrLCBhbmQgY3RybCBjbGlja1xuICAgIGlmIChldnQud2hpY2ggPiAxIHx8IGV2dC5tZXRhS2V5IHx8IGV2dC5jdHJsS2V5IHx8IGV2dC5zaGlmdEtleSB8fCBldnQuYWx0S2V5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIHRhcmdldCB3aXRoIF9ibGFuayB0YXJnZXRcbiAgICBpZiAoZWxlbWVudC50YXJnZXQgJiYgZWxlbWVudC50YXJnZXQgPT09ICdfYmxhbmsnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgaXQncyB0aGUgc2FtZSBkb21haW5cbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSBlbGVtZW50LnByb3RvY29sIHx8IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSAhPT0gZWxlbWVudC5ob3N0bmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHRoZSBwb3J0IGlzIHRoZSBzYW1lXG4gICAgaWYgKFV0aWxzLmdldFBvcnQoKSAhPT0gVXRpbHMuZ2V0UG9ydChlbGVtZW50LnBvcnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIGNhc2Ugd2hlbiBhIGhhc2ggaXMgYmVpbmcgdGFja2VkIG9uIHRoZSBjdXJyZW50IFVSTFxuICAgIGlmIChocmVmLmluZGV4T2YoJyMnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIGNhc2Ugd2hlcmUgdGhlcmUgaXMgZG93bmxvYWQgYXR0cmlidXRlXG4gICAgaWYgKGVsZW1lbnQuZ2V0QXR0cmlidXRlICYmIHR5cGVvZiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZG93bmxvYWQnKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBJbiBjYXNlIHlvdSdyZSB0cnlpbmcgdG8gbG9hZCB0aGUgc2FtZSBwYWdlXG4gICAgaWYgKFV0aWxzLmNsZWFuTGluayhocmVmKSA9PT0gVXRpbHMuY2xlYW5MaW5rKGxvY2F0aW9uLmhyZWYpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuaWdub3JlQ2xhc3NMaW5rKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgLmhyZWYgcGFyYW1ldGVyIG91dCBvZiBhbiBlbGVtZW50XG4gICAqIGFuZCBoYW5kbGUgc3BlY2lhbCBjYXNlcyAobGlrZSB4bGluazpocmVmKVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAgKiBAcGFyYW0gIHtIVE1MQW5jaG9yRWxlbWVudH0gZWxcbiAgICogQHJldHVybiB7c3RyaW5nfSBocmVmXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldEhyZWYoZWw6IEhUTUxBbmNob3JFbGVtZW50IHwgU1ZHQUVsZW1lbnQpOiBzdHJpbmcge1xuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKGVsLmdldEF0dHJpYnV0ZSAmJiB0eXBlb2YgZWwuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJykgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCd4bGluazpocmVmJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBlbC5ocmVmID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGVsLmhyZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyBkb20gPSBuZXcgRG9tKCk7XG4gIHB1YmxpYyBoaXN0b3J5ID0gbmV3IEhpc3RvcnlNYW5hZ2VyKCk7XG5cbiAvKipcbiAgKiBJbmRpY2F0ZSB3ZXRoZXIgb3Igbm90IHVzZSB0aGUgY2FjaGVcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHR5cGUge2Jvb2xlYW59XG4gICogQGRlZmF1bHRcbiAgKi9cbiAgcHVibGljIGNhY2hlRW5hYmxlZDogdHJ1ZTtcblxuIC8qKlxuICAqIEluZGljYXRlIGlmIHRoZXJlIGlzIGFuIGFuaW1hdGlvbiBpbiBwcm9ncmVzc1xuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcmVhZE9ubHlcbiAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgKi9cbiAgcHVibGljIHRyYW5zaXRpb25Qcm9ncmVzczogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XG5cbiAgcHJpdmF0ZSB0cmFuc2l0aW9uOiBJVHJhbnNpdGlvbjtcblxuICBjb25zdHJ1Y3Rvcih0cmFuc2l0aW9uPzogSVRyYW5zaXRpb24pIHtcblxuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb24gPSBuZXcgSGlkZVNob3dUcmFuc2l0aW9uKCk7XG4gICAgfVxuXG4gIH1cblxuIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB0byBzdGFydCBQamF4XG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqL1xuICBwdWJsaWMgc3RhcnQoKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuIC8qKlxuICAqIFJldHVybiB0aGUgY3VycmVudFVSTCBjbGVhbmVkXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEByZXR1cm4ge3N0cmluZ30gY3VycmVudFVybFxuICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFVybCgpIHtcbiAgICByZXR1cm4gVXRpbHMuY2xlYW5MaW5rKFxuICAgICAgVXRpbHMuZ2V0VXJsKCksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIFVSTCB3aXRoIHB1c2hzdGF0ZSBhbmQgdHJpZ2dlciB0aGUgc3RhdGUgY2hhbmdlXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmxcbiAgICovXG4gIHB1YmxpYyBnb1RvKHVybDogc3RyaW5nLCBuZXdUYWI/OiBib29sZWFuKSB7XG4gICAgaWYgKG5ld1RhYikge1xuICAgICAgY29uc3Qgd2luID0gd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG4gICAgICByZXR1cm4gd2luLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgaWYgKHVybC5pbmRleE9mKCdodHRwJykgIT09IDApIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCB1cmwpO1xuICAgICAgcmV0dXJuIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIC8vIGZhbGxiYWNrXG4gICAgdGhpcy5mb3JjZUdvVG8odXJsKTtcbiAgfVxuXG4gLyoqXG4gICogUmV0dXJuIGEgdHJhbnNpdGlvbiBvYmplY3RcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHJldHVybiB7QmFyYmEuVHJhbnNpdGlvbn0gVHJhbnNpdGlvbiBvYmplY3RcbiAgKi9cbiAgcHVibGljIGdldFRyYW5zaXRpb24oKTogSVRyYW5zaXRpb24ge1xuICAgIC8vIFVzZXIgY3VzdG9taXphYmxlXG4gICAgcmV0dXJuIHRoaXMudHJhbnNpdGlvbjtcbiAgfVxuXG4gLyoqXG4gICogQXR0YWNoIHRoZSBldmVudGxpc3RlbmVyc1xuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICovXG4gcHJvdGVjdGVkIGJpbmRFdmVudHMoKSB7XG4gICAgLy8gd2UgdXNlIHRoZSBydi1yb3V0ZXIgZm9yIHRoaXNcbiAgICAvLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgLy8gICB0aGlzLm9uTGlua0NsaWNrLmJpbmQodGhpcyksXG4gICAgLy8gKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsXG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UuYmluZCh0aGlzKSxcbiAgICApO1xuICB9XG5cbiAvKipcbiAgKiBGb3JjZSB0aGUgYnJvd3NlciB0byBnbyB0byBhIGNlcnRhaW4gdXJsXG4gICpcbiAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAqIEBwYXJhbSB7TG9jYXRpb259IHVybFxuICAqIEBwcml2YXRlXG4gICovXG4gcHJvdGVjdGVkIGZvcmNlR29Ubyh1cmw6IExvY2F0aW9uIHwgc3RyaW5nKSB7XG4gICBpZiAodXJsIGluc3RhbmNlb2YgTG9jYXRpb24pIHtcbiAgICB3aW5kb3cubG9jYXRpb24gPSB1cmw7XG4gICB9XG4gICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHVybDtcbiAgIH1cbiAgfVxuXG4gLyoqXG4gICogTG9hZCBhbiB1cmwsIHdpbGwgc3RhcnQgYW4geGhyIHJlcXVlc3Qgb3IgbG9hZCBmcm9tIHRoZSBjYWNoZVxuICAqXG4gICogQG1lbWJlck9mIEJhcmJhLlBqYXhcbiAgKiBAcHJvdGVjdGVkXG4gICogQHBhcmFtICB7c3RyaW5nfSB1cmxcbiAgKiBAcmV0dXJuIHtQcm9taXNlPEpRdWVyeTxIVE1MRWxlbWVudD4+fVxuICAqL1xuIHByb3RlY3RlZCBsb2FkKHVybDogc3RyaW5nKTogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+PiB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBVdGlscy5kZWZlcnJlZCgpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCB4aHI7XG5cbiAgICB4aHIgPSBQamF4LmNhY2hlLmdldCh1cmwpO1xuXG4gICAgaWYgKCF4aHIpIHtcbiAgICAgIHhociA9IFV0aWxzLnhocih1cmwpO1xuICAgICAgUGpheC5jYWNoZS5zZXQodXJsLCB4aHIpO1xuICAgIH1cblxuICAgIHhoci50aGVuKChkYXRhOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3QgJGNvbnRhaW5lciA9IHNlbGYuZG9tLnBhcnNlUmVzcG9uc2UoZGF0YSk7XG5cbiAgICAgICAgc2VsZi5kb20ucHV0Q29udGFpbmVyKCRjb250YWluZXIpO1xuXG4gICAgICAgIGlmICghc2VsZi5jYWNoZUVuYWJsZWQpIHtcbiAgICAgICAgICBQamF4LmNhY2hlLnJlc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCRjb250YWluZXIpO1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAvLyBTb21ldGhpbmcgd2VudCB3cm9uZyAodGltZW91dCwgNDA0LCA1MDUuLi4pXG4gICAgICAgIHNlbGYuZm9yY2VHb1RvKHVybCk7XG5cbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gLyoqXG4gICogQ2FsbGJhY2sgY2FsbGVkIGZyb20gY2xpY2sgZXZlbnRcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHByb3RlY3RlZFxuICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZ0XG4gICovXG4gcHJvdGVjdGVkIG9uTGlua0NsaWNrKGV2dDogSlF1ZXJ5LkV2ZW50PEhUTUxFbGVtZW50LCBudWxsPikge1xuICAgIGxldCBlbDogSFRNTEFuY2hvckVsZW1lbnQgPSAoZXZ0LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCApO1xuXG4gICAgLy8gR28gdXAgaW4gdGhlIG5vZGVsaXN0IHVudGlsIHdlXG4gICAgLy8gZmluZCBzb21ldGhpbmcgd2l0aCBhbiBocmVmXG4gICAgd2hpbGUgKGVsICYmICFQamF4LmdldEhyZWYoZWwpKSB7XG4gICAgICBlbCA9IChlbC5wYXJlbnROb2RlIGFzIEhUTUxBbmNob3JFbGVtZW50KTtcbiAgICB9XG5cbiAgICBpZiAoUGpheC5wcmV2ZW50Q2hlY2soZXZ0LCBlbCkpIHtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcignbGlua0NsaWNrZWQnLCBlbCwgZXZ0KTtcblxuICAgICAgY29uc3QgaHJlZiA9IFBqYXguZ2V0SHJlZihlbCk7XG4gICAgICB0aGlzLmdvVG8oaHJlZik7XG4gICAgfVxuICB9XG5cbiAvKipcbiAgKiBNZXRob2QgY2FsbGVkIGFmdGVyIGEgJ3BvcHN0YXRlJyBvciBmcm9tIC5nb1RvKClcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHByb3RlY3RlZFxuICAqL1xuIHByb3RlY3RlZCBvblN0YXRlQ2hhbmdlKCkge1xuICAgIGNvbnN0IG5ld1VybCA9IHRoaXMuZ2V0Q3VycmVudFVybCgpO1xuXG4gICAgaWYgKHRoaXMudHJhbnNpdGlvblByb2dyZXNzKSB7XG4gICAgICB0aGlzLmZvcmNlR29UbyhuZXdVcmwpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLnVybCA9PT0gbmV3VXJsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oaXN0b3J5LmFkZChuZXdVcmwpO1xuXG4gICAgY29uc3QgJG5ld0NvbnRhaW5lciA9IHRoaXMubG9hZChuZXdVcmwpO1xuICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0aGlzLmdldFRyYW5zaXRpb24oKTtcblxuICAgIHRoaXMudHJhbnNpdGlvblByb2dyZXNzID0gdHJ1ZTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCdpbml0U3RhdGVDaGFuZ2UnLFxuICAgICAgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSxcbiAgICAgIHRoaXMuaGlzdG9yeS5wcmV2U3RhdHVzKCksXG4gICAgKTtcblxuICAgIGNvbnN0IHRyYW5zaXRpb25JbnN0YW5jZSA9IHRyYW5zaXRpb24uaW5pdChcbiAgICAgIHRoaXMuZG9tLmdldENvbnRhaW5lcigpLFxuICAgICAgJG5ld0NvbnRhaW5lcixcbiAgICApO1xuXG4gICAgJG5ld0NvbnRhaW5lci50aGVuKFxuICAgICAgdGhpcy5vbk5ld0NvbnRhaW5lckxvYWRlZC5iaW5kKHRoaXMpLFxuICAgICk7XG5cbiAgICB0cmFuc2l0aW9uSW5zdGFuY2UudGhlbihcbiAgICAgIHRoaXMub25UcmFuc2l0aW9uRW5kLmJpbmQodGhpcyksXG4gICAgKTtcbiAgfVxuXG4gLyoqXG4gICogRnVuY3Rpb24gY2FsbGVkIGFzIHNvb24gdGhlIG5ldyBjb250YWluZXIgaXMgcmVhZHlcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHByb3RlY3RlZFxuICAqIEBwYXJhbSB7SlF1ZXJ5PEhUTUxFbGVtZW50Pn0gJGNvbnRhaW5lclxuICAqL1xuIHByb3RlY3RlZCBvbk5ld0NvbnRhaW5lckxvYWRlZCgkY29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgY3VycmVudFN0YXR1cyA9IHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCk7XG4gICAgY3VycmVudFN0YXR1cy5uYW1lc3BhY2UgPSB0aGlzLmRvbS5nZXROYW1lc3BhY2UoJGNvbnRhaW5lcik7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcignbmV3UGFnZVJlYWR5JyxcbiAgICAgIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCksXG4gICAgICB0aGlzLmhpc3RvcnkucHJldlN0YXR1cygpLFxuICAgICAgJGNvbnRhaW5lcixcbiAgICAgIHRoaXMuZG9tLmN1cnJlbnRIVE1MLFxuICAgICAgZmFsc2UsIC8vIHRydWUgaWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSBuZXdQYWdlUmVhZHkgaXMgdGlnZ2VyZWQgLyB0cnVlIG9uIGluaXRpYWxpc2F0aW9uXG4gICAgKTtcbiAgfVxuXG4gLyoqXG4gICogRnVuY3Rpb24gY2FsbGVkIGFzIHNvb24gdGhlIHRyYW5zaXRpb24gaXMgZmluaXNoZWRcbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4XG4gICogQHByb3RlY3RlZFxuICAqL1xuICBwcm90ZWN0ZWQgb25UcmFuc2l0aW9uRW5kKCkge1xuICAgIHRoaXMudHJhbnNpdGlvblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIudHJpZ2dlcigndHJhbnNpdGlvbkNvbXBsZXRlZCcsXG4gICAgICB0aGlzLmhpc3RvcnkuY3VycmVudFN0YXR1cygpLFxuICAgICAgdGhpcy5oaXN0b3J5LnByZXZTdGF0dXMoKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXQgdGhlIGV2ZW50c1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheFxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBwcm90ZWN0ZWQgaW5pdCgpIHtcbiAgICBjb25zdCAkY29udGFpbmVyID0gdGhpcy5kb20uZ2V0Q29udGFpbmVyKCk7XG4gICAgY29uc3QgJHdyYXBwZXIgPSB0aGlzLmRvbS5nZXRXcmFwcGVyKCk7XG5cbiAgICAkd3JhcHBlci5hdHRyKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XG5cbiAgICB0aGlzLmhpc3RvcnkuYWRkKFxuICAgICAgdGhpcy5nZXRDdXJyZW50VXJsKCksXG4gICAgICB0aGlzLmRvbS5nZXROYW1lc3BhY2UoJGNvbnRhaW5lciksXG4gICAgKTtcblxuICAgIC8vIEZpcmUgZm9yIHRoZSBjdXJyZW50IHZpZXcuXG4gICAgdGhpcy5kaXNwYXRjaGVyLnRyaWdnZXIoJ2luaXRTdGF0ZUNoYW5nZScsIHRoaXMuaGlzdG9yeS5jdXJyZW50U3RhdHVzKCkpO1xuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCduZXdQYWdlUmVhZHknLFxuICAgICAgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSxcbiAgICAgIHt9LFxuICAgICAgJGNvbnRhaW5lcixcbiAgICAgIHRoaXMuZG9tLmN1cnJlbnRIVE1MLFxuICAgICAgdHJ1ZSwgLy8gdHJ1ZSBpZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIG5ld1BhZ2VSZWFkeSBpcyB0aWdnZXJlZCAvIHRydWUgb24gaW5pdGlhbGlzYXRpb25cbiAgICApO1xuICAgIHRoaXMuZGlzcGF0Y2hlci50cmlnZ2VyKCd0cmFuc2l0aW9uQ29tcGxldGVkJywgdGhpcy5oaXN0b3J5LmN1cnJlbnRTdGF0dXMoKSk7XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGpheCB9O1xuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuLyoqXG4gKiBPYmplY3QgdGhhdCBpcyBnb2luZyB0byBkZWFsIHdpdGggRE9NIHBhcnNpbmcvbWFuaXB1bGF0aW9uXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5QamF4LkRvbVxuICogQHR5cGUge09iamVjdH1cbiAqL1xuY2xhc3MgRG9tIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBkYXRhIGF0dHJpYnV0ZSBvbiB0aGUgY29udGFpbmVyXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4LkRvbVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIGRhdGFOYW1lc3BhY2UgPSAnbmFtZXNwYWNlJztcblxuICAvKipcbiAgICogSWQgb2YgdGhlIG1haW4gd3JhcHBlclxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheC5Eb21cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHB1YmxpYyB3cmFwcGVySWQgPSAnYmFyYmEtd3JhcHBlcic7XG5cbiAgLyoqXG4gICAqIENsYXNzIG5hbWUgdXNlZCB0byBpZGVudGlmeSB0aGUgY29udGFpbmVyc1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheC5Eb21cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHB1YmxpYyBjb250YWluZXJDbGFzcyA9ICdiYXJiYS1jb250YWluZXInO1xuXG4gIC8qKlxuICAgKiBGdWxsIEhUTUwgU3RyaW5nIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gICAqIEJ5IGRlZmF1bHQgaXMgdGhlIGlubmVySFRNTCBvZiB0aGUgaW5pdGlhbCBsb2FkZWQgcGFnZS5cbiAgICpcbiAgICogRWFjaCB0aW1lIGEgbmV3IHBhZ2UgaXMgbG9hZGVkLCB0aGUgdmFsdWUgaXMgdGhlIHJlc3BvbnNlIG9mIHRoZSB4aHIgY2FsbC5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXguRG9tXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBwdWJsaWMgY3VycmVudEhUTUw6IHN0cmluZztcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlc3BvbnNlVGV4dCBvYnRhaW5lZCBmcm9tIHRoZSB4aHIgY2FsbFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUGpheC5Eb21cbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7c3RyaW5nfSByZXNwb25zZVRleHRcbiAgICogQHJldHVybiB7SlF1ZXJ5PEhUTUxFbGVtZW50Pn1cbiAgICovXG4gIHB1YmxpYyBwYXJzZVJlc3BvbnNlKHJlc3BvbnNlVGV4dDogc3RyaW5nKTogSlF1ZXJ5PEhUTUxFbGVtZW50PiB7XG4gICAgdGhpcy5jdXJyZW50SFRNTCA9IHJlc3BvbnNlVGV4dDtcbiAgICBjb25zdCAkd3JhcHBlciA9ICQoICQucGFyc2VIVE1MKHJlc3BvbnNlVGV4dCkgKTtcbiAgICBjb25zdCAkdGl0bGUgPSAkd3JhcHBlci5maWx0ZXIoJ3RpdGxlJyk7XG4gICAgaWYgKCR0aXRsZS5sZW5ndGgpIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gJHRpdGxlLnRleHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q29udGFpbmVyKCR3cmFwcGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1haW4gYmFyYmEgd3JhcHBlciBieSB0aGUgSUQgYHdyYXBwZXJJZGBcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXguRG9tXG4gICAqIEByZXR1cm4ge0pRdWVyeTxIVE1MRWxlbWVudD59IGVsZW1lbnRcbiAgICovXG4gIHB1YmxpYyBnZXRXcmFwcGVyKCk6IEpRdWVyeTxIVE1MRWxlbWVudD4ge1xuICAgIGNvbnN0ICR3cmFwcGVyID0gJCgnIycgKyB0aGlzLndyYXBwZXJJZCk7XG5cbiAgICBpZiAoISR3cmFwcGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhcmJhLmpzOiB3cmFwcGVyIG5vdCBmb3VuZCEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gJHdyYXBwZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb250YWluZXIgb24gdGhlIGN1cnJlbnQgRE9NLFxuICAgKiBvciBmcm9tIGFuIEhUTUxFbGVtZW50IHBhc3NlZCB2aWEgYXJndW1lbnRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXguRG9tXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgcHVibGljIGdldENvbnRhaW5lcigkZWxlbWVudD86IEpRdWVyeTxIVE1MRWxlbWVudD4pOiBKUXVlcnk8SFRNTEVsZW1lbnQ+IHtcbiAgICBpZiAoISRlbGVtZW50KSB7XG4gICAgICAkZWxlbWVudCA9ICQoZG9jdW1lbnQuYm9keSk7XG4gICAgfVxuICAgIGlmICghJGVsZW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmFyYmEuanM6IERPTSBub3QgcmVhZHkhJyk7XG4gICAgfVxuICAgIGNvbnN0ICRjb250YWluZXIgPSB0aGlzLnBhcnNlQ29udGFpbmVyKCRlbGVtZW50KTtcbiAgICBpZiAoISRjb250YWluZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQmFyYmEuanM6IG5vIGNvbnRhaW5lciBmb3VuZCcpO1xuICAgIH1cbiAgICByZXR1cm4gJGNvbnRhaW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiB0aGUgY29udGFpbmVyXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QamF4LkRvbVxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0gIHtKUXVlcnk8SFRNTEVsZW1lbnQ+fSBlbGVtZW50XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHB1YmxpYyBnZXROYW1lc3BhY2UoJGVsZW1lbnQ6IEpRdWVyeTxIVE1MRWxlbWVudD4pOiBzdHJpbmcge1xuICAgIGlmICgkZWxlbWVudCAmJiAkZWxlbWVudC5kYXRhKCkpIHtcbiAgICAgIHJldHVybiAkZWxlbWVudC5kYXRhKCduYW1lc3BhY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUHV0IHRoZSBjb250YWluZXIgb24gdGhlIHBhZ2VcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXguRG9tXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge0pRdWVyeTxIVE1MRWxlbWVudD59IGVsZW1lbnRcbiAgICovXG4gIHB1YmxpYyBwdXRDb250YWluZXIoJGVsZW1lbnQ6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcbiAgICAkZWxlbWVudC5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgY29uc3QgJHdyYXBwZXIgPSB0aGlzLmdldFdyYXBwZXIoKTtcbiAgICAkd3JhcHBlci5hcHBlbmQoJGVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjb250YWluZXIgc2VsZWN0b3JcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlBqYXguRG9tXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge0pRdWVyeTxIVE1MRWxlbWVudD59IGVsZW1lbnRcbiAgICogQHJldHVybiB7SlF1ZXJ5PEhUTUxFbGVtZW50Pn0gZWxlbWVudFxuICAgKi9cbiAgcHVibGljIHBhcnNlQ29udGFpbmVyKCRlbGVtZW50OiBKUXVlcnk8SFRNTEVsZW1lbnQ+KTogSlF1ZXJ5PEhUTUxFbGVtZW50PiB7XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJy4nICsgdGhpcy5jb250YWluZXJDbGFzcyk7XG4gIH1cbn1cblxuZXhwb3J0IHsgRG9tIH07XG4iLCJleHBvcnQgaW50ZXJmYWNlIElTdGF0ZSB7XG4gIHVybDogc3RyaW5nO1xuICBuYW1lc3BhY2U6IHN0cmluZztcbn1cblxuLyoqXG4gKiBIaXN0b3J5TWFuYWdlciBoZWxwcyB0byBrZWVwIHRyYWNrIG9mIHRoZSBuYXZpZ2F0aW9uXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5IaXN0b3J5TWFuYWdlclxuICogQHR5cGUge29iamVjdH1cbiAqL1xuZXhwb3J0IGNsYXNzIEhpc3RvcnlNYW5hZ2VyIHtcblxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogSGlzdG9yeU1hbmFnZXI7XG5cbiAgLyoqXG4gICAqIEtlZXAgdHJhY2sgb2YgdGhlIHN0YXR1cyBpbiBoaXN0b3JpYyBvcmRlclxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuSGlzdG9yeU1hbmFnZXJcbiAgICogQHJlYWRPbmx5XG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIHByaXZhdGUgaGlzdG9yeTogSVN0YXRlW10gPSBuZXcgQXJyYXkoKTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoSGlzdG9yeU1hbmFnZXIuaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBIaXN0b3J5TWFuYWdlci5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBIaXN0b3J5TWFuYWdlci5pbnN0YW5jZSA9IHRoaXM7XG4gICAgcmV0dXJuIEhpc3RvcnlNYW5hZ2VyLmluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBzdGF0dXNcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkhpc3RvcnlNYW5hZ2VyXG4gICAqIEByZXR1cm4ge0lTdGF0ZX1cbiAgICovXG4gIHB1YmxpYyBjdXJyZW50U3RhdHVzKCk6IElTdGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwcmV2aW91cyBzdGF0dXNcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkhpc3RvcnlNYW5hZ2VyXG4gICAqIEByZXR1cm4ge0lTdGF0ZX1cbiAgICovXG4gIHB1YmxpYyBwcmV2U3RhdHVzKCk6IElTdGF0ZSB7XG4gICAgY29uc3QgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICAgIGlmIChoaXN0b3J5Lmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBoaXN0b3J5W2hpc3RvcnkubGVuZ3RoIC0gMl07XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IHNldCBvZiB1cmwgYW5kIG5hbWVzcGFjZVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuSGlzdG9yeU1hbmFnZXJcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gICAqL1xuICBwdWJsaWMgYWRkKHVybDogc3RyaW5nLCBuYW1lc3BhY2U/OiBzdHJpbmcpIHtcblxuICAgIGlmICghbmFtZXNwYWNlKSB7XG4gICAgICBuYW1lc3BhY2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdGhpcy5oaXN0b3J5LnB1c2goe1xuICAgICAgbmFtZXNwYWNlLFxuICAgICAgdXJsLFxuICAgIH0pO1xuICB9XG59XG4iLCJleHBvcnQgeyBDdXN0b21UcmFuc2l0aW9uIH0gZnJvbSAnLi9DdXN0b21UcmFuc2l0aW9uJztcbmV4cG9ydCB7IEJhc2VUcmFuc2l0aW9uLCBJVHJhbnNpdGlvbiB9IGZyb20gJy4vQmFzZVRyYW5zaXRpb24nO1xuZXhwb3J0IHsgSGlkZVNob3dUcmFuc2l0aW9uIH0gZnJvbSAnLi9IaWRlU2hvd1RyYW5zaXRpb24nO1xuIiwiaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9VdGlscyc7XG5cbi8qKlxuICogQmFzZUNhY2hlIGl0J3MgYSBzaW1wbGUgc3RhdGljIGNhY2hlXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5CYXNlQ2FjaGVcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmNsYXNzIEJhc2VDYWNoZSB7XG5cbiAgLyoqXG4gICAqIFRoZSBPYmplY3QgdGhhdCBrZWVwcyBhbGwgdGhlIGtleSB2YWx1ZSBpbmZvcm1hdGlvblxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZUNhY2hlXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBwdWJsaWMgZGF0YToge1trZXk6IHN0cmluZ106IGFueX07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kYXRhID0ge307XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEga2V5IGFuZCB2YWx1ZSBkYXRhLCBtYWlubHkgQmFyYmEgaXMgZ29pbmcgdG8gc2F2ZSBwcm9taXNlc1xuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZUNhY2hlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgcHVibGljIHNldChrZXk6IHN0cmluZywgdmFsOiBhbnkpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2tleV0gPSB2YWw7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgdGhlIGRhdGEgdXNpbmcgdGhlIGtleVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZUNhY2hlXG4gICAqIEBwYXJhbSAge1N0cmluZ30ga2V5XG4gICAqIEByZXR1cm4geyp9XG4gICAqL1xuICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIHRoZSBjYWNoZVxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZUNhY2hlXG4gICAqL1xuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy5kYXRhID0ge307XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIHRvIGV4dGVuZCB0aGlzIG9iamVjdFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZUNhY2hlXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge29iamVjdH0gbmV3T2JqZWN0XG4gICAqIEByZXR1cm4ge29iamVjdH0gbmV3SW5oZXJpdE9iamVjdFxuICAgKi9cbiAgcHJpdmF0ZSBleHRlbmQob2JqOiBvYmplY3QpIHtcbiAgICByZXR1cm4gVXRpbHMuZXh0ZW5kKGZhbHNlLCB0aGlzLCBvYmopO1xuICB9XG59XG5cbmV4cG9ydCB7IEJhc2VDYWNoZSB9O1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsLnRpbnliaW5kID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBPUFRJT05TID0gWydwcmVmaXgnLCAndGVtcGxhdGVEZWxpbWl0ZXJzJywgJ3Jvb3RJbnRlcmZhY2UnLCAncHJlbG9hZERhdGEnLCAnaGFuZGxlciddO1xuXG4gIHZhciBFWFRFTlNJT05TID0gWydiaW5kZXJzJywgJ2Zvcm1hdHRlcnMnLCAnY29tcG9uZW50cycsICdhZGFwdGVycyddO1xuXG4gIHZhciBQUklNSVRJVkUgPSAwO1xuICB2YXIgS0VZUEFUSCA9IDE7XG4gIHZhciBURVhUID0gMDtcbiAgdmFyIEJJTkRJTkcgPSAxO1xuXG4gIHZhciBRVU9URURfU1RSID0gL14nLionJHxeXCIuKlwiJC87XG5cbiAgLy8gVGVzdCBpZiBzdHJpbmcgaXMgYSBqc29uIHN0cmluZ1xuICBmdW5jdGlvbiBpc0pzb24oc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB2YWwgPSBKU09OLnBhcnNlKHN0cik7XG4gICAgICByZXR1cm4gdmFsIGluc3RhbmNlb2YgQXJyYXkgfHwgdmFsIGluc3RhbmNlb2YgT2JqZWN0ID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyc2VyIGFuZCB0b2tlbml6ZXIgZm9yIGdldHRpbmcgdGhlIHR5cGUgYW5kIHZhbHVlIGZyb20gYSBzdHJpbmcuXG4gIGZ1bmN0aW9uIHBhcnNlVHlwZShzdHJpbmcpIHtcbiAgICB2YXIgdHlwZSA9IFBSSU1JVElWRTtcbiAgICB2YXIgdmFsdWUgPSBzdHJpbmc7XG5cbiAgICBpZiAoUVVPVEVEX1NUUi50ZXN0KHN0cmluZykpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nLnNsaWNlKDEsIC0xKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PT0gJ3RydWUnKSB7XG4gICAgICB2YWx1ZSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT09ICd0cnVlJykge1xuICAgICAgdmFsdWUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc3RyaW5nID09PSAnZmFsc2UnKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoc3RyaW5nID09PSAnbnVsbCcpIHtcbiAgICAgIHZhbHVlID0gbnVsbDtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoIWlzTmFOKHN0cmluZykpIHtcbiAgICAgIHZhbHVlID0gTnVtYmVyKHN0cmluZyk7XG4gICAgfSBlbHNlIGlmIChpc0pzb24oc3RyaW5nKSkge1xuICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHN0cmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSBLRVlQQVRIO1xuICAgIH1cblxuICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIHZhbHVlOiB2YWx1ZSB9O1xuICB9XG5cbiAgLy8gVGVtcGxhdGUgcGFyc2VyIGFuZCB0b2tlbml6ZXIgZm9yIG11c3RhY2hlLXN0eWxlIHRleHQgY29udGVudCBiaW5kaW5ncy5cbiAgLy8gUGFyc2VzIHRoZSB0ZW1wbGF0ZSBhbmQgcmV0dXJucyBhIHNldCBvZiB0b2tlbnMsIHNlcGFyYXRpbmcgc3RhdGljIHBvcnRpb25zXG4gIC8vIG9mIHRleHQgZnJvbSBiaW5kaW5nIGRlY2xhcmF0aW9ucy5cbiAgZnVuY3Rpb24gcGFyc2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGVsaW1pdGVycykge1xuICAgIHZhciB0b2tlbnM7XG4gICAgdmFyIGxlbmd0aCA9IHRlbXBsYXRlLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgIHZhciBvcGVuID0gZGVsaW1pdGVyc1swXSxcbiAgICAgICAgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdO1xuXG4gICAgd2hpbGUgKGxhc3RJbmRleCA8IGxlbmd0aCkge1xuICAgICAgaW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKG9wZW4sIGxhc3RJbmRleCk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaWYgKHRva2Vucykge1xuICAgICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IFRFWFQsXG4gICAgICAgICAgICB2YWx1ZTogdGVtcGxhdGUuc2xpY2UobGFzdEluZGV4KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbnMgPSB0b2tlbnMgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+IDAgJiYgbGFzdEluZGV4IDwgaW5kZXgpIHtcbiAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBURVhULFxuICAgICAgICAgICAgdmFsdWU6IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0SW5kZXggPSBpbmRleCArIG9wZW4ubGVuZ3RoO1xuICAgICAgICBpbmRleCA9IHRlbXBsYXRlLmluZGV4T2YoY2xvc2UsIGxhc3RJbmRleCk7XG5cbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgIHZhciBzdWJzdHJpbmcgPSB0ZW1wbGF0ZS5zbGljZShsYXN0SW5kZXggLSBjbG9zZS5sZW5ndGgpO1xuICAgICAgICAgIHZhciBsYXN0VG9rZW4gPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKGxhc3RUb2tlbiAmJiBsYXN0VG9rZW4udHlwZSA9PT0gVEVYVCkge1xuICAgICAgICAgICAgbGFzdFRva2VuLnZhbHVlICs9IHN1YnN0cmluZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgICAgICB0eXBlOiBURVhULFxuICAgICAgICAgICAgICB2YWx1ZTogc3Vic3RyaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZSA9IHRlbXBsYXRlLnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpLnRyaW0oKTtcblxuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogQklORElORyxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGFzdEluZGV4ID0gaW5kZXggKyBjbG9zZS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRva2VucztcbiAgfVxuXG4gIHZhciB0aW55YmluZCA9IHtcbiAgICAvLyBHbG9iYWwgYmluZGVycy5cbiAgICBiaW5kZXJzOiB7fSxcblxuICAgIC8vIEdsb2JhbCBjb21wb25lbnRzLlxuICAgIGNvbXBvbmVudHM6IHt9LFxuXG4gICAgLy8gR2xvYmFsIGZvcm1hdHRlcnMuXG4gICAgZm9ybWF0dGVyczoge30sXG5cbiAgICAvLyBHbG9iYWwgc2lnaHRnbGFzcyBhZGFwdGVycy5cbiAgICBhZGFwdGVyczoge30sXG5cbiAgICAvLyBEZWZhdWx0IGF0dHJpYnV0ZSBwcmVmaXguXG4gICAgX3ByZWZpeDogJ3J2JyxcblxuICAgIF9mdWxsUHJlZml4OiAncnYtJyxcblxuICAgIGdldCBwcmVmaXgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcHJlZml4O1xuICAgIH0sXG5cbiAgICBzZXQgcHJlZml4KHZhbHVlKSB7XG4gICAgICB0aGlzLl9wcmVmaXggPSB2YWx1ZTtcbiAgICAgIHRoaXMuX2Z1bGxQcmVmaXggPSB2YWx1ZSArICctJztcbiAgICB9LFxuXG4gICAgcGFyc2VUZW1wbGF0ZTogcGFyc2VUZW1wbGF0ZSxcblxuICAgIHBhcnNlVHlwZTogcGFyc2VUeXBlLFxuXG4gICAgLy8gRGVmYXVsdCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgIHRlbXBsYXRlRGVsaW1pdGVyczogWyd7JywgJ30nXSxcblxuICAgIC8vIERlZmF1bHQgc2lnaHRnbGFzcyByb290IGludGVyZmFjZS5cbiAgICByb290SW50ZXJmYWNlOiAnLicsXG5cbiAgICAvLyBQcmVsb2FkIGRhdGEgYnkgZGVmYXVsdC5cbiAgICBwcmVsb2FkRGF0YTogdHJ1ZSxcblxuICAgIC8vIERlZmF1bHQgZXZlbnQgaGFuZGxlci5cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQsIGV2LCBiaW5kaW5nKSB7XG4gICAgICB0aGlzLmNhbGwoY29udGV4dCwgZXYsIGJpbmRpbmcudmlldy5tb2RlbHMpO1xuICAgIH0sXG5cbiAgICAvLyBTZXRzIHRoZSBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuIElmIG5vIGJpbmRlciBhYm92ZSBpcyBtYXRjaGVkIGl0IHdpbGwgZmFsbFxuICAgIC8vIGJhY2sgdG8gdXNpbmcgdGhpcyBiaW5kZXIuXG4gICAgZmFsbGJhY2tCaW5kZXI6IGZ1bmN0aW9uIGZhbGxiYWNrQmluZGVyKGVsLCB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKHRoaXMudHlwZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKHRoaXMudHlwZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIE1lcmdlcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGdsb2JhbCBvcHRpb25zLlxuICAgIGNvbmZpZ3VyZTogZnVuY3Rpb24gY29uZmlndXJlKG9wdGlvbnMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRpb25dO1xuXG4gICAgICAgIGlmIChFWFRFTlNJT05TLmluZGV4T2Yob3B0aW9uKSA+IC0xKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgX3RoaXNbb3B0aW9uXVtrZXldID0gdmFsdWVba2V5XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpc1tvcHRpb25dID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBDaGVjayBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCB0aGFuIGNhbiBiZSBvYnNlcnZlZC5cbiAgZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbDtcbiAgfVxuXG4gIC8vIEVycm9yIHRocm93ZXIuXG4gIGZ1bmN0aW9uIGVycm9yKG1lc3NhZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tPYnNlcnZlcl0gJyArIG1lc3NhZ2UpO1xuICB9XG5cbiAgdmFyIGFkYXB0ZXJzO1xuICB2YXIgaW50ZXJmYWNlcztcbiAgdmFyIHJvb3RJbnRlcmZhY2U7XG5cbiAgLy8gQ29uc3RydWN0cyBhIG5ldyBrZXlwYXRoIG9ic2VydmVyIGFuZCBraWNrcyB0aGluZ3Mgb2ZmLlxuICBmdW5jdGlvbiBPYnNlcnZlcihvYmosIGtleXBhdGgsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5rZXlwYXRoID0ga2V5cGF0aDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5vYmplY3RQYXRoID0gW107XG4gICAgdGhpcy5wYXJzZSgpO1xuICAgIHRoaXMub2JqID0gdGhpcy5nZXRSb290T2JqZWN0KG9iaik7XG5cbiAgICBpZiAoaXNPYmplY3QodGhpcy50YXJnZXQgPSB0aGlzLnJlYWxpemUoKSkpIHtcbiAgICAgIHRoaXMuc2V0KHRydWUsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgT2JzZXJ2ZXIudXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgYWRhcHRlcnMgPSBvcHRpb25zLmFkYXB0ZXJzO1xuICAgIGludGVyZmFjZXMgPSBPYmplY3Qua2V5cyhhZGFwdGVycyk7XG4gICAgcm9vdEludGVyZmFjZSA9IG9wdGlvbnMucm9vdEludGVyZmFjZTtcbiAgfTtcblxuICAvLyBUb2tlbml6ZXMgdGhlIHByb3ZpZGVkIGtleXBhdGggc3RyaW5nIGludG8gaW50ZXJmYWNlICsgcGF0aCB0b2tlbnMgZm9yIHRoZVxuICAvLyBvYnNlcnZlciB0byB3b3JrIHdpdGguXG4gIE9ic2VydmVyLnRva2VuaXplID0gZnVuY3Rpb24gKGtleXBhdGgsIHJvb3QpIHtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIGN1cnJlbnQgPSB7IGk6IHJvb3QsIHBhdGg6ICcnIH07XG4gICAgdmFyIGluZGV4LCBjaHI7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBrZXlwYXRoLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY2hyID0ga2V5cGF0aC5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoISF+aW50ZXJmYWNlcy5pbmRleE9mKGNocikpIHtcbiAgICAgICAgdG9rZW5zLnB1c2goY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSB7IGk6IGNociwgcGF0aDogJycgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQucGF0aCArPSBjaHI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdG9rZW5zLnB1c2goY3VycmVudCk7XG4gICAgcmV0dXJuIHRva2VucztcbiAgfTtcblxuICAvLyBQYXJzZXMgdGhlIGtleXBhdGggdXNpbmcgdGhlIGludGVyZmFjZXMgZGVmaW5lZCBvbiB0aGUgdmlldy4gU2V0cyB2YXJpYWJsZXNcbiAgLy8gZm9yIHRoZSB0b2tlbml6ZWQga2V5cGF0aCBhcyB3ZWxsIGFzIHRoZSBlbmQga2V5LlxuICBPYnNlcnZlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGgsIHJvb3Q7XG5cbiAgICBpZiAoIWludGVyZmFjZXMubGVuZ3RoKSB7XG4gICAgICBlcnJvcignTXVzdCBkZWZpbmUgYXQgbGVhc3Qgb25lIGFkYXB0ZXIgaW50ZXJmYWNlLicpO1xuICAgIH1cblxuICAgIGlmICghIX5pbnRlcmZhY2VzLmluZGV4T2YodGhpcy5rZXlwYXRoWzBdKSkge1xuICAgICAgcm9vdCA9IHRoaXMua2V5cGF0aFswXTtcbiAgICAgIHBhdGggPSB0aGlzLmtleXBhdGguc3Vic3RyKDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290ID0gcm9vdEludGVyZmFjZTtcbiAgICAgIHBhdGggPSB0aGlzLmtleXBhdGg7XG4gICAgfVxuXG4gICAgdGhpcy50b2tlbnMgPSBPYnNlcnZlci50b2tlbml6ZShwYXRoLCByb290KTtcbiAgICB0aGlzLmtleSA9IHRoaXMudG9rZW5zLnBvcCgpO1xuICB9O1xuXG4gIC8vIFJlYWxpemVzIHRoZSBmdWxsIGtleXBhdGgsIGF0dGFjaGluZyBvYnNlcnZlcnMgZm9yIGV2ZXJ5IGtleSBhbmQgY29ycmVjdGluZ1xuICAvLyBvbGQgb2JzZXJ2ZXJzIHRvIGFueSBjaGFuZ2VkIG9iamVjdHMgaW4gdGhlIGtleXBhdGguXG4gIE9ic2VydmVyLnByb3RvdHlwZS5yZWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5vYmo7XG4gICAgdmFyIHVucmVhY2hlZCA9IC0xO1xuICAgIHZhciBwcmV2O1xuICAgIHZhciB0b2tlbjtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnRva2Vucy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbnNbaW5kZXhdO1xuICAgICAgaWYgKGlzT2JqZWN0KGN1cnJlbnQpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vYmplY3RQYXRoW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAoY3VycmVudCAhPT0gKHByZXYgPSB0aGlzLm9iamVjdFBhdGhbaW5kZXhdKSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRva2VuLCBwcmV2LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuc2V0KHRydWUsIHRva2VuLCBjdXJyZW50LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMub2JqZWN0UGF0aFtpbmRleF0gPSBjdXJyZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldCh0cnVlLCB0b2tlbiwgY3VycmVudCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5vYmplY3RQYXRoW2luZGV4XSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50ID0gdGhpcy5nZXQodG9rZW4sIGN1cnJlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHVucmVhY2hlZCA9PT0gLTEpIHtcbiAgICAgICAgICB1bnJlYWNoZWQgPSBpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByZXYgPSB0aGlzLm9iamVjdFBhdGhbaW5kZXhdO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgIHRoaXMuc2V0KGZhbHNlLCB0b2tlbiwgcHJldiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodW5yZWFjaGVkICE9PSAtMSkge1xuICAgICAgdGhpcy5vYmplY3RQYXRoLnNwbGljZSh1bnJlYWNoZWQpO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50O1xuICB9O1xuXG4gIC8vIFVwZGF0ZXMgdGhlIGtleXBhdGguIFRoaXMgaXMgY2FsbGVkIHdoZW4gYW55IGludGVybWVkaWFyeSBrZXkgaXMgY2hhbmdlZC5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHQsIG9sZFZhbHVlLCBuZXdWYWx1ZTtcblxuICAgIGlmICgobmV4dCA9IHRoaXMucmVhbGl6ZSgpKSAhPT0gdGhpcy50YXJnZXQpIHtcbiAgICAgIGlmIChpc09iamVjdCh0aGlzLnRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc09iamVjdChuZXh0KSkge1xuICAgICAgICB0aGlzLnNldCh0cnVlLCB0aGlzLmtleSwgbmV4dCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIG9sZFZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgdGhpcy50YXJnZXQgPSBuZXh0O1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlIHx8IG5ld1ZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24pIHRoaXMuY2FsbGJhY2suc3luYygpO1xuICAgIH0gZWxzZSBpZiAobmV4dCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aGlzLmNhbGxiYWNrLnN5bmMoKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVhZHMgdGhlIGN1cnJlbnQgZW5kIHZhbHVlIG9mIHRoZSBvYnNlcnZlZCBrZXlwYXRoLiBSZXR1cm5zIHVuZGVmaW5lZCBpZlxuICAvLyB0aGUgZnVsbCBrZXlwYXRoIGlzIHVucmVhY2hhYmxlLlxuICBPYnNlcnZlci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMua2V5LCB0aGlzLnRhcmdldCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFNldHMgdGhlIGN1cnJlbnQgZW5kIHZhbHVlIG9mIHRoZSBvYnNlcnZlZCBrZXlwYXRoLiBDYWxsaW5nIHNldFZhbHVlIHdoZW5cbiAgLy8gdGhlIGZ1bGwga2V5cGF0aCBpcyB1bnJlYWNoYWJsZSBpcyBhIG5vLW9wLlxuICBPYnNlcnZlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoaXNPYmplY3QodGhpcy50YXJnZXQpKSB7XG4gICAgICBhZGFwdGVyc1t0aGlzLmtleS5pXS5zZXQodGhpcy50YXJnZXQsIHRoaXMua2V5LnBhdGgsIHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gR2V0cyB0aGUgcHJvdmlkZWQga2V5IG9uIGFuIG9iamVjdC5cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXksIG9iaikge1xuICAgIHJldHVybiBhZGFwdGVyc1trZXkuaV0uZ2V0KG9iaiwga2V5LnBhdGgpO1xuICB9O1xuXG4gIC8vIE9ic2VydmVzIG9yIHVub2JzZXJ2ZXMgYSBjYWxsYmFjayBvbiB0aGUgb2JqZWN0IHVzaW5nIHRoZSBwcm92aWRlZCBrZXkuXG4gIE9ic2VydmVyLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoYWN0aXZlLCBrZXksIG9iaiwgY2FsbGJhY2spIHtcbiAgICB2YXIgYWN0aW9uID0gYWN0aXZlID8gJ29ic2VydmUnIDogJ3Vub2JzZXJ2ZSc7XG4gICAgYWRhcHRlcnNba2V5LmldW2FjdGlvbl0ob2JqLCBrZXkucGF0aCwgY2FsbGJhY2spO1xuICB9O1xuXG4gIC8vIFVub2JzZXJ2ZXMgdGhlIGVudGlyZSBrZXlwYXRoLlxuICBPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmo7XG4gICAgdmFyIHRva2VuO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMudG9rZW5zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgdG9rZW4gPSB0aGlzLnRva2Vuc1tpbmRleF07XG4gICAgICBvYmogPSB0aGlzLm9iamVjdFBhdGhbaW5kZXhdO1xuICAgICAgaWYgKG9iaikge1xuICAgICAgICB0aGlzLnNldChmYWxzZSwgdG9rZW4sIG9iaiwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KHRoaXMudGFyZ2V0KSkge1xuICAgICAgdGhpcy5zZXQoZmFsc2UsIHRoaXMua2V5LCB0aGlzLnRhcmdldCwgdGhpcy5jYWxsYmFjayk7XG4gICAgfVxuICB9O1xuICAvLyB0cmF2ZXJzZSB0aGUgc2NvcGUgY2hhaW4gdG8gZmluZCB0aGUgc2NvcGUgd2hpY2ggaGFzIHRoZSByb290IHByb3BlcnR5XG4gIC8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBub3QgZm91bmQgaW4gY2hhaW4sIHJldHVybnMgdGhlIHJvb3Qgc2NvcGVcbiAgT2JzZXJ2ZXIucHJvdG90eXBlLmdldFJvb3RPYmplY3QgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHJvb3RQcm9wLCBjdXJyZW50O1xuICAgIGlmICghb2JqLiRwYXJlbnQpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCkge1xuICAgICAgcm9vdFByb3AgPSB0aGlzLnRva2Vuc1swXS5wYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290UHJvcCA9IHRoaXMua2V5LnBhdGg7XG4gICAgfVxuXG4gICAgY3VycmVudCA9IG9iajtcbiAgICB3aGlsZSAoY3VycmVudC4kcGFyZW50ICYmIGN1cnJlbnRbcm9vdFByb3BdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH07XG5cbiAgdmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH07XG5cbiAgdmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldElucHV0VmFsdWUoZWwpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIGlmIChlbC50eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICByZXR1cm4gZWwuY2hlY2tlZDtcbiAgICB9IGVsc2UgaWYgKGVsLnR5cGUgPT09ICdzZWxlY3QtbXVsdGlwbGUnKSB7XG5cbiAgICAgIGVsLm9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWwudmFsdWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIEZPUk1BVFRFUl9BUkdTID0gL1teXFxzJ10rfCcoW14nXXwnW15cXHNdKSonfFwiKFteXCJdfFwiW15cXHNdKSpcIi9nO1xuICB2YXIgRk9STUFUVEVSX1NQTElUID0gL1xccysvO1xuXG4gIC8vIEEgc2luZ2xlIGJpbmRpbmcgYmV0d2VlbiBhIG1vZGVsIGF0dHJpYnV0ZSBhbmQgYSBET00gZWxlbWVudC5cbiAgdmFyIEJpbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gQWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBiaW5kaW5nIGlzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvcjsgdGhlXG4gICAgLy8gY29udGFpbmluZyB2aWV3LCB0aGUgRE9NIG5vZGUsIHRoZSB0eXBlIG9mIGJpbmRpbmcsIHRoZSBtb2RlbCBvYmplY3QgYW5kIHRoZVxuICAgIC8vIGtleXBhdGggYXQgd2hpY2ggdG8gbGlzdGVuIGZvciBjaGFuZ2VzLlxuICAgIGZ1bmN0aW9uIEJpbmRpbmcodmlldywgZWwsIHR5cGUsIGtleXBhdGgsIGJpbmRlciwgYXJnLCBmb3JtYXR0ZXJzKSB7XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBCaW5kaW5nKTtcblxuICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLmtleXBhdGggPSBrZXlwYXRoO1xuICAgICAgdGhpcy5iaW5kZXIgPSBiaW5kZXI7XG4gICAgICB0aGlzLmFyZyA9IGFyZztcbiAgICAgIHRoaXMuZm9ybWF0dGVycyA9IGZvcm1hdHRlcnM7XG4gICAgICB0aGlzLmZvcm1hdHRlck9ic2VydmVycyA9IHt9O1xuICAgICAgdGhpcy5tb2RlbCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBPYnNlcnZlcyB0aGUgb2JqZWN0IGtleXBhdGhcblxuXG4gICAgQmluZGluZy5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uIG9ic2VydmUob2JqLCBrZXlwYXRoKSB7XG4gICAgICByZXR1cm4gbmV3IE9ic2VydmVyKG9iaiwga2V5cGF0aCwgdGhpcyk7XG4gICAgfTtcblxuICAgIEJpbmRpbmcucHJvdG90eXBlLnBhcnNlVGFyZ2V0ID0gZnVuY3Rpb24gcGFyc2VUYXJnZXQoKSB7XG4gICAgICBpZiAodGhpcy5rZXlwYXRoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHBhcnNlVHlwZSh0aGlzLmtleXBhdGgpO1xuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSAwKSB7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9IHRva2VuLnZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmUodGhpcy52aWV3Lm1vZGVscywgdGhpcy5rZXlwYXRoKTtcbiAgICAgICAgICB0aGlzLm1vZGVsID0gdGhpcy5vYnNlcnZlci50YXJnZXQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIEJpbmRpbmcucHJvdG90eXBlLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzID0gZnVuY3Rpb24gcGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJncywgZm9ybWF0dGVySW5kZXgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBhcmdzLm1hcChwYXJzZVR5cGUpLm1hcChmdW5jdGlvbiAoX3JlZiwgYWkpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICAgICAgICB2YWx1ZSA9IF9yZWYudmFsdWU7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFfdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZm9ybWF0dGVySW5kZXhdKSB7XG4gICAgICAgICAgICBfdGhpcy5mb3JtYXR0ZXJPYnNlcnZlcnNbZm9ybWF0dGVySW5kZXhdID0ge307XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzW2Zvcm1hdHRlckluZGV4XVthaV07XG5cbiAgICAgICAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICAgICAgICBvYnNlcnZlciA9IF90aGlzLm9ic2VydmUoX3RoaXMudmlldy5tb2RlbHMsIHZhbHVlKTtcbiAgICAgICAgICAgIF90aGlzLmZvcm1hdHRlck9ic2VydmVyc1tmb3JtYXR0ZXJJbmRleF1bYWldID0gb2JzZXJ2ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG9ic2VydmVyLnZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBBcHBsaWVzIGFsbCB0aGUgY3VycmVudCBmb3JtYXR0ZXJzIHRvIHRoZSBzdXBwbGllZCB2YWx1ZSBhbmQgcmV0dXJucyB0aGVcbiAgICAvLyBmb3JtYXR0ZWQgdmFsdWUuXG5cblxuICAgIEJpbmRpbmcucHJvdG90eXBlLmZvcm1hdHRlZFZhbHVlID0gZnVuY3Rpb24gZm9ybWF0dGVkVmFsdWUodmFsdWUpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXJzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBkZWNsYXJhdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBkZWNsYXJhdGlvbi5tYXRjaChGT1JNQVRURVJfQVJHUyk7XG4gICAgICAgIHZhciBpZCA9IGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgdmFyIGZvcm1hdHRlciA9IF90aGlzMi52aWV3Lm9wdGlvbnMuZm9ybWF0dGVyc1tpZF07XG5cbiAgICAgICAgdmFyIHByb2Nlc3NlZEFyZ3MgPSBfdGhpczIucGFyc2VGb3JtYXR0ZXJBcmd1bWVudHMoYXJncywgaW5kZXgpO1xuXG4gICAgICAgIGlmIChmb3JtYXR0ZXIgJiYgZm9ybWF0dGVyLnJlYWQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5yZWFkLmFwcGx5KGZvcm1hdHRlciwgW3Jlc3VsdF0uY29uY2F0KHByb2Nlc3NlZEFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXR0ZXIgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5hcHBseSh1bmRlZmluZWQsIFtyZXN1bHRdLmNvbmNhdChwcm9jZXNzZWRBcmdzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJucyBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgYmluZGluZyBhcm91bmQgdGhlIHN1cHBsaWVkIGZ1bmN0aW9uLlxuXG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5ldmVudEhhbmRsZXIgPSBmdW5jdGlvbiBldmVudEhhbmRsZXIoZm4pIHtcbiAgICAgIHZhciBiaW5kaW5nID0gdGhpcztcbiAgICAgIHZhciBoYW5kbGVyID0gYmluZGluZy52aWV3Lm9wdGlvbnMuaGFuZGxlcjtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldikge1xuICAgICAgICBoYW5kbGVyLmNhbGwoZm4sIHRoaXMsIGV2LCBiaW5kaW5nKTtcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIFNldHMgdGhlIHZhbHVlIGZvciB0aGUgYmluZGluZy4gVGhpcyBCYXNpY2FsbHkganVzdCBydW5zIHRoZSBiaW5kaW5nIHJvdXRpbmVcbiAgICAvLyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZSBmb3JtYXR0ZWQuXG5cblxuICAgIEJpbmRpbmcucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldCQkMSh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgIXRoaXMuYmluZGVyLmZ1bmN0aW9uKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5mb3JtYXR0ZWRWYWx1ZSh2YWx1ZS5jYWxsKHRoaXMubW9kZWwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5mb3JtYXR0ZWRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByb3V0aW5lRm4gPSB0aGlzLmJpbmRlci5yb3V0aW5lIHx8IHRoaXMuYmluZGVyO1xuXG4gICAgICBpZiAocm91dGluZUZuIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgcm91dGluZUZuLmNhbGwodGhpcywgdGhpcy5lbCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTeW5jcyB1cCB0aGUgdmlldyBiaW5kaW5nIHdpdGggdGhlIG1vZGVsLlxuXG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gc3luYygpIHtcbiAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLm9ic2VydmVyLnRhcmdldDtcbiAgICAgICAgdGhpcy5zZXQodGhpcy5vYnNlcnZlci52YWx1ZSgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0KHRoaXMudmFsdWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBQdWJsaXNoZXMgdGhlIHZhbHVlIGN1cnJlbnRseSBzZXQgb24gdGhlIGlucHV0IGVsZW1lbnQgYmFjayB0byB0aGUgbW9kZWwuXG5cblxuICAgIEJpbmRpbmcucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiBwdWJsaXNoKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZm9ybWF0dGVycy5yZWR1Y2VSaWdodChmdW5jdGlvbiAocmVzdWx0LCBkZWNsYXJhdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGRlY2xhcmF0aW9uLnNwbGl0KEZPUk1BVFRFUl9TUExJVCk7XG4gICAgICAgICAgdmFyIGlkID0gYXJncy5zaGlmdCgpO1xuICAgICAgICAgIHZhciBmb3JtYXR0ZXIgPSBfdGhpczMudmlldy5vcHRpb25zLmZvcm1hdHRlcnNbaWRdO1xuICAgICAgICAgIHZhciBwcm9jZXNzZWRBcmdzID0gX3RoaXMzLnBhcnNlRm9ybWF0dGVyQXJndW1lbnRzKGFyZ3MsIGluZGV4KTtcblxuICAgICAgICAgIGlmIChmb3JtYXR0ZXIgJiYgZm9ybWF0dGVyLnB1Ymxpc2gpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZvcm1hdHRlci5wdWJsaXNoLmFwcGx5KGZvcm1hdHRlciwgW3Jlc3VsdF0uY29uY2F0KHByb2Nlc3NlZEFyZ3MpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSwgdGhpcy5nZXRWYWx1ZSh0aGlzLmVsKSk7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlci5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFN1YnNjcmliZXMgdG8gdGhlIG1vZGVsIGZvciBjaGFuZ2VzIGF0IHRoZSBzcGVjaWZpZWQga2V5cGF0aC4gQmktZGlyZWN0aW9uYWxcbiAgICAvLyByb3V0aW5lcyB3aWxsIGFsc28gbGlzdGVuIGZvciBjaGFuZ2VzIG9uIHRoZSBlbGVtZW50IHRvIHByb3BhZ2F0ZSB0aGVtIGJhY2tcbiAgICAvLyB0byB0aGUgbW9kZWwuXG5cblxuICAgIEJpbmRpbmcucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kKCkge1xuICAgICAgdGhpcy5wYXJzZVRhcmdldCgpO1xuXG4gICAgICBpZiAodGhpcy5iaW5kZXIuaGFzT3duUHJvcGVydHkoJ2JpbmQnKSkge1xuICAgICAgICB0aGlzLmJpbmRlci5iaW5kLmNhbGwodGhpcywgdGhpcy5lbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnZpZXcub3B0aW9ucy5wcmVsb2FkRGF0YSkge1xuICAgICAgICB0aGlzLnN5bmMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gVW5zdWJzY3JpYmVzIGZyb20gdGhlIG1vZGVsIGFuZCB0aGUgZWxlbWVudC5cblxuXG4gICAgQmluZGluZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmJpbmRlci51bmJpbmQpIHtcbiAgICAgICAgdGhpcy5iaW5kZXIudW5iaW5kLmNhbGwodGhpcywgdGhpcy5lbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIudW5vYnNlcnZlKCk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaSkge1xuICAgICAgICB2YXIgYXJncyA9IF90aGlzNC5mb3JtYXR0ZXJPYnNlcnZlcnNbZmldO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goZnVuY3Rpb24gKGFpKSB7XG4gICAgICAgICAgYXJnc1thaV0udW5vYnNlcnZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuZm9ybWF0dGVyT2JzZXJ2ZXJzID0ge307XG4gICAgfTtcblxuICAgIC8vIFVwZGF0ZXMgdGhlIGJpbmRpbmcncyBtb2RlbCBmcm9tIHdoYXQgaXMgY3VycmVudGx5IHNldCBvbiB0aGUgdmlldy4gVW5iaW5kc1xuICAgIC8vIHRoZSBvbGQgbW9kZWwgZmlyc3QgYW5kIHRoZW4gcmUtYmluZHMgd2l0aCB0aGUgbmV3IG1vZGVsLlxuXG5cbiAgICBCaW5kaW5nLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB2YXIgbW9kZWxzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMub2JzZXJ2ZXIudGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5iaW5kZXIudXBkYXRlKSB7XG4gICAgICAgIHRoaXMuYmluZGVyLnVwZGF0ZS5jYWxsKHRoaXMsIG1vZGVscyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFJldHVybnMgZWxlbWVudHMgdmFsdWVcblxuXG4gICAgQmluZGluZy5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZShlbCkge1xuICAgICAgaWYgKHRoaXMuYmluZGVyICYmIHRoaXMuYmluZGVyLmdldFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJpbmRlci5nZXRWYWx1ZS5jYWxsKHRoaXMsIGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBnZXRJbnB1dFZhbHVlKGVsKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIEJpbmRpbmc7XG4gIH0oKTtcblxuICAvLyBjb21wb25lbnQgdmlldyBlbmNhcHN1bGF0ZWQgYXMgYSBiaW5kaW5nIHdpdGhpbiBpdCdzIHBhcmVudCB2aWV3LlxuICB2YXIgQ29tcG9uZW50QmluZGluZyA9IGZ1bmN0aW9uIChfQmluZGluZykge1xuICAgIGluaGVyaXRzKENvbXBvbmVudEJpbmRpbmcsIF9CaW5kaW5nKTtcblxuICAgIC8vIEluaXRpYWxpemVzIGEgY29tcG9uZW50IGJpbmRpbmcgZm9yIHRoZSBzcGVjaWZpZWQgdmlldy4gVGhlIHJhdyBjb21wb25lbnRcbiAgICAvLyBlbGVtZW50IGlzIHBhc3NlZCBpbiBhbG9uZyB3aXRoIHRoZSBjb21wb25lbnQgdHlwZS4gQXR0cmlidXRlcyBhbmQgc2NvcGVcbiAgICAvLyBpbmZsZWN0aW9ucyBhcmUgZGV0ZXJtaW5lZCBiYXNlZCBvbiB0aGUgY29tcG9uZW50cyBkZWZpbmVkIGF0dHJpYnV0ZXMuXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50QmluZGluZyh2aWV3LCBlbCwgdHlwZSkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcG9uZW50QmluZGluZyk7XG5cbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0JpbmRpbmcuY2FsbCh0aGlzLCB2aWV3LCBlbCwgdHlwZSwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCkpO1xuXG4gICAgICBfdGhpcy52aWV3ID0gdmlldztcbiAgICAgIF90aGlzLmVsID0gZWw7XG4gICAgICBfdGhpcy50eXBlID0gdHlwZTtcbiAgICAgIF90aGlzLmNvbXBvbmVudCA9IHZpZXcub3B0aW9ucy5jb21wb25lbnRzW190aGlzLnR5cGVdO1xuICAgICAgX3RoaXMuc3RhdGljID0ge307XG4gICAgICBfdGhpcy5vYnNlcnZlcnMgPSB7fTtcbiAgICAgIF90aGlzLnVwc3RyZWFtT2JzZXJ2ZXJzID0ge307XG5cbiAgICAgIHZhciBiaW5kaW5nUHJlZml4ID0gdGlueWJpbmQuX2Z1bGxQcmVmaXg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGUgPSBlbC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgICBpZiAoYXR0cmlidXRlLm5hbWUuaW5kZXhPZihiaW5kaW5nUHJlZml4KSAhPT0gMCkge1xuICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBfdGhpcy5jYW1lbENhc2UoYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgIHZhciBzdGF0ID0gX3RoaXMuY29tcG9uZW50LnN0YXRpYztcblxuICAgICAgICAgIGlmIChzdGF0ICYmIHN0YXQuaW5kZXhPZihwcm9wZXJ0eU5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIF90aGlzLnN0YXRpY1twcm9wZXJ0eU5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5vYnNlcnZlcnNbcHJvcGVydHlOYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICAvLyBJbnRlcmNlcHRzIGB0aW55YmluZC5CaW5kaW5nOjpzeW5jYCBzaW5jZSBjb21wb25lbnQgYmluZGluZ3MgYXJlIG5vdCBib3VuZCB0b1xuICAgIC8vIGEgcGFydGljdWxhciBtb2RlbCB0byB1cGRhdGUgaXQncyB2YWx1ZS5cblxuXG4gICAgQ29tcG9uZW50QmluZGluZy5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uIHN5bmMoKSB7fTtcblxuICAgIC8vIEludGVyY2VwdHMgYHRpbnliaW5kLkJpbmRpbmc6OnVwZGF0ZWAgc2luY2UgY29tcG9uZW50IGJpbmRpbmdzIGFyZSBub3QgYm91bmRcbiAgICAvLyB0byBhIHBhcnRpY3VsYXIgbW9kZWwgdG8gdXBkYXRlIGl0J3MgdmFsdWUuXG5cblxuICAgIENvbXBvbmVudEJpbmRpbmcucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9O1xuXG4gICAgLy8gSW50ZXJjZXB0cyBgdGlueWJpbmQuQmluZGluZzo6cHVibGlzaGAgc2luY2UgY29tcG9uZW50IGJpbmRpbmdzIGFyZSBub3QgYm91bmRcbiAgICAvLyB0byBhIHBhcnRpY3VsYXIgbW9kZWwgdG8gdXBkYXRlIGl0J3MgdmFsdWUuXG5cblxuICAgIENvbXBvbmVudEJpbmRpbmcucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiBwdWJsaXNoKCkge307XG5cbiAgICAvLyBSZXR1cm5zIGFuIG9iamVjdCBtYXAgdXNpbmcgdGhlIGNvbXBvbmVudCdzIHNjb3BlIGluZmxlY3Rpb25zLlxuXG5cbiAgICBDb21wb25lbnRCaW5kaW5nLnByb3RvdHlwZS5sb2NhbHMgPSBmdW5jdGlvbiBsb2NhbHMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnN0YXRpYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gX3RoaXMyLnN0YXRpY1trZXldO1xuICAgICAgfSk7XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMub2JzZXJ2ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBfdGhpczIub2JzZXJ2ZXJzW2tleV0udmFsdWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBSZXR1cm5zIGEgY2FtZWwtY2FzZWQgdmVyc2lvbiBvZiB0aGUgc3RyaW5nLiBVc2VkIHdoZW4gdHJhbnNsYXRpbmcgYW5cbiAgICAvLyBlbGVtZW50J3MgYXR0cmlidXRlIG5hbWUgaW50byBhIHByb3BlcnR5IG5hbWUgZm9yIHRoZSBjb21wb25lbnQncyBzY29wZS5cblxuXG4gICAgQ29tcG9uZW50QmluZGluZy5wcm90b3R5cGUuY2FtZWxDYXNlID0gZnVuY3Rpb24gY2FtZWxDYXNlKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZ3JvdXBlZCkge1xuICAgICAgICBncm91cGVkWzFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gSW50ZXJjZXB0cyBgdGlueWJpbmQuQmluZGluZzo6YmluZGAgdG8gYnVpbGQgYEBjb21wb25lbnRWaWV3YCB3aXRoIGEgbG9jYWxpemVkXG4gICAgLy8gbWFwIG9mIG1vZGVscyBmcm9tIHRoZSByb290IHZpZXcuIEJpbmQgYEBjb21wb25lbnRWaWV3YCBvbiBzdWJzZXF1ZW50IGNhbGxzLlxuXG5cbiAgICBDb21wb25lbnRCaW5kaW5nLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgICAgaWYgKCF0aGlzLmJvdW5kKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMub2JzZXJ2ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2YXIga2V5cGF0aCA9IF90aGlzMy5vYnNlcnZlcnNba2V5XTtcblxuICAgICAgICAgIF90aGlzMy5vYnNlcnZlcnNba2V5XSA9IF90aGlzMy5vYnNlcnZlKF90aGlzMy52aWV3Lm1vZGVscywga2V5cGF0aCwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMzLmNvbXBvbmVudFZpZXcubW9kZWxzW2tleV0gPSBfdGhpczMub2JzZXJ2ZXJzW2tleV0udmFsdWUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfS5jYWxsKF90aGlzMywga2V5KSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYm91bmQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jb21wb25lbnRWaWV3KSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Vmlldy5iaW5kKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRoaXMuY29tcG9uZW50LnRlbXBsYXRlLmNhbGwodGhpcyk7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXMuY29tcG9uZW50LmluaXRpYWxpemUuY2FsbCh0aGlzLCB0aGlzLmVsLCB0aGlzLmxvY2FscygpKTtcbiAgICAgICAgdGhpcy5lbC5fYm91bmQgPSB0cnVlO1xuXG4gICAgICAgIEVYVEVOU0lPTlMuZm9yRWFjaChmdW5jdGlvbiAoZXh0ZW5zaW9uVHlwZSkge1xuICAgICAgICAgIG9wdGlvbnNbZXh0ZW5zaW9uVHlwZV0gPSB7fTtcblxuICAgICAgICAgIGlmIChfdGhpczMuY29tcG9uZW50W2V4dGVuc2lvblR5cGVdKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhfdGhpczMuY29tcG9uZW50W2V4dGVuc2lvblR5cGVdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgb3B0aW9uc1tleHRlbnNpb25UeXBlXVtrZXldID0gX3RoaXMzLmNvbXBvbmVudFtleHRlbnNpb25UeXBlXVtrZXldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgT2JqZWN0LmtleXMoX3RoaXMzLnZpZXcub3B0aW9uc1tleHRlbnNpb25UeXBlXSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uc1tleHRlbnNpb25UeXBlXVtrZXldKSB7XG4gICAgICAgICAgICAgIG9wdGlvbnNbZXh0ZW5zaW9uVHlwZV1ba2V5XSA9IF90aGlzMy52aWV3W2V4dGVuc2lvblR5cGVdW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIE9QVElPTlMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5jb21wb25lbnRbb3B0aW9uXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zW29wdGlvbl0gPSBfdGhpczMuY29tcG9uZW50W29wdGlvbl07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnNbb3B0aW9uXSA9IF90aGlzMy52aWV3W29wdGlvbl07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvL3RoZXJlJ3MgYSBjeWNsaWMgZGVwZW5kZW5jeSB0aGF0IG1ha2VzIGltcG9ydGVkIFZpZXcgYSBkdW1teSBvYmplY3QuIFVzZSB0aW55YmluZC5iaW5kXG4gICAgICAgIC8vdGhpcy5jb21wb25lbnRWaWV3ID0gbmV3IFZpZXcodGhpcy5lbCwgc2NvcGUsIG9wdGlvbnMpXG4gICAgICAgIC8vdGhpcy5jb21wb25lbnRWaWV3LmJpbmQoKVxuICAgICAgICB0aGlzLmNvbXBvbmVudFZpZXcgPSB0aW55YmluZC5iaW5kKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuZWwuY2hpbGROb2RlcyksIHNjb3BlLCBvcHRpb25zKTtcblxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLm9ic2VydmVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXMzLm9ic2VydmVyc1trZXldO1xuICAgICAgICAgIHZhciBtb2RlbHMgPSBfdGhpczMuY29tcG9uZW50Vmlldy5tb2RlbHM7XG5cbiAgICAgICAgICB2YXIgdXBzdHJlYW0gPSBfdGhpczMub2JzZXJ2ZShtb2RlbHMsIGtleSwgZnVuY3Rpb24gKGtleSwgb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLnNldFZhbHVlKF90aGlzMy5jb21wb25lbnRWaWV3Lm1vZGVsc1trZXldKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfS5jYWxsKF90aGlzMywga2V5LCBvYnNlcnZlcikpO1xuXG4gICAgICAgICAgX3RoaXMzLnVwc3RyZWFtT2JzZXJ2ZXJzW2tleV0gPSB1cHN0cmVhbTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEludGVyY2VwdCBgdGlueWJpbmQuQmluZGluZzo6dW5iaW5kYCB0byBiZSBjYWxsZWQgb24gYEBjb21wb25lbnRWaWV3YC5cblxuXG4gICAgQ29tcG9uZW50QmluZGluZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5rZXlzKHRoaXMudXBzdHJlYW1PYnNlcnZlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpczQudXBzdHJlYW1PYnNlcnZlcnNba2V5XS51bm9ic2VydmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLm9ic2VydmVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF90aGlzNC5vYnNlcnZlcnNba2V5XS51bm9ic2VydmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5jb21wb25lbnRWaWV3KSB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50Vmlldy51bmJpbmQuY2FsbCh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbXBvbmVudEJpbmRpbmc7XG4gIH0oQmluZGluZyk7XG5cbiAgdmFyIHRleHRCaW5kZXIgPSB7XG4gICAgcm91dGluZTogZnVuY3Rpb24gcm91dGluZShub2RlLCB2YWx1ZSkge1xuICAgICAgbm9kZS5kYXRhID0gdmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogJyc7XG4gICAgfVxuICB9O1xuXG4gIHZhciBERUNMQVJBVElPTl9TUExJVCA9IC8oKD86J1teJ10qJykqKD86KD86W15cXHwnXSooPzonW14nXSonKStbXlxcfCddKikrfFteXFx8XSspKXxeJC9nO1xuXG4gIHZhciBwYXJzZU5vZGUgPSBmdW5jdGlvbiBwYXJzZU5vZGUodmlldywgbm9kZSkge1xuICAgIHZhciBibG9jayA9IGZhbHNlO1xuXG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIHZhciB0b2tlbnMgPSBwYXJzZVRlbXBsYXRlKG5vZGUuZGF0YSwgdGlueWJpbmQudGVtcGxhdGVEZWxpbWl0ZXJzKTtcblxuICAgICAgaWYgKHRva2Vucykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICB2YXIgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRva2VuLnZhbHVlKTtcbiAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRleHQsIG5vZGUpO1xuXG4gICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIHZpZXcuYnVpbGRCaW5kaW5nKHRleHQsIG51bGwsIHRva2VuLnZhbHVlLCB0ZXh0QmluZGVyLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG4gICAgICBibG9jayA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBibG9jayA9IHZpZXcudHJhdmVyc2Uobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKCFibG9jaykge1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgcGFyc2VOb2RlKHZpZXcsIG5vZGUuY2hpbGROb2Rlc1tfaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgYmluZGluZ0NvbXBhcmF0b3IgPSBmdW5jdGlvbiBiaW5kaW5nQ29tcGFyYXRvcihhLCBiKSB7XG4gICAgdmFyIGFQcmlvcml0eSA9IGEuYmluZGVyID8gYS5iaW5kZXIucHJpb3JpdHkgfHwgMCA6IDA7XG4gICAgdmFyIGJQcmlvcml0eSA9IGIuYmluZGVyID8gYi5iaW5kZXIucHJpb3JpdHkgfHwgMCA6IDA7XG4gICAgcmV0dXJuIGJQcmlvcml0eSAtIGFQcmlvcml0eTtcbiAgfTtcblxuICB2YXIgdHJpbVN0ciA9IGZ1bmN0aW9uIHRyaW1TdHIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCk7XG4gIH07XG5cbiAgLy8gQSBjb2xsZWN0aW9uIG9mIGJpbmRpbmdzIGJ1aWx0IGZyb20gYSBzZXQgb2YgcGFyZW50IG5vZGVzLlxuXG4gIHZhciBWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRoZSBET00gZWxlbWVudHMgYW5kIHRoZSBtb2RlbCBvYmplY3RzIGZvciBiaW5kaW5nIGFyZSBwYXNzZWQgaW50byB0aGVcbiAgICAvLyBjb25zdHJ1Y3RvciBhbG9uZyB3aXRoIGFueSBsb2NhbCBvcHRpb25zIHRoYXQgc2hvdWxkIGJlIHVzZWQgdGhyb3VnaG91dCB0aGVcbiAgICAvLyBjb250ZXh0IG9mIHRoZSB2aWV3IGFuZCBpdCdzIGJpbmRpbmdzLlxuICAgIGZ1bmN0aW9uIFZpZXcoZWxzLCBtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXcpO1xuXG4gICAgICBpZiAoZWxzLmpxdWVyeSB8fCBlbHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB0aGlzLmVscyA9IGVscztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxzID0gW2Vsc107XG4gICAgICB9XG5cbiAgICAgIHRoaXMubW9kZWxzID0gbW9kZWxzO1xuICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgdGhpcy5idWlsZCgpO1xuICAgIH1cblxuICAgIFZpZXcucHJvdG90eXBlLmJ1aWxkQmluZGluZyA9IGZ1bmN0aW9uIGJ1aWxkQmluZGluZyhub2RlLCB0eXBlLCBkZWNsYXJhdGlvbiwgYmluZGVyLCBhcmcpIHtcbiAgICAgIHZhciBwaXBlcyA9IGRlY2xhcmF0aW9uLm1hdGNoKERFQ0xBUkFUSU9OX1NQTElUKS5tYXAodHJpbVN0cik7XG5cbiAgICAgIHZhciBrZXlwYXRoID0gcGlwZXMuc2hpZnQoKTtcblxuICAgICAgdGhpcy5iaW5kaW5ncy5wdXNoKG5ldyBCaW5kaW5nKHRoaXMsIG5vZGUsIHR5cGUsIGtleXBhdGgsIGJpbmRlciwgYXJnLCBwaXBlcykpO1xuICAgIH07XG5cbiAgICAvLyBQYXJzZXMgdGhlIERPTSB0cmVlIGFuZCBidWlsZHMgYEJpbmRpbmdgIGluc3RhbmNlcyBmb3IgZXZlcnkgbWF0Y2hlZFxuICAgIC8vIGJpbmRpbmcgZGVjbGFyYXRpb24uXG5cblxuICAgIFZpZXcucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24gYnVpbGQoKSB7XG4gICAgICB0aGlzLmJpbmRpbmdzID0gW107XG5cbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxzLFxuICAgICAgICAgIGkgPSB2b2lkIDAsXG4gICAgICAgICAgbGVuID0gdm9pZCAwO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgcGFyc2VOb2RlKHRoaXMsIGVsZW1lbnRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5iaW5kaW5ncy5zb3J0KGJpbmRpbmdDb21wYXJhdG9yKTtcbiAgICB9O1xuXG4gICAgVmlldy5wcm90b3R5cGUudHJhdmVyc2UgPSBmdW5jdGlvbiB0cmF2ZXJzZShub2RlKSB7XG4gICAgICB2YXIgYmluZGluZ1ByZWZpeCA9IHRpbnliaW5kLl9mdWxsUHJlZml4O1xuICAgICAgdmFyIGJsb2NrID0gbm9kZS5ub2RlTmFtZSA9PT0gJ1NDUklQVCcgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ1NUWUxFJztcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzO1xuICAgICAgdmFyIGJpbmRJbmZvcyA9IFtdO1xuICAgICAgdmFyIHN0YXJCaW5kZXJzID0gdGhpcy5vcHRpb25zLnN0YXJCaW5kZXJzO1xuICAgICAgdmFyIHR5cGUsIGJpbmRlciwgaWRlbnRpZmllciwgYXJnO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXR0cmlidXRlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5uYW1lLmluZGV4T2YoYmluZGluZ1ByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICB0eXBlID0gYXR0cmlidXRlLm5hbWUuc2xpY2UoYmluZGluZ1ByZWZpeC5sZW5ndGgpO1xuICAgICAgICAgIGJpbmRlciA9IHRoaXMub3B0aW9ucy5iaW5kZXJzW3R5cGVdO1xuICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmICghYmluZGVyKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHN0YXJCaW5kZXJzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGlkZW50aWZpZXIgPSBzdGFyQmluZGVyc1trXTtcbiAgICAgICAgICAgICAgaWYgKHR5cGUuc2xpY2UoMCwgaWRlbnRpZmllci5sZW5ndGggLSAxKSA9PT0gaWRlbnRpZmllci5zbGljZSgwLCAtMSkpIHtcbiAgICAgICAgICAgICAgICBiaW5kZXIgPSB0aGlzLm9wdGlvbnMuYmluZGVyc1tpZGVudGlmaWVyXTtcbiAgICAgICAgICAgICAgICBhcmcgPSB0eXBlLnNsaWNlKGlkZW50aWZpZXIubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWJpbmRlcikge1xuICAgICAgICAgICAgYmluZGVyID0gdGlueWJpbmQuZmFsbGJhY2tCaW5kZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGJpbmRlci5ibG9jaykge1xuICAgICAgICAgICAgdGhpcy5idWlsZEJpbmRpbmcobm9kZSwgdHlwZSwgYXR0cmlidXRlLnZhbHVlLCBiaW5kZXIsIGFyZyk7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiaW5kSW5mb3MucHVzaCh7IGF0dHI6IGF0dHJpYnV0ZSwgYmluZGVyOiBiaW5kZXIsIHR5cGU6IHR5cGUsIGFyZzogYXJnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGJpbmRJbmZvcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBiaW5kSW5mbyA9IGJpbmRJbmZvc1tfaTJdO1xuICAgICAgICB0aGlzLmJ1aWxkQmluZGluZyhub2RlLCBiaW5kSW5mby50eXBlLCBiaW5kSW5mby5hdHRyLnZhbHVlLCBiaW5kSW5mby5iaW5kZXIsIGJpbmRJbmZvLmFyZyk7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGJpbmRJbmZvLmF0dHIubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGJpbmQgY29tcG9uZW50c1xuICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICB0eXBlID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcG9uZW50c1t0eXBlXSAmJiAhbm9kZS5fYm91bmQpIHtcbiAgICAgICAgICB0aGlzLmJpbmRpbmdzLnB1c2gobmV3IENvbXBvbmVudEJpbmRpbmcodGhpcywgbm9kZSwgdHlwZSkpO1xuICAgICAgICAgIGJsb2NrID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYmxvY2s7XG4gICAgfTtcblxuICAgIC8vIEJpbmRzIGFsbCBvZiB0aGUgY3VycmVudCBiaW5kaW5ncyBmb3IgdGhpcyB2aWV3LlxuXG5cbiAgICBWaWV3LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gYmluZCgpIHtcbiAgICAgIHRoaXMuYmluZGluZ3MuZm9yRWFjaChmdW5jdGlvbiAoYmluZGluZykge1xuICAgICAgICBiaW5kaW5nLmJpbmQoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBVbmJpbmRzIGFsbCBvZiB0aGUgY3VycmVudCBiaW5kaW5ncyBmb3IgdGhpcyB2aWV3LlxuXG5cbiAgICBWaWV3LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICAgICAgYmluZGluZy51bmJpbmQoKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBTeW5jcyB1cCB0aGUgdmlldyB3aXRoIHRoZSBtb2RlbCBieSBydW5uaW5nIHRoZSByb3V0aW5lcyBvbiBhbGwgYmluZGluZ3MuXG5cblxuICAgIFZpZXcucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbiBzeW5jKCkge1xuICAgICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgIGJpbmRpbmcuc3luYygpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIFB1Ymxpc2hlcyB0aGUgaW5wdXQgdmFsdWVzIGZyb20gdGhlIHZpZXcgYmFjayB0byB0aGUgbW9kZWwgKHJldmVyc2Ugc3luYykuXG5cblxuICAgIFZpZXcucHJvdG90eXBlLnB1Ymxpc2ggPSBmdW5jdGlvbiBwdWJsaXNoKCkge1xuICAgICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgIGlmIChiaW5kaW5nLmJpbmRlciAmJiBiaW5kaW5nLmJpbmRlci5wdWJsaXNoZXMpIHtcbiAgICAgICAgICBiaW5kaW5nLnB1Ymxpc2goKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIFVwZGF0ZXMgdGhlIHZpZXcncyBtb2RlbHMgYWxvbmcgd2l0aCBhbnkgYWZmZWN0ZWQgYmluZGluZ3MuXG5cblxuICAgIFZpZXcucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBtb2RlbHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgICBPYmplY3Qua2V5cyhtb2RlbHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfdGhpcy5tb2RlbHNba2V5XSA9IG1vZGVsc1trZXldO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuYmluZGluZ3MuZm9yRWFjaChmdW5jdGlvbiAoYmluZGluZykge1xuICAgICAgICBpZiAoYmluZGluZy51cGRhdGUpIHtcbiAgICAgICAgICBiaW5kaW5nLnVwZGF0ZShtb2RlbHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFZpZXc7XG4gIH0oKTtcblxuICAvLyBUaGUgZGVmYXVsdCBgLmAgYWRhcHRlciB0aGF0IGNvbWVzIHdpdGggdGlueWJpbmQuanMuIEFsbG93cyBzdWJzY3JpYmluZyB0b1xuICAvLyBwcm9wZXJ0aWVzIG9uIHBsYWluIG9iamVjdHMsIGltcGxlbWVudGVkIGluIEVTNSBuYXRpdmVzIHVzaW5nXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgLlxuXG4gIHZhciBBUlJBWV9NRVRIT0RTID0gWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NvcnQnLCAncmV2ZXJzZScsICdzcGxpY2UnXTtcblxuICB2YXIgYWRhcHRlciA9IHtcbiAgICBjb3VudGVyOiAwLFxuICAgIHdlYWttYXA6IHt9LFxuXG4gICAgd2Vha1JlZmVyZW5jZTogZnVuY3Rpb24gd2Vha1JlZmVyZW5jZShvYmopIHtcbiAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KCdfX3J2JykpIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5jb3VudGVyKys7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19fcnYnLCB7XG4gICAgICAgICAgdmFsdWU6IGlkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMud2Vha21hcFtvYmouX19ydl0pIHtcbiAgICAgICAgdGhpcy53ZWFrbWFwW29iai5fX3J2XSA9IHtcbiAgICAgICAgICBjYWxsYmFja3M6IHt9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuICAgIH0sXG5cbiAgICBjbGVhbnVwV2Vha1JlZmVyZW5jZTogZnVuY3Rpb24gY2xlYW51cFdlYWtSZWZlcmVuY2UocmVmLCBpZCkge1xuICAgICAgaWYgKCFPYmplY3Qua2V5cyhyZWYuY2FsbGJhY2tzKS5sZW5ndGgpIHtcbiAgICAgICAgaWYgKCEocmVmLnBvaW50ZXJzICYmIE9iamVjdC5rZXlzKHJlZi5wb2ludGVycykubGVuZ3RoKSkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLndlYWttYXBbaWRdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0dWJGdW5jdGlvbjogZnVuY3Rpb24gc3R1YkZ1bmN0aW9uKG9iaiwgZm4pIHtcbiAgICAgIHZhciBvcmlnaW5hbCA9IG9ialtmbl07XG4gICAgICB2YXIgbWFwID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaik7XG4gICAgICB2YXIgd2Vha21hcCA9IHRoaXMud2Vha21hcDtcblxuICAgICAgb2JqW2ZuXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3BvbnNlID0gb3JpZ2luYWwuYXBwbHkob2JqLCBhcmdzKTtcblxuICAgICAgICBPYmplY3Qua2V5cyhtYXAucG9pbnRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICB2YXIgayA9IG1hcC5wb2ludGVyc1tyXTtcblxuICAgICAgICAgIGlmICh3ZWFrbWFwW3JdKSB7XG4gICAgICAgICAgICBpZiAod2Vha21hcFtyXS5jYWxsYmFja3Nba10gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICB3ZWFrbWFwW3JdLmNhbGxiYWNrc1trXS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLnN5bmMoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBvYnNlcnZlTXV0YXRpb25zOiBmdW5jdGlvbiBvYnNlcnZlTXV0YXRpb25zKG9iaiwgcmVmLCBrZXlwYXRoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMud2Vha1JlZmVyZW5jZShvYmopO1xuXG4gICAgICAgIGlmICghbWFwLnBvaW50ZXJzKSB7XG4gICAgICAgICAgbWFwLnBvaW50ZXJzID0ge307XG5cbiAgICAgICAgICBBUlJBWV9NRVRIT0RTLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICBfdGhpcy5zdHViRnVuY3Rpb24ob2JqLCBmbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1hcC5wb2ludGVyc1tyZWZdKSB7XG4gICAgICAgICAgbWFwLnBvaW50ZXJzW3JlZl0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXAucG9pbnRlcnNbcmVmXS5pbmRleE9mKGtleXBhdGgpID09PSAtMSkge1xuICAgICAgICAgIG1hcC5wb2ludGVyc1tyZWZdLnB1c2goa2V5cGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5vYnNlcnZlTXV0YXRpb25zOiBmdW5jdGlvbiB1bm9ic2VydmVNdXRhdGlvbnMob2JqLCByZWYsIGtleXBhdGgpIHtcbiAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSAmJiBvYmouX19ydiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtYXAgPSB0aGlzLndlYWttYXBbb2JqLl9fcnZdO1xuXG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICB2YXIgcG9pbnRlcnMgPSBtYXAucG9pbnRlcnNbcmVmXTtcblxuICAgICAgICAgIGlmIChwb2ludGVycykge1xuICAgICAgICAgICAgdmFyIGlkeCA9IHBvaW50ZXJzLmluZGV4T2Yoa2V5cGF0aCk7XG5cbiAgICAgICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgICBwb2ludGVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFwb2ludGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcC5wb2ludGVyc1tyZWZdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNsZWFudXBXZWFrUmVmZXJlbmNlKG1hcCwgb2JqLl9fcnYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBvYnNlcnZlOiBmdW5jdGlvbiBvYnNlcnZlKG9iaiwga2V5cGF0aCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy53ZWFrUmVmZXJlbmNlKG9iaikuY2FsbGJhY2tzO1xuXG4gICAgICBpZiAoIWNhbGxiYWNrc1trZXlwYXRoXSkge1xuICAgICAgICBjYWxsYmFja3Nba2V5cGF0aF0gPSBbXTtcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5cGF0aCk7XG5cbiAgICAgICAgaWYgKCFkZXNjIHx8ICEoZGVzYy5nZXQgfHwgZGVzYy5zZXQgfHwgIWRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgICAgIHZhbHVlID0gb2JqW2tleXBhdGhdO1xuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5cGF0aCwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIudW5vYnNlcnZlTXV0YXRpb25zKHZhbHVlLCBvYmouX19ydiwga2V5cGF0aCk7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgbWFwID0gX3RoaXMyLndlYWttYXBbb2JqLl9fcnZdO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgICAgICAgICAgdmFyIF9jYWxsYmFja3MgPSBtYXAuY2FsbGJhY2tzW2tleXBhdGhdO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgICAgICBfY2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2Iuc3luYygpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgX3RoaXMyLm9ic2VydmVNdXRhdGlvbnMobmV3VmFsdWUsIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2tzW2tleXBhdGhdLmluZGV4T2YoY2FsbGJhY2spID09PSAtMSkge1xuICAgICAgICBjYWxsYmFja3Nba2V5cGF0aF0ucHVzaChjYWxsYmFjayk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub2JzZXJ2ZU11dGF0aW9ucyhvYmpba2V5cGF0aF0sIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICB9LFxuXG4gICAgdW5vYnNlcnZlOiBmdW5jdGlvbiB1bm9ic2VydmUob2JqLCBrZXlwYXRoLCBjYWxsYmFjaykge1xuICAgICAgdmFyIG1hcCA9IHRoaXMud2Vha21hcFtvYmouX19ydl07XG5cbiAgICAgIGlmIChtYXApIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IG1hcC5jYWxsYmFja3Nba2V5cGF0aF07XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgIHZhciBpZHggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG5cbiAgICAgICAgICBpZiAoaWR4ID4gLTEpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaWR4LCAxKTtcblxuICAgICAgICAgICAgaWYgKCFjYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBtYXAuY2FsbGJhY2tzW2tleXBhdGhdO1xuICAgICAgICAgICAgICB0aGlzLnVub2JzZXJ2ZU11dGF0aW9ucyhvYmpba2V5cGF0aF0sIG9iai5fX3J2LCBrZXlwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmNsZWFudXBXZWFrUmVmZXJlbmNlKG1hcCwgb2JqLl9fcnYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdldDogZnVuY3Rpb24gZ2V0KG9iaiwga2V5cGF0aCkge1xuICAgICAgcmV0dXJuIG9ialtrZXlwYXRoXTtcbiAgICB9LFxuXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQob2JqLCBrZXlwYXRoLCB2YWx1ZSkge1xuICAgICAgb2JqW2tleXBhdGhdID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRTdHJpbmcgPSBmdW5jdGlvbiBnZXRTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdmFyIHRpbWVzID0gZnVuY3Rpb24gdGltZXMobiwgY2IpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlVmlldyhiaW5kaW5nLCBkYXRhLCBhbmNob3JFbCkge1xuICAgIHZhciB0ZW1wbGF0ZSA9IGJpbmRpbmcuZWwuY2xvbmVOb2RlKHRydWUpO1xuICAgIHZhciB2aWV3ID0gbmV3IFZpZXcodGVtcGxhdGUsIGRhdGEsIGJpbmRpbmcudmlldy5vcHRpb25zKTtcbiAgICB2aWV3LmJpbmQoKTtcbiAgICBiaW5kaW5nLm1hcmtlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZW1wbGF0ZSwgYW5jaG9yRWwpO1xuICAgIHJldHVybiB2aWV3O1xuICB9XG5cbiAgdmFyIGJpbmRlcnMgPSB7XG4gICAgLy8gQmluZHMgYW4gZXZlbnQgaGFuZGxlciBvbiB0aGUgZWxlbWVudC5cbiAgICAnb24tKic6IHtcbiAgICAgIGZ1bmN0aW9uOiB0cnVlLFxuICAgICAgcHJpb3JpdHk6IDEwMDAsXG5cbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKGVsKSB7XG4gICAgICAgIGlmICh0aGlzLmhhbmRsZXIpIHtcbiAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuYXJnLCB0aGlzLmhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByb3V0aW5lOiBmdW5jdGlvbiByb3V0aW5lKGVsLCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVyKSB7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLmFyZywgdGhpcy5oYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IHRoaXMuZXZlbnRIYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmFyZywgdGhpcy5oYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQXBwZW5kcyBib3VuZCBpbnN0YW5jZXMgb2YgdGhlIGVsZW1lbnQgaW4gcGxhY2UgZm9yIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuXG4gICAgJ2VhY2gtKic6IHtcbiAgICAgIGJsb2NrOiB0cnVlLFxuXG4gICAgICBwcmlvcml0eTogNDAwMCxcblxuICAgICAgYmluZDogZnVuY3Rpb24gYmluZChlbCkge1xuICAgICAgICBpZiAoIXRoaXMubWFya2VyKSB7XG4gICAgICAgICAgdGhpcy5tYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgdGlueWJpbmQ6ICcgKyB0aGlzLnR5cGUgKyAnICcpO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZWQgPSBbXTtcblxuICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubWFya2VyLCBlbCk7XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pdGVyYXRlZC5mb3JFYWNoKGZ1bmN0aW9uICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LmJpbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQoZWwpIHtcbiAgICAgICAgaWYgKHRoaXMuaXRlcmF0ZWQpIHtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVkLmZvckVhY2goZnVuY3Rpb24gKHZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcudW5iaW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHJvdXRpbmU6IGZ1bmN0aW9uIHJvdXRpbmUoZWwsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB2YXIgbW9kZWxOYW1lID0gdGhpcy5hcmc7XG4gICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uIHx8IFtdO1xuICAgICAgICB2YXIgaW5kZXhQcm9wID0gZWwuZ2V0QXR0cmlidXRlKCdpbmRleC1wcm9wZXJ0eScpIHx8ICckaW5kZXgnO1xuXG4gICAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAobW9kZWwsIGluZGV4KSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSB7ICRwYXJlbnQ6IF90aGlzLnZpZXcubW9kZWxzIH07XG4gICAgICAgICAgZGF0YVtpbmRleFByb3BdID0gaW5kZXg7XG4gICAgICAgICAgZGF0YVttb2RlbE5hbWVdID0gbW9kZWw7XG4gICAgICAgICAgdmFyIHZpZXcgPSBfdGhpcy5pdGVyYXRlZFtpbmRleF07XG5cbiAgICAgICAgICBpZiAoIXZpZXcpIHtcblxuICAgICAgICAgICAgdmFyIHByZXZpb3VzID0gX3RoaXMubWFya2VyO1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMuaXRlcmF0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzID0gX3RoaXMuaXRlcmF0ZWRbX3RoaXMuaXRlcmF0ZWQubGVuZ3RoIC0gMV0uZWxzWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2aWV3ID0gY3JlYXRlVmlldyhfdGhpcywgZGF0YSwgcHJldmlvdXMubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgX3RoaXMuaXRlcmF0ZWQucHVzaCh2aWV3KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHZpZXcubW9kZWxzW21vZGVsTmFtZV0gIT09IG1vZGVsKSB7XG4gICAgICAgICAgICAgIC8vIHNlYXJjaCBmb3IgYSB2aWV3IHRoYXQgbWF0Y2hlcyB0aGUgbW9kZWxcbiAgICAgICAgICAgICAgdmFyIG1hdGNoSW5kZXggPSB2b2lkIDAsXG4gICAgICAgICAgICAgICAgICBuZXh0VmlldyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgZm9yICh2YXIgbmV4dEluZGV4ID0gaW5kZXggKyAxOyBuZXh0SW5kZXggPCBfdGhpcy5pdGVyYXRlZC5sZW5ndGg7IG5leHRJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgbmV4dFZpZXcgPSBfdGhpcy5pdGVyYXRlZFtuZXh0SW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0Vmlldy5tb2RlbHNbbW9kZWxOYW1lXSA9PT0gbW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgIG1hdGNoSW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG1hdGNoSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIG1vZGVsIGlzIGluIG90aGVyIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgLy8gdG9kbzogY29uc2lkZXIgYXZvaWRpbmcgdGhlIHNwbGljZSBoZXJlIGJ5IHNldHRpbmcgYSBmbGFnXG4gICAgICAgICAgICAgICAgLy8gcHJvZmlsZSBwZXJmb3JtYW5jZSBiZWZvcmUgaW1wbGVtZW50aW5nIHN1Y2ggY2hhbmdlXG4gICAgICAgICAgICAgICAgX3RoaXMuaXRlcmF0ZWQuc3BsaWNlKG1hdGNoSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIF90aGlzLm1hcmtlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXh0Vmlldy5lbHNbMF0sIHZpZXcuZWxzWzBdKTtcbiAgICAgICAgICAgICAgICBuZXh0Vmlldy5tb2RlbHNbaW5kZXhQcm9wXSA9IGluZGV4O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vbmV3IG1vZGVsXG4gICAgICAgICAgICAgICAgbmV4dFZpZXcgPSBjcmVhdGVWaWV3KF90aGlzLCBkYXRhLCB2aWV3LmVsc1swXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RoaXMuaXRlcmF0ZWQuc3BsaWNlKGluZGV4LCAwLCBuZXh0Vmlldyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2aWV3Lm1vZGVsc1tpbmRleFByb3BdID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5pdGVyYXRlZC5sZW5ndGggPiBjb2xsZWN0aW9uLmxlbmd0aCkge1xuICAgICAgICAgIHRpbWVzKHRoaXMuaXRlcmF0ZWQubGVuZ3RoIC0gY29sbGVjdGlvbi5sZW5ndGgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gX3RoaXMuaXRlcmF0ZWQucG9wKCk7XG4gICAgICAgICAgICB2aWV3LnVuYmluZCgpO1xuICAgICAgICAgICAgX3RoaXMubWFya2VyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodmlldy5lbHNbMF0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsLm5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICAgIHRoaXMudmlldy5iaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChiaW5kaW5nKSB7XG4gICAgICAgICAgICBpZiAoYmluZGluZy5lbCA9PT0gX3RoaXMubWFya2VyLnBhcmVudE5vZGUgJiYgYmluZGluZy50eXBlID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgIGJpbmRpbmcuc3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShtb2RlbHMpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcblxuICAgICAgICAvL3RvZG86IGFkZCB0ZXN0IGFuZCBmaXggaWYgbmVjZXNzYXJ5XG5cbiAgICAgICAgT2JqZWN0LmtleXMobW9kZWxzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSBfdGhpczIuYXJnKSB7XG4gICAgICAgICAgICBkYXRhW2tleV0gPSBtb2RlbHNba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaXRlcmF0ZWQuZm9yRWFjaChmdW5jdGlvbiAodmlldykge1xuICAgICAgICAgIHZpZXcudXBkYXRlKGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gQWRkcyBvciByZW1vdmVzIHRoZSBjbGFzcyBmcm9tIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZSBvciBmYWxzZS5cbiAgICAnY2xhc3MtKic6IGZ1bmN0aW9uIF9jbGFzcyhlbCwgdmFsdWUpIHtcbiAgICAgIHZhciBlbENsYXNzID0gJyAnICsgZWwuY2xhc3NOYW1lICsgJyAnO1xuXG4gICAgICBpZiAodmFsdWUgIT09IGVsQ2xhc3MuaW5kZXhPZignICcgKyB0aGlzLmFyZyArICcgJykgPiAtMSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUgKyAnICcgKyB0aGlzLmFyZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbENsYXNzLnJlcGxhY2UoJyAnICsgdGhpcy5hcmcgKyAnICcsICcgJykudHJpbSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIFNldHMgdGhlIGVsZW1lbnQncyB0ZXh0IHZhbHVlLlxuICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoZWwsIHZhbHVlKSB7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6ICcnO1xuICAgIH0sXG5cbiAgICAvLyBTZXRzIHRoZSBlbGVtZW50J3MgSFRNTCBjb250ZW50LlxuICAgIGh0bWw6IGZ1bmN0aW9uIGh0bWwoZWwsIHZhbHVlKSB7XG4gICAgICBlbC5pbm5lckhUTUwgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAnJztcbiAgICB9LFxuXG4gICAgLy8gU2hvd3MgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlLlxuICAgIHNob3c6IGZ1bmN0aW9uIHNob3coZWwsIHZhbHVlKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyAnJyA6ICdub25lJztcbiAgICB9LFxuXG4gICAgLy8gSGlkZXMgdGhlIGVsZW1lbnQgd2hlbiB2YWx1ZSBpcyB0cnVlIChuZWdhdGVkIHZlcnNpb24gb2YgYHNob3dgIGJpbmRlcikuXG4gICAgaGlkZTogZnVuY3Rpb24gaGlkZShlbCwgdmFsdWUpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/ICdub25lJyA6ICcnO1xuICAgIH0sXG5cbiAgICAvLyBFbmFibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZS5cbiAgICBlbmFibGVkOiBmdW5jdGlvbiBlbmFibGVkKGVsLCB2YWx1ZSkge1xuICAgICAgZWwuZGlzYWJsZWQgPSAhdmFsdWU7XG4gICAgfSxcblxuICAgIC8vIERpc2FibGVzIHRoZSBlbGVtZW50IHdoZW4gdmFsdWUgaXMgdHJ1ZSAobmVnYXRlZCB2ZXJzaW9uIG9mIGBlbmFibGVkYCBiaW5kZXIpLlxuICAgIGRpc2FibGVkOiBmdW5jdGlvbiBkaXNhYmxlZChlbCwgdmFsdWUpIHtcbiAgICAgIGVsLmRpc2FibGVkID0gISF2YWx1ZTtcbiAgICB9LFxuXG4gICAgLy8gQ2hlY2tzIGEgY2hlY2tib3ggb3IgcmFkaW8gaW5wdXQgd2hlbiB0aGUgdmFsdWUgaXMgdHJ1ZS4gQWxzbyBzZXRzIHRoZSBtb2RlbFxuICAgIC8vIHByb3BlcnR5IHdoZW4gdGhlIGlucHV0IGlzIGNoZWNrZWQgb3IgdW5jaGVja2VkICh0d28td2F5IGJpbmRlcikuXG4gICAgY2hlY2tlZDoge1xuICAgICAgcHVibGlzaGVzOiB0cnVlLFxuICAgICAgcHJpb3JpdHk6IDIwMDAsXG5cbiAgICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQoZWwpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuY2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5wdWJsaXNoKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmNhbGxiYWNrKTtcbiAgICAgIH0sXG5cbiAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKGVsKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuY2FsbGJhY2spO1xuICAgICAgfSxcblxuICAgICAgcm91dGluZTogZnVuY3Rpb24gcm91dGluZShlbCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGVsLnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICBlbC5jaGVja2VkID0gZ2V0U3RyaW5nKGVsLnZhbHVlKSA9PT0gZ2V0U3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbC5jaGVja2VkID0gISF2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBTZXRzIHRoZSBlbGVtZW50J3MgdmFsdWUuIEFsc28gc2V0cyB0aGUgbW9kZWwgcHJvcGVydHkgd2hlbiB0aGUgaW5wdXQgY2hhbmdlc1xuICAgIC8vICh0d28td2F5IGJpbmRlcikuXG4gICAgdmFsdWU6IHtcbiAgICAgIHB1Ymxpc2hlczogdHJ1ZSxcbiAgICAgIHByaW9yaXR5OiAzMDAwLFxuXG4gICAgICBiaW5kOiBmdW5jdGlvbiBiaW5kKGVsKSB7XG4gICAgICAgIHRoaXMuaXNSYWRpbyA9IGVsLnRhZ05hbWUgPT09ICdJTlBVVCcgJiYgZWwudHlwZSA9PT0gJ3JhZGlvJztcbiAgICAgICAgaWYgKCF0aGlzLmlzUmFkaW8pIHtcbiAgICAgICAgICB0aGlzLmV2ZW50ID0gZWwuZ2V0QXR0cmlidXRlKCdldmVudC1uYW1lJykgfHwgKGVsLnRhZ05hbWUgPT09ICdTRUxFQ1QnID8gJ2NoYW5nZScgOiAnaW5wdXQnKTtcblxuICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICBpZiAoIXRoaXMuY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHNlbGYucHVibGlzaCgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnQsIHRoaXMuY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZChlbCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNSYWRpbykge1xuICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5ldmVudCwgdGhpcy5jYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHJvdXRpbmU6IGZ1bmN0aW9uIHJvdXRpbmUoZWwsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmFkaW8pIHtcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChlbC50eXBlID09PSAnc2VsZWN0LW11bHRpcGxlJykge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBlbFtpXTtcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKG9wdGlvbi52YWx1ZSkgPiAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0U3RyaW5nKHZhbHVlKSAhPT0gZ2V0U3RyaW5nKGVsLnZhbHVlKSkge1xuICAgICAgICAgICAgZWwudmFsdWUgPSB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gSW5zZXJ0cyBhbmQgYmluZHMgdGhlIGVsZW1lbnQgYW5kIGl0J3MgY2hpbGQgbm9kZXMgaW50byB0aGUgRE9NIHdoZW4gdHJ1ZS5cbiAgICBpZjoge1xuICAgICAgYmxvY2s6IHRydWUsXG4gICAgICBwcmlvcml0eTogNDAwMCxcblxuICAgICAgYmluZDogZnVuY3Rpb24gYmluZChlbCkge1xuICAgICAgICBpZiAoIXRoaXMubWFya2VyKSB7XG4gICAgICAgICAgdGhpcy5tYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgdGlueWJpbmQ6ICcgKyB0aGlzLnR5cGUgKyAnICcgKyB0aGlzLmtleXBhdGggKyAnICcpO1xuICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubWFya2VyLCBlbCk7XG4gICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ib3VuZCA9PT0gZmFsc2UgJiYgdGhpcy5uZXN0ZWQpIHtcbiAgICAgICAgICB0aGlzLm5lc3RlZC5iaW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib3VuZCA9IHRydWU7XG4gICAgICB9LFxuXG4gICAgICB1bmJpbmQ6IGZ1bmN0aW9uIHVuYmluZCgpIHtcbiAgICAgICAgaWYgKHRoaXMubmVzdGVkKSB7XG4gICAgICAgICAgdGhpcy5uZXN0ZWQudW5iaW5kKCk7XG4gICAgICAgICAgdGhpcy5ib3VuZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICByb3V0aW5lOiBmdW5jdGlvbiByb3V0aW5lKGVsLCB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9ICEhdmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdGhpcy5hdHRhY2hlZCkge1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMubmVzdGVkKSB7XG4gICAgICAgICAgICAgIHRoaXMubmVzdGVkID0gbmV3IFZpZXcoZWwsIHRoaXMudmlldy5tb2RlbHMsIHRoaXMudmlldy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgdGhpcy5uZXN0ZWQuYmluZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1hcmtlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbCwgdGhpcy5tYXJrZXIubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUobW9kZWxzKSB7XG4gICAgICAgIGlmICh0aGlzLm5lc3RlZCkge1xuICAgICAgICAgIHRoaXMubmVzdGVkLnVwZGF0ZShtb2RlbHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG5cbiAgdGlueWJpbmQuYmluZGVycyA9IGJpbmRlcnM7XG4gIHRpbnliaW5kLmFkYXB0ZXJzWycuJ10gPSBhZGFwdGVyO1xuXG4gIC8vIEJpbmRzIHNvbWUgZGF0YSB0byBhIHRlbXBsYXRlIC8gZWxlbWVudC4gUmV0dXJucyBhIHRpbnliaW5kLlZpZXcgaW5zdGFuY2UuXG4gIHRpbnliaW5kLmJpbmQgPSBmdW5jdGlvbiAoZWwsIG1vZGVscywgb3B0aW9ucykge1xuICAgIHZhciB2aWV3T3B0aW9ucyA9IHt9O1xuICAgIG1vZGVscyA9IG1vZGVscyB8fCB7fTtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIEVYVEVOU0lPTlMuZm9yRWFjaChmdW5jdGlvbiAoZXh0ZW5zaW9uVHlwZSkge1xuICAgICAgdmlld09wdGlvbnNbZXh0ZW5zaW9uVHlwZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICBpZiAob3B0aW9uc1tleHRlbnNpb25UeXBlXSkge1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zW2V4dGVuc2lvblR5cGVdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICB2aWV3T3B0aW9uc1tleHRlbnNpb25UeXBlXVtrZXldID0gb3B0aW9uc1tleHRlbnNpb25UeXBlXVtrZXldO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmtleXModGlueWJpbmRbZXh0ZW5zaW9uVHlwZV0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIXZpZXdPcHRpb25zW2V4dGVuc2lvblR5cGVdW2tleV0pIHtcbiAgICAgICAgICB2aWV3T3B0aW9uc1tleHRlbnNpb25UeXBlXVtrZXldID0gdGlueWJpbmRbZXh0ZW5zaW9uVHlwZV1ba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBPUFRJT05TLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tvcHRpb25dO1xuICAgICAgdmlld09wdGlvbnNbb3B0aW9uXSA9IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHRpbnliaW5kW29wdGlvbl07XG4gICAgfSk7XG5cbiAgICB2aWV3T3B0aW9ucy5zdGFyQmluZGVycyA9IE9iamVjdC5rZXlzKHZpZXdPcHRpb25zLmJpbmRlcnMpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4ga2V5LmluZGV4T2YoJyonKSA+IDA7XG4gICAgfSk7XG5cbiAgICBPYnNlcnZlci51cGRhdGVPcHRpb25zKHZpZXdPcHRpb25zKTtcblxuICAgIHZhciB2aWV3ID0gbmV3IFZpZXcoZWwsIG1vZGVscywgdmlld09wdGlvbnMpO1xuICAgIHZpZXcuYmluZCgpO1xuICAgIHJldHVybiB2aWV3O1xuICB9O1xuXG4gIC8vIEluaXRpYWxpemVzIGEgbmV3IGluc3RhbmNlIG9mIGEgY29tcG9uZW50IG9uIHRoZSBzcGVjaWZpZWQgZWxlbWVudCBhbmRcbiAgLy8gcmV0dXJucyBhIHRpbnliaW5kLlZpZXcgaW5zdGFuY2UuXHRcdFxuICB0aW55YmluZC5pbml0ID0gZnVuY3Rpb24gKGNvbXBvbmVudCwgZWwpIHtcbiAgICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudCA9IHRpbnliaW5kLmNvbXBvbmVudHNbY29tcG9uZW50XTtcbiAgICBlbC5pbm5lckhUTUwgPSBjb21wb25lbnQudGVtcGxhdGUuY2FsbCh0aW55YmluZCwgZWwpO1xuICAgIHZhciBzY29wZSA9IGNvbXBvbmVudC5pbml0aWFsaXplLmNhbGwodGlueWJpbmQsIGVsLCBkYXRhKTtcblxuICAgIHZhciB2aWV3ID0gdGlueWJpbmQuYmluZChlbCwgc2NvcGUpO1xuICAgIHZpZXcuYmluZCgpO1xuICAgIHJldHVybiB2aWV3O1xuICB9O1xuXG4gIHRpbnliaW5kLmZvcm1hdHRlcnMubmVnYXRlID0gdGlueWJpbmQuZm9ybWF0dGVycy5ub3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gIXZhbHVlO1xuICB9O1xuXG4gIHJldHVybiB0aW55YmluZDtcblxufSkpKTtcblxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuZW51bSBEaXJlY3Rpb24ge1xuICBVUCA9IDAsXG4gIFJJR0hUID0gMSxcbiAgRE9XTiA9IDIsXG4gIExFRlQgPSAzLFxuICBNSU4gPSAwLFxuICBNQVggPSAzLFxufVxuXG5lbnVtIEtleSB7XG4gIEVTQyA9IDI3LFxuICBTUEFDRSA9IDMyLFxuICBMRUZUID0gMzcsXG4gIFVQID0gMzgsXG4gIFJJR0hUID0gMzksXG4gIERPV04gPSA0MCxcbn1cblxuaW50ZXJmYWNlIElQaWVjZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgc2l6ZTogbnVtYmVyO1xuICBibG9ja3M6IG51bWJlcltdO1xuICBjb2xvcjogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgSVBpZWNlUG9zaXRpb24ge1xuICB0eXBlOiBJUGllY2U7XG4gIGRpcjogRGlyZWN0aW9uO1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUZXRyaXMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pha2VzZ29yZG9uL2phdmFzY3JpcHQtdGV0cmlzXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTEsIDIwMTIsIDIwMTMsIDIwMTQsIDIwMTUsIDIwMTYgSmFrZSBHb3Jkb24gYW5kIGNvbnRyaWJ1dG9yc1xuICovXG5leHBvcnQgY2xhc3MgVGV0cmlzIHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIGdhbWUgY29uc3RhbnRzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gcHJpdmF0ZSBLRVk6IEtleTsgICAgICAgICAvLyA9IHsgRVNDOiAyNywgU1BBQ0U6IDMyLCBMRUZUOiAzNywgVVA6IDM4LCBSSUdIVDogMzksIERPV046IDQwIH07XG4gIC8vIHByaXZhdGUgRElSOiBEaXJlY3Rpb247ICAvLyA9IHsgVVA6IDAsIFJJR0hUOiAxLCBET1dOOiAyLCBMRUZUOiAzLCBNSU46IDAsIE1BWDogMyB9O1xuICBwcml2YXRlICRjYW52YXM6IEpRdWVyeTxIVE1MQ2FudmFzRWxlbWVudD47XG4gIHByaXZhdGUgJHBsYXlCdG46IEpRdWVyeTxIVE1MRWxlbWVudD47XG4gIHByaXZhdGUgJHJvd3M6IEpRdWVyeTxIVE1MRWxlbWVudD47XG4gIHByaXZhdGUgJHNjb3JlOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICBwcml2YXRlIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbDtcbiAgcHJpdmF0ZSAkdWNhbnZhczogSlF1ZXJ5PEhUTUxDYW52YXNFbGVtZW50PjtcbiAgcHJpdmF0ZSAkbWVudTogSlF1ZXJ5PEhUTUxFbGVtZW50PjtcbiAgcHJpdmF0ZSB1Y3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsO1xuICBwcml2YXRlIHNwZWVkICAgICAgID0geyBzdGFydDogMC42LCBkZWNyZW1lbnQ6IDAuMDA1LCBtaW46IDAuMSB9OyAvLyBob3cgbG9uZyBiZWZvcmUgcGllY2UgZHJvcHMgYnkgMSByb3cgKHNlY29uZHMpXG4gIHByaXZhdGUgbnUgICAgICAgICAgPSA1OyAgLy8gd2lkdGgvaGVpZ2h0IG9mIHVwY29taW5nIHByZXZpZXcgKGluIGJsb2NrcylcbiAgcHJpdmF0ZSB2dzogbnVtYmVyOyAvLyB2aWV3cG9ydCB3aWR0aFxuICBwcml2YXRlIHZoOiBudW1iZXI7IC8vIHZpZXdwb3J0IGhlaWdodFxuICBwcml2YXRlIGFzcGVjdFJhdGlvOiBudW1iZXJbXTsgLy8gU3BpZWxmZWxkIFNlaXRlbnZlcmjDpGx0bmlzIFsxLDJdOiAxOjIgWzIsMV06IDI6MVxuICBwcml2YXRlIG9yaWVudGF0aW9uOiBzdHJpbmc7XG4gIHByaXZhdGUgbng6IG51bWJlcjsgLy8gd2lkdGggb2YgdGV0cmlzIGNvdXJ0IChpbiBibG9ja3MpXG4gIHByaXZhdGUgbnk6IG51bWJlcjsgLy8gaGVpZ2h0IG9mIHRldHJpcyBjb3VydCAoaW4gYmxvY2tzKVxuICBwcml2YXRlIGxpbmVXaWR0aFhsOiBudW1iZXI7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBnYW1lIHZhcmlhYmxlcyAoaW5pdGlhbGl6ZWQgZHVyaW5nIHJlc2V0KVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gcGl4ZWwgc2l6ZSBvZiBhIHNpbmdsZSB0ZXRyaXMgYmxvY2tcbiAgcHJpdmF0ZSBkeDogbnVtYmVyO1xuICAvLyBwaXhlbCBzaXplIG9mIGEgc2luZ2xlIHRldHJpcyBibG9ja1xuICBwcml2YXRlIGR5OiBudW1iZXI7XG4gIC8vIHBpeGVsIHNpemUgb2YgYSBzaW5nbGUgdGV0cmlzIGJsb2NrIGluIHVwY29taW5nIHByZXZpZXdcbiAgcHJpdmF0ZSBkbmV4dHg6IG51bWJlcjtcbiAgLy8gcGl4ZWwgc2l6ZSBvZiBhIHNpbmdsZSB0ZXRyaXMgYmxvY2sgaW4gdXBjb21pbmcgcHJldmlld1xuICBwcml2YXRlIGRuZXh0eTogbnVtYmVyO1xuICAvLyAyIGRpbWVuc2lvbmFsIGFycmF5IChueCpueSkgcmVwcmVzZW50aW5nIHRldHJpcyBjb3VydCAtIGVpdGhlciBlbXB0eSBibG9jayBvciBvY2N1cGllZCBieSBhICdwaWVjZSdcbiAgcHJpdmF0ZSBibG9ja3M6IElQaWVjZVtdW107XG4gIC8vIHF1ZXVlIG9mIHVzZXIgYWN0aW9ucyAoaW5wdXRzKVxuICBwcml2YXRlIGFjdGlvbnM6IERpcmVjdGlvbltdO1xuICAvLyB0cnVlfGZhbHNlIC0gZ2FtZSBpcyBpbiBwcm9ncmVzc1xuICBwcml2YXRlIHBsYXlpbmc6IGJvb2xlYW47XG4gIC8vIHRpbWUgc2luY2Ugc3RhcnRpbmcgdGhpcyBnYW1lXG4gIHByaXZhdGUgZHQ6IG51bWJlcjtcbiAgLy8gdGhlIGN1cnJlbnQgcGllY2VcbiAgcHJpdmF0ZSBjdXJyZW50OiBJUGllY2VQb3NpdGlvbjtcbiAgLy8gdGhlIG5leHQgcGllY2VcbiAgcHJpdmF0ZSBuZXh0OiBJUGllY2VQb3NpdGlvbjtcbiAgLy8gdGhlIGN1cnJlbnQgc2NvcmVcbiAgcHJpdmF0ZSBzY29yZTogbnVtYmVyO1xuICAvLyB0aGUgY3VycmVudGx5IGRpc3BsYXllZCBzY29yZSAoaXQgY2F0Y2hlcyB1cCB0byBzY29yZSBpbiBzbWFsbCBjaHVua3MgLSBsaWtlIGEgc3Bpbm5pbmcgc2xvdCBtYWNoaW5lKVxuICBwcml2YXRlIHZzY29yZTogbnVtYmVyO1xuICAvLyBudW1iZXIgb2YgY29tcGxldGVkIHJvd3MgaW4gdGhlIGN1cnJlbnQgZ2FtZVxuICBwcml2YXRlIHJvd3M6IG51bWJlcjtcbiAgLy8gaG93IGxvbmcgYmVmb3JlIGN1cnJlbnQgcGllY2UgZHJvcHMgYnkgMSByb3dcbiAgcHJpdmF0ZSBzdGVwOiBudW1iZXI7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB0ZXRyaXMgcGllY2VzXG4gIC8vXG4gIC8vIGJsb2NrczogZWFjaCBlbGVtZW50IHJlcHJlc2VudHMgYSByb3RhdGlvbiBvZiB0aGUgcGllY2UgKDAsIDkwLCAxODAsIDI3MClcbiAgLy8gICAgICAgICBlYWNoIGVsZW1lbnQgaXMgYSAxNiBiaXQgaW50ZWdlciB3aGVyZSB0aGUgMTYgYml0cyByZXByZXNlbnRcbiAgLy8gICAgICAgICBhIDR4NCBzZXQgb2YgYmxvY2tzLCBlLmcuIGouYmxvY2tzWzBdID0gMHg0NEMwXG4gIC8vXG4gIC8vICAgICAgICAgICAgIDAxMDAgPSAweDQgPDwgMyA9IDB4NDAwMFxuICAvLyAgICAgICAgICAgICAwMTAwID0gMHg0IDw8IDIgPSAweDA0MDBcbiAgLy8gICAgICAgICAgICAgMTEwMCA9IDB4QyA8PCAxID0gMHgwMEMwXG4gIC8vICAgICAgICAgICAgIDAwMDAgPSAweDAgPDwgMCA9IDB4MDAwMFxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLS0tLS1cbiAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg0NEMwXG4gIC8vXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBwcml2YXRlIGk6IElQaWVjZSA9IHsgbmFtZTogJ2knLCBzaXplOiA0LCBibG9ja3M6IFsweDBGMDAsIDB4MjIyMiwgMHgwMEYwLCAweDQ0NDRdLCBjb2xvcjogJyMwQTkxNzcnIH07XG4gIHByaXZhdGUgajogSVBpZWNlID0geyBuYW1lOiAnaicsIHNpemU6IDMsIGJsb2NrczogWzB4NDRDMCwgMHg4RTAwLCAweDY0NDAsIDB4MEUyMF0sIGNvbG9yOiAnI0FCMUE2MicgfTtcbiAgcHJpdmF0ZSBsOiBJUGllY2UgPSB7IG5hbWU6ICdsJywgc2l6ZTogMywgYmxvY2tzOiBbMHg0NDYwLCAweDBFODAsIDB4QzQ0MCwgMHgyRTAwXSwgY29sb3I6ICcjMDUwNTA2JyB9O1xuICBwcml2YXRlIG86IElQaWVjZSA9IHsgbmFtZTogJ28nLCBzaXplOiAyLCBibG9ja3M6IFsweENDMDAsIDB4Q0MwMCwgMHhDQzAwLCAweENDMDBdLCBjb2xvcjogJyMwQTkxNzcnIH07XG4gIHByaXZhdGUgczogSVBpZWNlID0geyBuYW1lOiAncycsIHNpemU6IDMsIGJsb2NrczogWzB4MDZDMCwgMHg4QzQwLCAweDZDMDAsIDB4NDYyMF0sIGNvbG9yOiAnI0FCMUE2MicgfTtcbiAgcHJpdmF0ZSB0OiBJUGllY2UgPSB7IG5hbWU6ICd0Jywgc2l6ZTogMywgYmxvY2tzOiBbMHgwRTQwLCAweDRDNDAsIDB4NEUwMCwgMHg0NjQwXSwgY29sb3I6ICcjMDUwNTA2JyB9O1xuICBwcml2YXRlIHo6IElQaWVjZSA9IHsgbmFtZTogJ3onLCBzaXplOiAzLCBibG9ja3M6IFsweDBDNjAsIDB4NEM4MCwgMHhDNjAwLCAweDI2NDBdLCBjb2xvcjogJyMwQTkxNzcnIH07XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gc3RhcnQgd2l0aCA0IGluc3RhbmNlcyBvZiBlYWNoIHBpZWNlIGFuZFxuICAvLyBwaWNrIHJhbmRvbWx5IHVudGlsIHRoZSAnYmFnIGlzIGVtcHR5J1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwcml2YXRlIHBpZWNlcyA9IG5ldyBBcnJheTxJUGllY2U+KCk7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBSRU5ERVJJTkdcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHByaXZhdGUgaW52YWxpZCA9IHtcbiAgICBjb3VydDogZmFsc2UsXG4gICAgbmV4dDogZmFsc2UsXG4gICAgcm93czogZmFsc2UsXG4gICAgc2NvcmU6IGZhbHNlLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuJGNhbnZhcyAgICAgPSAkKCcjY2FudmFzJykgYXMgSlF1ZXJ5PEhUTUxDYW52YXNFbGVtZW50PjtcbiAgICB0aGlzLiRwbGF5QnRuICAgID0gJCgnI3N0YXJ0Jyk7XG4gICAgdGhpcy4kcm93cyAgICAgICA9ICQoJyNyb3dzJyk7XG4gICAgdGhpcy4kc2NvcmUgICAgICA9ICQoJyNzY29yZScpO1xuICAgIHRoaXMuJHVjYW52YXMgICAgPSAkKCcjdXBjb21pbmcnKSBhcyBKUXVlcnk8SFRNTENhbnZhc0VsZW1lbnQ+O1xuICAgIHRoaXMuJG1lbnUgICAgICAgPSAkKCcjbWVudScpO1xuXG4gICAgaWYgKCF0aGlzLiRjYW52YXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJyRjYW52YXMgbm90IHNldCcpO1xuICAgIH1cblxuICAgIHRoaXMuY3R4ID0gdGhpcy4kY2FudmFzLmdldCgwKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgaWYgKHRoaXMuY3R4ID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2N0eCBub3Qgc2V0Jyk7XG4gICAgfVxuXG4gICAgdGhpcy51Y3R4ICAgICAgICA9IHRoaXMuJHVjYW52YXMuZ2V0KDApLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5zcGVlZCAgICAgICA9IHsgc3RhcnQ6IDAuNiwgZGVjcmVtZW50OiAwLjAwNSwgbWluOiAwLjEgfTsgLy8gaG93IGxvbmcgYmVmb3JlIHBpZWNlIGRyb3BzIGJ5IDEgcm93IChzZWNvbmRzKVxuICAgIHRoaXMubnUgICAgICAgICAgPSA1OyAgLy8gd2lkdGgvaGVpZ2h0IG9mIHVwY29taW5nIHByZXZpZXcgKGluIGJsb2NrcylcbiAgICB0aGlzLnZ3ICAgICAgICAgID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTsgLy8gdmlld3BvcnQgd2lkdGhcbiAgICB0aGlzLnZoICAgICAgICAgID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApOyAvLyB2aWV3cG9ydCBoZWlnaHRcbiAgICB0aGlzLmFzcGVjdFJhdGlvID0gdGhpcy52aCA8IHRoaXMudncgPyBbMSwgMl0gOiBbMiwgMV07ICAvLyBTcGllbGZlbGQgU2VpdGVudmVyaMOkbHRuaXMgWzEsMl06IDE6MiBbMiwxXTogMjoxXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IHRoaXMuYXNwZWN0UmF0aW9bMF0gPCB0aGlzLmFzcGVjdFJhdGlvWzFdID8gJ2xhbmRzY2FwZScgOiAncG9ydHJhaXQnO1xuICAgIHRoaXMubnggICAgICAgICAgPSB0aGlzLmFzcGVjdFJhdGlvWzFdICogMTA7IC8vIHdpZHRoIG9mIHRldHJpcyBjb3VydCAoaW4gYmxvY2tzKVxuICAgIHRoaXMubnkgICAgICAgICAgPSB0aGlzLmFzcGVjdFJhdGlvWzBdICogMTA7IC8vIGhlaWdodCBvZiB0ZXRyaXMgY291cnQgKGluIGJsb2NrcylcbiAgICB0aGlzLmxpbmVXaWR0aFhsID0gMztcblxuICAgIHRoaXMuJG1lbnUuaGlkZSgpO1xuXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEZJTkFMTFksIGxldHMgcnVuIHRoZSBnYW1lXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgLy8gdGhpcy5ydW4oKTtcbiAgICAvLyBjb25zb2xlLmxvZygndGV0cmlzIGNvbnN0cnVjdG9yJywgdGhpcyk7XG4gICAgdGhpcy5yZXNpemUoKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogR0FNRSBMT09QXG4gICAqL1xuICBwdWJsaWMgcnVuKCkge1xuICAgIC8vIHNob3dTdGF0cygpOyAvLyBpbml0aWFsaXplIEZQUyBjb3VudGVyXG4gICAgdGhpcy5hZGRFdmVudHMoKTsgLy8gYXR0YWNoIGtleWRvd24gYW5kIHJlc2l6ZSBldmVudHNcbiAgICBsZXQgbm93ID0gdGhpcy50aW1lc3RhbXAoKTtcbiAgICBsZXQgbGFzdCA9IG5vdztcbiAgICBjb25zdCBmcmFtZSA9ICgpID0+IHtcbiAgICAgIG5vdyA9IHRoaXMudGltZXN0YW1wKCk7XG4gICAgICB0aGlzLnVwZGF0ZShNYXRoLm1pbigxLCAobm93IC0gbGFzdCkgLyAxMDAwLjApKTsgLy8gdXNpbmcgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGhhdmUgdG8gYmUgYWJsZSB0byBoYW5kbGUgbGFyZ2UgZGVsdGEncyBjYXVzZWQgd2hlbiBpdCAnaGliZXJuYXRlcycgaW4gYSBiYWNrZ3JvdW5kIG9yIG5vbi12aXNpYmxlIHRhYlxuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAvLyBzdGF0cy51cGRhdGUoKTtcbiAgICAgIGxhc3QgPSBub3c7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZyYW1lLyosICRjYW52YXMuZ2V0KDApKi8pO1xuICAgIH07XG5cbiAgICB0aGlzLnJlc2l6ZSgpOyAvLyBzZXR1cCBhbGwgb3VyIHNpemluZyBpbmZvcm1hdGlvblxuICAgIHRoaXMucmVzZXQoKTsgIC8vIHJlc2V0IHRoZSBwZXItZ2FtZSB2YXJpYWJsZXNcbiAgICBmcmFtZSgpOyAgLy8gc3RhcnQgdGhlIGZpcnN0IGZyYW1lXG4gIH1cblxuICAvKipcbiAgICogYmFzZSBoZWxwZXIgbWV0aG9kc1xuICAgKi9cblxuICBwcml2YXRlIGdldChpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcbiAgfVxuXG4gIHByaXZhdGUgdGltZXN0YW1wKCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgfVxuXG4gIHByaXZhdGUgIHJhbmRvbShtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gKG1pbiArIChNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikpKTtcbiAgfVxuXG4gIC8vIHByaXZhdGUgcmFuZG9tQ2hvaWNlKGNob2ljZXMpIHtcbiAgLy8gICByZXR1cm4gY2hvaWNlc1tNYXRoLnJvdW5kKHJhbmRvbSgwLCBjaG9pY2VzLmxlbmd0aC0xKSldO1xuICAvLyB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIGRvIHRoZSBiaXQgbWFuaXB1bGF0aW9uIGFuZCBpdGVyYXRlIHRocm91Z2ggZWFjaFxuICAvLyBvY2N1cGllZCBibG9jayAoeCx5KSBmb3IgYSBnaXZlbiBwaWVjZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgcHJpdmF0ZSBlYWNoYmxvY2sodHlwZTogSVBpZWNlLCB4OiBudW1iZXIsIHk6IG51bWJlciwgZGlyOiBEaXJlY3Rpb24sIGZuOiAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHZvaWQgKSB7XG4gICAgbGV0IGJpdDtcbiAgICAvLyBsZXQgcmVzdWx0O1xuICAgIGxldCByb3cgPSAwO1xuICAgIGxldCBjb2wgPSAwO1xuICAgIGNvbnN0IGJsb2NrcyA9IHR5cGUuYmxvY2tzW2Rpcl07XG4gICAgZm9yIChiaXQgPSAweDgwMDAgOyBiaXQgPiAwIDsgYml0ID0gYml0ID4+IDEpIHtcbiAgICAgIGlmIChibG9ja3MgJiBiaXQpIHtcbiAgICAgICAgZm4oeCArIGNvbCwgeSArIHJvdyk7XG4gICAgICB9XG4gICAgICBpZiAoKytjb2wgPT09IDQpIHtcbiAgICAgICAgY29sID0gMDtcbiAgICAgICAgKytyb3c7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gY2hlY2sgaWYgYSBwaWVjZSBjYW4gZml0IGludG8gYSBwb3NpdGlvbiBpbiB0aGUgZ3JpZFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBwcml2YXRlIG9jY3VwaWVkKHR5cGU6IElQaWVjZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGRpcjogRGlyZWN0aW9uKSB7XG4gICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgIHRoaXMuZWFjaGJsb2NrKHR5cGUsIHgsIHksIGRpciwgKGN1cnJYLCBjdXJyWSkgPT4ge1xuICAgICAgaWYgKChjdXJyWCA8IDApIHx8IChjdXJyWCA+PSB0aGlzLm54KSB8fCAoY3VyclkgPCAwKSB8fCAoY3VyclkgPj0gdGhpcy5ueSkgfHwgdGhpcy5nZXRCbG9jayhjdXJyWCwgY3VyclkpKSB7XG4gICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgdW5vY2N1cGllZCh0eXBlOiBJUGllY2UsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkaXI6IERpcmVjdGlvbikge1xuICAgIHJldHVybiAhdGhpcy5vY2N1cGllZCh0eXBlLCB4LCB5LCBkaXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIHN0YXJ0IHdpdGggNCBpbnN0YW5jZXMgb2YgZWFjaCBwaWVjZSBhbmRcbiAgICogcGljayByYW5kb21seSB1bnRpbCB0aGUgJ2JhZyBpcyBlbXB0eSdcbiAgICovXG4gIHByaXZhdGUgcmFuZG9tUGllY2UoKTogSVBpZWNlUG9zaXRpb24ge1xuICAgIGlmICh0aGlzLnBpZWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMucGllY2VzID0gWyB0aGlzLmksIHRoaXMuaSwgdGhpcy5pLCB0aGlzLmksIHRoaXMuaiwgdGhpcy5qLCB0aGlzLmosIHRoaXMuaiwgdGhpcy5sLCB0aGlzLmwsIHRoaXMubCwgdGhpcy5sLCB0aGlzLm8sIHRoaXMubywgdGhpcy5vLCB0aGlzLm8sIHRoaXMucywgdGhpcy5zLCB0aGlzLnMsIHRoaXMucywgdGhpcy50LCB0aGlzLnQsIHRoaXMudCwgdGhpcy50LCB0aGlzLnosIHRoaXMueiwgdGhpcy56LCB0aGlzLnpdO1xuICAgIH1cbiAgICBjb25zdCB0eXBlID0gdGhpcy5waWVjZXMuc3BsaWNlKHRoaXMucmFuZG9tKDAsIHRoaXMucGllY2VzLmxlbmd0aCAtIDEpLCAxKVswXTtcbiAgICByZXR1cm4geyB0eXBlLCBkaXI6IERpcmVjdGlvbi5VUCwgeDogTWF0aC5yb3VuZCh0aGlzLnJhbmRvbSgwLCB0aGlzLm54IC0gdHlwZS5zaXplKSksIHk6IDAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRXZlbnRzKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIHNlbGYua2V5ZG93bihldmVudCk7XG4gICAgfSwgZmFsc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBzZWxmLnJlc2l6ZShldmVudCk7XG4gICAgfSwgZmFsc2UpO1xuICAgIC8vIFRPRE8gaHR0cHM6Ly9naXRodWIuY29tL2Jlbm1ham9yLyQtVG91Y2gtRXZlbnRzXG4gICAgLy8gdGhpcy4kY2FudmFzLm9uKCdzaW5nbGV0YXAnLCB0aGlzLnRhYik7XG4gICAgLy8gdGhpcy4kY2FudmFzLm9uKCdzd2lwZScsIHRoaXMuc3dpcGUpO1xuXG4gICAgdGhpcy4kcGxheUJ0bi5jbGljaygoKSA9PiB7XG4gICAgICBpZiAoc2VsZi5wbGF5aW5nKSB7XG4gICAgICAgIHNlbGYubG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5wbGF5KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlc2l6ZShldmVudD86IEV2ZW50KSB7XG4gICAgdGhpcy52dyAgICAgICAgICA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7IC8vIHZpZXdwb3J0IHdpZHRoXG4gICAgdGhpcy52aCAgICAgICAgICA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTsgLy8gdmlld3BvcnQgaGVpZ2h0XG4gICAgdGhpcy5hc3BlY3RSYXRpbyA9IHRoaXMudmggPCB0aGlzLnZ3ID8gWzEsIDJdIDogWzIsIDFdOyAgLy8gU3BpZWxmZWxkIFNlaXRlbnZlcmjDpGx0bmlzIFsxLDJdOiAxOjIgWzIsMV06IDI6MVxuICAgIHRoaXMub3JpZW50YXRpb24gPSB0aGlzLmFzcGVjdFJhdGlvWzBdIDwgdGhpcy5hc3BlY3RSYXRpb1sxXSA/ICdsYW5kc2NhcGUnIDogJ3BvcnRyYWl0JztcbiAgICB0aGlzLm54ICAgICAgICAgID0gdGhpcy5hc3BlY3RSYXRpb1sxXSAqIDEwOyAvLyB3aWR0aCBvZiB0ZXRyaXMgY291cnQgKGluIGJsb2NrcylcbiAgICB0aGlzLm55ICAgICAgICAgID0gdGhpcy5hc3BlY3RSYXRpb1swXSAqIDEwOyAvLyBoZWlnaHQgb2YgdGV0cmlzIGNvdXJ0IChpbiBibG9ja3MpXG5cbiAgICBpZiAodGhpcy5vcmllbnRhdGlvbiA9PT0gJ2xhbmRzY2FwZScpIHtcbiAgICAgIHRoaXMuJGNhbnZhcy5oZWlnaHQodGhpcy4kY2FudmFzLndpZHRoKCkgLyB0aGlzLmFzcGVjdFJhdGlvWzFdKTsgLy8gaGFsZiBoZWlnaHQgb2Ygd2lkdGhcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY2FudmFzLmhlaWdodCh0aGlzLiRjYW52YXMud2lkdGgoKSAqIHRoaXMuYXNwZWN0UmF0aW9bMF0pOyAvLyBkb3VibGUgaGVpZ2h0IG9mIHdpZHRoXG4gICAgfVxuXG4gICAgdGhpcy4kY2FudmFzLmF0dHIoJ3dpZHRoJywgdGhpcy4kY2FudmFzLndpZHRoKCkpOyAgIC8vIHNldCBjYW52YXMgbG9naWNhbCBzaXplIGVxdWFsIHRvIGl0cyBwaHlzaWNhbCBzaXplXG4gICAgdGhpcy4kY2FudmFzLmF0dHIoJ2hlaWdodCcsIHRoaXMuJGNhbnZhcy5oZWlnaHQoKSk7IC8vIChkaXR0bylcblxuICAgIHRoaXMuJHVjYW52YXMuYXR0cignd2lkdGgnLCB0aGlzLiR1Y2FudmFzLndpZHRoKCkpO1xuICAgIHRoaXMuJHVjYW52YXMuYXR0cignaGVpZ2h0JywgdGhpcy4kdWNhbnZhcy5oZWlnaHQoKSk7XG4gICAgdGhpcy4kdWNhbnZhcy5oZWlnaHQodGhpcy4kdWNhbnZhcy53aWR0aCgpKTsgLy8gMToxXG5cbiAgICB0aGlzLmR4ID0gdGhpcy4kY2FudmFzLndpZHRoKCkgLyB0aGlzLm54OyAvLyBwaXhlbCBzaXplIG9mIGEgc2luZ2xlIHRldHJpcyBibG9ja1xuICAgIHRoaXMuZHkgPSB0aGlzLiRjYW52YXMuaGVpZ2h0KCkgLyB0aGlzLm55OyAvLyAoZGl0dG8pXG5cbiAgICB0aGlzLmRuZXh0eCA9IHRoaXMuJHVjYW52YXMud2lkdGgoKSAvIHRoaXMubnU7IC8vIHBpeGVsIHNpemUgb2YgYSBzaW5nbGUgdGV0cmlzIGJsb2NrIGZvciB0aGUgdXBjb21taW5nIHByZXZpZXdcbiAgICB0aGlzLmRuZXh0eSA9IHRoaXMuJHVjYW52YXMuaGVpZ2h0KCkgLyB0aGlzLm51OyAvLyAoZGl0dG8pXG5cbiAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB0aGlzLmludmFsaWRhdGVOZXh0KCk7XG4gIH1cblxuICAvLyBrZXlib2FyZCBldmVudHMgZm9yIHBsYXlpbmcgb24gZGVza3RvcFxuICBwcml2YXRlIGtleWRvd24oZXY6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgIHN3aXRjaCAoZXYua2V5Q29kZSkge1xuICAgICAgICBjYXNlIEtleS5MRUZUOlxuICAgICAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKERpcmVjdGlvbi5MRUZUKTtcbiAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBLZXkuUklHSFQ6XG4gICAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2goRGlyZWN0aW9uLlJJR0hUKTtcbiAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBLZXkuVVA6XG4gICAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2goRGlyZWN0aW9uLlVQKTtcbiAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBLZXkuRE9XTjpcbiAgICAgICAgICB0aGlzLmFjdGlvbnMucHVzaChEaXJlY3Rpb24uRE9XTik7XG4gICAgICAgICAgaGFuZGxlZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgS2V5LkVTQzpcbiAgICAgICAgICB0aGlzLmxvc2UoKTtcbiAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IEtleS5TUEFDRSkge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgYXJyb3cga2V5cyBmcm9tIHNjcm9sbGluZyB0aGUgcGFnZSAoc3VwcG9ydGVkIGluIElFOSsgYW5kIGFsbCBvdGhlciBicm93c2VycylcbiAgICB9XG4gIH1cblxuICAvLyBzd2lwZSBnZXN0dXJlcyBmb3IgcGxheWluZyBvbiB0b3VjaCBkZXZpY2VzXG4gIHByaXZhdGUgc3dpcGUoZTogRXZlbnQsIHRvdWNoOiBhbnkpIHtcbiAgICBsZXQgaGFuZGxlZCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgIHN3aXRjaCAodG91Y2guZGlyZWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKERpcmVjdGlvbi5MRUZUKTsgICBoYW5kbGVkID0gdHJ1ZTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICB0aGlzLmFjdGlvbnMucHVzaChEaXJlY3Rpb24uUklHSFQpOyAgaGFuZGxlZCA9IHRydWU7IGJyZWFrO1xuICAgICAgICBjYXNlICd1cCc6XG4gICAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2goRGlyZWN0aW9uLlVQKTsgICAgIGhhbmRsZWQgPSB0cnVlOyBicmVhaztcbiAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgdGhpcy5hY3Rpb25zLnB1c2goRGlyZWN0aW9uLkRPV04pOyAgIGhhbmRsZWQgPSB0cnVlOyBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB0YWIgZ2VzdHVyZXMgZm9yIHBsYXlpbmcgb24gdG91Y2ggZGV2aWNlc1xuICBwcml2YXRlIHRhYihlOiBFdmVudCwgdG91Y2g6IGFueSkge1xuICAgIGxldCBoYW5kbGVkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucGxheWluZykge1xuICAgICAgdGhpcy5hY3Rpb25zLnB1c2goRGlyZWN0aW9uLlVQKTtcbiAgICAgIGhhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHQU1FIExPR0lDXG4gICAqL1xuXG4gIC8qKlxuICAgKlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAbWVtYmVyb2YgVGV0cmlzXG4gICAqL1xuICBwcml2YXRlIHBsYXkoKSB7XG4gICAgdGhpcy4kbWVudS5zaG93KCk7XG4gICAgLy8gJHBsYXlCdG4ucHJvcCgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICB0aGlzLiRwbGF5QnRuLnRleHQoJ0dpdmUgVXAnKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgbG9zZSgpIHtcbiAgICAvLyAkcGxheUJ0bi5wcm9wKCdkaXNhYmxlZCcsIGZhbHNlKTtcbiAgICB0aGlzLiRwbGF5QnRuLnRleHQoJ1BsYXknKTtcbiAgICAvLyAkbWVudS5oaWRlKCk7XG4gICAgdGhpcy5zZXRWaXN1YWxTY29yZSgpO1xuICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRWaXN1YWxTY29yZShuPzogbnVtYmVyKSAgICAgIHsgdGhpcy52c2NvcmUgPSBuIHx8IHRoaXMuc2NvcmU7ICB0aGlzLmludmFsaWRhdGVTY29yZSgpOyB9XG4gIHByaXZhdGUgc2V0U2NvcmUobjogbnVtYmVyKSAgICAgICAgICAgIHsgdGhpcy5zY29yZSA9IG47ICB0aGlzLnNldFZpc3VhbFNjb3JlKG4pOyB9XG4gIHByaXZhdGUgYWRkU2NvcmUobjogbnVtYmVyKSAgICAgICAgICAgIHsgdGhpcy5zY29yZSA9ICB0aGlzLnNjb3JlICsgbjsgfVxuICBwcml2YXRlIGNsZWFyU2NvcmUoKSAgICAgICAgICAgeyB0aGlzLnNldFNjb3JlKDApOyB9XG4gIHByaXZhdGUgY2xlYXJSb3dzKCkgICAgICAgICAgICB7IHRoaXMuc2V0Um93cygwKTsgfVxuICBwcml2YXRlIHNldFJvd3MobjogbnVtYmVyKSAgICAgICAgICAgICB7IHRoaXMucm93cyA9IG47ICB0aGlzLnN0ZXAgPSBNYXRoLm1heCggdGhpcy5zcGVlZC5taW4sICB0aGlzLnNwZWVkLnN0YXJ0IC0gKCB0aGlzLnNwZWVkLmRlY3JlbWVudCAqIHRoaXMucm93cykpOyAgdGhpcy5pbnZhbGlkYXRlUm93cygpOyB9XG4gIHByaXZhdGUgYWRkUm93cyhuOiBudW1iZXIpICAgICAgICAgICAgIHsgdGhpcy5zZXRSb3dzKHRoaXMucm93cyArIG4pOyB9XG4gIHByaXZhdGUgZ2V0QmxvY2soeDogbnVtYmVyLCB5OiBudW1iZXIpICAgICAgICAgIHsgcmV0dXJuICggdGhpcy5ibG9ja3MgJiYgIHRoaXMuYmxvY2tzW3hdID8gIHRoaXMuYmxvY2tzW3hdW3ldIDogbnVsbCk7IH1cbiAgcHJpdmF0ZSBzZXRCbG9jayh4OiBudW1iZXIsIHk6IG51bWJlciwgdHlwZTogSVBpZWNlKSAgICAgeyB0aGlzLmJsb2Nrc1t4XSA9ICB0aGlzLmJsb2Nrc1t4XSB8fCBbXTsgIHRoaXMuYmxvY2tzW3hdW3ldID0gdHlwZTsgIHRoaXMuaW52YWxpZGF0ZSgpOyB9XG4gIHByaXZhdGUgY2xlYXJCbG9ja3MoKSAgICAgICAgICB7IHRoaXMuYmxvY2tzID0gW107ICB0aGlzLmludmFsaWRhdGUoKTsgfVxuICBwcml2YXRlIGNsZWFyQWN0aW9ucygpICAgICAgICAgeyB0aGlzLmFjdGlvbnMgPSBuZXcgQXJyYXk8RGlyZWN0aW9uPigpOyB9XG4gIHByaXZhdGUgc2V0Q3VycmVudFBpZWNlKHBpZWNlOiBJUGllY2VQb3NpdGlvbikgeyB0aGlzLmN1cnJlbnQgPSBwaWVjZSB8fCAgdGhpcy5yYW5kb21QaWVjZSgpOyAgdGhpcy5pbnZhbGlkYXRlKCk7ICAgICB9XG4gIHByaXZhdGUgc2V0TmV4dFBpZWNlKHBpZWNlPzogSVBpZWNlUG9zaXRpb24pICAgIHsgdGhpcy5uZXh0ICAgID0gcGllY2UgfHwgIHRoaXMucmFuZG9tUGllY2UoKTsgIHRoaXMuaW52YWxpZGF0ZU5leHQoKTsgfVxuXG4gIHByaXZhdGUgcmVzZXQoKSB7XG4gICAgdGhpcy5kdCA9IDA7XG4gICAgdGhpcy5jbGVhckFjdGlvbnMoKTtcbiAgICB0aGlzLmNsZWFyQmxvY2tzKCk7XG4gICAgdGhpcy5jbGVhclJvd3MoKTtcbiAgICB0aGlzLmNsZWFyU2NvcmUoKTtcbiAgICB0aGlzLnNldEN1cnJlbnRQaWVjZSh0aGlzLm5leHQpO1xuICAgIHRoaXMuc2V0TmV4dFBpZWNlKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZShpZHQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgIGlmICh0aGlzLnZzY29yZSA8IHRoaXMuc2NvcmUpIHtcbiAgICAgICAgdGhpcy5zZXRWaXN1YWxTY29yZSh0aGlzLnZzY29yZSArIDEpO1xuICAgICAgfVxuICAgICAgdGhpcy5oYW5kbGUodGhpcy5hY3Rpb25zLnNoaWZ0KCkpO1xuICAgICAgdGhpcy5kdCA9IHRoaXMuZHQgKyBpZHQ7XG4gICAgICBpZiAodGhpcy5kdCA+IHRoaXMuc3RlcCkge1xuICAgICAgICB0aGlzLmR0ID0gdGhpcy5kdCAtIHRoaXMuc3RlcDtcbiAgICAgICAgdGhpcy5kcm9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGUoYWN0aW9uOiBEaXJlY3Rpb24pIHtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSBEaXJlY3Rpb24uTEVGVDogIHRoaXMubW92ZShEaXJlY3Rpb24uTEVGVCk7ICBicmVhaztcbiAgICAgIGNhc2UgRGlyZWN0aW9uLlJJR0hUOiB0aGlzLm1vdmUoRGlyZWN0aW9uLlJJR0hUKTsgYnJlYWs7XG4gICAgICBjYXNlIERpcmVjdGlvbi5VUDogICAgdGhpcy5yb3RhdGUoKTsgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBEaXJlY3Rpb24uRE9XTjogIHRoaXMuZHJvcCgpOyAgICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1vdmUoZGlyOiBEaXJlY3Rpb24pIHtcbiAgICAvLyBjb25zb2xlLmxvZygnbW92ZScsIGRpcik7XG4gICAgbGV0IHggPSB0aGlzLmN1cnJlbnQueDtcbiAgICBsZXQgeSA9IHRoaXMuY3VycmVudC55O1xuICAgIHN3aXRjaCAoZGlyKSB7XG4gICAgICBjYXNlIERpcmVjdGlvbi5SSUdIVDogeCA9IHggKyAxOyBicmVhaztcbiAgICAgIGNhc2UgRGlyZWN0aW9uLkxFRlQ6ICB4ID0geCAtIDE7IGJyZWFrO1xuICAgICAgY2FzZSBEaXJlY3Rpb24uRE9XTjogIHkgPSB5ICsgMTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLnVub2NjdXBpZWQodGhpcy5jdXJyZW50LnR5cGUsIHgsIHksIHRoaXMuY3VycmVudC5kaXIpKSB7XG4gICAgICB0aGlzLmN1cnJlbnQueCA9IHg7XG4gICAgICB0aGlzLmN1cnJlbnQueSA9IHk7XG4gICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByb3RhdGUoKSB7XG4gICAgY29uc3QgbmV3ZGlyID0gKHRoaXMuY3VycmVudC5kaXIgPT09IERpcmVjdGlvbi5NQVggPyBEaXJlY3Rpb24uTUlOIDogdGhpcy5jdXJyZW50LmRpciArIDEpO1xuICAgIGlmICh0aGlzLnVub2NjdXBpZWQodGhpcy5jdXJyZW50LnR5cGUsIHRoaXMuY3VycmVudC54LCB0aGlzLmN1cnJlbnQueSwgbmV3ZGlyKSkge1xuICAgICAgdGhpcy5jdXJyZW50LmRpciA9IG5ld2RpcjtcbiAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZHJvcCgpIHtcbiAgICBpZiAoIXRoaXMubW92ZShEaXJlY3Rpb24uRE9XTikpIHtcbiAgICAgIHRoaXMuYWRkU2NvcmUoMTApO1xuICAgICAgdGhpcy5kcm9wUGllY2UoKTtcbiAgICAgIHRoaXMucmVtb3ZlTGluZXMoKTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFBpZWNlKHRoaXMubmV4dCk7XG4gICAgICB0aGlzLnNldE5leHRQaWVjZSh0aGlzLnJhbmRvbVBpZWNlKCkpO1xuICAgICAgdGhpcy5jbGVhckFjdGlvbnMoKTtcbiAgICAgIGlmICh0aGlzLm9jY3VwaWVkKHRoaXMuY3VycmVudC50eXBlLCB0aGlzLmN1cnJlbnQueCwgdGhpcy5jdXJyZW50LnksIHRoaXMuY3VycmVudC5kaXIpKSB7XG4gICAgICAgIHRoaXMubG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZHJvcFBpZWNlKCkge1xuICAgIHRoaXMuZWFjaGJsb2NrKHRoaXMuY3VycmVudC50eXBlLCB0aGlzLmN1cnJlbnQueCwgdGhpcy5jdXJyZW50LnksIHRoaXMuY3VycmVudC5kaXIsICh4LCB5KSA9PiB7XG4gICAgICB0aGlzLnNldEJsb2NrKHgsIHksIHRoaXMuY3VycmVudC50eXBlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGluZXMoKSB7XG4gICAgbGV0IHg7XG4gICAgbGV0IHk7XG4gICAgbGV0IGNvbXBsZXRlO1xuICAgIGxldCBuID0gMDtcbiAgICBmb3IgKHkgPSB0aGlzLm55IDsgeSA+IDAgOyAtLXkpIHtcbiAgICAgIGNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgIGZvciAoeCA9IDAgOyB4IDwgdGhpcy5ueCA7ICsreCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2V0QmxvY2soeCwgeSkpIHtcbiAgICAgICAgICBjb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaW5lKHkpO1xuICAgICAgICB5ID0geSArIDE7IC8vIHJlY2hlY2sgc2FtZSBsaW5lXG4gICAgICAgIG4rKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG4gPiAwKSB7XG4gICAgICB0aGlzLmFkZFJvd3Mobik7XG4gICAgICB0aGlzLmFkZFNjb3JlKDEwMCAqIE1hdGgucG93KDIsIG4gLSAxKSk7IC8vIDE6IDEwMCwgMjogMjAwLCAzOiA0MDAsIDQ6IDgwMFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlTGluZShuOiBudW1iZXIpIHtcbiAgICBsZXQgeDtcbiAgICBsZXQgeTtcbiAgICBmb3IgKHkgPSBuIDsgeSA+PSAwIDsgLS15KSB7XG4gICAgICBmb3IgKHggPSAwIDsgeCA8IHRoaXMubnggOyArK3gpIHtcbiAgICAgICAgdGhpcy5zZXRCbG9jayh4LCB5LCAoeSA9PT0gMCkgPyBudWxsIDogdGhpcy5nZXRCbG9jayh4LCB5IC0gMSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSRU5ERVJJTkdcbiAgICovXG5cbiAgcHJpdmF0ZSBpbnZhbGlkYXRlKCkgeyB0aGlzLmludmFsaWQuY291cnQgID0gdHJ1ZTsgfVxuICBwcml2YXRlIGludmFsaWRhdGVOZXh0KCkgeyB0aGlzLmludmFsaWQubmV4dCAgID0gdHJ1ZTsgfVxuICBwcml2YXRlIGludmFsaWRhdGVTY29yZSgpIHsgdGhpcy5pbnZhbGlkLnNjb3JlICA9IHRydWU7IH1cbiAgcHJpdmF0ZSBpbnZhbGlkYXRlUm93cygpIHsgdGhpcy5pbnZhbGlkLnJvd3MgICA9IHRydWU7IH1cblxuICBwcml2YXRlIGRyYXcoKSB7XG4gICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9ICB0aGlzLmxpbmVXaWR0aFhsO1xuICAgIHRoaXMuY3R4LnRyYW5zbGF0ZSggdGhpcy5saW5lV2lkdGhYbCAvIDIsICB0aGlzLmxpbmVXaWR0aFhsIC8gMik7IC8vIGZvciBjcmlzcCAxcHggYmxhY2sgbGluZXNcbiAgICB0aGlzLmRyYXdDb3VydCgpO1xuICAgIHRoaXMuZHJhd05leHQoKTtcbiAgICB0aGlzLmRyYXdTY29yZSgpO1xuICAgIHRoaXMuZHJhd1Jvd3MoKTtcbiAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICAvKipcbiAgICogU3BpZWxmZWxkXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZW1iZXJvZiBUZXRyaXNcbiAgICovXG4gIHByaXZhdGUgZHJhd0NvdXJ0KCkge1xuICAgIGlmICggdGhpcy5pbnZhbGlkLmNvdXJ0KSB7XG4gICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy4kY2FudmFzLndpZHRoKCkgfHwgMCwgIHRoaXMuJGNhbnZhcy5oZWlnaHQoKSB8fCAwKTtcbiAgICAgIGlmICh0aGlzLnBsYXlpbmcpIHtcbiAgICAgICAgdGhpcy5kcmF3UGllY2UodGhpcy5jdHgsIHRoaXMuY3VycmVudC50eXBlLCB0aGlzLmN1cnJlbnQueCwgdGhpcy5jdXJyZW50LnksIHRoaXMuY3VycmVudC5kaXIsIHRoaXMuZHgsIHRoaXMuZHkpO1xuICAgICAgfVxuICAgICAgbGV0IHg7XG4gICAgICBsZXQgeTtcbiAgICAgIGxldCBibG9jaztcbiAgICAgIGZvciAoeSA9IDAgOyB5IDwgdGhpcy5ueSA7IHkrKykge1xuICAgICAgICBmb3IgKHggPSAwIDsgeCA8IHRoaXMubnggOyB4KyspIHtcbiAgICAgICAgICBibG9jayA9IHRoaXMuZ2V0QmxvY2soeCwgeSk7XG4gICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdCbG9jayh0aGlzLmN0eCwgeCwgeSwgYmxvY2suY29sb3IsIHRoaXMuZHgsIHRoaXMuZHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xuICAgICAgdGhpcy5jdHgubGluZVdpZHRoID0gIHRoaXMubGluZVdpZHRoWGw7XG4gICAgICB0aGlzLmN0eC5zdHJva2VSZWN0KDAsIDAsIHRoaXMubnggKiB0aGlzLmR4IC0gdGhpcy5saW5lV2lkdGhYbCwgdGhpcy5ueSAqIHRoaXMuZHkgLSB0aGlzLmxpbmVXaWR0aFhsKTsgLy8gY291cnQgYm91bmRhcnkgLyBTcGllbGZlbGRyYW5kXG4gICAgICB0aGlzLmludmFsaWQuY291cnQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRyYXdOZXh0KCkge1xuICAgIGlmICggdGhpcy5pbnZhbGlkLm5leHQpIHtcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSAoKCB0aGlzLm51IC0gIHRoaXMubmV4dC50eXBlLnNpemUpIC8gMik7XG4gICAgICAvLyBwYWRkaW5nID0gMTsgLy8gV09SS0FST1VORFxuICAgICAgLy8gY29uc29sZS5sb2coJ2RyYXdOZXh0IHBhZGRpbmcnLCBwYWRkaW5nLCAnZG5leHR4JywgIHRoaXMuZG5leHR4LCAnbnUnLCAgdGhpcy5udSwgJ25leHQnLCAgdGhpcy5uZXh0KTtcbiAgICAgIHRoaXMudWN0eC5zYXZlKCk7XG4gICAgICB0aGlzLnVjdHgudHJhbnNsYXRlKHRoaXMubGluZVdpZHRoWGwgLyAyLCB0aGlzLmxpbmVXaWR0aFhsIC8gMik7XG4gICAgICB0aGlzLnVjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuJHVjYW52YXMud2lkdGgoKSwgdGhpcy4kdWNhbnZhcy5oZWlnaHQoKSk7XG4gICAgICB0aGlzLmRyYXdQaWVjZSh0aGlzLnVjdHgsIHRoaXMubmV4dC50eXBlLCBwYWRkaW5nLCBwYWRkaW5nLCB0aGlzLm5leHQuZGlyLCB0aGlzLmRuZXh0eCwgdGhpcy5kbmV4dHkpO1xuICAgICAgdGhpcy51Y3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcbiAgICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoWGw7XG4gICAgICB0aGlzLnVjdHguc3Ryb2tlUmVjdCgwLCAwLCB0aGlzLm51ICogdGhpcy5kbmV4dHggLSB0aGlzLmxpbmVXaWR0aFhsLCB0aGlzLm51ICogdGhpcy5kbmV4dHkgLSB0aGlzLmxpbmVXaWR0aFhsKTtcbiAgICAgIHRoaXMudWN0eC5yZXN0b3JlKCk7XG4gICAgICB0aGlzLmludmFsaWQubmV4dCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZHJhd1Njb3JlKCkge1xuICAgIGlmICh0aGlzLmludmFsaWQuc2NvcmUpIHtcbiAgICAgIC8vIGh0bWwoJ3Njb3JlJywgKFwiMDAwMDBcIiArIE1hdGguZmxvb3IodnNjb3JlKSkuc2xpY2UoLTUpKTtcbiAgICAgIHRoaXMuJHNjb3JlLnRleHQoKCcwMDAwMCcgKyBNYXRoLmZsb29yKHRoaXMudnNjb3JlKSkuc2xpY2UoLTUpKTtcbiAgICAgIHRoaXMuaW52YWxpZC5zY29yZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZHJhd1Jvd3MoKSB7XG4gICAgaWYgKHRoaXMuaW52YWxpZC5yb3dzKSB7XG4gICAgICAvLyBodG1sKCdyb3dzJywgcm93cyk7XG4gICAgICB0aGlzLiRyb3dzLnRleHQodGhpcy5yb3dzKTtcbiAgICAgIHRoaXMuaW52YWxpZC5yb3dzID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBkcmF3UGllY2UoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHR5cGU6IElQaWVjZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGRpcjogRGlyZWN0aW9uLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyKSB7XG4gICAgdGhpcy5lYWNoYmxvY2sodHlwZSwgeCwgeSwgZGlyLCAoY3Vyclg6IG51bWJlciwgY3Vyclk6IG51bWJlcikgPT4ge1xuICAgICAgdGhpcy5kcmF3QmxvY2soY3R4LCBjdXJyWCwgY3VyclksIHR5cGUuY29sb3IsIGR4LCBkeSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGRyYXdCbG9jayhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcsIGR4OiBudW1iZXIsIGR5OiBudW1iZXIpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3RyYW5zcGFyZW50JztcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGhYbDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICBjdHguZmlsbFJlY3QoeCAqIGR4LCB5ICogZHksIGR4LCBkeSk7XG4gICAgY3R4LnN0cm9rZVJlY3QoeCAqIGR4LCB5ICogZHksIGR4LCBkeSk7XG4gIH1cbn1cbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL1V0aWxzJztcblxuLyoqXG4gKiBBZGQgdXNlZnVsIGdlbmVyYWwtcHVycG9zZSBmb3JtYXR0ZXJzIGZvciBSaXZldHMuanNcbiAqIFNvbWUgZm9ybWF0dGVycyBmcm9tIGNhcnQuanNcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvbGFicy9jYXJ0anMvYmxvYi9tYXN0ZXIvc3JjL3JpdmV0cy5jb2ZmZWUjTDUyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYi9ibG9iL21hc3Rlci9zcmMvcml2ZXRzc3RkbGliLmpzXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9KdW1wTGlua05ldHdvcmsvc2hvcGlmeS1wcm9kdWN0anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxpdGllcy5qc1xuICovXG5cbmNvbnN0IGRlYnVnID0gRGVidWcoJ3JpdmV0czpmb3JtYXR0ZXJzJyk7XG5cbi8qKlxuICogYSA9PT0gYlxuICovXG5leHBvcnQgY29uc3QgZXEgPSAoYTogYW55LCBiOiBhbnkpID0+IHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG4vKipcbiAqIGEgIT09IGJcbiAqL1xuZXhwb3J0IGNvbnN0IHVlcSA9IChhOiBhbnksIGI6IGFueSkgPT4ge1xuICByZXR1cm4gYSAhPT0gYjtcbn07XG5cbmV4cG9ydCBjb25zdCBpbmNsdWRlcyA9IChhOiBzdHJpbmcsIGI6IHN0cmluZykgPT4ge1xuICByZXR1cm4gYS5pbmRleE9mKGIpID49IDA7XG59O1xuXG5leHBvcnQgY29uc3QgbWF0Y2ggPSAoYTogc3RyaW5nLCByZWdleHA6IHN0cmluZywgZmxhZ3M/OiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGEubWF0Y2gobmV3IFJlZ0V4cChyZWdleHAsIGZsYWdzKSk7XG59O1xuXG5leHBvcnQgY29uc3QgbHQgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IHtcbiAgZGVidWcoJ1tsdF0nLCBhLCBiKTtcbiAgcmV0dXJuIGEgPCBiO1xufTtcblxuLyoqXG4gKiBhIDw9IGJcbiAqL1xuZXhwb3J0IGNvbnN0IGVsdCA9IChhOiBudW1iZXIsIGI6IG51bWJlcikgPT4ge1xuICBkZWJ1ZygnW2VsdF0nLCBhLCBiKTtcbiAgcmV0dXJuIGEgPD0gYjtcbn07XG5cbi8qKlxuICogYSA+IGJcbiAqL1xuZXhwb3J0IGNvbnN0IGd0ID0gKGE6IG51bWJlciwgYjogbnVtYmVyKSA9PiB7XG4gIGRlYnVnKCdbZ3RdJywgYSwgYik7XG4gIHJldHVybiBhID4gYjtcbn07XG5cbi8qKlxuICogYSA+PSBiXG4gKi9cbmV4cG9ydCBjb25zdCBlZ3QgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIpID0+IHtcbiAgZGVidWcoJ1tlZ3RdJywgYSwgYik7XG4gIHJldHVybiBhID49IGI7XG59O1xuXG4vKipcbiAqICFhXG4gKi9cbmV4cG9ydCBjb25zdCBub3QgPSAoYTogYm9vbGVhbikgPT4ge1xuICByZXR1cm4gIWE7XG59O1xuXG5leHBvcnQgY29uc3QgZW1wdHkgPSAoYTogYW55W10gfCBzdHJpbmcgKSA9PiB7XG4gIHJldHVybiAhY291bnQoYSk7XG59O1xuXG4vKipcbiAqIGEgJiYgYlxuICovXG5leHBvcnQgY29uc3QgYW5kID0gKGE6IGJvb2xlYW4sIGI6IGJvb2xlYW4pID0+IHtcbiAgcmV0dXJuIGEgJiYgYjtcbn07XG5cbi8qKlxuICogYSB8fCBiXG4gKi9cbmV4cG9ydCBjb25zdCBvciA9IChhOiBib29sZWFuLCBiOiBib29sZWFuKSA9PiB7XG4gIHJldHVybiBhIHx8IGI7XG59O1xuXG4vKipcbiAqIHBhcnNlIGpzb24gc3RyaW5nIHRvIG9iamVjdFxuICogQGV4YW1wbGUgPGRpdiBydi1jbGFzcz0nXCJbXCJjb2wtMlwiLCBcImNvbC0zXCIsIFwiY29sLTRcIiwgXCJjb2wtNVwiLCBcImNvbC02XCJdXCIgfCBwYXJzZSB8IHJhbmRvbSc+XG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZSA9IChqc29uU3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgaWYgKFV0aWxzLmlzU3RyaW5nKGpzb25TdHJpbmcpKSB7XG4gICAgY29uc3Qgb2JqZWN0ID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBHZXQgYSBiYWNrIHJhbmRvbSB2YWx1ZSBvZiBhcnJheVxuICogQGV4YW1wbGUgPGRpdiBydi1jbGFzcz0nXCJbXCJjb2wtMlwiLCBcImNvbC0zXCIsIFwiY29sLTRcIiwgXCJjb2wtNVwiLCBcImNvbC02XCJdXCIgfCBwYXJzZSB8IHJhbmRvbSc+XG4gKi9cbmV4cG9ydCBjb25zdCByYW5kb20gPSAoYXJyYXk6IGFueVtdKSA9PiB7XG4gICAgaWYgKFV0aWxzLmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXJyYXlbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXkubGVuZ3RoKV07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBudW1iZXIgdG8gYW4gb3V0cHV0LlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNwbHVzXG4gKi9cbmV4cG9ydCBjb25zdCBwbHVzID0gKGE6IHN0cmluZyB8IG51bWJlciwgYjogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gIHJldHVybiBOdW1iZXIoYSkgKyBOdW1iZXIoYik7XG59O1xuXG4vKipcbiAqIFN1YnRyYWN0cyBhIG51bWJlciBmcm9tIGFuIG91dHB1dC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9tYXRoLWZpbHRlcnMjbWludXNcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbnVzID0gKGE6IHN0cmluZyB8IG51bWJlciwgYjogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gIHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7XG59O1xuXG4vKipcbiAqIE11bHRpcGxpZXMgYW4gb3V0cHV0IGJ5IGEgbnVtYmVyLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyN0aW1lc1xuICovXG5leHBvcnQgY29uc3QgdGltZXMgPSAoYTogc3RyaW5nIHwgbnVtYmVyLCBiOiBzdHJpbmcgfCBudW1iZXIpID0+IHtcbiAgcmV0dXJuIE51bWJlcihhKSAqIE51bWJlcihiKTtcbn07XG5cbi8qKlxuICogRGl2aWRlcyBhbiBvdXRwdXQgYnkgYSBudW1iZXIuIFRoZSBvdXRwdXQgaXMgcm91bmRlZCBkb3duIHRvIHRoZSBuZWFyZXN0IGludGVnZXIuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvbWF0aC1maWx0ZXJzI2RpdmlkZWRfYnlcbiAqL1xuZXhwb3J0IGNvbnN0IGRpdmlkZWRCeSA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpIC8gTnVtYmVyKGIpO1xufTtcblxuLyoqXG4gKiBEaXZpZGVzIGFuIG91dHB1dCBieSBhIG51bWJlciBhbmQgcmV0dXJucyB0aGUgcmVtYWluZGVyLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL21hdGgtZmlsdGVycyNtb2R1bG9cbiAqL1xuZXhwb3J0IGNvbnN0IG1vZHVsbyA9IChhOiBzdHJpbmcgfCBudW1iZXIsIGI6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICByZXR1cm4gTnVtYmVyKGEpICUgTnVtYmVyKGIpO1xufTtcblxuLyoqXG4gKiBQcmVwZW5kcyBjaGFyYWN0ZXJzIHRvIGEgc3RyaW5nLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI3ByZXBlbmRcbiAqL1xuZXhwb3J0IGNvbnN0IHByZXBlbmQgPSAoYTogc3RyaW5nLCBiOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGIgKyBhO1xufTtcblxuLyoqXG4gKiBBcHBlbmRzIGNoYXJhY3RlcnMgdG8gYSBzdHJpbmcuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvc3RyaW5nLWZpbHRlcnMjYXBwZW5kXG4gKi9cbmV4cG9ydCBjb25zdCBhcHBlbmQgPSAoYTogc3RyaW5nLCBiOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGEgKyBiO1xufTtcblxuLyoqXG4gKiBUaGUgYHNsaWNlYCBmaWx0ZXIgcmV0dXJucyBhIHN1YnN0cmluZywgc3RhcnRpbmcgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAqIEFuIG9wdGlvbmFsIHNlY29uZCBwYXJhbWV0ZXIgY2FuIGJlIHBhc3NlZCB0byBzcGVjaWZ5IHRoZSBsZW5ndGggb2YgdGhlIHN1YnN0cmluZy5cbiAqIElmIG5vIHNlY29uZCBwYXJhbWV0ZXIgaXMgZ2l2ZW4sIGEgc3Vic3RyaW5nIG9mIG9uZSBjaGFyYWN0ZXIgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9zdHJpbmctZmlsdGVycyNzbGljZVxuICovXG5leHBvcnQgY29uc3Qgc2xpY2UgPSAodmFsdWU6IGFueSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIHZhbHVlLnNsaWNlKHN0YXJ0LCBlbmQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHBsdXJhbGl6ZSA9IChpbnB1dDogYW55LCBzaW5ndWxhcjogc3RyaW5nLCBwbHVyYWw6IHN0cmluZykgPT4ge1xuICBpZiAocGx1cmFsID09PSBudWxsKSB7XG4gICAgcGx1cmFsID0gc2luZ3VsYXIgKyAncyc7XG4gIH1cbiAgaWYgKFV0aWxzLmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgaW5wdXQgPSBpbnB1dC5sZW5ndGg7XG4gIH1cbiAgaWYgKGlucHV0ID09PSAxKSB7XG4gICAgcmV0dXJuIHNpbmd1bGFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwbHVyYWw7XG4gIH1cbn07XG5cbi8qKlxuICogR2V0IHByb3BlcnR5IG9mIG9iamVjdCBvciBhcnJheVxuICogQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kZXItT24vY2RhZmU5MDg4NDdlMmI4ODI2OTFcbiAqL1xuZXhwb3J0IGNvbnN0IGdldCA9IChvYmo6IGFueSB8IGFueVtdLCBrZXk6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuICBpZiAoVXRpbHMuaXNPYmplY3Qob2JqKSB8fCBVdGlscy5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIFNldCBwcm9wZXJ0eSBvZiBvYmplY3RcbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZGVyLU9uL2NkYWZlOTA4ODQ3ZTJiODgyNjkxXG4gKi9cbmV4cG9ydCBjb25zdCBzZXQgPSAob2JqOiBhbnkgfCBhbnlbXSwga2V5OiBzdHJpbmcgfCBudW1iZXIsIHZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKFV0aWxzLmlzT2JqZWN0KG9iaikgfHwgVXRpbHMuaXNBcnJheShvYmopKSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG4vKipcbiAqIEFycmF5IGZvcm1hdHRlciB0byBnZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0ID0gKGFycjogYW55W10pID0+IHtcbiAgcmV0dXJuIGdldChhcnIsIDApO1xufTtcblxuLyoqXG4gKiBBcnJheSBmb3JtYXR0ZXIgdG8gZ2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGNvbnN0IGxhc3QgPSAoYXJyYXk6IGFueVtdKSA9PiB7XG4gIHJldHVybiBnZXQoYXJyYXksIGFycmF5Lmxlbmd0aCAtIDEpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdmFsdWUgaW5kZXggaXQgdGhlIGxhc3QgaW5kZXggb2YgdGhlIGFycmF5LiBSZXR1cm5zIGZhbHNlIGlmIGl0IGlzIG5vdCB0aGUgbGFzdCBpbmRleC5cbiAqIGBgYFxuICogIDxkaXYgcnYtZWFjaC1pbWFnZT1cInByb2R1Y3QuaW1hZ2VzXCIgcnYtaGlkZT1cInByb2R1Y3QuaW1hZ2VzIHwgbGFzdCAlaW1hZ2UlXCI+PC9kaXY+XG4gKiBgYGBcbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvb2JqZWN0cy9mb3ItbG9vcHMjZm9ybG9vcC1sYXN0XG4gKi9cbmV4cG9ydCBjb25zdCBpc0xhc3QgPSAoYXJyYXk6IGFueVtdLCBpOiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIChhcnJheS5sZW5ndGggPT09IGkgKyAxKTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdCBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuXG4gKiBAcGFyYW0gYW1vdW50IElucHV0IHRvIGZpbHRlci5cbiAqIEBwYXJhbSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLiAob3B0aW9uYWwpXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy9maWx0ZXIvY3VycmVuY3lcbiAqL1xuZXhwb3J0IGNvbnN0IGN1cnJlbmN5ID0gKGFtb3VudDogbnVtYmVyLCBzeW1ib2w6IHN0cmluZykgPT4ge1xuICAgIGxldCByZXN1bHQgPSBhbW91bnQudG9GaXhlZCgyKS50b1N0cmluZygpLnJlcGxhY2UoJy4nLCAnLCcpO1xuICAgIGlmIChzeW1ib2wpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCArIHN5bWJvbDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIEFkZCBTaG9waWZ5LXNwZWNpZmljIGZvcm1hdHRlcnMgZm9yIFJpdmV0cy5qcy5cbi8vIGV4cG9ydCBjb25zdCBtb25leSA9ICh2YWx1ZSwgY3VycmVuY3kpID0+IHtcbi8vICAgcmV0dXJuIFV0aWxzLmZvcm1hdE1vbmV5KHZhbHVlLCBQcm9kdWN0SlMuc2V0dGluZ3MubW9uZXlGb3JtYXQsICdtb25leV9mb3JtYXQnLCBjdXJyZW5jeSk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgbW9uZXlXaXRoQ3VycmVuY3kgPSAodmFsdWUsIGN1cnJlbmN5KSA9PiB7XG4vLyAgIHJldHVybiBVdGlscy5mb3JtYXRNb25leSh2YWx1ZSwgUHJvZHVjdEpTLnNldHRpbmdzLm1vbmV5V2l0aEN1cnJlbmN5Rm9ybWF0LCAnbW9uZXlfd2l0aF9jdXJyZW5jeV9mb3JtYXQnLCBjdXJyZW5jeSk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3Qgd2VpZ2h0ID0gKGdyYW1zKSA9PiB7XG4vLyAgIHN3aXRjaCAoQ2FydEpTLnNldHRpbmdzLndlaWdodFVuaXQpIHtcbi8vICAgICBjYXNlICdrZyc6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zIC8gMTAwMCkudG9GaXhlZChDYXJ0SlMuc2V0dGluZ3Mud2VpZ2h0UHJlY2lzaW9uKTtcbi8vICAgICBjYXNlICdveic6XG4vLyAgICAgICByZXR1cm4gKGdyYW1zICogMC4wMzUyNzQpLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgICAgY2FzZSAnbGInOlxuLy8gICAgICAgcmV0dXJuIChncmFtcyAqIDAuMDAyMjA0NjIpLnRvRml4ZWQoQ2FydEpTLnNldHRpbmdzLndlaWdodFByZWNpc2lvbik7XG4vLyAgICAgZGVmYXVsdDpcbi8vICAgICAgIHJldHVybiBncmFtcy50b0ZpeGVkKENhcnRKUy5zZXR0aW5ncy53ZWlnaHRQcmVjaXNpb24pO1xuLy8gICB9XG4vLyB9O1xuXG4vKipcbiAqIEZvcm1hdHMgdGhlIHByb2R1Y3QgdmFyaWFudCdzIHdlaWdodC4gVGhlIHdlaWdodCB1bml0IGlzIHNldCBpbiBHZW5lcmFsIFNldHRpbmdzLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL2FkZGl0aW9uYWwtZmlsdGVycyN3ZWlnaHRXaXRoVW5pdFxuICovXG4vLyBleHBvcnQgY29uc3Qgd2VpZ2h0V2l0aFVuaXQgPSAoZ3JhbXMpID0+IHtcbi8vICAgcmV0dXJuIGV4cG9ydCBjb25zdCB3ZWlnaHQoZ3JhbXMpICsgQ2FydEpTLnNldHRpbmdzLndlaWdodFVuaXQ7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgcHJvZHVjdEltYWdlU2l6ZSA9IChzcmMsIHNpemUpID0+IHtcbi8vICAgcmV0dXJuIENhcnRKUy5VdGlscy5nZXRTaXplZEltYWdlVXJsKHNyYywgc2l6ZSk7XG4vLyB9O1xuXG4vLyBBZGRpdGlvbmFsIGZvcm1hdHRlcnMgZm9yIFByb2R1Y3RKU1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHNpemUgb2YgYSBzdHJpbmcgKHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycykgb3IgYW4gYXJyYXkgKHRoZSBudW1iZXIgb2YgZWxlbWVudHMpLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL2FycmF5LWZpbHRlcnMjc2l6ZVxuICovXG5leHBvcnQgY29uc3QgY291bnQgPSAodmFsdWU6IGFueVtdIHwgc3RyaW5nKSA9PiB7XG4gIHJldHVybiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSA/IHZhbHVlLmxlbmd0aCA6IDA7XG59O1xuXG4vKipcbiAqIFN0cmlwcyB0YWJzLCBzcGFjZXMsIGFuZCBuZXdsaW5lcyAoYWxsIHdoaXRlc3BhY2UpIGZyb20gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGUgb2YgYSBzdHJpbmcuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvc3RyaW5nLWZpbHRlcnMjc3RyaXBcbiAqL1xuZXhwb3J0IGNvbnN0IHN0cmlwID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiAkLnRyaW0oc3RyKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byB1cHBlcmNhc2UuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvc3RyaW5nLWZpbHRlcnMjdXBjYXNlXG4gKi9cbmV4cG9ydCBjb25zdCB1cGNhc2UgPSAoc3RyOiBzdHJpbmcpID0+ICB7XG4gIHJldHVybiBzdHIudG9VcHBlckNhc2UoKTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBsb3dlcmNhc2UuXG4gKiBAc2VlIGh0dHBzOi8vaGVscC5zaG9waWZ5LmNvbS90aGVtZXMvbGlxdWlkL2ZpbHRlcnMvc3RyaW5nLWZpbHRlcnMjZG93bmNhc2VcbiAqL1xuZXhwb3J0IGNvbnN0IGRvd25jYXNlID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKTtcbn07XG5cbi8qKlxuICogRm9ybWF0cyBhIHN0cmluZyBpbnRvIGEgaGFuZGxlLlxuICogQHNlZSBodHRwczovL2hlbHAuc2hvcGlmeS5jb20vdGhlbWVzL2xpcXVpZC9maWx0ZXJzL3N0cmluZy1maWx0ZXJzI2hhbmRsZS1oYW5kbGVpemVcbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZWl6ZSA9IChzdHI6IHN0cmluZykgPT4ge1xuICBzdHIgPSBzdHJpcChzdHIpO1xuICBzdHIgPSBzdHIucmVwbGFjZSgvW15cXHdcXHNdL2dpLCAnJyk7IC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQzNzQ4OTBcbiAgc3RyID0gZG93bmNhc2Uoc3RyKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8gL2csICctJyk7XG59O1xuXG4vKipcbiAqIFNldCBkZWZhdWx0IHZhbHVlXG4gKiBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2Rlci1Pbi9jZGFmZTkwODg0N2UyYjg4MjY5MVxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdFZhbHVlID0gKHZhbHVlOiBhbnksIGFyZ3M6IGFueSkgPT4ge1xuICBpZiAoVXRpbHMuaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYXJncztcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBKU09OIGZvcm1hdC5cbiAqIEBzZWUgaHR0cHM6Ly9oZWxwLnNob3BpZnkuY29tL3RoZW1lcy9saXF1aWQvZmlsdGVycy9hZGRpdGlvbmFsLWZpbHRlcnMjanNvblxuICovXG5leHBvcnQgY29uc3QganNvbiA9IChvYmplY3Q6IGFueSkgPT4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0KTtcbn07XG5cbi8qKlxuICogVHJ1ZSBpZiBhcnJheSAvIHN0cmluZyBjb250YWlucyBwcm9wZXJ0eSAvIHN1YnN0cmluZyBvciBjb250YWludHMgcHJvcGVydHkgd2l0aCB2YWx1ZVxuICogQHNlZSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9kZXItT24vY2RhZmU5MDg4NDdlMmI4ODI2OTFcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRhaW5zID0gKHZhbHVlOiBzdHJpbmcgfCBhbnkgfCBhbnlbXSwgYXR0cjogc3RyaW5nLCBzZWFyY2g6IHN0cmluZykgPT4ge1xuXG4gICAgLy8gY29uc29sZS5sb2coXCJjb250YWluc1wiLCB2YWx1ZSwgYXR0ciwgc2VhcmNoKTtcblxuICAgIGlmICghVXRpbHMuaXNBcnJheSh2YWx1ZSkgfHwgIVV0aWxzLmlzT2JqZWN0KHZhbHVlKSB8fCAhVXRpbHMuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKFV0aWxzLmlzVW5kZWZpbmVkKHNlYXJjaCkpIHtcbiAgICAgIHNlYXJjaCA9IGF0dHI7XG4gICAgfVxuXG4gICAgaWYgKFV0aWxzLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgcmV0dXJuICh2YWx1ZS5pbmRleE9mKHNlYXJjaCkgIT09IC0xKTtcbiAgICB9XG5cbiAgICBpZiAoVXRpbHMuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmICgodmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KS5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgfHwgKFV0aWxzLmlzRGVmaW5lZCh2YWx1ZVtrZXldKSAmJiBVdGlscy5pc0RlZmluZWQodmFsdWVba2V5XVthdHRyXSkpKSB7XG4gICAgICAgICAgaWYgKHZhbHVlW2tleV1bYXR0cl0gPT09IHNlYXJjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBKdXN0IGdldCB0aGUgZGlnaXRzIG9mIGEgc3RyaW5nLCB1c2VmdWwgdG8gcmVtb3ZlIHB4IGZyb20gY3NzIHZhbHVlXG4gKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExMDA2NTMvMTQ2NTkxOVxuICovXG5leHBvcnQgY29uc3QganVzdERpZ2l0cyA9IChzdHI6IHN0cmluZykgPT4ge1xuICBpZiAoVXRpbHMuaXNOdW1iZXIoc3RyKSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgY29uc3QgbnVtID0gc3RyLnJlcGxhY2UoL1teLVxcZFxcLl0vZywgJycpO1xuICBpZiAoaXNOYU4oTnVtYmVyKG51bSkpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE51bWJlcihudW0pO1xuICB9XG59O1xuXG4vKipcbiAqIFByw7xmdCBvYiBlaW5lIFphaGwgZ2VyYWRlIGlzdCBvZGVyIG5pY2h0XG4gKiBDaGVjayBpZiBhIG51bWJlciBpcyBldmVuIG9yIG5vdFxuICovXG5leHBvcnQgY29uc3QgZXZlbiA9IChudW06IG51bWJlcikgPT4ge1xuICByZXR1cm4gKG51bSAlIDIpID09PSAwO1xufTtcblxuZXhwb3J0IGNvbnN0IHVuZXZlbiA9IChudW06IG51bWJlcikgPT4ge1xuICByZXR1cm4gKG51bSAlIDIpICE9PSAwO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBhIHN0cmluZ1xuICovXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gVXRpbHMuaXNTdHJpbmcoc3RyKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgYSBzdHJpbmcgYW5kIG5vdCBlbXB0eVxuICovXG5leHBvcnQgY29uc3QgZmlsbGVkU3RyaW5nID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIFV0aWxzLmlzU3RyaW5nKHN0cikgJiYgIWVtcHR5KHN0ci5yZXBsYWNlKC9cXHMvZywgJycpKTtcbn07XG5cbi8vIEFkZGl0aW9uYWwgZm9ybWF0dGVycyBmb3IgVGV4dGlseXplXG5cbi8qKlxuICogZ3JlYXRlc3QgY29tbW9uIGRpdmlzb3IgKEdDRCkgdXNlZnVsIHRvIGNhbGN1bGF0ZSB0aGUgcmF0aW9cbiAqIEBzZWUgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzExODY0NjUvMTQ2NTkxOVxuICovXG5leHBvcnQgY29uc3QgZ2NkID0gKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgcmV0dXJuIChiID09PSAwKSA/IGEgOiBnY2QoYiwgYSAlIGIpO1xufTtcblxuLy8gRGF0ZSBmb3JtYXR0ZXJzXG4vLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGlldXJpb2xvL3JpdmV0c2pzLXN0ZGxpYi9ibG9iL21hc3Rlci9zcmMvcml2ZXRzc3RkbGliLmpzXG5cbi8qIGRhdGUgcyAqL1xuXG4vLyBleHBvcnQgY29uc3QgZGF0ZSA9ICh0YXJnZXQsIGZvcm1hdCkgPT4ge1xuLy8gICByZXR1cm4gbW9tZW50KHRhcmdldCkuZm9ybWF0KGZvcm1hdCB8fCAnREQuTU0uWVlZWScpO1xuLy8gfTtcblxuLy8gZXhwb3J0IGNvbnN0IHRpbWUgPSAodGFyZ2V0LCBmb3JtYXQpID0+IHtcbi8vICAgcmV0dXJuIG1vbWVudCh0YXJnZXQpLmZvcm1hdChmb3JtYXQgfHwgJ0hIOm1tJyk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgZGF0ZXRpbWUgPSAodGFyZ2V0LCBmb3JtYXQpID0+IHtcbi8vICAgcmV0dXJuIG1vbWVudCh0YXJnZXQpLmZvcm1hdChmb3JtYXQpO1xuLy8gfTtcblxuLy8gZXhwb3J0IGNvbnN0IHRvVGltZXN0YW1wID0gKHRhcmdldCkgPT4ge1xuLy8gICByZXR1cm4gbW9tZW50KHRhcmdldCkuZm9ybWF0KCdYJyk7XG4vLyB9O1xuXG4vLyBleHBvcnQgY29uc3QgdG9EYXRlID0gKHRhcmdldCkgPT4ge1xuLy8gICByZXR1cm4gbW9tZW50LnVuaXgodGFyZ2V0KS50b0RhdGUoKTtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCB0b01vbWVudCA9ICh0YXJnZXQpID0+IHtcbi8vICAgcmV0dXJuIG1vbWVudCh0YXJnZXQpO1xuLy8gfTtcblxuLyoqXG4gKiBHZXQgdGhlIGR1cmF0aW9uIGJldHdlZW4gdHdvIGRhdGVzXG4gKiBAZXhhbXBsZSAge3N0YXJ0QXQgfCBkdXJhdGlvbiBlbmRBdCB8IGFzSG91cnMgfVxuICovXG4vLyBleHBvcnQgY29uc3QgZHVyYXRpb24gPSAoc3RhcnQsIGVuZCkgPT4ge1xuLy8gICByZXR1cm4gbW9tZW50LmR1cmF0aW9uKG1vbWVudChlbmQpLmRpZmYoc3RhcnQpKTtcbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCBhc0hvdXJzID0gKGRhdGUpID0+IHtcbi8vICAgcmV0dXJuIGRhdGUuYXNIb3VycygpO1xuLy8gfTtcblxuLyoqXG4gKiBUaGUgZGF0ZSBmb3JtYXR0ZXIgcmV0dXJucyBhIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBhY2NvcmRpbmcgdG8gdGhlIG1vbWVudC5qc1xuICogZm9ybWF0dGluZyBzeW50YXguXG4gKlxuICogYGBgaHRtbFxuICogPHNwYW4gcnYtdmFsdWU9XCJtb2RlbDpkYXRlIHwgZGF0ZSAnZGRkZCwgTU1NTSBEbydcIj48L3NwYW4+XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9kaXNwbGF5aW5nfSBmb3IgZm9ybWF0IG9wdGlvbnMuXG4gKi9cbi8vIGV4cG9ydCBjb25zdCBkYXRlRm9ybWF0ID0gKHRhcmdldCwgdmFsKSA9PiB7XG4vLyAgIHJldHVybiBtb21lbnQodGFyZ2V0KS5mb3JtYXQodmFsKTtcbi8vIH07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPG5hdi1pdGVtcyBsaW5rbGlzdD1saW5rbGlzdCBwaWxscz1mYWxzZSB2ZXJ0aWNhbD10cnVlPjwvbmF2LWl0ZW1zPiA8Zm9vdGVyIGNsYXNzPWZvb3Rlcj4gPGRpdiBydi1hdXRvc2Nyb2xsPSd7XFxcImFuZ2xlXFxcIjogXFxcImhvcml6b250YWxcXFwiLCBcXFwianVtcHNcXFwiOiAxMCwgXFxcImRlbGF5XFxcIjogMjAwLCBcXFwid2lkdGhcXFwiOlxcXCIxMDB2d1xcXCJ9Jz4gPGRpdiBydi1lYWNoLWluZGV4PVswLDEsMiwzLDQsNSw2LDcsOCw5LDEwXSBjbGFzcz1cXFwiYnJhbmQtbGlnaHQgcHgtM1xcXCIgc3R5bGU9cG9pbnRlci1ldmVudHM6YWxsPiA8ZGl2IGNsYXNzPVxcXCJmb250LXdlaWdodC1ib2xkIGJyYW5kLXRleHRcXFwiPkFydDwvZGl2PiA8aW1nIGNsYXNzPWJyYW5kLWltYWdlIHJ2LXNyYz1cXFwic3lzdGVtLmFzc2V0cyB8IGdldCAnaWNvbl9oZWFydF9weC5wbmcnXFxcIiBhbHQ9XFxcIkFydCArIENvZGUgU3R1ZGlvXFxcIj4gPGRpdiBjbGFzcz1cXFwiZm9udC13ZWlnaHQtYm9sZCBicmFuZC10ZXh0XFxcIj5Db2RlPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZvbnQtd2VpZ2h0LW5vcm1hbCBicmFuZC10ZXh0IGhpZGRlbi14cy1kb3duXFxcIj4mbmJzcDtTdHVkaW88L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IHJ2LWF1dG9zY3JvbGw9J3tcXFwiYW5nbGVcXFwiOiBcXFwiaG9yaXpvbnRhbFxcXCIsIFxcXCJkaXJlY3Rpb25cXFwiOi0xLCBcXFwianVtcHNcXFwiOiAxMCwgXFxcImRlbGF5XFxcIjogMzAwLCBcXFwid2lkdGhcXFwiOlxcXCIxMDB2d1xcXCIgfSc+IDxuYXYtaXRlbXMgbGlua2xpc3Q9c3lzdGVtLmxpbmtsaXN0cy5mb290ZXIgcGlsbHM9ZmFsc2UgdmVydGljYWw9ZmFsc2U+PC9uYXYtaXRlbXM+IDxuYXYtaXRlbXMgbGlua2xpc3Q9c3lzdGVtLmxpbmtsaXN0cy5mb290ZXIgcGlsbHM9ZmFsc2UgdmVydGljYWw9ZmFsc2U+PC9uYXYtaXRlbXM+IDwvZGl2PiA8L2Zvb3Rlcj5cIjsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9jbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9O1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVtaXR0ZXIuXG4gKiBAY2xhc3NcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgRW1pdHRlci5cbiAqIEBleGFtcGxlXG4gKiAvLyBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEVtaXR0ZXIuXG4gKiB2YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2VtaXR0ZXInKTtcbiAqXG4gKiB2YXIgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XG4gKi9cblxudmFyIEVtaXR0ZXIgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBFbWl0dGVyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBFbWl0dGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdG8gdGhlIGNvbGxlY3Rpb24gZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gICAqIEBtZW1iZXJvZiEgRW1pdHRlci5wcm90b3R5cGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCAtIFRoZSBldmVudCBuYW1lLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIEEgbGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIEVtaXR0ZXIuXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIEFkZCBhbiBldmVudCBsaXN0ZW5lciB0byBcImZvb1wiIGV2ZW50LlxuICAgKiBlbWl0dGVyLm9uKCdmb28nLCBsaXN0ZW5lcik7XG4gICAqL1xuXG4gIEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgLy8gVXNlIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gb3IgY3JlYXRlIGl0LlxuICAgIHRoaXMuX2V2ZW50Q29sbGVjdGlvbiA9IHRoaXMuX2V2ZW50Q29sbGVjdGlvbiB8fCB7fTtcblxuICAgIC8vIFVzZSB0aGUgY3VycmVudCBjb2xsZWN0aW9uIG9mIGFuIGV2ZW50IG9yIGNyZWF0ZSBpdC5cbiAgICB0aGlzLl9ldmVudENvbGxlY3Rpb25bZXZlbnRdID0gdGhpcy5fZXZlbnRDb2xsZWN0aW9uW2V2ZW50XSB8fCBbXTtcblxuICAgIC8vIEFwcGVuZHMgdGhlIGxpc3RlbmVyIGludG8gdGhlIGNvbGxlY3Rpb24gb2YgdGhlIGdpdmVuIGV2ZW50XG4gICAgdGhpcy5fZXZlbnRDb2xsZWN0aW9uW2V2ZW50XS5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGRzIGEgbGlzdGVuZXIgdG8gdGhlIGNvbGxlY3Rpb24gZm9yIHRoZSBzcGVjaWZpZWQgZXZlbnQgdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UuXG4gICAqIEBtZW1iZXJvZiEgRW1pdHRlci5wcm90b3R5cGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCAtIFRoZSBldmVudCBuYW1lLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIEEgbGlzdGVuZXIgZnVuY3Rpb24gdG8gYWRkLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIEVtaXR0ZXIuXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFdpbGwgYWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gXCJmb29cIiBldmVudCBvbmNlLlxuICAgKiBlbWl0dGVyLm9uY2UoJ2ZvbycsIGxpc3RlbmVyKTtcbiAgICovXG5cbiAgRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gZm4oKSB7XG4gICAgICBzZWxmLm9mZihldmVudCwgZm4pO1xuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBmbi5saXN0ZW5lciA9IGxpc3RlbmVyO1xuXG4gICAgdGhpcy5vbihldmVudCwgZm4pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSBjb2xsZWN0aW9uIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LlxuICAgKiBAbWVtYmVyb2YhIEVtaXR0ZXIucHJvdG90eXBlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBBIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZS5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBFbWl0dGVyLlxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBSZW1vdmUgYSBnaXZlbiBsaXN0ZW5lci5cbiAgICogZW1pdHRlci5vZmYoJ2ZvbycsIGxpc3RlbmVyKTtcbiAgICovXG5cbiAgRW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuXG4gICAgdmFyIGxpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuICAgIC8vIERlZmluZXMgbGlzdGVuZXJzIHZhbHVlLlxuICAgIGlmICghdGhpcy5fZXZlbnRDb2xsZWN0aW9uIHx8ICEobGlzdGVuZXJzID0gdGhpcy5fZXZlbnRDb2xsZWN0aW9uW2V2ZW50XSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbiwgaSkge1xuICAgICAgaWYgKGZuID09PSBsaXN0ZW5lciB8fCBmbi5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgLy8gUmVtb3ZlcyB0aGUgZ2l2ZW4gbGlzdGVuZXIuXG4gICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBSZW1vdmVzIGFuIGVtcHR5IGV2ZW50IGNvbGxlY3Rpb24uXG4gICAgaWYgKGxpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudENvbGxlY3Rpb25bZXZlbnRdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGVhY2ggaXRlbSBpbiB0aGUgbGlzdGVuZXIgY29sbGVjdGlvbiBpbiBvcmRlciB3aXRoIHRoZSBzcGVjaWZpZWQgZGF0YS5cbiAgICogQG1lbWJlcm9mISBFbWl0dGVyLnByb3RvdHlwZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHlvdSB3YW50IHRvIGVtaXQuXG4gICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBkYXRhIC0gRGF0YSB0byBwYXNzIHRvIHRoZSBsaXN0ZW5lcnMuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gaW5zdGFuY2Ugb2YgRW1pdHRlci5cbiAgICogQGV4YW1wbGVcbiAgICogLy8gRW1pdHMgdGhlIFwiZm9vXCIgZXZlbnQgd2l0aCAncGFyYW0xJyBhbmQgJ3BhcmFtMicgYXMgYXJndW1lbnRzLlxuICAgKiBlbWl0dGVyLmVtaXQoJ2ZvbycsICdwYXJhbTEnLCAncGFyYW0yJyk7XG4gICAqL1xuXG4gIEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuICAgIC8vIERlZmluZXMgbGlzdGVuZXJzIHZhbHVlLlxuICAgIGlmICghdGhpcy5fZXZlbnRDb2xsZWN0aW9uIHx8ICEobGlzdGVuZXJzID0gdGhpcy5fZXZlbnRDb2xsZWN0aW9uW2V2ZW50XSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIENsb25lIGxpc3RlbmVyc1xuICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5zbGljZSgwKTtcblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KF90aGlzLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBFbWl0dGVyO1xufSkoKTtcblxuLyoqXG4gKiBFeHBvcnRzIEVtaXR0ZXJcbiAqL1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBFbWl0dGVyO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuICAgIH07XG59KCkpO1xuXG5mdW5jdGlvbiBkZWNvdXBsZShub2RlLCBldmVudCwgZm4pIHtcbiAgdmFyIGV2ZSxcbiAgICAgIHRyYWNraW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2FwdHVyZUV2ZW50KGUpIHtcbiAgICBldmUgPSBlO1xuICAgIHRyYWNrKCk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFjaygpIHtcbiAgICBpZiAoIXRyYWNraW5nKSB7XG4gICAgICByZXF1ZXN0QW5pbUZyYW1lKHVwZGF0ZSk7XG4gICAgICB0cmFja2luZyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIGZuLmNhbGwobm9kZSwgZXZlKTtcbiAgICB0cmFja2luZyA9IGZhbHNlO1xuICB9XG5cbiAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYXB0dXJlRXZlbnQsIGZhbHNlKTtcblxuICByZXR1cm4gY2FwdHVyZUV2ZW50O1xufVxuXG4vKipcbiAqIEV4cG9zZSBkZWNvdXBsZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGRlY291cGxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xudmFyIGRlY291cGxlID0gcmVxdWlyZSgnZGVjb3VwbGUnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZW1pdHRlcicpO1xuXG4vKipcbiAqIFByaXZhdGVzXG4gKi9cbnZhciBzY3JvbGxUaW1lb3V0O1xudmFyIHNjcm9sbGluZyA9IGZhbHNlO1xudmFyIGRvYyA9IHdpbmRvdy5kb2N1bWVudDtcbnZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbnZhciBtc1BvaW50ZXJTdXBwb3J0ZWQgPSB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQ7XG52YXIgdG91Y2ggPSB7XG4gICdzdGFydCc6IG1zUG9pbnRlclN1cHBvcnRlZCA/ICdNU1BvaW50ZXJEb3duJyA6ICd0b3VjaHN0YXJ0JyxcbiAgJ21vdmUnOiBtc1BvaW50ZXJTdXBwb3J0ZWQgPyAnTVNQb2ludGVyTW92ZScgOiAndG91Y2htb3ZlJyxcbiAgJ2VuZCc6IG1zUG9pbnRlclN1cHBvcnRlZCA/ICdNU1BvaW50ZXJVcCcgOiAndG91Y2hlbmQnXG59O1xudmFyIHByZWZpeCA9IChmdW5jdGlvbiBwcmVmaXgoKSB7XG4gIHZhciByZWdleCA9IC9eKFdlYmtpdHxLaHRtbHxNb3p8bXN8TykoPz1bQS1aXSkvO1xuICB2YXIgc3R5bGVEZWNsYXJhdGlvbiA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF0uc3R5bGU7XG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGVEZWNsYXJhdGlvbikge1xuICAgIGlmIChyZWdleC50ZXN0KHByb3ApKSB7XG4gICAgICByZXR1cm4gJy0nICsgcHJvcC5tYXRjaChyZWdleClbMF0udG9Mb3dlckNhc2UoKSArICctJztcbiAgICB9XG4gIH1cbiAgLy8gTm90aGluZyBmb3VuZCBzbyBmYXI/IFdlYmtpdCBkb2VzIG5vdCBlbnVtZXJhdGUgb3ZlciB0aGUgQ1NTIHByb3BlcnRpZXMgb2YgdGhlIHN0eWxlIG9iamVjdC5cbiAgLy8gSG93ZXZlciAocHJvcCBpbiBzdHlsZSkgcmV0dXJucyB0aGUgY29ycmVjdCB2YWx1ZSwgc28gd2UnbGwgaGF2ZSB0byB0ZXN0IGZvclxuICAvLyB0aGUgcHJlY2VuY2Ugb2YgYSBzcGVjaWZpYyBwcm9wZXJ0eVxuICBpZiAoJ1dlYmtpdE9wYWNpdHknIGluIHN0eWxlRGVjbGFyYXRpb24pIHsgcmV0dXJuICctd2Via2l0LSc7IH1cbiAgaWYgKCdLaHRtbE9wYWNpdHknIGluIHN0eWxlRGVjbGFyYXRpb24pIHsgcmV0dXJuICcta2h0bWwtJzsgfVxuICByZXR1cm4gJyc7XG59KCkpO1xuZnVuY3Rpb24gZXh0ZW5kKGRlc3RpbmF0aW9uLCBmcm9tKSB7XG4gIGZvciAodmFyIHByb3AgaW4gZnJvbSkge1xuICAgIGlmIChmcm9tW3Byb3BdKSB7XG4gICAgICBkZXN0aW5hdGlvbltwcm9wXSA9IGZyb21bcHJvcF07XG4gICAgfVxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cbmZ1bmN0aW9uIGluaGVyaXRzKGNoaWxkLCB1YmVyKSB7XG4gIGNoaWxkLnByb3RvdHlwZSA9IGV4dGVuZChjaGlsZC5wcm90b3R5cGUgfHwge30sIHViZXIucHJvdG90eXBlKTtcbn1cbmZ1bmN0aW9uIGhhc0lnbm9yZWRFbGVtZW50cyhlbCkge1xuICB3aGlsZSAoZWwucGFyZW50Tm9kZSkge1xuICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2xpZGVvdXQtaWdub3JlJykgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFNsaWRlb3V0IGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFNsaWRlb3V0KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gU2V0cyBkZWZhdWx0IHZhbHVlc1xuICB0aGlzLl9zdGFydE9mZnNldFggPSAwO1xuICB0aGlzLl9jdXJyZW50T2Zmc2V0WCA9IDA7XG4gIHRoaXMuX29wZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5fbW92ZWQgPSBmYWxzZTtcbiAgdGhpcy5fb3BlbmVkID0gZmFsc2U7XG4gIHRoaXMuX3ByZXZlbnRPcGVuID0gZmFsc2U7XG4gIHRoaXMuX3RvdWNoID0gb3B0aW9ucy50b3VjaCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMudG91Y2ggJiYgdHJ1ZTtcbiAgdGhpcy5fc2lkZSA9IG9wdGlvbnMuc2lkZSB8fCAnbGVmdCc7XG5cbiAgLy8gU2V0cyBwYW5lbFxuICB0aGlzLnBhbmVsID0gb3B0aW9ucy5wYW5lbDtcbiAgdGhpcy5tZW51ID0gb3B0aW9ucy5tZW51O1xuXG4gIC8vIFNldHMgIGNsYXNzbmFtZXNcbiAgaWYgKCF0aGlzLnBhbmVsLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVvdXQtcGFuZWwnKSkge1xuICAgIHRoaXMucGFuZWwuY2xhc3NMaXN0LmFkZCgnc2xpZGVvdXQtcGFuZWwnKTtcbiAgfVxuICBpZiAoIXRoaXMucGFuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZW91dC1wYW5lbC0nICsgdGhpcy5fc2lkZSkpIHtcbiAgICB0aGlzLnBhbmVsLmNsYXNzTGlzdC5hZGQoJ3NsaWRlb3V0LXBhbmVsLScgKyB0aGlzLl9zaWRlKTtcbiAgfVxuICBpZiAoIXRoaXMubWVudS5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlb3V0LW1lbnUnKSkge1xuICAgIHRoaXMubWVudS5jbGFzc0xpc3QuYWRkKCdzbGlkZW91dC1tZW51Jyk7XG4gIH1cbiAgaWYgKCF0aGlzLm1lbnUuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZW91dC1tZW51LScgKyB0aGlzLl9zaWRlKSkge1xuICAgIHRoaXMubWVudS5jbGFzc0xpc3QuYWRkKCdzbGlkZW91dC1tZW51LScgKyB0aGlzLl9zaWRlKTtcbiAgfVxuXG4gIC8vIFNldHMgb3B0aW9uc1xuICB0aGlzLl9meCA9IG9wdGlvbnMuZnggfHwgJ2Vhc2UnO1xuICB0aGlzLl9kdXJhdGlvbiA9IHBhcnNlSW50KG9wdGlvbnMuZHVyYXRpb24sIDEwKSB8fCAzMDA7XG4gIHRoaXMuX3RvbGVyYW5jZSA9IHBhcnNlSW50KG9wdGlvbnMudG9sZXJhbmNlLCAxMCkgfHwgNzA7XG4gIHRoaXMuX3BhZGRpbmcgPSB0aGlzLl90cmFuc2xhdGVUbyA9IHBhcnNlSW50KG9wdGlvbnMucGFkZGluZywgMTApIHx8IDI1NjtcbiAgdGhpcy5fb3JpZW50YXRpb24gPSB0aGlzLl9zaWRlID09PSAncmlnaHQnID8gLTEgOiAxO1xuICB0aGlzLl90cmFuc2xhdGVUbyAqPSB0aGlzLl9vcmllbnRhdGlvbjtcblxuICAvLyBJbml0IHRvdWNoIGV2ZW50c1xuICBpZiAodGhpcy5fdG91Y2gpIHtcbiAgICB0aGlzLl9pbml0VG91Y2hFdmVudHMoKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gRW1pdHRlclxuICovXG5pbmhlcml0cyhTbGlkZW91dCwgRW1pdHRlcik7XG5cbi8qKlxuICogT3BlbnMgdGhlIHNsaWRlb3V0IG1lbnUuXG4gKi9cblNsaWRlb3V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5lbWl0KCdiZWZvcmVvcGVuJyk7XG4gIGlmICghaHRtbC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlb3V0LW9wZW4nKSkge1xuICAgIGh0bWwuY2xhc3NMaXN0LmFkZCgnc2xpZGVvdXQtb3BlbicpO1xuICB9XG4gIHRoaXMuX3NldFRyYW5zaXRpb24oKTtcbiAgdGhpcy5fdHJhbnNsYXRlWFRvKHRoaXMuX3RyYW5zbGF0ZVRvKTtcbiAgdGhpcy5fb3BlbmVkID0gdHJ1ZTtcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLnBhbmVsLnN0eWxlLnRyYW5zaXRpb24gPSBzZWxmLnBhbmVsLnN0eWxlWyctd2Via2l0LXRyYW5zaXRpb24nXSA9ICcnO1xuICAgIHNlbGYuZW1pdCgnb3BlbicpO1xuICB9LCB0aGlzLl9kdXJhdGlvbiArIDUwKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb3NlcyBzbGlkZW91dCBtZW51LlxuICovXG5TbGlkZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAoIXRoaXMuaXNPcGVuKCkgJiYgIXRoaXMuX29wZW5pbmcpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0aGlzLmVtaXQoJ2JlZm9yZWNsb3NlJyk7XG4gIHRoaXMuX3NldFRyYW5zaXRpb24oKTtcbiAgdGhpcy5fdHJhbnNsYXRlWFRvKDApO1xuICB0aGlzLl9vcGVuZWQgPSBmYWxzZTtcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBodG1sLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlb3V0LW9wZW4nKTtcbiAgICBzZWxmLnBhbmVsLnN0eWxlLnRyYW5zaXRpb24gPSBzZWxmLnBhbmVsLnN0eWxlWyctd2Via2l0LXRyYW5zaXRpb24nXSA9IHNlbGYucGFuZWwuc3R5bGVbcHJlZml4ICsgJ3RyYW5zZm9ybSddID0gc2VsZi5wYW5lbC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlJyk7XG4gIH0sIHRoaXMuX2R1cmF0aW9uICsgNTApO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogVG9nZ2xlcyAob3Blbi9jbG9zZSkgc2xpZGVvdXQgbWVudS5cbiAqL1xuU2xpZGVvdXQucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5pc09wZW4oKSA/IHRoaXMuY2xvc2UoKSA6IHRoaXMub3BlbigpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNsaWRlb3V0IGlzIGN1cnJlbnRseSBvcGVuLCBhbmQgZmFsc2UgaWYgaXQgaXMgY2xvc2VkLlxuICovXG5TbGlkZW91dC5wcm90b3R5cGUuaXNPcGVuID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9vcGVuZWQ7XG59O1xuXG4vKipcbiAqIFRyYW5zbGF0ZXMgcGFuZWwgYW5kIHVwZGF0ZXMgY3VycmVudE9mZnNldCB3aXRoIGEgZ2l2ZW4gWCBwb2ludFxuICovXG5TbGlkZW91dC5wcm90b3R5cGUuX3RyYW5zbGF0ZVhUbyA9IGZ1bmN0aW9uKHRyYW5zbGF0ZVgpIHtcbiAgdGhpcy5fY3VycmVudE9mZnNldFggPSB0cmFuc2xhdGVYO1xuICB0aGlzLnBhbmVsLnN0eWxlW3ByZWZpeCArICd0cmFuc2Zvcm0nXSA9IHRoaXMucGFuZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoJyArIHRyYW5zbGF0ZVggKyAncHgpJztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAqL1xuU2xpZGVvdXQucHJvdG90eXBlLl9zZXRUcmFuc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucGFuZWwuc3R5bGVbcHJlZml4ICsgJ3RyYW5zaXRpb24nXSA9IHRoaXMucGFuZWwuc3R5bGUudHJhbnNpdGlvbiA9IHByZWZpeCArICd0cmFuc2Zvcm0gJyArIHRoaXMuX2R1cmF0aW9uICsgJ21zICcgKyB0aGlzLl9meDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIHRvdWNoIGV2ZW50XG4gKi9cblNsaWRlb3V0LnByb3RvdHlwZS5faW5pdFRvdWNoRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvKipcbiAgICogRGVjb3VwbGUgc2Nyb2xsIGV2ZW50XG4gICAqL1xuICB0aGlzLl9vblNjcm9sbEZuID0gZGVjb3VwbGUoZG9jLCAnc2Nyb2xsJywgZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFzZWxmLl9tb3ZlZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHNjcm9sbFRpbWVvdXQpO1xuICAgICAgc2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgIHNjcm9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBzY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgIH0sIDI1MCk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUHJldmVudHMgdG91Y2htb3ZlIGV2ZW50IGlmIHNsaWRlb3V0IGlzIG1vdmluZ1xuICAgKi9cbiAgdGhpcy5fcHJldmVudE1vdmUgPSBmdW5jdGlvbihldmUpIHtcbiAgICBpZiAoc2VsZi5fbW92ZWQpIHtcbiAgICAgIGV2ZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfTtcblxuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaC5tb3ZlLCB0aGlzLl9wcmV2ZW50TW92ZSk7XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB2YWx1ZXMgb24gdG91Y2hzdGFydFxuICAgKi9cbiAgdGhpcy5fcmVzZXRUb3VjaEZuID0gZnVuY3Rpb24oZXZlKSB7XG4gICAgaWYgKHR5cGVvZiBldmUudG91Y2hlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWxmLl9tb3ZlZCA9IGZhbHNlO1xuICAgIHNlbGYuX29wZW5pbmcgPSBmYWxzZTtcbiAgICBzZWxmLl9zdGFydE9mZnNldFggPSBldmUudG91Y2hlc1swXS5wYWdlWDtcbiAgICBzZWxmLl9wcmV2ZW50T3BlbiA9ICghc2VsZi5fdG91Y2ggfHwgKCFzZWxmLmlzT3BlbigpICYmIHNlbGYubWVudS5jbGllbnRXaWR0aCAhPT0gMCkpO1xuICB9O1xuXG4gIHRoaXMucGFuZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaC5zdGFydCwgdGhpcy5fcmVzZXRUb3VjaEZuKTtcblxuICAvKipcbiAgICogUmVzZXRzIHZhbHVlcyBvbiB0b3VjaGNhbmNlbFxuICAgKi9cbiAgdGhpcy5fb25Ub3VjaENhbmNlbEZuID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5fbW92ZWQgPSBmYWxzZTtcbiAgICBzZWxmLl9vcGVuaW5nID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5wYW5lbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRoaXMuX29uVG91Y2hDYW5jZWxGbik7XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgc2xpZGVvdXQgb24gdG91Y2hlbmRcbiAgICovXG4gIHRoaXMuX29uVG91Y2hFbmRGbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLl9tb3ZlZCkge1xuICAgICAgc2VsZi5lbWl0KCd0cmFuc2xhdGVlbmQnKTtcbiAgICAgIChzZWxmLl9vcGVuaW5nICYmIE1hdGguYWJzKHNlbGYuX2N1cnJlbnRPZmZzZXRYKSA+IHNlbGYuX3RvbGVyYW5jZSkgPyBzZWxmLm9wZW4oKSA6IHNlbGYuY2xvc2UoKTtcbiAgICB9XG4gICAgc2VsZi5fbW92ZWQgPSBmYWxzZTtcbiAgfTtcblxuICB0aGlzLnBhbmVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2guZW5kLCB0aGlzLl9vblRvdWNoRW5kRm4pO1xuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIHBhbmVsIG9uIHRvdWNobW92ZVxuICAgKi9cbiAgdGhpcy5fb25Ub3VjaE1vdmVGbiA9IGZ1bmN0aW9uKGV2ZSkge1xuICAgIGlmIChcbiAgICAgIHNjcm9sbGluZyB8fFxuICAgICAgc2VsZi5fcHJldmVudE9wZW4gfHxcbiAgICAgIHR5cGVvZiBldmUudG91Y2hlcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgIGhhc0lnbm9yZWRFbGVtZW50cyhldmUudGFyZ2V0KVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkaWZfeCA9IGV2ZS50b3VjaGVzWzBdLmNsaWVudFggLSBzZWxmLl9zdGFydE9mZnNldFg7XG4gICAgdmFyIHRyYW5zbGF0ZVggPSBzZWxmLl9jdXJyZW50T2Zmc2V0WCA9IGRpZl94O1xuXG4gICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpID4gc2VsZi5fcGFkZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyhkaWZfeCkgPiAyMCkge1xuXG4gICAgICBzZWxmLl9vcGVuaW5nID0gdHJ1ZTtcblxuICAgICAgdmFyIG9yaWVudGVkX2RpZl94ID0gZGlmX3ggKiBzZWxmLl9vcmllbnRhdGlvbjtcblxuICAgICAgaWYgKHNlbGYuX29wZW5lZCAmJiBvcmllbnRlZF9kaWZfeCA+IDAgfHwgIXNlbGYuX29wZW5lZCAmJiBvcmllbnRlZF9kaWZfeCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNlbGYuX21vdmVkKSB7XG4gICAgICAgIHNlbGYuZW1pdCgndHJhbnNsYXRlc3RhcnQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9yaWVudGVkX2RpZl94IDw9IDApIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IGRpZl94ICsgc2VsZi5fcGFkZGluZyAqIHNlbGYuX29yaWVudGF0aW9uO1xuICAgICAgICBzZWxmLl9vcGVuaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghKHNlbGYuX21vdmVkICYmIGh0bWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbGlkZW91dC1vcGVuJykpKSB7XG4gICAgICAgIGh0bWwuY2xhc3NMaXN0LmFkZCgnc2xpZGVvdXQtb3BlbicpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLnBhbmVsLnN0eWxlW3ByZWZpeCArICd0cmFuc2Zvcm0nXSA9IHNlbGYucGFuZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVgoJyArIHRyYW5zbGF0ZVggKyAncHgpJztcbiAgICAgIHNlbGYuZW1pdCgndHJhbnNsYXRlJywgdHJhbnNsYXRlWCk7XG4gICAgICBzZWxmLl9tb3ZlZCA9IHRydWU7XG4gICAgfVxuXG4gIH07XG5cbiAgdGhpcy5wYW5lbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoLm1vdmUsIHRoaXMuX29uVG91Y2hNb3ZlRm4pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFbmFibGUgb3BlbmluZyB0aGUgc2xpZGVvdXQgdmlhIHRvdWNoIGV2ZW50cy5cbiAqL1xuU2xpZGVvdXQucHJvdG90eXBlLmVuYWJsZVRvdWNoID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX3RvdWNoID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIERpc2FibGUgb3BlbmluZyB0aGUgc2xpZGVvdXQgdmlhIHRvdWNoIGV2ZW50cy5cbiAqL1xuU2xpZGVvdXQucHJvdG90eXBlLmRpc2FibGVUb3VjaCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl90b3VjaCA9IGZhbHNlO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRGVzdHJveSBhbiBpbnN0YW5jZSBvZiBzbGlkZW91dC5cbiAqL1xuU2xpZGVvdXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgLy8gQ2xvc2UgYmVmb3JlIGNsZWFuXG4gIHRoaXMuY2xvc2UoKTtcblxuICAvLyBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzXG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoLm1vdmUsIHRoaXMuX3ByZXZlbnRNb3ZlKTtcbiAgdGhpcy5wYW5lbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoLnN0YXJ0LCB0aGlzLl9yZXNldFRvdWNoRm4pO1xuICB0aGlzLnBhbmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5fb25Ub3VjaENhbmNlbEZuKTtcbiAgdGhpcy5wYW5lbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoLmVuZCwgdGhpcy5fb25Ub3VjaEVuZEZuKTtcbiAgdGhpcy5wYW5lbC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoLm1vdmUsIHRoaXMuX29uVG91Y2hNb3ZlRm4pO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fb25TY3JvbGxGbik7XG5cbiAgLy8gUmVtb3ZlIG1ldGhvZHNcbiAgdGhpcy5vcGVuID0gdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKCkge307XG5cbiAgLy8gUmV0dXJuIHRoZSBpbnN0YW5jZSBzbyBpdCBjYW4gYmUgZWFzaWx5IGRlcmVmZXJlbmNlZFxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRXhwb3NlIFNsaWRlb3V0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gU2xpZGVvdXQ7XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBTbGlkZW91dCBmcm9tICdzbGlkZW91dCc7XG5pbXBvcnQgeyBJQ29tcG9uZW50IH0gZnJvbSAndGlueWJpbmQnO1xuaW1wb3J0IHsgRGlzcGF0Y2hlciB9IGZyb20gJy4uLy4uL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLy4uLy4uL1V0aWxzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3NsaWRlb3V0LmNvbXBvbmVudC5odG1sJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogaW50ZXJmYWNlLW5hbWVcbiAgaW50ZXJmYWNlIFdpbmRvdyB7IG1vZGVsOiBhbnk7IH1cbn1cblxuLyoqXG4gKiBzbGlkZW91dFxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFuZ28vc2xpZGVvdXRcbiAqL1xuZXhwb3J0IGNvbnN0IHNsaWRlb3V0Q29tcG9uZW50ID0gKGRpc3BhdGNoZXI6IERpc3BhdGNoZXIpID0+IHtcblxuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdyaXZldHM6c2xpZGVvdXQnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnQgPSB7XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfSxcblxuICAgIGluaXRpYWxpemUoZWw6IEhUTUxFbGVtZW50LCBkYXRhOiBhbnkpIHtcbiAgICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICAgIHNjb3BlLmxpbmtsaXN0ID0gd2luZG93Lm1vZGVsLnN5c3RlbS5saW5rbGlzdHNbJ21haW4tbWVudSddOyAvLyBkYXRhLmxpbmtsaXN0O1xuICAgICAgc2NvcGUuc3lzdGVtID0gd2luZG93Lm1vZGVsLnN5c3RlbTtcblxuICAgICAgZGVidWcoJ2luaXRpYWxpemUnLCB0aGlzKTtcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgZHVyYXRpb246IDgwMCxcbiAgICAgICAgICBtZW51OiBlbCxcbiAgICAgICAgICBwYWRkaW5nOiBVdGlscy5nZXRWaWV3cG9ydERpbWVuc2lvbnMoKS53LFxuICAgICAgICAgIHBhbmVsOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xpZGVvdXQtcGFuZWwnKSxcbiAgICAgICAgICBzaWRlOiAoJ3JpZ2h0JyBhcyAncmlnaHQnIHwgJ2xlZnQnICksXG4gICAgICAgICAgdG9sZXJhbmNlOiA3MCxcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgc2xpZGVvdXQgPSBuZXcgU2xpZGVvdXQob3B0aW9ucyk7XG4gICAgICAgIGRpc3BhdGNoZXIudHJpZ2dlcignc2xpZGVvdXQuY29tcG9uZW50OmluaXRpYWxpemUnLCBzbGlkZW91dCk7XG5cbiAgICAgICAgLy8gV09SS0FST1VORCBmb3Igdmlld3BvcnQgd2lkdGhcbiAgICAgICAgJCggd2luZG93ICkucmVzaXplKCgpID0+IHtcbiAgICAgICAgICBpZiAoIShzbGlkZW91dCBhcyBhbnkpLl9vcGVuZWQpIHtcbiAgICAgICAgICAgIHNsaWRlb3V0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIG9wdGlvbnMucGFkZGluZyA9IFV0aWxzLmdldFZpZXdwb3J0RGltZW5zaW9ucygpLnc7XG4gICAgICAgICAgICBzbGlkZW91dCA9IG5ldyBTbGlkZW91dChvcHRpb25zKTtcbiAgICAgICAgICAgIGRpc3BhdGNoZXIudHJpZ2dlcignc2xpZGVvdXQuY29tcG9uZW50OmluaXRpYWxpemUnLCBzbGlkZW91dCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVidWcoJ3Jlc2l6ZScsIHNsaWRlb3V0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGlzcGF0Y2hlci5vbignaW5pdFN0YXRlQ2hhbmdlJywgKCkgPT4ge1xuICAgICAgICAgIHNsaWRlb3V0LmNsb3NlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNsaWRlb3V0Lm9uKCdvcGVuJywgKCkgPT4ge1xuICAgICAgICAgIGRlYnVnKCdvcGVuJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9LCAwKTtcblxuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiIDxuYXYgY2xhc3M9bmF2IHJ2LWFkZC1jbGFzcz1saW5rbGlzdC5oYW5kbGUgcnYtY2xhc3MtbmF2LXBpbGxzPXBpbGxzIHJ2LWNsYXNzLWZsZXgtY29sdW1uPXZlcnRpY2FsPiA8ZGl2IGNsYXNzPW5hdi1pdGVtIHJ2LWVhY2gtbGluaz1saW5rbGlzdC5saW5rcz4gPGEgY2xhc3M9bmF2LWxpbmsgcnYtY2xhc3MtYWN0aXZlPWxpbmsuYWN0aXZlIHJ2LXJvdXRlPWxpbmsuaHJlZiBydi1ocmVmPWxpbmsuaHJlZj57bGluay50ZXh0fTwvYT4gPC9kaXY+IDwvbmF2PiBcIjsiLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgSUNvbXBvbmVudCB9IGZyb20gJ3RpbnliaW5kJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL25hdi1pdGVtcy5jb21wb25lbnQuaHRtbCc7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gdHNsaW50OmRpc2FibGU6IGludGVyZmFjZS1uYW1lXG4gIGludGVyZmFjZSBXaW5kb3cgeyBtb2RlbDogYW55OyB9XG59XG5cbi8qKlxuICogbmF2LWl0ZW1zXG4gKi9cbmV4cG9ydCBjb25zdCBuYXZJdGVtcyA9ICgpID0+IHtcblxuICBjb25zdCBkZWJ1ZyA9IERlYnVnKCdyaXZldHM6c2xpZGVvdXQnKTtcblxuICBjb25zdCBjb21wb25lbnQ6IElDb21wb25lbnQgPSB7XG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfSxcblxuICAgIGluaXRpYWxpemUoZWw6IEhUTUxFbGVtZW50LCBkYXRhOiBhbnkpIHtcbiAgICAgIGNvbnN0IHNjb3BlID0gdGhpcztcbiAgICAgIGRlYnVnKCdpbml0aWFsaXplJywgZGF0YSwgdGVtcGxhdGUpO1xuXG4gICAgICBzY29wZS5saW5rbGlzdCA9IGRhdGEubGlua2xpc3Q7XG4gICAgICBzY29wZS5waWxscyA9IGRhdGEucGlsbHM7XG4gICAgICBzY29wZS52ZXJ0aWNhbCA9IGRhdGEudmVydGljYWw7XG4gICAgICByZXR1cm4gc2NvcGU7XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gY29tcG9uZW50O1xufTtcbiIsImV4cG9ydCB7IG5hdkl0ZW1zIH0gZnJvbSAnLi9uYXYtaXRlbXMvbmF2LWl0ZW1zLmNvbXBvbmVudCc7XG5leHBvcnQgeyBzbGlkZW91dENvbXBvbmVudCB9IGZyb20gJy4vc2xpZGVvdXQvc2xpZGVvdXQuY29tcG9uZW50JztcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciwgSVR3b1dheUJpbmRlciB9IGZyb20gJ3RpbnliaW5kJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vVXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElPcHRpb25zIHtcbiAgYW5nbGU6ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCc7XG4gIGRpcmVjdGlvbjogMSB8IC0xO1xuICBqdW1wczogbnVtYmVyO1xuICBkZWxheTogbnVtYmVyO1xuICB3aWR0aD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBTbGlkZW91dCBjbGljayBldmVudCB0byB0b2dnbGUgdGhlIHNsaWRlb3V0XG4gKi9cbmV4cG9ydCBjb25zdCBhdXRvc2Nyb2xsQmluZGVyID0gKCkgPT4ge1xuXG4gIGNvbnN0IGRlYnVnID0gRGVidWcoJ2JpbmRlcnM6YXV0b3Njcm9sbCcpO1xuXG4gIGNvbnN0IG5hbWUgPSAnYXV0b3Njcm9sbCc7XG5cbiAgLy8gVE9ETyB0cnkgYWx0ZXJuYXRpdmUgdmVyc2lvbiBmcm9tIGh0dHBzOi8vd3d3LnNpdGVwb2ludC5jb20vY29tbXVuaXR5L3QvYXV0by1zY3JvbGxpbmctYS1kaXYtd2l0aC1vdmVyZmxvdy1zY3JvbGwtYXV0by8yMjkxLzNcbiAgY29uc3QgaW5pdEF1dG9zY3JvbGwgPSAoJGVsOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBvcHRpb25zOiBJT3B0aW9ucykgPT4ge1xuICAgIGxldCBkaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICBjb25zdCBqdW1wcyA9IG9wdGlvbnMuanVtcHM7XG4gICAgY29uc3QgZGVsYXkgPSBvcHRpb25zLmRlbGF5O1xuICAgIGxldCBzdG9wID0gZmFsc2U7XG4gICAgbGV0IHBvc2l0aW9uID0gbnVsbDtcbiAgICBjb25zdCBtYXhTY3JvbGxXaWR0aCA9ICRlbC5wcm9wKCdzY3JvbGxXaWR0aCcpIC0gJGVsLm91dGVyV2lkdGgoKTtcblxuICAgIGlmIChkaXJlY3Rpb24gPCAwKSB7XG4gICAgICAvLyBzdGFydCByaWdodFxuICAgICAgJGVsLnNjcm9sbExlZnQobWF4U2Nyb2xsV2lkdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzdGFydCBsZWZ0XG4gICAgICAkZWwuc2Nyb2xsTGVmdCgwKTtcbiAgICB9XG5cbiAgICBjb25zdCBzY3JvbGwgPSAoKSA9PiB7XG4gICAgICBpZiAoc3RvcCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KHNjcm9sbCwgMjAwKTtcbiAgICAgIH1cblxuICAgICAgcG9zaXRpb24gPSAkZWwuc2Nyb2xsTGVmdCgpO1xuICAgICAgaWYgKGRpcmVjdGlvbiA+IDApIHtcbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiArIGp1bXBzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiAtIGp1bXBzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIHBvc2l0aW9uIDw9IDUpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gMTtcbiAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPj0gbWF4U2Nyb2xsV2lkdGgpIHtcbiAgICAgICAgZGlyZWN0aW9uID0gLTE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkZWwuYW5pbWF0ZSh7XG4gICAgICAgIHNjcm9sbExlZnQ6IHBvc2l0aW9uLFxuICAgICAgfSwgZGVsYXksICdsaW5lYXInLCBzY3JvbGwpO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3VzZUluID0gKCkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCRlbC5maWx0ZXIoJzpob3ZlcicpLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RvcCA9IHRydWU7XG4gICAgICAgICAgICBkaXJlY3Rpb24gKj0gLTE7XG4gICAgICAgICAgfVxuICAgICAgfSwgMTApO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3VzZU91dCA9ICgpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoc3RvcCAmJiAhJGVsLmZpbHRlcignOmhvdmVyJykubGVuZ3RoKSB7XG4gICAgICAgICAgc3RvcCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LCA1MDApO1xuICAgIH07XG5cbiAgICAkZWwuaG92ZXIobW91c2VJbiwgbW91c2VPdXQpO1xuXG4gICAgcmV0dXJuIHNldFRpbWVvdXQoc2Nyb2xsLCAwKTtcbiAgfTtcblxuICBjb25zdCBiaW5kZXI6IElPbmVXYXlCaW5kZXI8SU9wdGlvbnM+ID0gKGVsOiBIVE1MRWxlbWVudCwgb3B0aW9ucz86IElPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG5cbiAgICBkZWJ1ZygnaW5pdCcsIG9wdGlvbnMpO1xuXG4gICAgaWYgKFV0aWxzLmlzU3RyaW5nKG9wdGlvbnMud2lkdGgpKSB7XG4gICAgICAkZWwuY3NzKCd3aWR0aCcsIG9wdGlvbnMud2lkdGgpO1xuICAgIH1cblxuICAgICRlbC5hZGRDbGFzcyhgcnYtYXV0b3Njcm9sbC0ke29wdGlvbnMuYW5nbGV9YCk7XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGluaXRBdXRvc2Nyb2xsKCRlbCwgb3B0aW9ucyk7XG4gICAgfSwgMTAwMCk7XG5cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcbiIsIi8qKlxuICogQHNlZSBodHRwczovL2Jvb3RzbmlwcC5jb20vc25pcHBldHMveThtRFZcbiAqL1xuZXhwb3J0IGNsYXNzIFR5cGluZ1RleHRTZXJ2aWNlIHtcblxuICBwcml2YXRlIHRvUm90YXRlOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSBlbDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgbG9vcE51bSA9IDA7XG4gIHByaXZhdGUgcGVyaW9kOiBudW1iZXI7XG4gIHByaXZhdGUgdHh0ID0gJyc7XG4gIHByaXZhdGUgaXNEZWxldGluZyA9IGZhbHNlO1xuICBwcml2YXRlIGZ1bGxUeHQ/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZWw6IEhUTUxFbGVtZW50LCBwZXJpb2Q/OiBudW1iZXIpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy5sb29wTnVtID0gMDtcbiAgICB0aGlzLnR4dCA9ICcnO1xuICAgIHRoaXMucGVyaW9kID0gcGVyaW9kIHx8IDIwMDA7XG4gIH1cblxuICBwdWJsaWMgYXV0byh0b1JvdGF0ZTogc3RyaW5nW10pIHtcbiAgICB0aGlzLnRvUm90YXRlID0gdG9Sb3RhdGU7XG4gICAgdGhpcy5sb29wTnVtID0gMDtcbiAgICB0aGlzLnR4dCA9ICcnO1xuICAgIHRoaXMudGljaygpO1xuICAgIHRoaXMuaXNEZWxldGluZyA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZShjYj86ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLmlzRGVsZXRpbmcgPSB0cnVlO1xuICAgIHRoaXMuZnVsbFR4dCA9IHRoaXMuZWwuaW5uZXJIVE1MO1xuICAgIHRoaXMudHh0ID0gdGhpcy5mdWxsVHh0O1xuICAgIHRoaXMuZGVsZXRlVGljayhjYik7XG4gICAgdGhpcy5pc0RlbGV0aW5nID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgd3JpdGUoZnVsbFR4dDogc3RyaW5nLCBjYj86ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLmZ1bGxUeHQgPSBmdWxsVHh0O1xuICAgIHRoaXMudHh0ID0gJyc7XG4gICAgdGhpcy5pc0RlbGV0aW5nID0gZmFsc2U7XG4gICAgdGhpcy53cml0ZVRpY2soY2IpO1xuICB9XG5cbiAgcHJpdmF0ZSB0aWNrKCkge1xuICAgIGNvbnN0IGkgPSB0aGlzLmxvb3BOdW0gJSB0aGlzLnRvUm90YXRlLmxlbmd0aDtcbiAgICB0aGlzLmZ1bGxUeHQgPSB0aGlzLnRvUm90YXRlW2ldO1xuXG4gICAgaWYgKHRoaXMuaXNEZWxldGluZykge1xuICAgICAgdGhpcy50eHQgPSB0aGlzLmZ1bGxUeHQuc3Vic3RyaW5nKDAsIHRoaXMudHh0Lmxlbmd0aCAtIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnR4dCA9IHRoaXMuZnVsbFR4dC5zdWJzdHJpbmcoMCwgdGhpcy50eHQubGVuZ3RoICsgMSk7XG4gICAgfVxuXG4gICAgdGhpcy5lbC5pbm5lckhUTUwgPSB0aGlzLnR4dDtcblxuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIGxldCBkZWx0YSA9IDMwMCAtIE1hdGgucmFuZG9tKCkgKiAxMDA7XG5cbiAgICBpZiAodGhpcy5pc0RlbGV0aW5nKSB7XG4gICAgICBkZWx0YSAvPSAyO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0RlbGV0aW5nICYmIHRoaXMudHh0ID09PSB0aGlzLmZ1bGxUeHQpIHtcbiAgICAgIGRlbHRhID0gdGhpcy5wZXJpb2Q7XG4gICAgICB0aGlzLmlzRGVsZXRpbmcgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc0RlbGV0aW5nICYmIHRoaXMudHh0ID09PSAnJykge1xuICAgICAgdGhpcy5pc0RlbGV0aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmxvb3BOdW0rKztcbiAgICAgIGRlbHRhID0gNTAwO1xuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhhdC50aWNrKCk7XG4gICAgfSwgZGVsdGEpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWxldGVUaWNrKGNiPzogKCkgPT4gdm9pZCkge1xuICAgIGxldCBkZWx0YSA9IDMwMCAtIE1hdGgucmFuZG9tKCkgKiAxMDA7XG4gICAgZGVsdGEgLz0gMjtcblxuICAgIHRoaXMudHh0ID0gdGhpcy5mdWxsVHh0LnN1YnN0cmluZygwLCB0aGlzLnR4dC5sZW5ndGggLSAxKTtcbiAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRoaXMudHh0O1xuXG4gICAgaWYgKHRoaXMudHh0ID09PSAnJykge1xuICAgICAgdGhpcy5pc0RlbGV0aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmxvb3BOdW0rKztcbiAgICAgIGRlbHRhID0gNTAwO1xuICAgICAgLy8gZG9uZVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoY2IpIHsgcmV0dXJuIGNiKCk7IH1cbiAgICAgIH0sIGRlbHRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbmV4dCB0aWNrXG4gICAgICByZXR1cm4gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGVsZXRlVGljayhjYik7XG4gICAgICB9LCBkZWx0YSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB3cml0ZVRpY2soY2I6ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLnR4dCA9IHRoaXMuZnVsbFR4dC5zdWJzdHJpbmcoMCwgdGhpcy50eHQubGVuZ3RoICsgMSk7XG5cbiAgICB0aGlzLmVsLmlubmVySFRNTCA9IHRoaXMudHh0O1xuXG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgbGV0IGRlbHRhID0gMzAwIC0gTWF0aC5yYW5kb20oKSAqIDEwMDtcblxuICAgIGlmICh0aGlzLnR4dCA9PT0gdGhpcy5mdWxsVHh0KSB7XG4gICAgICBkZWx0YSA9IHRoaXMucGVyaW9kO1xuICAgICAgdGhpcy5pc0RlbGV0aW5nID0gdHJ1ZTtcbiAgICAgIC8vIGRvbmVcbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGNiKSB7IHJldHVybiBjYigpOyB9XG4gICAgICB9LCBkZWx0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5leHQgdGlja1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLndyaXRlVGljayhjYik7XG4gICAgICB9LCBkZWx0YSk7XG4gICAgfVxuICB9XG5cbn1cbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFNsaWRlb3V0IGZyb20gJ3NsaWRlb3V0JztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIElUd29XYXlCaW5kZXIgfSBmcm9tICd0aW55YmluZCc7XG5pbXBvcnQgeyBEaXNwYXRjaGVyIH0gZnJvbSAnLi4vZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyBUeXBpbmdUZXh0U2VydmljZSB9IGZyb20gJy4vLi4vdHlwaW5nLXRleHQuc2VydmljZSc7XG5cbmV4cG9ydCB0eXBlIFRTaWRlID0gJ3JpZ2h0JyB8ICdsZWZ0JztcblxuLyoqXG4gKiBTbGlkZW91dCBjbGljayBldmVudCB0byB0b2dnbGUgdGhlIHNsaWRlb3V0XG4gKi9cbmV4cG9ydCBjb25zdCBzbGlkZW91dFRvZ2dsZXJCaW5kZXIgPSAoZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcikgPT4ge1xuXG4gIGNvbnN0IG5hbWUgPSAnc2xpZGVvdXQtdG9nZ2xlcic7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnYmluZGVyczpzbGlkZW91dC10b2dnbGVyJyk7XG5cbiAgY29uc3QgYmluZGVyOiBJT25lV2F5QmluZGVyPFRTaWRlPiA9IChlbDogSFRNTEVsZW1lbnQsIHNpZGU6IFRTaWRlKSA9PiB7XG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgZGVidWcoJ2luaXQnLCBlbCwgc2lkZSk7XG4gICAgbGV0IHNsaWRlb3V0OiBTbGlkZW91dCA9IG51bGw7XG4gICAgbGV0IHRleHQgPSAkZWwuaHRtbCgpO1xuICAgIGNvbnN0IHR5cGV0ZXh0ID0gbmV3IFR5cGluZ1RleHRTZXJ2aWNlKCRlbFswXSwgMjAwMCk7XG4gICAgLy8gdHlwZXRleHQuYXV0byhbJ0luZm8nLCAnQ2xvc2UnXSk7XG5cbiAgICBkaXNwYXRjaGVyLm9uKCdzbGlkZW91dC5jb21wb25lbnQ6aW5pdGlhbGl6ZScsIChuZXdTbGlkZW91dDogU2xpZGVvdXQpID0+IHtcbiAgICAgIGRlYnVnKCdzbGlkZW91dC5jb21wb25lbnQ6aW5pdGlhbGl6ZScsIG5ld1NsaWRlb3V0KTtcbiAgICAgIGlmIChzbGlkZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAkZWwub2ZmKCdjbGljaycpO1xuICAgICAgfVxuICAgICAgc2xpZGVvdXQgPSBuZXdTbGlkZW91dDtcblxuICAgICAgJGVsLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgc2xpZGVvdXQudG9nZ2xlKCk7XG4gICAgICB9KTtcblxuICAgICAgc2xpZGVvdXQub24oJ2JlZm9yZW9wZW4nLCAoKSA9PiB7XG4gICAgICAgIHRleHQgPSAkZWwuaHRtbCgpO1xuICAgICAgICAvLyAkZWwuaHRtbCgnQ2xvc2UnKTtcbiAgICAgICAgJGVsLmNzcygnY29sb3InLCAnd2hpdGUnKTtcbiAgICAgICAgJGVsLmNzcygnbWluLWhlaWdodCcsICRlbC5vdXRlckhlaWdodCgpKTtcbiAgICAgICAgdHlwZXRleHQuZGVsZXRlKCgpID0+IHtcbiAgICAgICAgICBkZWJ1ZygnZGVsZXRlIENsb3NlIGRvbmUnKTtcbiAgICAgICAgICB0eXBldGV4dC53cml0ZSgnQ2xvc2UnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgc2xpZGVvdXQub24oJ2JlZm9yZWNsb3NlJywgKCkgPT4ge1xuICAgICAgICAvLyAkZWwuaHRtbCh0ZXh0KTtcbiAgICAgICAgJGVsLmNzcygnbWluLWhlaWdodCcsICRlbC5vdXRlckhlaWdodCgpKTtcbiAgICAgICAgdHlwZXRleHQuZGVsZXRlKCgpID0+IHtcbiAgICAgICAgICBkZWJ1ZyhgZGVsZXRlICR7dGV4dH0gZG9uZWApO1xuICAgICAgICAgICRlbC5jc3MoJ2NvbG9yJywgJ2JsYWNrJyk7XG4gICAgICAgICAgdHlwZXRleHQud3JpdGUodGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBiaW5kZXIsXG4gICAgbmFtZSxcbiAgfTtcbn07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IElPbmVXYXlCaW5kZXIsIElUd29XYXlCaW5kZXIgfSBmcm9tICd0aW55YmluZCc7XG5pbXBvcnQgeyBQamF4LCBQcmVmZXRjaCB9IGZyb20gJy4uL2JhcmJhJztcbmltcG9ydCB7IERpc3BhdGNoZXIgfSBmcm9tICcuLi9kaXNwYXRjaGVyJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vVXRpbHMnO1xuXG4vKipcbiAqIE9wZW4gbGluayB3aXRoIHBhamF4IGlmIHRoZSByb3V0ZSBpcyBub3QgdGhlIGFjdGl2ZSByb3V0ZVxuICogU2V0cyBhbHNvIHRoZSBlbGVtZW50IGFjdGl2ZSBpZiBoaXMgdXJsIGlzIHRoZSBjdXJyZW50IHVybFxuICovXG5leHBvcnQgY29uc3Qgcm91dGVCaW5kZXIgPSAoZGlzcGF0Y2hlcjogRGlzcGF0Y2hlciwgcGpheDogUGpheCwgcHJlZmV0Y2g6IFByZWZldGNoKSA9PiB7XG5cbiAgY29uc3QgbmFtZSA9ICdyb3V0ZSc7XG5cbiAgY29uc3QgZGVidWcgPSBEZWJ1ZygnYmluZGVyczpyb3V0ZScpO1xuXG4gIGNvbnN0IGJpbmRlcjogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdXJsOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgICBsZXQgbmV3VGFiID0gZmFsc2U7XG4gICAgY29uc3QgdXNlUGFqYXggPSB0cnVlO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZGVidWcoJ2dldEJpbmRlcicsIGVsLCB1cmwpO1xuXG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHVybCA9ICRlbC5hdHRyKCdocmVmJyk7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5hdHRyKCd0YXJnZXQnKSA9PT0gJ19ibGFuaycpIHtcbiAgICAgIG5ld1RhYiA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbG9jYXRpb24gPSBVdGlscy5nZXRMb2NhdGlvbigpO1xuICAgIGNvbnN0IGhvc3QgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZTtcblxuICAgIC8vIG5yb21hbGl6ZSB1cmxcbiAgICBpZiAoVXRpbHMuaXNBYnNvbHV0ZVVybCh1cmwpKSB7XG5cbiAgICAgIC8vIGlmIGlzIG5vdCBhbiBleHRlcm5hbCBsaW5rXG4gICAgICBpZiAodXJsLmluZGV4T2YoaG9zdCkgPT09IDApIHtcbiAgICAgICAgLy8gZ2V0IHJlbGF0aXZlIHVybFxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZShob3N0LCAnJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUYWIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGFscmVhZHlPblVSTCA9IChjaGVja1VybDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBwYXRobmFtZSA9IFV0aWxzLmdldExvY2F0aW9uKCkucGF0aG5hbWU7XG4gICAgICBkZWJ1ZygnY2hlY2tVUkwnLCBwYXRobmFtZSwgY2hlY2tVcmwpO1xuICAgICAgaWYgKGNoZWNrVXJsID09PSBwYXRobmFtZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2hlY2tVUkwgPSAodXJsVG9DaGVjazogc3RyaW5nKSA9PiB7XG4gICAgICBpZiAoYWxyZWFkeU9uVVJMKHVybFRvQ2hlY2spKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgJGVsLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgaWYgKHVzZVBhamF4KSB7XG4gICAgICBkaXNwYXRjaGVyLm9uKCduZXdQYWdlUmVhZHknLCAoKSA9PiBjaGVja1VSTCh1cmwpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgKCkgPT4gY2hlY2tVUkwodXJsKSk7XG4gICAgfVxuXG4gICAgJGVsLm9mZignY2xpY2snKS5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGFscmVhZHlPblVSTCh1cmwpKSB7XG4gICAgICAgICAgZGVidWcoJ2FscmVhZHkgb24gdGhpcyBzaXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGpheC5nb1RvKHVybCwgbmV3VGFiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHVzZVBhamF4ICYmICFuZXdUYWIgJiYgIWFscmVhZHlPblVSTCh1cmwpKSB7XG4gICAgICAkZWwub2ZmKCdtb3VzZWVudGVyIHRvdWNoc3RhcnQnKS5vbignbW91c2VlbnRlciB0b3VjaHN0YXJ0JywgKGV2ZW50KSA9PiB7XG4gICAgICAgIHByZWZldGNoLm9uTGlua0VudGVyKGV2ZW50LCB1cmwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2hlY2tVUkwodXJsKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRlcixcbiAgICBuYW1lLFxuICB9O1xufTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgSU9uZVdheUJpbmRlciB9IGZyb20gJ3RpbnliaW5kJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vVXRpbHMnO1xuXG5leHBvcnQgeyByb3V0ZUJpbmRlciB9IGZyb20gJy4vcm91dGUuYmluZGVyJztcbmV4cG9ydCB7IHNsaWRlb3V0VG9nZ2xlckJpbmRlciB9IGZyb20gJy4vc2xpZGVvdXQtdG9nZ2xlci5iaW5kZXInO1xuZXhwb3J0IHsgYXV0b3Njcm9sbEJpbmRlciB9IGZyb20gJy4vYXV0b3Njcm9sbC5iaW5kZXInO1xuXG5jb25zdCBkZWJ1ZyA9IERlYnVnKCdyaXZldHM6YmluZGVycycpO1xuXG5leHBvcnQgY29uc3QgaHRtbDogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKCFVdGlscy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9ICRlbC5hdHRyKCdydi1odG1sJyk7XG4gIH1cbiAgZGVidWcoJ3J2LWh0bWwnLCAkZWwsIHZhbHVlKTtcbiAgJChlbCkuaHRtbCh2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgYXBwZW5kSHRtbDogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKCFVdGlscy5pc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9ICRlbC5hdHRyKCdydi1hcHBlbmQtaHRtbCcpO1xuICB9XG4gIGRlYnVnKCdydi1hcHBlbmQtaHRtbCcsICRlbCwgdmFsdWUpO1xuICBjb25zdCBodG1sTm9kZXMgPSAkLnBhcnNlSFRNTCh2YWx1ZSk7XG4gICQoZWwpLmFwcGVuZChodG1sTm9kZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IG1haWx0bzogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICAkKGVsKS5hdHRyKCdocmVmJywgJ21haWx0bzonICsgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IHRlbDogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICAkKGVsKS5hdHRyKCdocmVmJywgJ3RlbDonICsgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRJbWFnZTogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgJGVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoJyArIHZhbHVlICsgJyknKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbWFnZUJveDogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgJGVsLmFkZENsYXNzKCdpbWFnZS1ib3gnKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCByYXRpb1N0cmluZ3MgPSB2YWx1ZS5zcGxpdCgnOicpO1xuICAgICAgY29uc3QgcmF0aW9zID0gbmV3IEFycmF5PG51bWJlcj4oKTtcbiAgICAgIHJhdGlvc1swXSA9IE51bWJlcihyYXRpb1N0cmluZ3NbMF0pO1xuICAgICAgcmF0aW9zWzFdID0gTnVtYmVyKHJhdGlvU3RyaW5nc1sxXSk7XG4gICAgICBjb25zdCBoZWlnaHRJblBlcmNlbnQgPSAocmF0aW9zWzFdIC8gcmF0aW9zWzBdICogMTAwKTtcbiAgICAgIGNvbnN0IHJhdGlvQ2xhc3MgPSAncmF0aW8tJyArIHJhdGlvc1swXSArICctJyArIHJhdGlvc1sxXTtcbiAgICAgIGNvbnN0IHN0eWxlID0gJ3BhZGRpbmctdG9wOiAnICsgaGVpZ2h0SW5QZXJjZW50ICsgJyU7JztcbiAgICAgICRlbC5hZGRDbGFzcyhyYXRpb0NsYXNzKTtcbiAgICAgICQoJ2hlYWQnKS5hcHBlbmQoJzxzdHlsZT4uaW1hZ2UtYm94LicgKyByYXRpb0NsYXNzICsgJzpiZWZvcmV7JyArIHN0eWxlICsgJ308L3N0eWxlPicpO1xuICAgICAgZGVidWcoJ3JhdGlvJywgdmFsdWUsIHN0eWxlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBjbGFzcy0qXG4gKiBjbGFzcy1bY2xhc3NuYW1lXVxuICpcbiAqIEN1c3RvbSB2ZXJzaW9uIG9mIGNsYXNzLVtjbGFzc25hbWVdXG4gKiBBZGRzIGEgY2xhc3MgKHdoYXRldmVyIHZhbHVlIGlzIGluIHBsYWNlIG9mIFtjbGFzc25hbWVdKSBvbiB0aGUgZWxlbWVudCB3aGVuIHRoZSB2YWx1ZSBldmFsdWF0ZXMgdG8gdHJ1ZSBhbmQgcmVtb3ZlcyB0aGF0IGNsYXNzIGlmIHRoZSB2YWx1ZSBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBAc2VlIGh0dHA6Ly9yaXZldHNqcy5jb20vZG9jcy9yZWZlcmVuY2UvI2NsYXNzLVtjbGFzc25hbWVdXG4gKi9cbmV4cG9ydCBjb25zdCBjbGFzc0FueTogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gZnVuY3Rpb24oZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSB7XG4gIGNvbnN0ICRlbCA9ICQoZWwpO1xuICBkZWJ1Zyh0aGlzLmFyZyk7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IHRoaXMuYXJnWzBdO1xuICAvLyBkZWJ1ZygnY2xhc3MtKicsIGNsYXNzTmFtZSwgdmFsdWUpO1xuICBpZiAodmFsdWUpIHtcbiAgICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIGFkZC1jbGFzc1xuICogQHBhcmFtIGVsXG4gKiBAcGFyYW0gdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGFkZENsYXNzOiBJT25lV2F5QmluZGVyPHN0cmluZz4gPSAoZWw6IEhUTUxFbGVtZW50LCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0ICRlbCA9ICQoZWwpO1xuICBpZiAodmFsdWUpIHtcbiAgICAkZWwuYWRkQ2xhc3ModmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogcmVtb3ZlLWNsYXNzXG4gKi9cbmV4cG9ydCBjb25zdCByZW1vdmVDbGFzczogSU9uZVdheUJpbmRlcjxzdHJpbmc+ID0gKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IHN0cmluZykgPT4ge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIGZvci0qLSpcbiAqIGZvci1mcm9tLXRvXG4gKi9cbmV4cG9ydCBjb25zdCBmb3JGcm9tVG86IElPbmVXYXlCaW5kZXI8YW55PiA9IGZ1bmN0aW9uKGVsOiBIVE1MRWxlbWVudCwgdmFsdWU6IGFueSkge1xuICBjb25zdCAkZWwgPSAkKGVsKTtcbiAgY29uc3Qgc3RhcnQgPSBOdW1iZXIodGhpcy5hcmdbMF0pO1xuICBjb25zdCBlbmQgPSBOdW1iZXIodGhpcy5hcmdbMV0pO1xuICBkZWJ1Zygnc3RhcnQnLCBzdGFydCwgJ2VuZCcsIGVuZCk7XG4gIGNvbnN0IGh0bWxTdHJpbmcgPSAkZWwuaHRtbCgpO1xuICBmb3IgKGxldCBpbmRleCA9IHN0YXJ0OyBpbmRleCA8IGVuZDsgaW5kZXgrKykge1xuICAgIC8vICRlbC5jaGlsZHJlbigpLmNsb25lKCkuYXBwZW5kVG8oJGVsKTtcbiAgICBkZWJ1ZygnaW5kZXgnLCBpbmRleCk7XG4gICAgLy8gaHRtbCArPSBodG1sO1xuICB9XG4gIGRlYnVnKCdodG1sJywgaHRtbFN0cmluZyk7XG4gIC8vICRlbC5odG1sKCd0ZXN0Jyk7XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL1V0aWxzJztcbmltcG9ydCB7IFBqYXggfSBmcm9tICcuL1BqYXgnO1xuXG4vKipcbiAqIFByZWZldGNoXG4gKlxuICogQG5hbWVzcGFjZSBCYXJiYS5QcmVmZXRjaFxuICogQHR5cGUge29iamVjdH1cbiAqL1xuY2xhc3MgUHJlZmV0Y2gge1xuXG4gIC8qKlxuICAgKiBDbGFzcyBuYW1lIHVzZWQgdG8gaWdub3JlIHByZWZldGNoIG9uIGxpbmtzXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5QcmVmZXRjaFxuICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgcHVibGljIGlnbm9yZUNsYXNzTGluayA9ICduby1iYXJiYS1wcmVmZXRjaCc7XG5cbiAgcHJpdmF0ZSBkZWJ1ZyA9IERlYnVnKCdQcmVmZXRjaCcpO1xuXG4gIC8qKlxuICAgKiBJbml0IHRoZSBldmVudCBsaXN0ZW5lciBvbiBtb3VzZW92ZXIgYW5kIHRvdWNoc3RhcnRcbiAgICogZm9yIHRoZSBwcmVmZXRjaFxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuUHJlZmV0Y2hcbiAgICovXG4gIHB1YmxpYyBpbml0KCkge1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2UgZG8gdGhpcyB3aXRoIHJ2LXJvdXRlXG4gICAgLy8gZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLm9uTGlua0VudGVyLmJpbmQodGhpcykpO1xuICAgIC8vIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25MaW5rRW50ZXIuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZm9yIHRoZSBtb3VzZWhvdmVyL3RvdWNoc3RhcnRcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLlByZWZldGNoXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSAge29iamVjdH0gZXZ0XG4gICAqL1xuICBwdWJsaWMgb25MaW5rRW50ZXIoZXZ0OiBKUXVlcnkuRXZlbnQ8SFRNTEVsZW1lbnQsIG51bGw+LCB1cmw/OiBzdHJpbmcpIHtcblxuICAgIGxldCBlbCA9IChldnQudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50KTtcblxuICAgIGlmICghdXJsKSB7XG4gICAgICB3aGlsZSAoZWwgJiYgIVBqYXguZ2V0SHJlZihlbCkpIHtcbiAgICAgICAgZWwgPSAoZWwucGFyZW50Tm9kZSBhcyBIVE1MQW5jaG9yRWxlbWVudCk7IC8vIFRPRE8gdGVzdG1lXG4gICAgICB9XG5cbiAgICAgIGlmICghZWwgfHwgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuaWdub3JlQ2xhc3NMaW5rKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVybCA9IFBqYXguZ2V0SHJlZihlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5kZWJ1Zygnb25MaW5rRW50ZXInLCB1cmwpO1xuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGxpbmsgaXMgZWxlZ2libGUgZm9yIFBqYXhcbiAgICBpZiAoUGpheC5wcmV2ZW50Q2hlY2soZXZ0LCBlbCkgJiYgIVBqYXguY2FjaGUuZ2V0KHVybCkpIHtcbiAgICAgIGNvbnN0IHhociA9IFV0aWxzLnhocih1cmwpO1xuICAgICAgUGpheC5jYWNoZS5zZXQodXJsLCB4aHIpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBQcmVmZXRjaCB9O1xuIiwiZXhwb3J0IHsgSGlzdG9yeU1hbmFnZXIsIElTdGF0ZSB9IGZyb20gJy4vSGlzdG9yeU1hbmFnZXInO1xuZXhwb3J0IHsgRG9tIH0gZnJvbSAnLi9Eb20nO1xuZXhwb3J0IHsgUGpheCB9IGZyb20gJy4vUGpheCc7XG5leHBvcnQgeyBQcmVmZXRjaCB9IGZyb20gJy4vUHJlZmV0Y2gnO1xuIiwiaW1wb3J0IHsgRGlzcGF0Y2hlciB9IGZyb20gJy4uL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9VdGlscyc7XG5cbi8qKlxuICogQmFzZVZpZXcgdG8gYmUgZXh0ZW5kZWRcbiAqXG4gKiBAbmFtZXNwYWNlIEJhcmJhLkJhc2VWaWV3XG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5hYnN0cmFjdCBjbGFzcyBCYXNlVmlldyB7XG4gIC8qKlxuICAgKiBOYW1lc3BhY2Ugb2YgdGhlIHZpZXcuXG4gICAqIChuZWVkIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YS1uYW1lc3BhY2Ugb2YgdGhlIGNvbnRhaW5lcilcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBwcm90ZWN0ZWQgbmFtZXNwYWNlOiAnJztcblxuICBwcm90ZWN0ZWQgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcigpO1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gZXh0ZW5kIHRoZSBvYmplY3RcbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqIEBwYXJhbSAge09iamVjdH0gbmV3T2JqZWN0XG4gICAqIEByZXR1cm4ge09iamVjdH0gbmV3SW5oZXJpdE9iamVjdFxuICAgKi9cbiAgcHVibGljIGV4dGVuZChvYmo6IG9iamVjdCkge1xuICAgIHJldHVybiBVdGlscy5leHRlbmQoZmFsc2UsIHRoaXMsIG9iaik7XG4gIH1cblxuICAvKipcbiAgICogSW5pdCB0aGUgdmlldy5cbiAgICogUC5TLiBJcyBzdWdnZXN0ZWQgdG8gaW5pdCB0aGUgdmlldyBiZWZvcmUgc3RhcnRpbmcgQmFyYmEuUGpheC5zdGFydCgpLFxuICAgKiBpbiB0aGlzIHdheSAub25FbnRlcigpIGFuZCAub25FbnRlckNvbXBsZXRlZCgpIHdpbGwgYmUgZmlyZWQgZm9yIHRoZSBjdXJyZW50XG4gICAqIGNvbnRhaW5lciB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIEJhcmJhLkJhc2VWaWV3XG4gICAqL1xuICBwdWJsaWMgaW5pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbignaW5pdFN0YXRlQ2hhbmdlJywgKG5ld1N0YXR1czogYW55LCBvbGRTdGF0dXM6IGFueSkgPT4ge1xuICAgICAgaWYgKG9sZFN0YXR1cyAmJiBvbGRTdGF0dXMubmFtZXNwYWNlID09PSBzZWxmLm5hbWVzcGFjZSkge1xuICAgICAgICBzZWxmLm9uTGVhdmUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZGlzcGF0Y2hlci5vbignbmV3UGFnZVJlYWR5JywgKG5ld1N0YXR1czogYW55LCBvbGRTdGF0dXM6IGFueSwgY29udGFpbmVyOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgc2VsZi5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICBpZiAobmV3U3RhdHVzLm5hbWVzcGFjZSA9PT0gc2VsZi5uYW1lc3BhY2UpIHtcbiAgICAgICAgc2VsZi5vbkVudGVyKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmRpc3BhdGNoZXIub24oJ3RyYW5zaXRpb25Db21wbGV0ZWQnLCAobmV3U3RhdHVzOiBhbnksIG9sZFN0YXR1czogYW55KSA9PiB7XG4gICAgICBpZiAobmV3U3RhdHVzLm5hbWVzcGFjZSA9PT0gc2VsZi5uYW1lc3BhY2UpIHtcbiAgICAgICAgc2VsZi5vbkVudGVyQ29tcGxldGVkKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGRTdGF0dXMgJiYgb2xkU3RhdHVzLm5hbWVzcGFjZSA9PT0gc2VsZi5uYW1lc3BhY2UpIHtcbiAgICAgICAgc2VsZi5vbkxlYXZlQ29tcGxldGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBjb250YWluZXJcbiAgKiBpcyByZWFkeSBhbmQgYXR0YWNoZWQgdG8gdGhlIERPTS5cbiAgKlxuICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAqIEBhYnN0cmFjdFxuICAqL1xuIHByb3RlY3RlZCBhYnN0cmFjdCBvbkVudGVyKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb25cbiAgICogdG8gdGhpcyBjb250YWluZXIgaGFzIGp1c3QgZmluaXNoZWQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkVudGVyQ29tcGxldGVkKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIHRyYW5zaXRpb25cbiAgICogdG8gYSBuZXcgY29udGFpbmVyIGhhcyBqdXN0IHN0YXJ0ZWQuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBCYXJiYS5CYXNlVmlld1xuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBvbkxlYXZlKCk6IGFueTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIGNvbnRhaW5lclxuICAgKiBoYXMganVzdCBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgKlxuICAgKiBAbWVtYmVyT2YgQmFyYmEuQmFzZVZpZXdcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25MZWF2ZUNvbXBsZXRlZCgpOiBhbnk7XG59XG5cbmV4cG9ydCB7IEJhc2VWaWV3IH07XG4iLCJpbXBvcnQgRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgQmFzZVRyYW5zaXRpb24sIElUcmFuc2l0aW9uIH0gZnJvbSAnLi9CYXNlVHJhbnNpdGlvbic7XG5cbi8qKlxuICogQmFzaWMgVHJhbnNpdGlvbiBvYmplY3QsIHdhaXQgZm9yIHRoZSBuZXcgQ29udGFpbmVyIHRvIGJlIHJlYWR5LFxuICogc2Nyb2xsIHRvcCwgYW5kIGZpbmlzaCB0aGUgdHJhbnNpdGlvbiAocmVtb3ZpbmcgdGhlIG9sZCBjb250YWluZXIgYW5kIGRpc3BsYXlpbmcgdGhlIG5ldyBvbmUpXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lc3BhY2UgQmFyYmEuSGlkZVNob3dUcmFuc2l0aW9uXG4gKiBAYXVnbWVudHMgQmFyYmEuQmFzZVRyYW5zaXRpb25cbiAqL1xuY2xhc3MgSGlkZVNob3dUcmFuc2l0aW9uIGV4dGVuZHMgQmFzZVRyYW5zaXRpb24gaW1wbGVtZW50cyBJVHJhbnNpdGlvbiB7XG5cbiAgcHJvdGVjdGVkIGRlYnVnID0gRGVidWcoJ2JhcmJhOkhpZGVTaG93VHJhbnNpdGlvbicpO1xuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLm5ld0NvbnRhaW5lckxvYWRpbmcudGhlbih0aGlzLmZpbmlzaC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBmaW5pc2goKSB7XG4gICAgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgPSAwO1xuICAgIHRoaXMuZG9uZSgpO1xuICB9XG59XG5cbmV4cG9ydCB7IEhpZGVTaG93VHJhbnNpdGlvbiB9O1xuIiwiaW1wb3J0IERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vVXRpbHMnO1xuaW1wb3J0IHsgQmFzZVRyYW5zaXRpb24sIElUcmFuc2l0aW9uIH0gZnJvbSAnLi9CYXNlVHJhbnNpdGlvbic7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgLy8gdHNsaW50OmRpc2FibGU6IGludGVyZmFjZS1uYW1lXG4gIGludGVyZmFjZSBXaW5kb3cgeyBtb2RlbDogYW55OyB9XG59XG5cbi8qKlxuICogQmFzaWMgVHJhbnNpdGlvbiBvYmplY3QsIHdhaXQgZm9yIHRoZSBuZXcgQ29udGFpbmVyIHRvIGJlIHJlYWR5LFxuICogc2Nyb2xsIHRvcCwgYW5kIGZpbmlzaCB0aGUgdHJhbnNpdGlvbiAocmVtb3ZpbmcgdGhlIG9sZCBjb250YWluZXIgYW5kIGRpc3BsYXlpbmcgdGhlIG5ldyBvbmUpXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ3VzdG9tVHJhbnNpdGlvbiBleHRlbmRzIEJhc2VUcmFuc2l0aW9uIGltcGxlbWVudHMgSVRyYW5zaXRpb24ge1xuXG4gIHByb3RlY3RlZCBkZWJ1ZyA9IERlYnVnKCdyaXZldHM6Q3VzdG9tVHJhbnNpdGlvbicpO1xuXG4gIHB1YmxpYyBpbml0KCRvbGRDb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG5ld0NvbnRhaW5lcjogUHJvbWlzZTxKUXVlcnk8SFRNTEVsZW1lbnQ+Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgdGhpcy4kb2xkQ29udGFpbmVyID0gJG9sZENvbnRhaW5lcjtcbiAgICB0aGlzLmRlYnVnKCdpbml0Jyk7XG5cbiAgICB0aGlzLmRlZmVycmVkID0gVXRpbHMuZGVmZXJyZWQoKTtcbiAgICBjb25zdCBuZXdDb250YWluZXJSZWFkeSA9IFV0aWxzLmRlZmVycmVkKCk7XG4gICAgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nID0gbmV3Q29udGFpbmVyUmVhZHkucHJvbWlzZTtcblxuICAgIHRoaXMuc3RhcnQoKTtcblxuICAgIG5ld0NvbnRhaW5lci50aGVuKCgkbmV3Q29udGFpbmVyOiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICBzZWxmLiRuZXdDb250YWluZXIgPSAkbmV3Q29udGFpbmVyO1xuICAgICAgbmV3Q29udGFpbmVyUmVhZHkucmVzb2x2ZSgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLmRlYnVnKCdDdXN0b21UcmFuc2l0aW9uIHN0YXJ0Jyk7XG4gICAgdGhpcy5uZXdDb250YWluZXJMb2FkaW5nLnRoZW4odGhpcy5maW5pc2guYmluZCh0aGlzKSk7XG4gIH1cblxuICBwdWJsaWMgZmluaXNoKCRjb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcbiAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgLy8gdGhpcy52aWV3ID0gUml2ZXRzLmJpbmQodGhpcy4kbmV3Q29udGFpbmVyLCB3aW5kb3cubW9kZWwpO1xuICAgIHRoaXMuZGVidWcoJ0N1c3RvbVRyYW5zaXRpb24gZmluaXNoJyk7XG4gICAgdGhpcy5kb25lKCk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBDdXN0b21UcmFuc2l0aW9uIH07XG4iLCJleHBvcnQgeyBCYXNlQ2FjaGUgfSBmcm9tICcuL0NhY2hlJztcbmV4cG9ydCB7IEJhc2VUcmFuc2l0aW9uLCBDdXN0b21UcmFuc2l0aW9uLCBIaWRlU2hvd1RyYW5zaXRpb24gfSBmcm9tICcuL1RyYW5zaXRpb24nO1xuZXhwb3J0IHsgQmFzZVZpZXcgfSBmcm9tICcuL1ZpZXcnO1xuZXhwb3J0IHsgSGlzdG9yeU1hbmFnZXIsIElTdGF0ZSwgUGpheCwgUHJlZmV0Y2ggfSBmcm9tICcuL1BqYXgnO1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICovXG5leHBvcnRzLmluc3RhbmNlcyA9IFtdO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICB2YXIgcHJldlRpbWU7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIGV4cG9ydHMuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHZhciBpbmRleCA9IGV4cG9ydHMuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBleHBvcnRzLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBpO1xuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwb3J0cy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBleHBvcnRzLmluc3RhbmNlc1tpXTtcbiAgICBpbnN0YW5jZS5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgSlF1ZXJ5IGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAndGlueWJpbmQnO1xuaW1wb3J0IHRpbnliaW5kIGZyb20gJ3RpbnliaW5kJztcbmltcG9ydCB7IEN1c3RvbVRyYW5zaXRpb24sIElTdGF0ZSwgUGpheCwgUHJlZmV0Y2ggfSBmcm9tICcuL2JhcmJhJztcbmltcG9ydCB7IGF1dG9zY3JvbGxCaW5kZXIsIHJvdXRlQmluZGVyLCBzbGlkZW91dFRvZ2dsZXJCaW5kZXIgfSBmcm9tICcuL2JpbmRlcnMnO1xuaW1wb3J0IHsgbmF2SXRlbXMsIHNsaWRlb3V0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzJztcbmltcG9ydCB7IERpc3BhdGNoZXIgfSBmcm9tICcuL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi9mb3JtYXR0ZXJzJztcbmltcG9ydCB7IFRldHJpcyB9IGZyb20gJy4vdGV0cmlzJztcblxuZXhwb3J0IGludGVyZmFjZSBJVmlld3Mge1xuICBkeW5hbWljOiBWaWV3O1xuICBzdGF0aWM6IFZpZXc7XG59XG5cbmV4cG9ydCBjbGFzcyBNYWluIHtcblxuICBwcml2YXRlIHByZWZldGNoID0gbmV3IFByZWZldGNoKCk7XG4gIHByaXZhdGUgZGlzcGF0Y2hlciA9IG5ldyBEaXNwYXRjaGVyKCk7XG4gIHByaXZhdGUgcGpheCA9IG5ldyBQamF4KG5ldyBDdXN0b21UcmFuc2l0aW9uKCkpO1xuICBwcml2YXRlIHZpZXdzOiBJVmlld3MgPSB7XG4gICAgZHluYW1pYzogbnVsbCxcbiAgICBzdGF0aWM6IG51bGwsXG4gIH07XG4gIHByaXZhdGUgaW5zaXRlOiBWaWV3ID0gbnVsbDtcbiAgcHJpdmF0ZSBkZWJ1ZyA9IERlYnVnKCdWaWV3Jyk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAvLyBSZWdpc3QgY29tcG9uZW50c1xuICAgIHRpbnliaW5kLmNvbXBvbmVudHNbJ25hdi1pdGVtcyddID0gbmF2SXRlbXMoKTtcbiAgICB0aW55YmluZC5jb21wb25lbnRzLnNsaWRlb3V0ID0gc2xpZGVvdXRDb21wb25lbnQodGhpcy5kaXNwYXRjaGVyKTtcblxuICAgIC8vIFJlZ2lzdCBmb3JtYXR0ZXJzXG4gICAgdGlueWJpbmQuZm9ybWF0dGVycy5nZXQgPSBnZXQ7XG5cbiAgICAvLyBSZWdpc3QgYmluZGVyc1xuICAgIHRpbnliaW5kLmJpbmRlcnMucm91dGUgPSByb3V0ZUJpbmRlcih0aGlzLmRpc3BhdGNoZXIsIHRoaXMucGpheCwgdGhpcy5wcmVmZXRjaCkuYmluZGVyO1xuICAgIHRpbnliaW5kLmJpbmRlcnNbJ3NsaWRlb3V0LXRvZ2dsZXInXSA9IHNsaWRlb3V0VG9nZ2xlckJpbmRlcih0aGlzLmRpc3BhdGNoZXIpLmJpbmRlcjtcbiAgICB0aW55YmluZC5iaW5kZXJzLmF1dG9zY3JvbGwgPSBhdXRvc2Nyb2xsQmluZGVyKCkuYmluZGVyO1xuXG4gICAgdGhpcy52aWV3cy5zdGF0aWMgPSB0aW55YmluZC5iaW5kKEpRdWVyeSgnYm9keScpLmdldCgpLCB3aW5kb3cubW9kZWwpO1xuXG4gICAgdGhpcy5kaXNwYXRjaGVyLm9uKCduZXdQYWdlUmVhZHknLCAoY3VycmVudFN0YXR1czogSVN0YXRlLCBwcmV2U3RhdHVzOiBJU3RhdGUsICRjb250YWluZXI6IEpRdWVyeTxIVE1MRWxlbWVudD4sIG5ld1BhZ2VSYXdIVE1MOiBzdHJpbmcsIGlzSW5pdDogYm9vbGVhbikgPT4ge1xuICAgICAgdGhpcy5kZWJ1ZygnbmV3UGFnZVJlYWR5Jyk7XG4gICAgICAvLyB1bmJpbmQgdGhlIG9sZCByaXZldHMgdmlld1xuICAgICAgaWYgKCFpc0luaXQgJiYgdGhpcy52aWV3cy5keW5hbWljICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMudmlld3MuZHluYW1pYy51bmJpbmQoKTtcbiAgICAgIH1cbiAgICAgIC8vIGJpbmQgdGhlIG5ldyBjb250YWluZXJcbiAgICAgIHRoaXMudmlld3MuZHluYW1pYyA9IHRpbnliaW5kLmJpbmQoJGNvbnRhaW5lci5nZXQoKSwgd2luZG93Lm1vZGVsKTtcblxuICAgICAgLy8gaW5pdCBUZW1wbGF0ZVxuICAgICAgY29uc3QgZGF0YSA9ICRjb250YWluZXIuZGF0YSgpO1xuICAgICAgaWYgKGRhdGEudGVtcGxhdGUgPT09ICdwYWdlLnRldHJpcycpIHtcbiAgICAgICAgY29uc3QgdGV0cmlzID0gbmV3IFRldHJpcygpO1xuICAgICAgICB0ZXRyaXMucnVuKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLnByZWZldGNoLmluaXQoKTtcbiAgICB0aGlzLnBqYXguc3RhcnQoKTtcblxuICB9XG59XG5cbkpRdWVyeSgoKSA9PiB7XG4gIGNvbnN0IHZpZXcgPSBuZXcgTWFpbigpO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9